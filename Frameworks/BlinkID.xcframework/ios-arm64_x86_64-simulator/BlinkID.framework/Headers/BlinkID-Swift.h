#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.0 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
#ifndef BLINKID_SWIFT_H
#define BLINKID_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="BlinkID",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)


#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
// Allow user to find the header using additional include paths
#if __has_include(<swiftToCxx/_SwiftCxxInteroperability.h>)
#include <swiftToCxx/_SwiftCxxInteroperability.h>
// Look for the C++ interop support header relative to clang's resource dir:
//  '<toolchain>/usr/lib/clang/<version>/include/../../../swift/swiftToCxx'.
#elif __has_include(<../../../swift/swiftToCxx/_SwiftCxxInteroperability.h>)
#include <../../../swift/swiftToCxx/_SwiftCxxInteroperability.h>
#elif __has_include(<../../../../../lib/swift/swiftToCxx/_SwiftCxxInteroperability.h>)
//  '<toolchain>/usr/local/lib/clang/<version>/include/../../../../../lib/swift/swiftToCxx'.
#include <../../../../../lib/swift/swiftToCxx/_SwiftCxxInteroperability.h>
#endif
#pragma clang diagnostic pop
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
#endif

#ifndef SWIFT_SWIFT_H
#define SWIFT_SWIFT_H
#ifdef SWIFT_SYMBOL
#undef SWIFT_SYMBOL
#endif
#define SWIFT_SYMBOL(usrValue) SWIFT_SYMBOL_MODULE_USR("swift", usrValue)
#ifndef SWIFT_CXX_INTEROP_HIDE_STL_OVERLAY
#include <string>
#endif
#include <new>
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"
#ifndef SWIFT_PRINTED_CORE
#define SWIFT_PRINTED_CORE
namespace swift SWIFT_PRIVATE_ATTR {

namespace _impl {

#ifdef __cplusplus
extern "C" {
#endif

// Swift type metadata response type.
struct MetadataResponseTy {
  void * _Null_unspecified _0;
  uint64_t _1;
};
// Swift type metadata request type.
typedef uint64_t MetadataRequestTy;

#if __cplusplus > 201402L
#  define SWIFT_NOEXCEPT_FUNCTION_PTR noexcept
#else
#  define SWIFT_NOEXCEPT_FUNCTION_PTR
#endif

using ValueWitnessInitializeBufferWithCopyOfBufferTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(55882))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessDestroyTy = void(* __ptrauth_swift_value_witness_function_pointer(1272))(void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessInitializeWithCopyTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(58298))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessAssignWithCopyTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(34641))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessInitializeWithTakeTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(18648))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessAssignWithTakeTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(61402))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessGetEnumTagSinglePayloadTy = unsigned(* __ptrauth_swift_value_witness_function_pointer(24816))(const void * _Nonnull, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessStoreEnumTagSinglePayloadTy = void(* __ptrauth_swift_value_witness_function_pointer(41169))(void * _Nonnull, unsigned, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;

struct ValueWitnessTable {
  ValueWitnessInitializeBufferWithCopyOfBufferTy _Nonnull initializeBufferWithCopyOfBuffer;
  ValueWitnessDestroyTy _Nonnull destroy;
  ValueWitnessInitializeWithCopyTy _Nonnull initializeWithCopy;
  ValueWitnessAssignWithCopyTy _Nonnull assignWithCopy;
  ValueWitnessInitializeWithTakeTy _Nonnull initializeWithTake;
  ValueWitnessAssignWithTakeTy _Nonnull assignWithTake;
  ValueWitnessGetEnumTagSinglePayloadTy _Nonnull getEnumTagSinglePayload;
  ValueWitnessStoreEnumTagSinglePayloadTy _Nonnull storeEnumTagSinglePayload;
  size_t size;
  size_t stride;
  unsigned flags;
  unsigned extraInhabitantCount;

  constexpr size_t getAlignment() const { return (flags & 255) + 1; }
};

using EnumValueWitnessGetEnumTagTy = unsigned(* __ptrauth_swift_value_witness_function_pointer(41909))(const void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using EnumValueWitnessDestructiveProjectEnumDataTy = void(* __ptrauth_swift_value_witness_function_pointer(1053))(void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using EnumValueWitnessDestructiveInjectEnumTagTy = void(* __ptrauth_swift_value_witness_function_pointer(45796))(void * _Nonnull, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;

struct EnumValueWitnessTable {
  ValueWitnessTable vwTable;
  EnumValueWitnessGetEnumTagTy _Nonnull getEnumTag;
  EnumValueWitnessDestructiveProjectEnumDataTy _Nonnull destructiveProjectEnumData;
  EnumValueWitnessDestructiveInjectEnumTagTy _Nonnull destructiveInjectEnumTag;
};

#undef SWIFT_NOEXCEPT_FUNCTION_PTR


// type metadata address for Bool.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSbN;
// type metadata address for Int8.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss4Int8VN;
// type metadata address for UInt8.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5UInt8VN;
// type metadata address for Int16.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int16VN;
// type metadata address for UInt16.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt16VN;
// type metadata address for Int32.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int32VN;
// type metadata address for UInt32.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt32VN;
// type metadata address for Int64.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int64VN;
// type metadata address for UInt64.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt64VN;
// type metadata address for Float.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSfN;
// type metadata address for Double.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSdN;
// type metadata address for OpaquePointer.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss13OpaquePointerVN;
// type metadata address for Int.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSiN;
// type metadata address for UInt.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSuN;

#ifdef __cplusplus
}
#endif


} // namespace _impl


#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<bool> = true;

template<>
struct TypeMetadataTrait<bool> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSbN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int8_t> = true;

template<>
struct TypeMetadataTrait<int8_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss4Int8VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint8_t> = true;

template<>
struct TypeMetadataTrait<uint8_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5UInt8VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int16_t> = true;

template<>
struct TypeMetadataTrait<int16_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int16VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint16_t> = true;

template<>
struct TypeMetadataTrait<uint16_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt16VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int32_t> = true;

template<>
struct TypeMetadataTrait<int32_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int32VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint32_t> = true;

template<>
struct TypeMetadataTrait<uint32_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt32VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int64_t> = true;

template<>
struct TypeMetadataTrait<int64_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int64VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint64_t> = true;

template<>
struct TypeMetadataTrait<uint64_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt64VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<float> = true;

template<>
struct TypeMetadataTrait<float> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSfN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<double> = true;

template<>
struct TypeMetadataTrait<double> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSdN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<void *> = true;

template<>
struct TypeMetadataTrait<void *> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss13OpaquePointerVN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<swift::Int> = true;

template<>
struct TypeMetadataTrait<swift::Int> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSiN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<swift::UInt> = true;

template<>
struct TypeMetadataTrait<swift::UInt> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSuN;
  }
};

#pragma clang diagnostic pop

} // namespace swift

#endif
#ifdef __cplusplus
namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
namespace _impl {
extern "C" {
#endif

// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_swift_void_ptr_0_8 {
  void * _Nullable _1;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_swift_void_ptr_0_8(char * _Nonnull result, struct swift_interop_returnStub_swift_void_ptr_0_8 value) {
  memcpy(result + 0, &value._1, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_swift_void_ptr_0_8 $sS2ayxGycfC(void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // init()
SWIFT_EXTERN struct swift_interop_returnStub_swift_void_ptr_0_8 $sSa9repeating5countSayxGx_SitcfC(const void * _Nonnull repeatedValue, ptrdiff_t count, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // init(repeating:count:)
SWIFT_EXTERN void $sSa15reserveCapacityyySiF(ptrdiff_t minimumCapacity, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // reserveCapacity(_:)
SWIFT_EXTERN void $sSa6appendyyxnF(const void * _Nonnull newElement, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // append(_:)
SWIFT_EXTERN void $sSa17_customRemoveLastxSgyF(SWIFT_INDIRECT_RESULT void * _Nonnull, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _customRemoveLast()
SWIFT_EXTERN void $sSa6remove2atxSi_tF(SWIFT_INDIRECT_RESULT void * _Nonnull, ptrdiff_t index, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // remove(at:)
SWIFT_EXTERN void $sSa6insert_2atyxn_SitF(const void * _Nonnull newElement, ptrdiff_t i, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // insert(_:at:)
SWIFT_EXTERN void $sSa9removeAll15keepingCapacityySb_tF(bool keepCapacity, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // removeAll(keepingCapacity:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_swift_void_ptr_0_8 {
  void * _Nullable _1;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_swift_void_ptr_0_8 swift_interop_passDirect_swift_void_ptr_0_8(const char * _Nonnull value) {
  struct swift_interop_passStub_swift_void_ptr_0_8 result;
  memcpy(&result._1, value + 0, 8);
  return result;
}

SWIFT_EXTERN ptrdiff_t $sSa10startIndexSivg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSa8endIndexSivg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSa8distance4from2toS2i_SitF(ptrdiff_t start, ptrdiff_t end, struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // distance(from:to:)
SWIFT_EXTERN void $sSayxSicig(SWIFT_INDIRECT_RESULT void * _Nonnull, ptrdiff_t index, struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSa5countSivg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $sSa29_hoistableIsNativeTypeCheckedSbyF(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _hoistableIsNativeTypeChecked()
SWIFT_EXTERN ptrdiff_t $sSa8capacitySivg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 {
  uint64_t _1;
  void * _Nullable _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(char * _Nonnull result, struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSa11descriptionSSvg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSa16debugDescriptionSSvg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_swift_uint64_t_0_8 {
  uint64_t _1;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_swift_uint64_t_0_8(char * _Nonnull result, struct swift_interop_returnStub_swift_uint64_t_0_8 value) {
  memcpy(result + 0, &value._1, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_swift_void_ptr_0_8 $sSa12arrayLiteralSayxGxd_tcfC(struct swift_interop_passStub_swift_void_ptr_0_8 elements, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // init(arrayLiteral:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_swift_uint64_t_0_8 {
  uint64_t _1;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_swift_uint64_t_0_8 swift_interop_passDirect_swift_uint64_t_0_8(const char * _Nonnull value) {
  struct swift_interop_passStub_swift_uint64_t_0_8 result;
  memcpy(&result._1, value + 0, 8);
  return result;
}

SWIFT_EXTERN ptrdiff_t $sSS5IndexV13encodedOffsetSivg(struct swift_interop_passStub_swift_uint64_t_0_8 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS5IndexV13encodedOffsetABSi_tcfC(ptrdiff_t offset) SWIFT_NOEXCEPT SWIFT_CALL; // init(encodedOffset:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 {
  uint64_t _1;
  uint8_t _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(char * _Nonnull result, struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 1);
}

// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 {
  uint64_t _1;
  void * _Nullable _2;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(const char * _Nonnull value) {
  struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 result;
  memcpy(&result._1, value + 0, 8);
  memcpy(&result._2, value + 8, 8);
  return result;
}

SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 $sSS5IndexV_6withinABSgAB_SStcfC(struct swift_interop_passStub_swift_uint64_t_0_8 sourcePosition, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 target) SWIFT_NOEXCEPT SWIFT_CALL; // init(_:within:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 $sSS5IndexV12samePosition2inABSgSS8UTF8ViewV_tF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 utf8, struct swift_interop_passStub_swift_uint64_t_0_8 _self) SWIFT_NOEXCEPT SWIFT_CALL; // samePosition(in:)
SWIFT_EXTERN ptrdiff_t $sSS5IndexV9hashValueSivg(struct swift_interop_passStub_swift_uint64_t_0_8 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 $sSS5IndexV12samePosition2inABSgSS_tF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 characters, struct swift_interop_passStub_swift_uint64_t_0_8 _self) SWIFT_NOEXCEPT SWIFT_CALL; // samePosition(in:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 $sSS5IndexV_6withinABSgAB_SS8UTF8ViewVtcfC(struct swift_interop_passStub_swift_uint64_t_0_8 idx, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 target) SWIFT_NOEXCEPT SWIFT_CALL; // init(_:within:)
struct Swift_String_Index {
  _Alignas(8) char _storage[8];
};

SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSq16debugDescriptionSSvg(void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $sSq17unsafelyUnwrappedxvg(SWIFT_INDIRECT_RESULT void * _Nonnull, void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $sSqyxSgxcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, const void * _Nonnull some, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // init(_:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sS2SycfC(void) SWIFT_NOEXCEPT SWIFT_CALL; // init()
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS10startIndexSS0B0Vvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8endIndexSS0B0Vvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSS5countSivg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSS8distance4from2toSiSS5IndexV_AEtF(struct swift_interop_passStub_swift_uint64_t_0_8 start, struct swift_interop_passStub_swift_uint64_t_0_8 end, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // distance(from:to:)
SWIFT_EXTERN void $sSS15reserveCapacityyySiF(ptrdiff_t n, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // reserveCapacity(_:)
SWIFT_EXTERN void $sSS6appendyySSF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 other, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // append(_:)
SWIFT_EXTERN void $sSS6append10contentsOfySS_tF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 newElements, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // append(contentsOf:)
SWIFT_EXTERN void $sSS9removeAll15keepingCapacityySb_tF(bool keepCapacity, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // removeAll(keepingCapacity:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_swift_uint64_t_0_8_uint64_t_8_16 {
  uint64_t _1;
  uint64_t _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_swift_uint64_t_0_8_uint64_t_8_16(char * _Nonnull result, struct swift_interop_returnStub_swift_uint64_t_0_8_uint64_t_8_16 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS4utf8SS8UTF8ViewVvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $sSS4utf8SS8UTF8ViewVvs(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 newValue, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS10charactersSSvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $sSS10charactersSSvs(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 newValue, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSS9hashValueSivg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_void_ptr_0_8 $sSS13_nfcCodeUnitsSays5UInt8VGvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS10lowercasedSSyF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // lowercased()
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS10uppercasedSSyF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // uppercased()
SWIFT_EXTERN bool $sSS7isEmptySbvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS16debugDescriptionSSvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $sSS5writeyySSF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 other, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // write(_:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS11descriptionSSvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $sSS9hasPrefixySbSSF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 prefix, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // hasPrefix(_:)
SWIFT_EXTERN bool $sSS9hasSuffixySbSSF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 suffix, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // hasSuffix(_:)
SWIFT_EXTERN void $sSS5_dumpyyF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _dump()
struct swift_interop_stub_Swift_String {
#if UINTPTR_MAX == 0xFFFFFFFFFFFFFFFFu
uint64_t _1;
void * _Nullable _2;
#elif UINTPTR_MAX == 0xFFFFFFFF
uint32_t _1;
uint32_t _2;
uint32_t _3;
#endif
};
static SWIFT_INLINE_THUNK struct swift_interop_stub_Swift_String swift_interop_passDirect_Swift_String(const char * _Nonnull value) {
struct swift_interop_stub_Swift_String result;
#if UINTPTR_MAX == 0xFFFFFFFFFFFFFFFFu
memcpy(&result._1, value, 8);
memcpy(&result._2, value + 8, 8);
#elif UINTPTR_MAX == 0xFFFFFFFF
memcpy(&result._1, value, 4);
memcpy(&result._2, value + 4, 4);
memcpy(&result._3, value + 8, 4);
#endif
return result;
}
SWIFT_EXTERN void *_Nonnull $sSS10FoundationE19_bridgeToObjectiveCSo8NSStringCyF(swift_interop_stub_Swift_String) SWIFT_NOEXCEPT SWIFT_CALL;
SWIFT_EXTERN swift_interop_stub_Swift_String $sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ(void * _Nullable) SWIFT_NOEXCEPT SWIFT_CALL;
SWIFT_EXTERN swift_interop_stub_Swift_String $sSS7cStringSSSPys4Int8VG_tcfC(const char * _Nonnull) SWIFT_NOEXCEPT SWIFT_CALL;
struct Swift_String {
  _Alignas(8) char _storage[16];
};

SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8UTF8ViewV10startIndexSS0D0Vvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8UTF8ViewV8endIndexSS0D0Vvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8UTF8ViewV5index5afterSS5IndexVAF_tF(struct swift_interop_passStub_swift_uint64_t_0_8 i, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // index(after:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8UTF8ViewV5index6beforeSS5IndexVAF_tF(struct swift_interop_passStub_swift_uint64_t_0_8 i, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // index(before:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8UTF8ViewV5index_8offsetBySS5IndexVAF_SitF(struct swift_interop_passStub_swift_uint64_t_0_8 i, ptrdiff_t n, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // index(_:offsetBy:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 $sSS8UTF8ViewV5index_8offsetBy07limitedE0SS5IndexVSgAG_SiAGtF(struct swift_interop_passStub_swift_uint64_t_0_8 i, ptrdiff_t n, struct swift_interop_passStub_swift_uint64_t_0_8 limit, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // index(_:offsetBy:limitedBy:)
SWIFT_EXTERN ptrdiff_t $sSS8UTF8ViewV8distance4from2toSiSS5IndexV_AGtF(struct swift_interop_passStub_swift_uint64_t_0_8 i, struct swift_interop_passStub_swift_uint64_t_0_8 j, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // distance(from:to:)
SWIFT_EXTERN uint8_t $sSS8UTF8ViewVys5UInt8VSS5IndexVcig(struct swift_interop_passStub_swift_uint64_t_0_8 i, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS8UTF8ViewV16debugDescriptionSSvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS8UTF8ViewV11descriptionSSvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSS8UTF8ViewV5countSivg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
struct Swift_UTF8View {
  _Alignas(8) char _storage[16];
};

}
}
}
namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {






































template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:Sq") Optional;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
static inline const constexpr bool isUsableInGenericContext<swift::Optional<T_0_0>> = isUsableInGenericContext<T_0_0>;
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
class SWIFT_SYMBOL("s:SS") String;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<swift::String> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:Sa") Array;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
static inline const constexpr bool isUsableInGenericContext<swift::Array<T_0_0>> = isUsableInGenericContext<T_0_0>;
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_Array;

static_assert(1 <= 3, "unsupported generic requirement list for metadata func");
// Type metadata accessor for Array
SWIFT_EXTERN swift::_impl::MetadataResponseTy $sSaMa(swift::_impl::MetadataRequestTy, void * _Nonnull) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:Sa") Array final {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK ~Array() noexcept {
    auto metadata = _impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK Array(const Array &other) noexcept {
    auto metadata = _impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK Array &operator =(const Array &other) noexcept {
    auto metadata = _impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK Array &operator =(Array &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER Array(Array &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
/// Creates a new, empty array.
/// This is equivalent to initializing with an empty array literal.
/// For example:
/// \code
/// var emptyArray = Array<Int>()
/// print(emptyArray.isEmpty)
/// // Prints "true"
///
/// emptyArray = []
/// print(emptyArray.isEmpty)
/// // Prints "true"
///
/// \endcode
  static SWIFT_INLINE_THUNK Array<T_0_0> init() SWIFT_SYMBOL("s:S2ayxGycfc");
/// Creates a new array containing the specified number of a single, repeated
/// value.
/// Here’s an example of creating an array initialized with five strings
/// containing the letter <em>Z</em>.
/// \code
/// let fiveZs = Array(repeating: "Z", count: 5)
/// print(fiveZs)
/// // Prints "["Z", "Z", "Z", "Z", "Z"]"
///
/// \endcode\param repeatedValue The element to repeat.
///
/// \param count The number of times to repeat the value passed in the
/// <code>repeating</code> parameter. <code>count</code> must be zero or greater.
///
  static SWIFT_INLINE_THUNK Array<T_0_0> init(const T_0_0& repeatedValue, swift::Int count) SWIFT_SYMBOL("s:Sa9repeating5countSayxGx_Sitcfc");
/// Reserves enough space to store the specified number of elements.
/// If you are adding a known number of elements to an array, use this method
/// to avoid multiple reallocations. This method ensures that the array has
/// unique, mutable, contiguous storage, with space allocated for at least
/// the requested number of elements.
/// Calling the <code>reserveCapacity(_:)</code> method on an array with bridged storage
/// triggers a copy to contiguous storage even if the existing storage
/// has room to store <code>minimumCapacity</code> elements.
/// For performance reasons, the size of the newly allocated storage might be
/// greater than the requested capacity. Use the array’s <code>capacity</code> property
/// to determine the size of the new storage.
/// <h1>Preserving an Array’s Geometric Growth Strategy</h1>
/// If you implement a custom data structure backed by an array that grows
/// dynamically, naively calling the <code>reserveCapacity(_:)</code> method can lead
/// to worse than expected performance. Arrays need to follow a geometric
/// allocation pattern for appending elements to achieve amortized
/// constant-time performance. The <code>Array</code> type’s <code>append(_:)</code> and
/// <code>append(contentsOf:)</code> methods take care of this detail for you, but
/// <code>reserveCapacity(_:)</code> allocates only as much space as you tell it to
/// (padded to a round value), and no more. This avoids over-allocation, but
/// can result in insertion not having amortized constant-time performance.
/// The following code declares <code>values</code>, an array of integers, and the
/// <code>addTenQuadratic()</code> function, which adds ten more values to the <code>values</code>
/// array on each call.
/// \code
///   var values: [Int] = [0, 1, 2, 3]
///
///   // Don't use 'reserveCapacity(_:)' like this
///   func addTenQuadratic() {
///       let newCount = values.count + 10
///       values.reserveCapacity(newCount)
///       for n in values.count..<newCount {
///           values.append(n)
///       }
///   }
///
/// \endcodeThe call to <code>reserveCapacity(_:)</code> increases the <code>values</code> array’s capacity
/// by exactly 10 elements on each pass through <code>addTenQuadratic()</code>, which
/// is linear growth. Instead of having constant time when averaged over
/// many calls, the function may decay to performance that is linear in
/// <code>values.count</code>. This is almost certainly not what you want.
/// In cases like this, the simplest fix is often to simply remove the call
/// to <code>reserveCapacity(_:)</code>, and let the <code>append(_:)</code> method grow the array
/// for you.
/// \code
///   func addTen() {
///       let newCount = values.count + 10
///       for n in values.count..<newCount {
///           values.append(n)
///       }
///   }
///
/// \endcodeIf you need more control over the capacity of your array, implement your
/// own geometric growth strategy, passing the size you compute to
/// <code>reserveCapacity(_:)</code>.
/// complexity:
/// O(<em>n</em>), where <em>n</em> is the number of elements in the array.
/// \param minimumCapacity The requested number of elements to store.
///
  SWIFT_INLINE_THUNK void reserveCapacity(swift::Int minimumCapacity) SWIFT_SYMBOL("s:Sa15reserveCapacityyySiF");
/// Adds a new element at the end of the array.
/// Use this method to append a single element to the end of a mutable array.
/// \code
/// var numbers = [1, 2, 3, 4, 5]
/// numbers.append(100)
/// print(numbers)
/// // Prints "[1, 2, 3, 4, 5, 100]"
///
/// \endcodeBecause arrays increase their allocated capacity using an exponential
/// strategy, appending a single element to an array is an O(1) operation
/// when averaged over many calls to the <code>append(_:)</code> method. When an array
/// has additional capacity and is not sharing its storage with another
/// instance, appending an element is O(1). When an array needs to
/// reallocate storage before appending or its storage is shared with
/// another copy, appending is O(<em>n</em>), where <em>n</em> is the length of the array.
/// complexity:
/// O(1) on average, over many calls to <code>append(_:)</code> on the
/// same array.
/// \param newElement The element to append to the array.
///
  SWIFT_INLINE_THUNK void append(const T_0_0& newElement) SWIFT_SYMBOL("s:Sa6appendyyxnF");
  SWIFT_INLINE_THUNK swift::Optional<T_0_0> _customRemoveLast() SWIFT_SYMBOL("s:Sa17_customRemoveLastxSgyF");
/// Removes and returns the element at the specified position.
/// All the elements following the specified position are moved up to
/// close the gap.
/// \code
/// var measurements: [Double] = [1.1, 1.5, 2.9, 1.2, 1.5, 1.3, 1.2]
/// let removed = measurements.remove(at: 2)
/// print(measurements)
/// // Prints "[1.1, 1.5, 1.2, 1.5, 1.3, 1.2]"
///
/// \endcodecomplexity:
/// O(<em>n</em>), where <em>n</em> is the length of the array.
/// \param index The position of the element to remove. <code>index</code> must
/// be a valid index of the array.
///
///
/// returns:
/// The element at the specified index.
  SWIFT_INLINE_THUNK T_0_0 removeAt(swift::Int index) SWIFT_SYMBOL("s:Sa6remove2atxSi_tF");
/// Inserts a new element at the specified position.
/// The new element is inserted before the element currently at the specified
/// index. If you pass the array’s <code>endIndex</code> property as the <code>index</code>
/// parameter, the new element is appended to the array.
/// \code
/// var numbers = [1, 2, 3, 4, 5]
/// numbers.insert(100, at: 3)
/// numbers.insert(200, at: numbers.endIndex)
///
/// print(numbers)
/// // Prints "[1, 2, 3, 100, 4, 5, 200]"
///
/// \endcodecomplexity:
/// O(<em>n</em>), where <em>n</em> is the length of the array. If
/// <code>i == endIndex</code>, this method is equivalent to <code>append(_:)</code>.
/// \param newElement The new element to insert into the array.
///
/// \param i The position at which to insert the new element.
/// <code>index</code> must be a valid index of the array or equal to its <code>endIndex</code>
/// property.
///
  SWIFT_INLINE_THUNK void insertAt(const T_0_0& newElement, swift::Int i) SWIFT_SYMBOL("s:Sa6insert_2atyxn_SitF");
/// Removes all elements from the array.
/// complexity:
/// O(<em>n</em>), where <em>n</em> is the length of the array.
/// \param keepCapacity Pass <code>true</code> to keep the existing capacity of
/// the array after removing its elements. The default value is
/// <code>false</code>.
///
  SWIFT_INLINE_THUNK void removeAllKeepingCapacity(bool keepCapacity) SWIFT_SYMBOL("s:Sa9removeAll15keepingCapacityySb_tF");
  SWIFT_INLINE_THUNK swift::Int getStartIndex() const SWIFT_SYMBOL("s:Sa10startIndexSivp");
  SWIFT_INLINE_THUNK swift::Int getEndIndex() const SWIFT_SYMBOL("s:Sa8endIndexSivp");
/// Returns the distance between two indices.
/// \param start A valid index of the collection.
///
/// \param end Another valid index of the collection. If <code>end</code> is equal to
/// <code>start</code>, the result is zero.
///
///
/// returns:
/// The distance between <code>start</code> and <code>end</code>.
  SWIFT_INLINE_THUNK swift::Int distanceFromTo(swift::Int start, swift::Int end) const SWIFT_SYMBOL("s:Sa8distance4from2toS2i_SitF");
SWIFT_INLINE_THUNK T_0_0 operator [](swift::Int index) const SWIFT_SYMBOL("s:SayxSicig");
  SWIFT_INLINE_THUNK swift::Int getCount() const SWIFT_SYMBOL("s:Sa5countSivp");
/// Returns <code>true</code> if the array is native and does not need a deferred
/// type check.  May be hoisted by the optimizer, which means its
/// results may be stale by the time they are used if there is an
/// inout violation in user code.
  SWIFT_INLINE_THUNK bool _hoistableIsNativeTypeChecked() const SWIFT_SYMBOL("s:Sa29_hoistableIsNativeTypeCheckedSbyF");
  SWIFT_INLINE_THUNK swift::Int getCapacity() const SWIFT_SYMBOL("s:Sa8capacitySivp");
  SWIFT_INLINE_THUNK String getDescription() const SWIFT_SYMBOL("s:Sa11descriptionSSvp");
  SWIFT_INLINE_THUNK String getDebugDescription() const SWIFT_SYMBOL("s:Sa16debugDescriptionSSvp");
/// Creates an array from the given array literal.
/// Do not call this initializer directly. It is used by the compiler
/// when you use an array literal. Instead, create a new array by using an
/// array literal as its value. To do this, enclose a comma-separated list of
/// values in square brackets.
/// Here, an array of strings is created from an array literal holding
/// only strings.
/// \code
/// let ingredients = ["cocoa beans", "sugar", "cocoa butter", "salt"]
///
/// \endcode\param elements A variadic list of elements of the new array.
///
  static SWIFT_INLINE_THUNK Array<T_0_0> init(const Array<T_0_0>& elements) SWIFT_SYMBOL("s:Sa12arrayLiteralSayxGxd_tcfc");
private:
  SWIFT_INLINE_THUNK Array(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK Array _make() noexcept {
    auto metadata = _impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return Array(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_Array<T_0_0>;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $sSayxGD;
  static inline constexpr $sSayxGD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_Array {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(Array<T_0_0> &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const Array<T_0_0> &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER Array<T_0_0> returnNewValue(T callable) {
    auto result = Array<T_0_0>::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
struct TypeMetadataTrait<swift::Array<T_0_0>> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return swift::_impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata())._0;
  }
};
namespace _impl{
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
static inline const constexpr bool isOpaqueLayout<swift::Array<T_0_0>> = true;
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {























































































































































































































































































































































class SWIFT_SYMBOL("s:SS8UTF8ViewV") UTF8View;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<swift::UTF8View> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
class SWIFT_SYMBOL("s:SS5IndexV") String_Index;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<swift::String_Index> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
namespace _impl {

class _impl_String_Index;

// Type metadata accessor for Index
SWIFT_EXTERN swift::_impl::MetadataResponseTy $sSS5IndexVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:SS5IndexV") String_Index final {
public:
  SWIFT_INLINE_THUNK ~String_Index() noexcept {
    auto metadata = _impl::$sSS5IndexVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK String_Index(const String_Index &other) noexcept {
    auto metadata = _impl::$sSS5IndexVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK String_Index &operator =(const String_Index &other) noexcept {
    auto metadata = _impl::$sSS5IndexVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK String_Index &operator =(String_Index &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER String_Index(String_Index &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Int getEncodedOffset() const SWIFT_SYMBOL("s:SS5IndexV13encodedOffsetSivp");
/// Creates a new index at the specified code unit offset.
/// \param offset An offset in code units.
///
  static SWIFT_INLINE_THUNK String_Index init(swift::Int offset) SWIFT_SYMBOL("s:SS5IndexV13encodedOffsetABSi_tcfc");
/// Creates an index in the given string that corresponds exactly to the
/// specified position.
/// If the index passed as <code>sourcePosition</code> represents the start of an
/// extended grapheme cluster—the element type of a string—then the
/// initializer succeeds.
/// The following example converts the position of the Unicode scalar <code>"e"</code>
/// into its corresponding position in the string. The character at that
/// position is the composed <code>"é"</code> character.
/// \code
/// let cafe = "Cafe\u{0301}"
/// print(cafe)
/// // Prints "Café"
///
/// let scalarsIndex = cafe.unicodeScalars.firstIndex(of: "e")!
/// let stringIndex = String.Index(scalarsIndex, within: cafe)!
///
/// print(cafe[...stringIndex])
/// // Prints "Café"
///
/// \endcodeIf the index passed as <code>sourcePosition</code> doesn’t have an exact
/// corresponding position in <code>target</code>, the result of the initializer is
/// <code>nil</code>. For example, an attempt to convert the position of the combining
/// acute accent (<code>"\u{0301}"</code>) fails. Combining Unicode scalars do not have
/// their own position in a string.
/// \code
/// let nextScalarsIndex = cafe.unicodeScalars.index(after: scalarsIndex)
/// let nextStringIndex = String.Index(nextScalarsIndex, within: cafe)
///
/// print(nextStringIndex)
/// // Prints "nil"
///
/// \endcode\param sourcePosition A position in a view of the <code>target</code> parameter.
/// <code>sourcePosition</code> must be a valid index of at least one of the views
/// of <code>target</code>.
///
/// \param target The string referenced by the resulting index.
///
  static SWIFT_INLINE_THUNK swift::Optional<String_Index> init(const String_Index& sourcePosition, const String& target) SWIFT_SYMBOL("s:SS5IndexV_6withinABSgAB_SStcfc");
/// Returns the position in the given UTF-8 view that corresponds exactly to
/// this index.
/// This example first finds the position of the character <code>"é"</code>, and then
/// uses this method find the same position in the string’s <code>utf8</code> view.
/// \code
/// let cafe = "Café"
/// if let i = cafe.firstIndex(of: "é") {
///     let j = i.samePosition(in: cafe.utf8)!
///     print(Array(cafe.utf8[j...]))
/// }
/// // Prints "[195, 169]"
///
/// \endcode\param utf8 The view to use for the index conversion. This index
/// must be a valid index of at least one view of the string shared by
/// <code>utf8</code>.
///
///
/// returns:
/// The position in <code>utf8</code> that corresponds exactly to this index.
/// If this index does not have an exact corresponding position in <code>utf8</code>,
/// this method returns <code>nil</code>. For example, an attempt to convert the
/// position of a UTF-16 trailing surrogate returns <code>nil</code>.
  SWIFT_INLINE_THUNK swift::Optional<String_Index> samePositionIn(const UTF8View& utf8) const SWIFT_SYMBOL("s:SS5IndexV12samePosition2inABSgSS8UTF8ViewV_tF");
  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:SS5IndexV9hashValueSivp");
/// Returns the position in the given string that corresponds exactly to this
/// index.
/// This example first finds the position of a space (UTF-8 code point <code>32</code>)
/// in a string’s <code>utf8</code> view and then uses this method find the same position
/// in the string.
/// \code
/// let cafe = "Café 🍵"
/// let i = cafe.unicodeScalars.firstIndex(of: "🍵")!
/// let j = i.samePosition(in: cafe)!
/// print(cafe[j...])
/// // Prints "🍵"
///
/// \endcode\param characters The string to use for the index conversion.
/// This index must be a valid index of at least one view of <code>characters</code>.
///
///
/// returns:
/// The position in <code>characters</code> that corresponds exactly to
/// this index. If this index does not have an exact corresponding
/// position in <code>characters</code>, this method returns <code>nil</code>. For example,
/// an attempt to convert the position of a UTF-8 continuation byte
/// returns <code>nil</code>.
  SWIFT_INLINE_THUNK swift::Optional<String_Index> samePositionIn(const String& characters) const SWIFT_SYMBOL("s:SS5IndexV12samePosition2inABSgSS_tF");
/// Creates an index in the given UTF-8 view that corresponds exactly to the
/// specified <code>UTF16View</code> position.
/// The following example finds the position of a space in a string’s <code>utf16</code>
/// view and then converts that position to an index in the string’s
/// <code>utf8</code> view.
/// \code
/// let cafe = "Café 🍵"
///
/// let utf16Index = cafe.utf16.firstIndex(of: 32)!
/// let utf8Index = String.UTF8View.Index(utf16Index, within: cafe.utf8)!
///
/// print(Array(cafe.utf8[..<utf8Index]))
/// // Prints "[67, 97, 102, 195, 169]"
///
/// \endcodeIf the position passed in <code>utf16Index</code> doesn’t have an exact
/// corresponding position in <code>utf8</code>, the result of the initializer is
/// <code>nil</code>. For example, because UTF-8 and UTF-16 represent high Unicode code
/// points differently, an attempt to convert the position of the trailing
/// surrogate of a UTF-16 surrogate pair fails.
/// The next example attempts to convert the indices of the two UTF-16 code
/// points that represent the teacup emoji (<code>"🍵"</code>). The index of the lead
/// surrogate is successfully converted to a position in <code>utf8</code>, but the
/// index of the trailing surrogate is not.
/// \code
/// let emojiHigh = cafe.utf16.index(after: utf16Index)
/// print(String.UTF8View.Index(emojiHigh, within: cafe.utf8))
/// // Prints "Optional(String.Index(...))"
///
/// let emojiLow = cafe.utf16.index(after: emojiHigh)
/// print(String.UTF8View.Index(emojiLow, within: cafe.utf8))
/// // Prints "nil"
///
/// \endcode\param sourcePosition A position in a <code>String</code> or one of its views.
///
/// \param target The <code>UTF8View</code> in which to find the new position.
///
  static SWIFT_INLINE_THUNK swift::Optional<String_Index> init(const String_Index& idx, const UTF8View& target) SWIFT_SYMBOL("s:SS5IndexV_6withinABSgAB_SS8UTF8ViewVtcfc");
private:
  SWIFT_INLINE_THUNK String_Index() noexcept {}
  static SWIFT_INLINE_THUNK String_Index _make() noexcept { return String_Index(); }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage; }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage; }

  alignas(8) char _storage[8];
  friend class _impl::_impl_String_Index;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $sSS5IndexVD;
  static inline constexpr $sSS5IndexVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_String_Index {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(String_Index &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const String_Index &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER String_Index returnNewValue(T callable) {
    auto result = String_Index::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$sSS5IndexVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<swift::String_Index> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return swift::_impl::$sSS5IndexVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<swift::String_Index> = true;
template<>
struct implClassFor<swift::String_Index> { using type = swift::_impl::_impl_String_Index; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {











































































































































































































































































































































/// A type that represents either a wrapped value or the absence of a value.
/// You use the <code>Optional</code> type whenever you use optional values, even if you
/// never type the word <code>Optional</code>. Swift’s type system usually shows the
/// wrapped type’s name with a trailing question mark (<code>?</code>) instead of showing
/// the full type name. For example, if a variable has the type <code>Int?</code>, that’s
/// just another way of writing <code>Optional<Int></code>. The shortened form is
/// preferred for ease of reading and writing code.
/// The types of <code>shortForm</code> and <code>longForm</code> in the following code sample are
/// the same:
/// \code
/// let shortForm: Int? = Int("42")
/// let longForm: Optional<Int> = Int("42")
///
/// \endcodeThe <code>Optional</code> type is an enumeration with two cases. <code>Optional.none</code> is
/// equivalent to the <code>nil</code> literal. <code>Optional.some(Wrapped)</code> stores a wrapped
/// value. For example:
/// \code
/// let number: Int? = Optional.some(42)
/// let noNumber: Int? = Optional.none
/// print(noNumber == nil)
/// // Prints "true"
///
/// \endcodeYou must unwrap the value of an <code>Optional</code> instance before you can use it
/// in many contexts. Because Swift provides several ways to safely unwrap
/// optional values, you can choose the one that helps you write clear,
/// concise code.
/// The following examples use this dictionary of image names and file paths:
/// \code
/// let imagePaths = ["star": "/glyphs/star.png",
///                   "portrait": "/images/content/portrait.jpg",
///                   "spacer": "/images/shared/spacer.gif"]
///
/// \endcodeGetting a dictionary’s value using a key returns an optional value, so
/// <code>imagePaths["star"]</code> has type <code>Optional<String></code> or, written in the
/// preferred manner, <code>String?</code>.
/// <h2>Optional Binding</h2>
/// To conditionally bind the wrapped value of an <code>Optional</code> instance to a new
/// variable, use one of the optional binding control structures, including
/// <code>if let</code>, <code>guard let</code>, and <code>switch</code>.
/// \code
/// if let starPath = imagePaths["star"] {
///     print("The star image is at '\(starPath)'")
/// } else {
///     print("Couldn't find the star image")
/// }
/// // Prints "The star image is at '/glyphs/star.png'"
///
/// \endcode<h2>Optional Chaining</h2>
/// To safely access the properties and methods of a wrapped instance, use the
/// postfix optional chaining operator (postfix <code>?</code>). The following example uses
/// optional chaining to access the <code>hasSuffix(_:)</code> method on a <code>String?</code>
/// instance.
/// \code
/// if imagePaths["star"]?.hasSuffix(".png") == true {
///     print("The star image is in PNG format")
/// }
/// // Prints "The star image is in PNG format"
///
/// \endcode<h2>Using the Nil-Coalescing Operator</h2>
/// Use the nil-coalescing operator (<code>??</code>) to supply a default value in case
/// the <code>Optional</code> instance is <code>nil</code>. Here a default path is supplied for an
/// image that is missing from <code>imagePaths</code>.
/// \code
/// let defaultImagePath = "/images/default.png"
/// let heartPath = imagePaths["heart"] ?? defaultImagePath
/// print(heartPath)
/// // Prints "/images/default.png"
///
/// \endcodeThe <code>??</code> operator also works with another <code>Optional</code> instance on the
/// right-hand side. As a result, you can chain multiple <code>??</code> operators
/// together.
/// \code
/// let shapePath = imagePaths["cir"] ?? imagePaths["squ"] ?? defaultImagePath
/// print(shapePath)
/// // Prints "/images/default.png"
///
/// \endcode<h2>Unconditional Unwrapping</h2>
/// When you’re certain that an instance of <code>Optional</code> contains a value, you
/// can unconditionally unwrap the value by using the forced
/// unwrap operator (postfix <code>!</code>). For example, the result of the failable <code>Int</code>
/// initializer is unconditionally unwrapped in the example below.
/// \code
/// let number = Int("42")!
/// print(number)
/// // Prints "42"
///
/// \endcodeYou can also perform unconditional optional chaining by using the postfix
/// <code>!</code> operator.
/// \code
/// let isPNG = imagePaths["star"]!.hasSuffix(".png")
/// print(isPNG)
/// // Prints "true"
///
/// \endcodeUnconditionally unwrapping a <code>nil</code> instance with <code>!</code> triggers a runtime
/// error.
namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_Optional;

static_assert(1 <= 3, "unsupported generic requirement list for metadata func");
// Type metadata accessor for Optional
SWIFT_EXTERN swift::_impl::MetadataResponseTy $sSqMa(swift::_impl::MetadataRequestTy, void * _Nonnull) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum Optional
extern "C" {
extern unsigned $sSq4noneyxSgABmlFWC;
extern unsigned $sSq4someyxSgxcABmlFWC;
}

} // namespace _impl

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:Sq") Optional final {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK ~Optional() noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK Optional(const Optional &other) noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK Optional &operator =(const Optional &other) noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK Optional &operator =(Optional &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER Optional(Optional &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    some SWIFT_SYMBOL("s:Sq4someyxSgxcABmlF"),
    none SWIFT_SYMBOL("s:Sq4noneyxSgABmlF")
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_some {  // impl struct for case some
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::some;
    }
    SWIFT_INLINE_THUNK Optional<T_0_0> operator()(const T_0_0& val) const;
  } some SWIFT_SYMBOL("s:Sq4someyxSgxcABmlF");
  SWIFT_INLINE_THUNK bool isSome() const;
  SWIFT_INLINE_THUNK T_0_0 getSome() const;

  inline const static struct _impl_none {  // impl struct for case none
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::none;
    }
    SWIFT_INLINE_THUNK Optional<T_0_0> operator()() const;
  } none SWIFT_SYMBOL("s:Sq4noneyxSgABmlF");
  SWIFT_INLINE_THUNK bool isNone() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    switch (_getEnumTag()) {
      case 0: return cases::some;
      case 1: return cases::none;
      default: abort();
    }
  }

  SWIFT_INLINE_THUNK String getDebugDescription() const SWIFT_SYMBOL("s:Sq16debugDescriptionSSvp");
  SWIFT_INLINE_THUNK T_0_0 getUnsafelyUnwrapped() const SWIFT_SYMBOL("s:Sq17unsafelyUnwrappedxvp");
/// Creates an instance that stores the given value.
  static SWIFT_INLINE_THUNK swift::Optional<T_0_0> init(const T_0_0& some_) SWIFT_SYMBOL("s:SqsRi_zrlEyxSgxcfc");
#define SWIFT_CXX_INTEROP_OPTIONAL_MIXIN
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
// Allow user to find the header using additional include paths
#if __has_include(<swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <swiftToCxx/_SwiftStdlibCxxOverlay.h>
// Look for the C++ interop support header relative to clang's resource dir:
//  '<toolchain>/usr/lib/clang/<version>/include/../../../swift/swiftToCxx'.
#elif __has_include(<../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
#elif __has_include(<../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
//  '<toolchain>/usr/local/lib/clang/<version>/include/../../../../../lib/swift/swiftToCxx'.
#include <../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
#endif
#pragma clang diagnostic pop
private:
  SWIFT_INLINE_THUNK Optional(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK Optional _make() noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return Optional(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_Optional<T_0_0>;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $sxSgD;
  static inline constexpr $sxSgD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_Optional {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(Optional<T_0_0> &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const Optional<T_0_0> &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER Optional<T_0_0> returnNewValue(T callable) {
    auto result = Optional<T_0_0>::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
struct TypeMetadataTrait<swift::Optional<T_0_0>> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return swift::_impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata())._0;
  }
};
namespace _impl{
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
static inline const constexpr bool isOpaqueLayout<swift::Optional<T_0_0>> = true;
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
























































































































































































































































































































































































































































































namespace _impl {

class _impl_String;

// Type metadata accessor for String
SWIFT_EXTERN swift::_impl::MetadataResponseTy $sSSMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:SS") String final {
public:
  SWIFT_INLINE_THUNK ~String() noexcept {
    auto metadata = _impl::$sSSMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK String(const String &other) noexcept {
    auto metadata = _impl::$sSSMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK String &operator =(const String &other) noexcept {
    auto metadata = _impl::$sSSMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK String &operator =(String &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER String(String &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
/// Creates an empty string.
/// Using this initializer is equivalent to initializing a string with an
/// empty string literal.
/// \code
/// let empty = ""
/// let alsoEmpty = String()
///
/// \endcode
  static SWIFT_INLINE_THUNK String init() SWIFT_SYMBOL("s:S2Sycfc");
  SWIFT_INLINE_THUNK String_Index getStartIndex() const SWIFT_SYMBOL("s:SS10startIndexSS0B0Vvp");
  SWIFT_INLINE_THUNK String_Index getEndIndex() const SWIFT_SYMBOL("s:SS8endIndexSS0B0Vvp");
  SWIFT_INLINE_THUNK swift::Int getCount() const SWIFT_SYMBOL("s:SS5countSivp");
/// Returns the distance between two indices.
/// complexity:
/// O(<em>n</em>), where <em>n</em> is the resulting distance.
/// \param start A valid index of the collection.
///
/// \param end Another valid index of the collection. If <code>end</code> is equal to
/// <code>start</code>, the result is zero.
///
///
/// returns:
/// The distance between <code>start</code> and <code>end</code>.
  SWIFT_INLINE_THUNK swift::Int distanceFromTo(const String_Index& start, const String_Index& end) const SWIFT_SYMBOL("s:SS8distance4from2toSiSS5IndexV_AEtF");
/// Reserves enough space in the string’s underlying storage to store the
/// specified number of ASCII characters.
/// Because each character in a string can require more than a single ASCII
/// character’s worth of storage, additional allocation may be necessary
/// when adding characters to a string after a call to
/// <code>reserveCapacity(_:)</code>.
/// complexity:
/// O(<em>n</em>)
/// \param n The minimum number of ASCII character’s worth of storage
/// to allocate.
///
  SWIFT_INLINE_THUNK void reserveCapacity(swift::Int n) SWIFT_SYMBOL("s:SS15reserveCapacityyySiF");
/// Appends the given string to this string.
/// The following example builds a customized greeting by using the
/// <code>append(_:)</code> method:
/// \code
/// var greeting = "Hello, "
/// if let name = getUserName() {
///     greeting.append(name)
/// } else {
///     greeting.append("friend")
/// }
/// print(greeting)
/// // Prints "Hello, friend"
///
/// \endcode\param other Another string.
///
  SWIFT_INLINE_THUNK void append(const String& other) SWIFT_SYMBOL("s:SS6appendyySSF");
  SWIFT_INLINE_THUNK void appendContentsOf(const String& newElements) SWIFT_SYMBOL("s:SS6append10contentsOfySS_tF");
/// Replaces this string with the empty string.
/// Calling this method invalidates any existing indices for use with this
/// string.
/// \param keepCapacity Pass <code>true</code> to prevent the release of the
/// string’s allocated storage. Retaining the storage can be a useful
/// optimization when you’re planning to grow the string again. The
/// default value is <code>false</code>.
///
  SWIFT_INLINE_THUNK void removeAllKeepingCapacity(bool keepCapacity) SWIFT_SYMBOL("s:SS9removeAll15keepingCapacityySb_tF");
  SWIFT_INLINE_THUNK UTF8View getUtf8() const SWIFT_SYMBOL("s:SS4utf8SS8UTF8ViewVvp");
  SWIFT_INLINE_THUNK void setUtf8(const UTF8View& newValue) SWIFT_SYMBOL("s:SS4utf8SS8UTF8ViewVvp");
  SWIFT_INLINE_THUNK String getCharacters() const SWIFT_SYMBOL("s:SS10charactersSSvp");
  SWIFT_INLINE_THUNK void setCharacters(const String& newValue) SWIFT_SYMBOL("s:SS10charactersSSvp");
  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:SS9hashValueSivp");
  SWIFT_INLINE_THUNK Array<uint8_t> get_nfcCodeUnits() const SWIFT_SYMBOL("s:SS13_nfcCodeUnitsSays5UInt8VGvp");
/// Returns a lowercase version of the string.
/// Here’s an example of transforming a string to all lowercase letters.
/// \code
/// let cafe = "BBQ Café 🍵"
/// print(cafe.lowercased())
/// // Prints "bbq café 🍵"
///
/// \endcodecomplexity:
/// O(<em>n</em>)
///
/// returns:
/// A lowercase copy of the string.
  SWIFT_INLINE_THUNK String lowercased() const SWIFT_SYMBOL("s:SS10lowercasedSSyF");
/// Returns an uppercase version of the string.
/// The following example transforms a string to uppercase letters:
/// \code
/// let cafe = "Café 🍵"
/// print(cafe.uppercased())
/// // Prints "CAFÉ 🍵"
///
/// \endcodecomplexity:
/// O(<em>n</em>)
///
/// returns:
/// An uppercase copy of the string.
  SWIFT_INLINE_THUNK String uppercased() const SWIFT_SYMBOL("s:SS10uppercasedSSyF");
  SWIFT_INLINE_THUNK bool isEmpty() const SWIFT_SYMBOL("s:SS7isEmptySbvp");
  SWIFT_INLINE_THUNK String getDebugDescription() const SWIFT_SYMBOL("s:SS16debugDescriptionSSvp");
/// Appends the given string to this string.
/// \param other A string to append.
///
  SWIFT_INLINE_THUNK void write(const String& other) SWIFT_SYMBOL("s:SS5writeyySSF");
  SWIFT_INLINE_THUNK String getDescription() const SWIFT_SYMBOL("s:SS11descriptionSSvp");
  SWIFT_INLINE_THUNK bool hasPrefix(const String& prefix) const SWIFT_SYMBOL("s:SS9hasPrefixySbSSF");
  SWIFT_INLINE_THUNK bool hasSuffix(const String& suffix) const SWIFT_SYMBOL("s:SS9hasSuffixySbSSF");
  SWIFT_INLINE_THUNK void _dump() const SWIFT_SYMBOL("s:SS5_dumpyyF");
#if defined(__OBJC__)
  SWIFT_INLINE_THUNK operator NSString * _Nonnull () const noexcept {
    return (__bridge_transfer NSString *)(_impl::$sSS10FoundationE19_bridgeToObjectiveCSo8NSStringCyF(_impl::swift_interop_passDirect_Swift_String(_getOpaquePointer())));
  }
static SWIFT_INLINE_THUNK String init(NSString * _Nonnull nsString) noexcept {
    auto result = _make();
    auto res = _impl::$sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ((__bridge void *)nsString);
    memcpy(result._getOpaquePointer(), &res, sizeof(res));
    return result;
  }

#endif
#define SWIFT_CXX_INTEROP_STRING_MIXIN
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
// Allow user to find the header using additional include paths
#if __has_include(<swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <swiftToCxx/_SwiftStdlibCxxOverlay.h>
// Look for the C++ interop support header relative to clang's resource dir:
//  '<toolchain>/usr/lib/clang/<version>/include/../../../swift/swiftToCxx'.
#elif __has_include(<../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
#elif __has_include(<../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
//  '<toolchain>/usr/local/lib/clang/<version>/include/../../../../../lib/swift/swiftToCxx'.
#include <../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
#endif
#pragma clang diagnostic pop
private:
  SWIFT_INLINE_THUNK String() noexcept {}
  static SWIFT_INLINE_THUNK String _make() noexcept { return String(); }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage; }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage; }

  alignas(8) char _storage[16];
  friend class _impl::_impl_String;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $sSSD;
  static inline constexpr $sSSD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_String {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(String &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const String &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER String returnNewValue(T callable) {
    auto result = String::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$sSSMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<swift::String> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return swift::_impl::$sSSMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<swift::String> = true;
template<>
struct implClassFor<swift::String> { using type = swift::_impl::_impl_String; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {








































































































































































































namespace _impl {

class _impl_UTF8View;

// Type metadata accessor for UTF8View
SWIFT_EXTERN swift::_impl::MetadataResponseTy $sSS8UTF8ViewVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:SS8UTF8ViewV") UTF8View final {
public:
  SWIFT_INLINE_THUNK ~UTF8View() noexcept {
    auto metadata = _impl::$sSS8UTF8ViewVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK UTF8View(const UTF8View &other) noexcept {
    auto metadata = _impl::$sSS8UTF8ViewVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK UTF8View &operator =(const UTF8View &other) noexcept {
    auto metadata = _impl::$sSS8UTF8ViewVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK UTF8View &operator =(UTF8View &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER UTF8View(UTF8View &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK String_Index getStartIndex() const SWIFT_SYMBOL("s:SS8UTF8ViewV10startIndexSS0D0Vvp");
  SWIFT_INLINE_THUNK String_Index getEndIndex() const SWIFT_SYMBOL("s:SS8UTF8ViewV8endIndexSS0D0Vvp");
/// Returns the next consecutive position after <code>i</code>.
/// precondition:
/// The next position is representable.
  SWIFT_INLINE_THUNK String_Index indexAfter(const String_Index& i) const SWIFT_SYMBOL("s:SS8UTF8ViewV5index5afterSS5IndexVAF_tF");
  SWIFT_INLINE_THUNK String_Index indexBefore(const String_Index& i) const SWIFT_SYMBOL("s:SS8UTF8ViewV5index6beforeSS5IndexVAF_tF");
  SWIFT_INLINE_THUNK String_Index indexOffsetBy(const String_Index& i, swift::Int n) const SWIFT_SYMBOL("s:SS8UTF8ViewV5index_8offsetBySS5IndexVAF_SitF");
  SWIFT_INLINE_THUNK swift::Optional<String_Index> indexOffsetByLimitedBy(const String_Index& i, swift::Int n, const String_Index& limit) const SWIFT_SYMBOL("s:SS8UTF8ViewV5index_8offsetBy07limitedE0SS5IndexVSgAG_SiAGtF");
  SWIFT_INLINE_THUNK swift::Int distanceFromTo(const String_Index& i, const String_Index& j) const SWIFT_SYMBOL("s:SS8UTF8ViewV8distance4from2toSiSS5IndexV_AGtF");
SWIFT_INLINE_THUNK uint8_t operator [](const String_Index& i) const SWIFT_SYMBOL("s:SS8UTF8ViewVys5UInt8VSS5IndexVcig");
  SWIFT_INLINE_THUNK String getDebugDescription() const SWIFT_SYMBOL("s:SS8UTF8ViewV16debugDescriptionSSvp");
  SWIFT_INLINE_THUNK String getDescription() const SWIFT_SYMBOL("s:SS8UTF8ViewV11descriptionSSvp");
  SWIFT_INLINE_THUNK swift::Int getCount() const SWIFT_SYMBOL("s:SS8UTF8ViewV5countSivp");
private:
  SWIFT_INLINE_THUNK UTF8View() noexcept {}
  static SWIFT_INLINE_THUNK UTF8View _make() noexcept { return UTF8View(); }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage; }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage; }

  alignas(8) char _storage[16];
  friend class _impl::_impl_UTF8View;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $sSS8UTF8ViewVD;
  static inline constexpr $sSS8UTF8ViewVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_UTF8View {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(UTF8View &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const UTF8View &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER UTF8View returnNewValue(T callable) {
    auto result = UTF8View::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$sSS8UTF8ViewVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<swift::UTF8View> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return swift::_impl::$sSS8UTF8ViewVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<swift::UTF8View> = true;
template<>
struct implClassFor<swift::UTF8View> { using type = swift::_impl::_impl_UTF8View; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {












































































































































































































































































































































































































































































  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK Array<T_0_0> Array<T_0_0>::init() {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_Array<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_void_ptr_0_8(result, _impl::$sS2ayxGycfC(swift::TypeMetadataTrait<T_0_0>::getTypeMetadata()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK Array<T_0_0> Array<T_0_0>::init(const T_0_0& repeatedValue, swift::Int count) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  alignas(alignof(T_0_0)) char copyBuffer_consumedParamCopy_repeatedValue[sizeof(T_0_0)];
  auto &consumedParamCopy_repeatedValue = *(new(copyBuffer_consumedParamCopy_repeatedValue) T_0_0(repeatedValue));
  swift::_impl::ConsumedValueStorageDestroyer<T_0_0> storageGuard_consumedParamCopy_repeatedValue(consumedParamCopy_repeatedValue);
  return _impl::_impl_Array<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_void_ptr_0_8(result, _impl::$sSa9repeating5countSayxGx_SitcfC(swift::_impl::getOpaquePointer(consumedParamCopy_repeatedValue), count, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK void Array<T_0_0>::reserveCapacity(swift::Int minimumCapacity) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  _impl::$sSa15reserveCapacityyySiF(minimumCapacity, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK void Array<T_0_0>::append(const T_0_0& newElement) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  alignas(alignof(T_0_0)) char copyBuffer_consumedParamCopy_newElement[sizeof(T_0_0)];
  auto &consumedParamCopy_newElement = *(new(copyBuffer_consumedParamCopy_newElement) T_0_0(newElement));
  swift::_impl::ConsumedValueStorageDestroyer<T_0_0> storageGuard_consumedParamCopy_newElement(consumedParamCopy_newElement);
  _impl::$sSa6appendyyxnF(swift::_impl::getOpaquePointer(consumedParamCopy_newElement), swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Optional<T_0_0> Array<T_0_0>::_customRemoveLast() {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_Optional<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$sSa17_customRemoveLastxSgyF(result, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK T_0_0 Array<T_0_0>::removeAt(swift::Int index) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
  if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
  void *returnValue;
  _impl::$sSa6remove2atxSi_tF(reinterpret_cast<void *>(&returnValue), index, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  return ::swift::_impl::implClassFor<T_0_0>::type::makeRetained(returnValue);
  } else if constexpr (::swift::_impl::isValueType<T_0_0>) {
  return ::swift::_impl::implClassFor<T_0_0>::type::returnNewValue([&](void * _Nonnull returnValue) SWIFT_INLINE_THUNK_ATTRIBUTES {
_impl::$sSa6remove2atxSi_tF(returnValue, index, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  } else if constexpr (::swift::_impl::isSwiftBridgedCxxRecord<T_0_0>) {
alignas(alignof(T_0_0)) char storage[sizeof(T_0_0)];
auto * _Nonnull storageObjectPtr = reinterpret_cast<T_0_0 *>(storage);
_impl::$sSa6remove2atxSi_tF(storage, index, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
T_0_0 result(static_cast<T_0_0 &&>(*storageObjectPtr));
storageObjectPtr->~T_0_0();
return result;
  } else {
  T_0_0 returnValue;
_impl::$sSa6remove2atxSi_tF(reinterpret_cast<void *>(&returnValue), index, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  return returnValue;
  }
#pragma clang diagnostic pop
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK void Array<T_0_0>::insertAt(const T_0_0& newElement, swift::Int i) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  alignas(alignof(T_0_0)) char copyBuffer_consumedParamCopy_newElement[sizeof(T_0_0)];
  auto &consumedParamCopy_newElement = *(new(copyBuffer_consumedParamCopy_newElement) T_0_0(newElement));
  swift::_impl::ConsumedValueStorageDestroyer<T_0_0> storageGuard_consumedParamCopy_newElement(consumedParamCopy_newElement);
  _impl::$sSa6insert_2atyxn_SitF(swift::_impl::getOpaquePointer(consumedParamCopy_newElement), i, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK void Array<T_0_0>::removeAllKeepingCapacity(bool keepCapacity) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  _impl::$sSa9removeAll15keepingCapacityySb_tF(keepCapacity, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Int Array<T_0_0>::getStartIndex() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa10startIndexSivg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Int Array<T_0_0>::getEndIndex() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa8endIndexSivg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Int Array<T_0_0>::distanceFromTo(swift::Int start, swift::Int end) const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa8distance4from2toS2i_SitF(start, end, _impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK T_0_0 Array<T_0_0>::operator [](swift::Int index) const SWIFT_SYMBOL("s:SayxSicig") {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
  if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
  void *returnValue;
  _impl::$sSayxSicig(reinterpret_cast<void *>(&returnValue), index, _impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  return ::swift::_impl::implClassFor<T_0_0>::type::makeRetained(returnValue);
  } else if constexpr (::swift::_impl::isValueType<T_0_0>) {
  return ::swift::_impl::implClassFor<T_0_0>::type::returnNewValue([&](void * _Nonnull returnValue) SWIFT_INLINE_THUNK_ATTRIBUTES {
_impl::$sSayxSicig(returnValue, index, _impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  });
  } else if constexpr (::swift::_impl::isSwiftBridgedCxxRecord<T_0_0>) {
alignas(alignof(T_0_0)) char storage[sizeof(T_0_0)];
auto * _Nonnull storageObjectPtr = reinterpret_cast<T_0_0 *>(storage);
_impl::$sSayxSicig(storage, index, _impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
T_0_0 result(static_cast<T_0_0 &&>(*storageObjectPtr));
storageObjectPtr->~T_0_0();
return result;
  } else {
  T_0_0 returnValue;
_impl::$sSayxSicig(reinterpret_cast<void *>(&returnValue), index, _impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  return returnValue;
  }
#pragma clang diagnostic pop
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Int Array<T_0_0>::getCount() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa5countSivg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK bool Array<T_0_0>::_hoistableIsNativeTypeChecked() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa29_hoistableIsNativeTypeCheckedSbyF(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Int Array<T_0_0>::getCapacity() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa8capacitySivg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK String Array<T_0_0>::getDescription() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSa11descriptionSSvg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK String Array<T_0_0>::getDebugDescription() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSa16debugDescriptionSSvg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK Array<T_0_0> Array<T_0_0>::init(const Array<T_0_0>& elements) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  alignas(alignof(Array<T_0_0>)) char copyBuffer_consumedParamCopy_elements[sizeof(Array<T_0_0>)];
  auto &consumedParamCopy_elements = *(new(copyBuffer_consumedParamCopy_elements) Array<T_0_0>(elements));
  swift::_impl::ConsumedValueStorageDestroyer<Array<T_0_0>> storageGuard_consumedParamCopy_elements(consumedParamCopy_elements);
  return _impl::_impl_Array<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_void_ptr_0_8(result, _impl::$sSa12arrayLiteralSayxGxd_tcfC(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_impl::_impl_Array<T_0_0>::getOpaquePointer(consumedParamCopy_elements)), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata()));
  });
  }
  SWIFT_INLINE_THUNK swift::Int String_Index::getEncodedOffset() const {
  return _impl::$sSS5IndexV13encodedOffsetSivg(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK String_Index String_Index::init(swift::Int offset) {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS5IndexV13encodedOffsetABSi_tcfC(offset));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<String_Index> String_Index::init(const String_Index& sourcePosition, const String& target) {
  alignas(alignof(String)) char copyBuffer_consumedParamCopy_target[sizeof(String)];
  auto &consumedParamCopy_target = *(new(copyBuffer_consumedParamCopy_target) String(target));
  swift::_impl::ConsumedValueStorageDestroyer<String> storageGuard_consumedParamCopy_target(consumedParamCopy_target);
  return _impl::_impl_Optional<String_Index>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(result, _impl::$sSS5IndexV_6withinABSgAB_SStcfC(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(sourcePosition)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(consumedParamCopy_target))));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<String_Index> String_Index::samePositionIn(const UTF8View& utf8) const {
  return _impl::_impl_Optional<String_Index>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(result, _impl::$sSS5IndexV12samePosition2inABSgSS8UTF8ViewV_tF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_UTF8View::getOpaquePointer(utf8)), _impl::swift_interop_passDirect_swift_uint64_t_0_8(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Int String_Index::getHashValue() const {
  return _impl::$sSS5IndexV9hashValueSivg(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK swift::Optional<String_Index> String_Index::samePositionIn(const String& characters) const {
  return _impl::_impl_Optional<String_Index>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(result, _impl::$sSS5IndexV12samePosition2inABSgSS_tF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(characters)), _impl::swift_interop_passDirect_swift_uint64_t_0_8(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<String_Index> String_Index::init(const String_Index& idx, const UTF8View& target) {
  alignas(alignof(UTF8View)) char copyBuffer_consumedParamCopy_target[sizeof(UTF8View)];
  auto &consumedParamCopy_target = *(new(copyBuffer_consumedParamCopy_target) UTF8View(target));
  swift::_impl::ConsumedValueStorageDestroyer<UTF8View> storageGuard_consumedParamCopy_target(consumedParamCopy_target);
  return _impl::_impl_Optional<String_Index>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(result, _impl::$sSS5IndexV_6withinABSgAB_SS8UTF8ViewVtcfC(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(idx)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_UTF8View::getOpaquePointer(consumedParamCopy_target))));
  });
  }
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK Optional<T_0_0> Optional<T_0_0>::_impl_some::operator()(const T_0_0& val) const {
    auto result = Optional<T_0_0>::_make();
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
    void *ptr = ::swift::_impl::_impl_RefCountedClass::copyOpaquePointer(val);
    memcpy(result._getOpaquePointer(), &ptr, sizeof(ptr));
} else if constexpr (::swift::_impl::isValueType<T_0_0>) {
    alignas(T_0_0) unsigned char buffer[sizeof(T_0_0)];
    auto *valCopy = new(buffer) T_0_0(val);
    swift::_impl::implClassFor<T_0_0>::type::initializeWithTake(result._getOpaquePointer(), swift::_impl::implClassFor<T_0_0>::type::getOpaquePointer(*valCopy));
} else {
    memcpy(result._getOpaquePointer(), &val, sizeof(val));
}
#pragma clang diagnostic pop
    result._destructiveInjectEnumTag(0);
    return result;
  }
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK  bool Optional<T_0_0>::isSome() const {
    return *this == Optional<T_0_0>::some;
  }
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK T_0_0 Optional<T_0_0>::getSome() const {
    if (!isSome()) abort();
    alignas(Optional) unsigned char buffer[sizeof(Optional)];
    auto *thisCopy = new(buffer) Optional(*this);
    char * _Nonnull payloadFromDestruction = thisCopy->_destructiveProjectEnumData();
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
  if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
  void *returnValue;
  returnValue = *reinterpret_cast<void **>(payloadFromDestruction);
  return ::swift::_impl::implClassFor<T_0_0>::type::makeRetained(returnValue);
  } else if constexpr (::swift::_impl::isValueType<T_0_0>) {
  return ::swift::_impl::implClassFor<T_0_0>::type::returnNewValue([&](void * _Nonnull returnValue) SWIFT_INLINE_THUNK_ATTRIBUTES {
  return ::swift::_impl::implClassFor<T_0_0>::type::initializeWithTake(reinterpret_cast<char * _Nonnull>(returnValue), payloadFromDestruction);
  });
  } else if constexpr (::swift::_impl::isSwiftBridgedCxxRecord<T_0_0>) {
abort();
  } else {
  T_0_0 returnValue;
memcpy(&returnValue, payloadFromDestruction, sizeof(returnValue));
  return returnValue;
  }
#pragma clang diagnostic pop
}
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK Optional<T_0_0> Optional<T_0_0>::_impl_none::operator()() const {
    auto result = Optional<T_0_0>::_make();
    result._destructiveInjectEnumTag(1);
    return result;
  }
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK  bool Optional<T_0_0>::isNone() const {
    return *this == Optional<T_0_0>::none;
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK String Optional<T_0_0>::getDebugDescription() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSq16debugDescriptionSSvg(swift::TypeMetadataTrait<Optional<T_0_0>>::getTypeMetadata(), _getOpaquePointer()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK T_0_0 Optional<T_0_0>::getUnsafelyUnwrapped() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
  if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
  void *returnValue;
  _impl::$sSq17unsafelyUnwrappedxvg(reinterpret_cast<void *>(&returnValue), swift::TypeMetadataTrait<Optional<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  return ::swift::_impl::implClassFor<T_0_0>::type::makeRetained(returnValue);
  } else if constexpr (::swift::_impl::isValueType<T_0_0>) {
  return ::swift::_impl::implClassFor<T_0_0>::type::returnNewValue([&](void * _Nonnull returnValue) SWIFT_INLINE_THUNK_ATTRIBUTES {
_impl::$sSq17unsafelyUnwrappedxvg(returnValue, swift::TypeMetadataTrait<Optional<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  } else if constexpr (::swift::_impl::isSwiftBridgedCxxRecord<T_0_0>) {
alignas(alignof(T_0_0)) char storage[sizeof(T_0_0)];
auto * _Nonnull storageObjectPtr = reinterpret_cast<T_0_0 *>(storage);
_impl::$sSq17unsafelyUnwrappedxvg(storage, swift::TypeMetadataTrait<Optional<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
T_0_0 result(static_cast<T_0_0 &&>(*storageObjectPtr));
storageObjectPtr->~T_0_0();
return result;
  } else {
  T_0_0 returnValue;
_impl::$sSq17unsafelyUnwrappedxvg(reinterpret_cast<void *>(&returnValue), swift::TypeMetadataTrait<Optional<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  return returnValue;
  }
#pragma clang diagnostic pop
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Optional<T_0_0> Optional<T_0_0>::init(const T_0_0& some_) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  alignas(alignof(T_0_0)) char copyBuffer_consumedParamCopy_some[sizeof(T_0_0)];
  auto &consumedParamCopy_some = *(new(copyBuffer_consumedParamCopy_some) T_0_0(some_));
  swift::_impl::ConsumedValueStorageDestroyer<T_0_0> storageGuard_consumedParamCopy_some(consumedParamCopy_some);
  return _impl::_impl_Optional<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$sSqyxSgxcfC(result, swift::_impl::getOpaquePointer(consumedParamCopy_some), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  });
  }
  SWIFT_INLINE_THUNK String String::init() {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sS2SycfC());
  });
  }
  SWIFT_INLINE_THUNK String_Index String::getStartIndex() const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS10startIndexSS0B0Vvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String_Index String::getEndIndex() const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8endIndexSS0B0Vvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Int String::getCount() const {
  return _impl::$sSS5countSivg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK swift::Int String::distanceFromTo(const String_Index& start, const String_Index& end) const {
  return _impl::$sSS8distance4from2toSiSS5IndexV_AEtF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(start)), _impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(end)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK void String::reserveCapacity(swift::Int n) {
  _impl::$sSS15reserveCapacityyySiF(n, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void String::append(const String& other) {
  _impl::$sSS6appendyySSF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(other)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void String::appendContentsOf(const String& newElements) {
  _impl::$sSS6append10contentsOfySS_tF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(newElements)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void String::removeAllKeepingCapacity(bool keepCapacity) {
  _impl::$sSS9removeAll15keepingCapacityySb_tF(keepCapacity, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK UTF8View String::getUtf8() const {
  return _impl::_impl_UTF8View::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS4utf8SS8UTF8ViewVvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK void String::setUtf8(const UTF8View& newValue) {
  alignas(alignof(UTF8View)) char copyBuffer_consumedParamCopy_newValue[sizeof(UTF8View)];
  auto &consumedParamCopy_newValue = *(new(copyBuffer_consumedParamCopy_newValue) UTF8View(newValue));
  swift::_impl::ConsumedValueStorageDestroyer<UTF8View> storageGuard_consumedParamCopy_newValue(consumedParamCopy_newValue);
  _impl::$sSS4utf8SS8UTF8ViewVvs(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_UTF8View::getOpaquePointer(consumedParamCopy_newValue)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK String String::getCharacters() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS10charactersSSvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK void String::setCharacters(const String& newValue) {
  alignas(alignof(String)) char copyBuffer_consumedParamCopy_newValue[sizeof(String)];
  auto &consumedParamCopy_newValue = *(new(copyBuffer_consumedParamCopy_newValue) String(newValue));
  swift::_impl::ConsumedValueStorageDestroyer<String> storageGuard_consumedParamCopy_newValue(consumedParamCopy_newValue);
  _impl::$sSS10charactersSSvs(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(consumedParamCopy_newValue)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Int String::getHashValue() const {
  return _impl::$sSS9hashValueSivg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK Array<uint8_t> String::get_nfcCodeUnits() const {
  return _impl::_impl_Array<uint8_t>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_void_ptr_0_8(result, _impl::$sSS13_nfcCodeUnitsSays5UInt8VGvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String String::lowercased() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS10lowercasedSSyF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String String::uppercased() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS10uppercasedSSyF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK bool String::isEmpty() const {
  return _impl::$sSS7isEmptySbvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK String String::getDebugDescription() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS16debugDescriptionSSvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK void String::write(const String& other) {
  _impl::$sSS5writeyySSF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(other)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK String String::getDescription() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS11descriptionSSvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK bool String::hasPrefix(const String& prefix) const {
  return _impl::$sSS9hasPrefixySbSSF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(prefix)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK bool String::hasSuffix(const String& suffix) const {
  return _impl::$sSS9hasSuffixySbSSF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(suffix)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK void String::_dump() const {
  _impl::$sSS5_dumpyyF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK String_Index UTF8View::getStartIndex() const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8UTF8ViewV10startIndexSS0D0Vvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String_Index UTF8View::getEndIndex() const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8UTF8ViewV8endIndexSS0D0Vvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String_Index UTF8View::indexAfter(const String_Index& i) const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8UTF8ViewV5index5afterSS5IndexVAF_tF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String_Index UTF8View::indexBefore(const String_Index& i) const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8UTF8ViewV5index6beforeSS5IndexVAF_tF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String_Index UTF8View::indexOffsetBy(const String_Index& i, swift::Int n) const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8UTF8ViewV5index_8offsetBySS5IndexVAF_SitF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), n, _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<String_Index> UTF8View::indexOffsetByLimitedBy(const String_Index& i, swift::Int n, const String_Index& limit) const {
  return _impl::_impl_Optional<String_Index>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(result, _impl::$sSS8UTF8ViewV5index_8offsetBy07limitedE0SS5IndexVSgAG_SiAGtF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), n, _impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(limit)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Int UTF8View::distanceFromTo(const String_Index& i, const String_Index& j) const {
  return _impl::$sSS8UTF8ViewV8distance4from2toSiSS5IndexV_AGtF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), _impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(j)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
SWIFT_INLINE_THUNK uint8_t UTF8View::operator [](const String_Index& i) const SWIFT_SYMBOL("s:SS8UTF8ViewVys5UInt8VSS5IndexVcig") {
  return _impl::$sSS8UTF8ViewVys5UInt8VSS5IndexVcig(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK String UTF8View::getDebugDescription() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS8UTF8ViewV16debugDescriptionSSvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String UTF8View::getDescription() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS8UTF8ViewV11descriptionSSvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Int UTF8View::getCount() const {
  return _impl::$sSS8UTF8ViewV5countSivg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!==(_:_:)'.

// Unavailable in C++: Swift operator function '%(_:_:)'.

// Unavailable in C++: Swift operator function '%=(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '===(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '??(_:_:)'.

// Unavailable in C++: Swift operator function '??(_:_:)'.

class AdditiveArithmetic { } SWIFT_UNAVAILABLE_MSG("protocol 'AdditiveArithmetic' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'AnyClass'.

class AnyKeyPath { } SWIFT_UNAVAILABLE_MSG("class 'AnyKeyPath' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'AnyObject'.

// Unavailable in C++: Swift type alias 'ArrayLiteralConvertible'.

class BidirectionalCollection { } SWIFT_UNAVAILABLE_MSG("protocol 'BidirectionalCollection' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'BidirectionalIndexable'.

// Unavailable in C++: Swift type alias 'BidirectionalSlice'.

class BinaryFloatingPoint { } SWIFT_UNAVAILABLE_MSG("protocol 'BinaryFloatingPoint' can not yet be represented in C++");

class BinaryInteger { } SWIFT_UNAVAILABLE_MSG("protocol 'BinaryInteger' can not yet be represented in C++");

class BitwiseCopyable { } SWIFT_UNAVAILABLE_MSG("protocol 'BitwiseCopyable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'BooleanLiteralConvertible'.

// Unavailable in C++: Swift type alias 'BooleanLiteralType'.

// Unavailable in C++: Swift type alias 'CBool'.

// Unavailable in C++: Swift type alias 'CChar'.

// Unavailable in C++: Swift type alias 'CChar16'.

// Unavailable in C++: Swift type alias 'CChar32'.

// Unavailable in C++: Swift type alias 'CDouble'.

// Unavailable in C++: Swift type alias 'CFloat'.

// Unavailable in C++: Swift type alias 'CFloat16'.

// Unavailable in C++: Swift type alias 'CInt'.

// Unavailable in C++: Swift type alias 'CLong'.

// Unavailable in C++: Swift type alias 'CLongDouble'.

// Unavailable in C++: Swift type alias 'CLongLong'.

// Unavailable in C++: Swift type alias 'CShort'.

// Unavailable in C++: Swift type alias 'CSignedChar'.

// Unavailable in C++: Swift type alias 'CUnsignedChar'.

// Unavailable in C++: Swift type alias 'CUnsignedInt'.

// Unavailable in C++: Swift type alias 'CUnsignedLong'.

// Unavailable in C++: Swift type alias 'CUnsignedLongLong'.

// Unavailable in C++: Swift type alias 'CUnsignedShort'.

class CVarArg { } SWIFT_UNAVAILABLE_MSG("protocol 'CVarArg' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'CWideChar'.

class CaseIterable { } SWIFT_UNAVAILABLE_MSG("protocol 'CaseIterable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'ClosedRangeIndex'.

// Unavailable in C++: Swift type alias 'Codable'.

class CodingKey { } SWIFT_UNAVAILABLE_MSG("protocol 'CodingKey' can not yet be represented in C++");

class CodingKeyRepresentable { } SWIFT_UNAVAILABLE_MSG("protocol 'CodingKeyRepresentable' can not yet be represented in C++");

class Collection { } SWIFT_UNAVAILABLE_MSG("protocol 'Collection' can not yet be represented in C++");

class CommandLine { } SWIFT_UNAVAILABLE_MSG("enum 'CommandLine' is not yet exposed to C++");

class Comparable { } SWIFT_UNAVAILABLE_MSG("protocol 'Comparable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'ConcurrentValue'.

class Copyable { } SWIFT_UNAVAILABLE_MSG("protocol 'Copyable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'CountableClosedRange'.

// Unavailable in C++: Swift type alias 'CountablePartialRangeFrom'.

// Unavailable in C++: Swift type alias 'CountableRange'.

class CustomDebugStringConvertible { } SWIFT_UNAVAILABLE_MSG("protocol 'CustomDebugStringConvertible' can not yet be represented in C++");

class CustomLeafReflectable { } SWIFT_UNAVAILABLE_MSG("protocol 'CustomLeafReflectable' can not yet be represented in C++");

class CustomPlaygroundDisplayConvertible { } SWIFT_UNAVAILABLE_MSG("protocol 'CustomPlaygroundDisplayConvertible' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'CustomPlaygroundQuickLookable'.

class CustomReflectable { } SWIFT_UNAVAILABLE_MSG("protocol 'CustomReflectable' can not yet be represented in C++");

class CustomStringConvertible { } SWIFT_UNAVAILABLE_MSG("protocol 'CustomStringConvertible' can not yet be represented in C++");

// Unavailable in C++: Swift macro 'DebugDescription()'.

class Decodable { } SWIFT_UNAVAILABLE_MSG("protocol 'Decodable' can not yet be represented in C++");

class Decoder { } SWIFT_UNAVAILABLE_MSG("protocol 'Decoder' can not yet be represented in C++");

class DecodingError { } SWIFT_UNAVAILABLE_MSG("enum 'DecodingError' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'DefaultBidirectionalIndices'.

// Unavailable in C++: Swift type alias 'DefaultRandomAccessIndices'.

// Unavailable in C++: Swift type alias 'DictionaryIndex'.

// Unavailable in C++: Swift type alias 'DictionaryIterator'.

// Unavailable in C++: Swift type alias 'DictionaryLiteral'.

// Unavailable in C++: Swift type alias 'DictionaryLiteralConvertible'.

class DurationProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'DurationProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'EmptyIterator'.

class Encodable { } SWIFT_UNAVAILABLE_MSG("protocol 'Encodable' can not yet be represented in C++");

class Encoder { } SWIFT_UNAVAILABLE_MSG("protocol 'Encoder' can not yet be represented in C++");

class EncodingError { } SWIFT_UNAVAILABLE_MSG("enum 'EncodingError' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'EnumeratedIterator'.

class Equatable { } SWIFT_UNAVAILABLE_MSG("protocol 'Equatable' can not yet be represented in C++");

class Escapable { } SWIFT_UNAVAILABLE_MSG("protocol 'Escapable' can not yet be represented in C++");

class ExpressibleByArrayLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByArrayLiteral' can not yet be represented in C++");

class ExpressibleByBooleanLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByBooleanLiteral' can not yet be represented in C++");

class ExpressibleByDictionaryLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByDictionaryLiteral' can not yet be represented in C++");

class ExpressibleByExtendedGraphemeClusterLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByExtendedGraphemeClusterLiteral' can not yet be represented in C++");

class ExpressibleByFloatLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByFloatLiteral' can not yet be represented in C++");

class ExpressibleByIntegerLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByIntegerLiteral' can not yet be represented in C++");

class ExpressibleByNilLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByNilLiteral' can not yet be represented in C++");

class ExpressibleByStringInterpolation { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByStringInterpolation' can not yet be represented in C++");

class ExpressibleByStringLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByStringLiteral' can not yet be represented in C++");

class ExpressibleByUnicodeScalarLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByUnicodeScalarLiteral' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'ExtendedGraphemeClusterLiteralConvertible'.

// Unavailable in C++: Swift type alias 'ExtendedGraphemeClusterType'.

class FixedWidthInteger { } SWIFT_UNAVAILABLE_MSG("protocol 'FixedWidthInteger' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'FlattenBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'FlattenBidirectionalCollectionIndex'.

// Unavailable in C++: Swift type alias 'FlattenCollection'.

// Unavailable in C++: Swift type alias 'FlattenCollectionIndex'.

// Unavailable in C++: Swift type alias 'Float32'.

// Unavailable in C++: Swift type alias 'Float64'.

// Unavailable in C++: Swift type alias 'FloatLiteralConvertible'.

// Unavailable in C++: Swift type alias 'FloatLiteralType'.

class FloatingPoint { } SWIFT_UNAVAILABLE_MSG("protocol 'FloatingPoint' can not yet be represented in C++");

class FloatingPointClassification { } SWIFT_UNAVAILABLE_MSG("enum 'FloatingPointClassification' is not yet exposed to C++");

class FloatingPointRoundingRule { } SWIFT_UNAVAILABLE_MSG("enum 'FloatingPointRoundingRule' is not yet exposed to C++");

class FloatingPointSign { } SWIFT_UNAVAILABLE_MSG("enum 'FloatingPointSign' is not yet exposed to C++");

class Hashable { } SWIFT_UNAVAILABLE_MSG("protocol 'Hashable' can not yet be represented in C++");

class Identifiable { } SWIFT_UNAVAILABLE_MSG("protocol 'Identifiable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'ImplicitlyUnwrappedOptional'.

// Unavailable in C++: Swift type alias 'Indexable'.

// Unavailable in C++: Swift type alias 'IndexableBase'.

class InstantProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'InstantProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'IntegerLiteralConvertible'.

// Unavailable in C++: Swift type alias 'IntegerLiteralType'.

// Unavailable in C++: Swift type alias 'IteratorOverOne'.

class IteratorProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'IteratorProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'JoinedIterator'.

class KeyPath { } SWIFT_UNAVAILABLE_MSG("generic generic class 'KeyPath' can not yet be exposed to C++");

class KeyedDecodingContainerProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'KeyedDecodingContainerProtocol' can not yet be represented in C++");

class KeyedEncodingContainerProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'KeyedEncodingContainerProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'LazyBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'LazyCollection'.

class LazyCollectionProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'LazyCollectionProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'LazyDropWhileBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'LazyDropWhileCollection'.

// Unavailable in C++: Swift type alias 'LazyDropWhileIndex'.

// Unavailable in C++: Swift type alias 'LazyDropWhileIterator'.

// Unavailable in C++: Swift type alias 'LazyFilterBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'LazyFilterCollection'.

// Unavailable in C++: Swift type alias 'LazyFilterIndex'.

// Unavailable in C++: Swift type alias 'LazyFilterIterator'.

// Unavailable in C++: Swift type alias 'LazyMapBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'LazyMapCollection'.

// Unavailable in C++: Swift type alias 'LazyMapIterator'.

// Unavailable in C++: Swift type alias 'LazyMapRandomAccessCollection'.

// Unavailable in C++: Swift type alias 'LazyPrefixWhileBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'LazyPrefixWhileCollection'.

// Unavailable in C++: Swift type alias 'LazyPrefixWhileIndex'.

// Unavailable in C++: Swift type alias 'LazyPrefixWhileIterator'.

// Unavailable in C++: Swift type alias 'LazyRandomAccessCollection'.

class LazySequenceProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'LazySequenceProtocol' can not yet be represented in C++");

class LosslessStringConvertible { } SWIFT_UNAVAILABLE_MSG("protocol 'LosslessStringConvertible' can not yet be represented in C++");

class ManagedBuffer { } SWIFT_UNAVAILABLE_MSG("generic generic class 'ManagedBuffer' can not yet be exposed to C++");

class MemoryLayout { } SWIFT_UNAVAILABLE_MSG("generic enum 'MemoryLayout' is not yet exposed to C++");

class MirrorPath { } SWIFT_UNAVAILABLE_MSG("protocol 'MirrorPath' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'MutableBidirectionalSlice'.

class MutableCollection { } SWIFT_UNAVAILABLE_MSG("protocol 'MutableCollection' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'MutableIndexable'.

// Unavailable in C++: Swift type alias 'MutableRandomAccessSlice'.

// Unavailable in C++: Swift type alias 'MutableRangeReplaceableBidirectionalSlice'.

// Unavailable in C++: Swift type alias 'MutableRangeReplaceableRandomAccessSlice'.

// Unavailable in C++: Swift type alias 'MutableRangeReplaceableSlice'.

// Unavailable in C++: Swift type alias 'MutableSlice'.

class Never { } SWIFT_UNAVAILABLE_MSG("enum 'Never' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'NilLiteralConvertible'.

class Numeric { } SWIFT_UNAVAILABLE_MSG("protocol 'Numeric' can not yet be represented in C++");

class OptionSet { } SWIFT_UNAVAILABLE_MSG("protocol 'OptionSet' can not yet be represented in C++");

class PartialKeyPath { } SWIFT_UNAVAILABLE_MSG("generic generic class 'PartialKeyPath' can not yet be exposed to C++");

// Unavailable in C++: Swift type alias 'PlaygroundQuickLook'.

class RandomAccessCollection { } SWIFT_UNAVAILABLE_MSG("protocol 'RandomAccessCollection' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'RandomAccessIndexable'.

// Unavailable in C++: Swift type alias 'RandomAccessSlice'.

class RandomNumberGenerator { } SWIFT_UNAVAILABLE_MSG("protocol 'RandomNumberGenerator' can not yet be represented in C++");

class RangeExpression { } SWIFT_UNAVAILABLE_MSG("protocol 'RangeExpression' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'RangeReplaceableBidirectionalSlice'.

class RangeReplaceableCollection { } SWIFT_UNAVAILABLE_MSG("protocol 'RangeReplaceableCollection' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'RangeReplaceableIndexable'.

// Unavailable in C++: Swift type alias 'RangeReplaceableRandomAccessSlice'.

// Unavailable in C++: Swift type alias 'RangeReplaceableSlice'.

class RawRepresentable { } SWIFT_UNAVAILABLE_MSG("protocol 'RawRepresentable' can not yet be represented in C++");

class ReferenceWritableKeyPath { } SWIFT_UNAVAILABLE_MSG("generic generic class 'ReferenceWritableKeyPath' can not yet be exposed to C++");

class Result { } SWIFT_UNAVAILABLE_MSG("generic requirements for generic enum 'Result' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'ReversedIndex'.

// Unavailable in C++: Swift type alias 'ReversedRandomAccessCollection'.

class SIMD { } SWIFT_UNAVAILABLE_MSG("protocol 'SIMD' can not yet be represented in C++");

class SIMDScalar { } SWIFT_UNAVAILABLE_MSG("protocol 'SIMDScalar' can not yet be represented in C++");

class SIMDStorage { } SWIFT_UNAVAILABLE_MSG("protocol 'SIMDStorage' can not yet be represented in C++");

class Sendable { } SWIFT_UNAVAILABLE_MSG("protocol 'Sendable' can not yet be represented in C++");

class Sequence { } SWIFT_UNAVAILABLE_MSG("protocol 'Sequence' can not yet be represented in C++");

class SetAlgebra { } SWIFT_UNAVAILABLE_MSG("protocol 'SetAlgebra' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'SetIndex'.

// Unavailable in C++: Swift type alias 'SetIterator'.

class SignedInteger { } SWIFT_UNAVAILABLE_MSG("protocol 'SignedInteger' can not yet be represented in C++");

class SignedNumeric { } SWIFT_UNAVAILABLE_MSG("protocol 'SignedNumeric' can not yet be represented in C++");

class SingleValueDecodingContainer { } SWIFT_UNAVAILABLE_MSG("protocol 'SingleValueDecodingContainer' can not yet be represented in C++");

class SingleValueEncodingContainer { } SWIFT_UNAVAILABLE_MSG("protocol 'SingleValueEncodingContainer' can not yet be represented in C++");

class Strideable { } SWIFT_UNAVAILABLE_MSG("protocol 'Strideable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'StringInterpolationConvertible'.

class StringInterpolationProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'StringInterpolationProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'StringLiteralConvertible'.

// Unavailable in C++: Swift type alias 'StringLiteralType'.

class StringProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'StringProtocol' can not yet be represented in C++");

class TextOutputStream { } SWIFT_UNAVAILABLE_MSG("protocol 'TextOutputStream' can not yet be represented in C++");

class TextOutputStreamable { } SWIFT_UNAVAILABLE_MSG("protocol 'TextOutputStreamable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'UTF16'.

// Unavailable in C++: Swift type alias 'UTF32'.

// Unavailable in C++: Swift type alias 'UTF8'.

// Unavailable in C++: Swift type alias 'UnboundedRange'.

class UnboundedRange_ { } SWIFT_UNAVAILABLE_MSG("enum 'UnboundedRange_' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'UnfoldFirstSequence'.

class Unicode { } SWIFT_UNAVAILABLE_MSG("enum 'Unicode' is not yet exposed to C++");

class UnicodeCodec { } SWIFT_UNAVAILABLE_MSG("protocol 'UnicodeCodec' can not yet be represented in C++");

class UnicodeDecodingResult { } SWIFT_UNAVAILABLE_MSG("enum 'UnicodeDecodingResult' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'UnicodeScalar'.

// Unavailable in C++: Swift type alias 'UnicodeScalarLiteralConvertible'.

// Unavailable in C++: Swift type alias 'UnicodeScalarType'.

class UnkeyedDecodingContainer { } SWIFT_UNAVAILABLE_MSG("protocol 'UnkeyedDecodingContainer' can not yet be represented in C++");

class UnkeyedEncodingContainer { } SWIFT_UNAVAILABLE_MSG("protocol 'UnkeyedEncodingContainer' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'UnsafeBufferPointerIterator'.

// Unavailable in C++: Swift type alias 'UnsafeConcurrentValue'.

// Unavailable in C++: Swift type alias 'UnsafeMutableRawBufferPointerIterator'.

// Unavailable in C++: Swift type alias 'UnsafeRawBufferPointerIterator'.

class UnsafeSendable { } SWIFT_UNAVAILABLE_MSG("protocol 'UnsafeSendable' can not yet be represented in C++");

class UnsignedInteger { } SWIFT_UNAVAILABLE_MSG("protocol 'UnsignedInteger' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'Void'.

class WritableKeyPath { } SWIFT_UNAVAILABLE_MSG("generic generic class 'WritableKeyPath' can not yet be exposed to C++");

// Unavailable in C++: Swift type alias 'Zip2Iterator'.

// Unavailable in C++: Swift global function 'abs(_:)'.

// Unavailable in C++: Swift global function 'all(_:)'.

// Unavailable in C++: Swift global function 'any(_:)'.

// Unavailable in C++: Swift global function 'assert(_:_:file:line:)'.

// Unavailable in C++: Swift global function 'assertionFailure(_:file:line:)'.

// Unavailable in C++: Swift macro 'column()'.

// Unavailable in C++: Swift global function 'debugPrint(_:separator:terminator:)'.

// Unavailable in C++: Swift global function 'debugPrint(_:separator:terminator:to:)'.

// Unavailable in C++: Swift macro 'dsohandle()'.

// Unavailable in C++: Swift global function 'dump(_:name:indent:maxDepth:maxItems:)'.

// Unavailable in C++: Swift global function 'dump(_:to:name:indent:maxDepth:maxItems:)'.

// Unavailable in C++: Swift macro 'error(_:)'.

// Unavailable in C++: Swift global function 'exchange(_:with:)'.

// Unavailable in C++: Swift macro 'externalMacro(module:type:)'.

// Unavailable in C++: Swift global function 'fatalError(_:file:line:)'.

// Unavailable in C++: Swift macro 'file()'.

// Unavailable in C++: Swift macro 'fileID()'.

// Unavailable in C++: Swift macro 'filePath()'.

// Unavailable in C++: Swift macro 'function()'.

// Unavailable in C++: Swift global function 'getVaList(_:)'.

// Unavailable in C++: Swift global function 'isKnownUniquelyReferenced(_:)'.

// Unavailable in C++: Swift global function 'isKnownUniquelyReferenced(_:)'.

// Unavailable in C++: Swift macro 'line()'.

// Unavailable in C++: Swift global function 'max(_:_:)'.

// Unavailable in C++: Swift global function 'max(_:_:_:_:)'.

// Unavailable in C++: Swift global function 'min(_:_:)'.

// Unavailable in C++: Swift global function 'min(_:_:_:_:)'.

// Unavailable in C++: Swift global function 'numericCast(_:)'.

// Unavailable in C++: Swift global function 'pointwiseMax(_:_:)'.

// Unavailable in C++: Swift global function 'pointwiseMax(_:_:)'.

// Unavailable in C++: Swift global function 'pointwiseMin(_:_:)'.

// Unavailable in C++: Swift global function 'pointwiseMin(_:_:)'.

// Unavailable in C++: Swift global function 'precondition(_:_:file:line:)'.

// Unavailable in C++: Swift global function 'preconditionFailure(_:file:line:)'.

// Unavailable in C++: Swift global function 'print(_:separator:terminator:)'.

// Unavailable in C++: Swift global function 'print(_:separator:terminator:to:)'.

// Unavailable in C++: Swift global function 'readLine(strippingNewline:)'.

// Unavailable in C++: Swift global function 'repeatElement(_:count:)'.

// Unavailable in C++: Swift global function 'sequence(first:next:)'.

// Unavailable in C++: Swift global function 'sequence(state:next:)'.

// Unavailable in C++: Swift global function 'stride(from:through:by:)'.

// Unavailable in C++: Swift global function 'stride(from:to:by:)'.

// Unavailable in C++: Swift global function 'swap(_:_:)'.

// Unavailable in C++: Swift global function 'transcode(_:_:_:_:stopOnError:)'.

// Unavailable in C++: Swift global function 'transcode(_:from:to:stoppingOnError:into:)'.

// Unavailable in C++: Swift global function 'type(of:)'.

// Unavailable in C++: Swift global function 'unsafeBitCast(_:to:)'.

// Unavailable in C++: Swift global function 'unsafeDowncast(_:to:)'.

// Unavailable in C++: Swift macro 'warning(_:)'.

// Unavailable in C++: Swift global function 'withExtendedLifetime(_:_:)'.

// Unavailable in C++: Swift global function 'withExtendedLifetime(_:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeBytes(of:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeBytes(of:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeMutableBytes(of:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeMutablePointer(to:_:)'.

// Unavailable in C++: Swift global function 'withUnsafePointer(to:_:)'.

// Unavailable in C++: Swift global function 'withUnsafePointer(to:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeTemporaryAllocation(byteCount:alignment:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeTemporaryAllocation(of:capacity:_:)'.

// Unavailable in C++: Swift global function 'withVaList(_:_:)'.

// Unavailable in C++: Swift global function 'withoutActuallyEscaping(_:do:)'.

// Unavailable in C++: Swift global function 'zip(_:_:)'.

// Unavailable in C++: Swift operator function '~=(_:_:)'.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
// Allow user to find the header using additional include paths
#if __has_include(<swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <swiftToCxx/_SwiftStdlibCxxOverlay.h>
// Look for the C++ interop support header relative to clang's resource dir:
//  '<toolchain>/usr/lib/clang/<version>/include/../../../swift/swiftToCxx'.
#elif __has_include(<../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
#elif __has_include(<../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
//  '<toolchain>/usr/local/lib/clang/<version>/include/../../../../../lib/swift/swiftToCxx'.
#include <../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
#endif
#pragma clang diagnostic pop

} // namespace swift

#pragma clang diagnostic pop
#undef SWIFT_SYMBOL
#endif // SWIFT_SWIFT_H
#ifdef SWIFT_SYMBOL
#undef SWIFT_SYMBOL
#endif
#define SWIFT_SYMBOL(usrValue) SWIFT_SYMBOL_MODULE_USR("BlinkID", usrValue)
#ifndef SWIFT_PRINTED_CORE
#define SWIFT_PRINTED_CORE
namespace swift SWIFT_PRIVATE_ATTR {

namespace _impl {

#ifdef __cplusplus
extern "C" {
#endif

// Swift type metadata response type.
struct MetadataResponseTy {
  void * _Null_unspecified _0;
  uint64_t _1;
};
// Swift type metadata request type.
typedef uint64_t MetadataRequestTy;

#if __cplusplus > 201402L
#  define SWIFT_NOEXCEPT_FUNCTION_PTR noexcept
#else
#  define SWIFT_NOEXCEPT_FUNCTION_PTR
#endif

using ValueWitnessInitializeBufferWithCopyOfBufferTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(55882))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessDestroyTy = void(* __ptrauth_swift_value_witness_function_pointer(1272))(void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessInitializeWithCopyTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(58298))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessAssignWithCopyTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(34641))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessInitializeWithTakeTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(18648))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessAssignWithTakeTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(61402))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessGetEnumTagSinglePayloadTy = unsigned(* __ptrauth_swift_value_witness_function_pointer(24816))(const void * _Nonnull, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessStoreEnumTagSinglePayloadTy = void(* __ptrauth_swift_value_witness_function_pointer(41169))(void * _Nonnull, unsigned, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;

struct ValueWitnessTable {
  ValueWitnessInitializeBufferWithCopyOfBufferTy _Nonnull initializeBufferWithCopyOfBuffer;
  ValueWitnessDestroyTy _Nonnull destroy;
  ValueWitnessInitializeWithCopyTy _Nonnull initializeWithCopy;
  ValueWitnessAssignWithCopyTy _Nonnull assignWithCopy;
  ValueWitnessInitializeWithTakeTy _Nonnull initializeWithTake;
  ValueWitnessAssignWithTakeTy _Nonnull assignWithTake;
  ValueWitnessGetEnumTagSinglePayloadTy _Nonnull getEnumTagSinglePayload;
  ValueWitnessStoreEnumTagSinglePayloadTy _Nonnull storeEnumTagSinglePayload;
  size_t size;
  size_t stride;
  unsigned flags;
  unsigned extraInhabitantCount;

  constexpr size_t getAlignment() const { return (flags & 255) + 1; }
};

using EnumValueWitnessGetEnumTagTy = unsigned(* __ptrauth_swift_value_witness_function_pointer(41909))(const void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using EnumValueWitnessDestructiveProjectEnumDataTy = void(* __ptrauth_swift_value_witness_function_pointer(1053))(void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using EnumValueWitnessDestructiveInjectEnumTagTy = void(* __ptrauth_swift_value_witness_function_pointer(45796))(void * _Nonnull, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;

struct EnumValueWitnessTable {
  ValueWitnessTable vwTable;
  EnumValueWitnessGetEnumTagTy _Nonnull getEnumTag;
  EnumValueWitnessDestructiveProjectEnumDataTy _Nonnull destructiveProjectEnumData;
  EnumValueWitnessDestructiveInjectEnumTagTy _Nonnull destructiveInjectEnumTag;
};

#undef SWIFT_NOEXCEPT_FUNCTION_PTR


// type metadata address for Bool.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSbN;
// type metadata address for Int8.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss4Int8VN;
// type metadata address for UInt8.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5UInt8VN;
// type metadata address for Int16.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int16VN;
// type metadata address for UInt16.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt16VN;
// type metadata address for Int32.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int32VN;
// type metadata address for UInt32.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt32VN;
// type metadata address for Int64.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int64VN;
// type metadata address for UInt64.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt64VN;
// type metadata address for Float.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSfN;
// type metadata address for Double.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSdN;
// type metadata address for OpaquePointer.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss13OpaquePointerVN;
// type metadata address for Int.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSiN;
// type metadata address for UInt.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSuN;

#ifdef __cplusplus
}
#endif


} // namespace _impl


#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<bool> = true;

template<>
struct TypeMetadataTrait<bool> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSbN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int8_t> = true;

template<>
struct TypeMetadataTrait<int8_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss4Int8VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint8_t> = true;

template<>
struct TypeMetadataTrait<uint8_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5UInt8VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int16_t> = true;

template<>
struct TypeMetadataTrait<int16_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int16VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint16_t> = true;

template<>
struct TypeMetadataTrait<uint16_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt16VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int32_t> = true;

template<>
struct TypeMetadataTrait<int32_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int32VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint32_t> = true;

template<>
struct TypeMetadataTrait<uint32_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt32VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int64_t> = true;

template<>
struct TypeMetadataTrait<int64_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int64VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint64_t> = true;

template<>
struct TypeMetadataTrait<uint64_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt64VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<float> = true;

template<>
struct TypeMetadataTrait<float> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSfN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<double> = true;

template<>
struct TypeMetadataTrait<double> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSdN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<void *> = true;

template<>
struct TypeMetadataTrait<void *> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss13OpaquePointerVN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<swift::Int> = true;

template<>
struct TypeMetadataTrait<swift::Int> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSiN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<swift::UInt> = true;

template<>
struct TypeMetadataTrait<swift::UInt> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSuN;
  }
};

#pragma clang diagnostic pop

} // namespace swift

#endif
#endif
#ifdef __cplusplus
namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {
extern "C" {
#endif

// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_BlinkID_uint64_t_0_8_uint64_t_8_16 {
  uint64_t _1;
  uint64_t _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_BlinkID_uint64_t_0_8_uint64_t_8_16(char * _Nonnull result, struct swift_interop_returnStub_BlinkID_uint64_t_0_8_uint64_t_8_16 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_uint64_t_8_16 $s7BlinkID19AddressDetailedInfoV6streetSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_uint64_t_8_16 $s7BlinkID19AddressDetailedInfoV10postalCodeSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_uint64_t_8_16 $s7BlinkID19AddressDetailedInfoV4citySSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_uint64_t_8_16 $s7BlinkID19AddressDetailedInfoV12jurisdictionSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_BlinkID_uint64_t_0_8_void_ptr_8_16 {
  uint64_t _1;
  void * _Nullable _2;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_BlinkID_uint64_t_0_8_void_ptr_8_16 swift_interop_passDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(const char * _Nonnull value) {
  struct swift_interop_passStub_BlinkID_uint64_t_0_8_void_ptr_8_16 result;
  memcpy(&result._1, value + 0, 8);
  memcpy(&result._2, value + 8, 8);
  return result;
}

SWIFT_EXTERN void $s7BlinkID12AlphabetTypeO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkID_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 {
  uint64_t _1;
  void * _Nullable _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(char * _Nonnull result, struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID12AlphabetTypeO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID17AnonymizationModeO2idSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID17AnonymizationModeO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkID_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID17AnonymizationModeO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID11BarcodeDataV06stringD0SSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID11BarcodeDataV11barcodeTypeAA0cF0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID11BarcodeDataV9uncertainSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s7BlinkID17BarcodeElementKeyO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID15BarcodeElementsV8getValue3forSSAA0C10ElementKeyO_tF(const void * _Nonnull barcodeElementKey, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getValue(for:)
SWIFT_EXTERN void $s7BlinkID13BarcodeResultV11barcodeDataAA0cF0Vvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID13BarcodeResultV9firstNameSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID13BarcodeResultV10middleNameSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID13BarcodeResultV8lastNameSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID13BarcodeResultV8fullNameSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID13BarcodeResultV25additionalNameInformationSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID13BarcodeResultV7addressSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID13BarcodeResultV12placeOfBirthSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID13BarcodeResultV11nationalitySSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID13BarcodeResultV4raceSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID13BarcodeResultV8religionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID13BarcodeResultV10professionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID13BarcodeResultV13maritalStatusSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID13BarcodeResultV17residentialStatusSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID13BarcodeResultV8employerSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID13BarcodeResultV3sexSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID13BarcodeResultV11dateOfBirthAA04DateD0VySSGvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID13BarcodeResultV11dateOfIssueAA04DateD0VySSGvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID13BarcodeResultV12dateOfExpiryAA04DateD0VySSGvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID13BarcodeResultV14documentNumberSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID13BarcodeResultV16personalIdNumberSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID13BarcodeResultV24documentAdditionalNumberSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID13BarcodeResultV16issuingAuthoritySSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID13BarcodeResultV19addressDetailedInfoAA07AddressfG0Vvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID13BarcodeResultV25driverLicenseDetailedInfoAA06DriverfgH0VySSGvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID13BarcodeResultV16extendedElementsAA0cF0Vvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s7BlinkID11BarcodeTypeO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID0A16IDScanningResultV15recognitionModeAA011RecognitionF0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID0A16IDScanningResultV09dataMatchD0AA04DatafD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_BlinkID_uint8_t_0_1 {
  uint8_t _1;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_BlinkID_uint8_t_0_1(char * _Nonnull result, struct swift_interop_returnStub_BlinkID_uint8_t_0_1 value) {
  memcpy(result + 0, &value._1, 1);
}

SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint8_t_0_1 $s7BlinkID0A16IDScanningResultV21dateOfExpiryPermanentSbSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_BlinkID_uint64_t_0_8 {
  uint64_t _1;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_BlinkID_uint64_t_0_8(char * _Nonnull result, struct swift_interop_returnStub_BlinkID_uint64_t_0_8 value) {
  memcpy(result + 0, &value._1, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8 $s7BlinkID0A16IDScanningResultV14dependentsInfoSayAA09DependentF0VGSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_BlinkID_void_ptr_0_8 {
  void * _Nullable _1;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_BlinkID_void_ptr_0_8(char * _Nonnull result, struct swift_interop_returnStub_BlinkID_void_ptr_0_8 value) {
  memcpy(result + 0, &value._1, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_void_ptr_0_8 $s7BlinkID0A16IDScanningResultV10subResultsSayAA018SingleSideScanningD0VGvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID0A16IDScanningResultV13getInputImage12scanningSideAA0fgD0VSgAA08ScanningI0O_tF(SWIFT_INDIRECT_RESULT void * _Nonnull, const void * _Nonnull scanningSide, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getInputImage(scanningSide:)
SWIFT_EXTERN void $s7BlinkID0A16IDScanningResultV20getBarcodeInputImageAA0ghD0VSgyF(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getBarcodeInputImage()
SWIFT_EXTERN void $s7BlinkID0A16IDScanningResultV16getDocumentImage12scanningSideAA07CroppedgD0VSgAA08ScanningI0O_tF(SWIFT_INDIRECT_RESULT void * _Nonnull, const void * _Nonnull scanningSide, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getDocumentImage(scanningSide:)
SWIFT_EXTERN void $s7BlinkID0A16IDScanningResultV12getFaceImageAA015DetailedCroppedgD0VSgyF(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getFaceImage()
SWIFT_EXTERN void $s7BlinkID0A16IDScanningResultV17getSignatureImageAA015DetailedCroppedgD0VSgyF(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getSignatureImage()
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID0A13IDSdkSettingsV10licenseKeySSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID0A13IDSdkSettingsV10licenseKeySSvs(struct swift_interop_passStub_BlinkID_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_uint64_t_8_16 $s7BlinkID0A13IDSdkSettingsV8licenseeSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_BlinkID_uint64_t_0_8_uint64_t_8_16 {
  uint64_t _1;
  uint64_t _2;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_BlinkID_uint64_t_0_8_uint64_t_8_16 swift_interop_passDirect_BlinkID_uint64_t_0_8_uint64_t_8_16(const char * _Nonnull value) {
  struct swift_interop_passStub_BlinkID_uint64_t_0_8_uint64_t_8_16 result;
  memcpy(&result._1, value + 0, 8);
  memcpy(&result._2, value + 8, 8);
  return result;
}

SWIFT_EXTERN void $s7BlinkID0A13IDSdkSettingsV8licenseeSSSgvs(struct swift_interop_passStub_BlinkID_uint64_t_0_8_uint64_t_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID0A13IDSdkSettingsV15helloLogEnabledSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID0A13IDSdkSettingsV15helloLogEnabledSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID0A13IDSdkSettingsV17downloadResourcesSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID0A13IDSdkSettingsV17downloadResourcesSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID0A13IDSdkSettingsV19resourceDownloadUrlSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID0A13IDSdkSettingsV19resourceDownloadUrlSSvs(struct swift_interop_passStub_BlinkID_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID0A13IDSdkSettingsV19resourceLocalFolderSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID0A13IDSdkSettingsV19resourceLocalFolderSSvs(struct swift_interop_passStub_BlinkID_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID0A13IDSdkSettingsV22resourceRequestTimeoutAA0fG0Vvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID0A13IDSdkSettingsV22resourceRequestTimeoutAA0fG0Vvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID0A9IDSessionC22cancelActiveProcessingyyF(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // cancelActiveProcessing()
SWIFT_EXTERN void $s7BlinkID0A9IDSessionC22resumeActiveProcessingyyF(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // resumeActiveProcessing()
SWIFT_EXTERN void $s7BlinkID0A17IDSessionSettingsV16inputImageSourceAA05InputfG0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID0A17IDSessionSettingsV16inputImageSourceAA05InputfG0Ovs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID0A17IDSessionSettingsV12scanningModeAA08ScanningF0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID0A17IDSessionSettingsV12scanningModeAA08ScanningF0Ovs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID0A17IDSessionSettingsV08scanningD0AA08ScanningD0Vvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID0A17IDSessionSettingsV08scanningD0AA08ScanningD0Vvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN double $s7BlinkID0A17IDSessionSettingsV19stepTimeoutDurationSdvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID0A17IDSessionSettingsV19stepTimeoutDurationSdvs(double value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID0A17IDSessionSettingsV16inputImageSource12scanningMode0hD019stepTimeoutDurationAcA05InputfG0O_AA08ScanningI0OAA0nD0VSdtcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, const void * _Nonnull inputImageSource, const void * _Nonnull scanningMode, const void * _Nonnull scanningSettings, double stepTimeoutDuration) SWIFT_NOEXCEPT SWIFT_CALL; // init(inputImageSource:scanningMode:scanningSettings:stepTimeoutDuration:)
SWIFT_EXTERN MBSampleBufferWrapper *_Nonnull $s7BlinkID11CameraFrameV6bufferSo21MBSampleBufferWrapperCvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID11CameraFrameV3roiAA16RegionOfInterestVvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID11CameraFrameV11orientationAA0cD16VideoOrientationOvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID11CameraFrameV6buffer3roi11orientationACSo21MBSampleBufferWrapperC_AA16RegionOfInterestVAA0cD16VideoOrientationOtcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, MBSampleBufferWrapper *_Nonnull buffer, const void * _Nonnull roi, const void * _Nonnull orientation) SWIFT_NOEXCEPT SWIFT_CALL; // init(buffer:roi:orientation:)
SWIFT_EXTERN ptrdiff_t $s7BlinkID11CameraFrameV5widthSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s7BlinkID11CameraFrameV6heightSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s7BlinkID27CameraFrameVideoOrientationO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID7CountryO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkID_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID7CountryO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN UIImage *_Nullable $s7BlinkID18CroppedImageResultV02uiD0So7UIImageCSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s7BlinkID20CroppedImageSettingsV11dotsPerInchSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID20CroppedImageSettingsV11dotsPerInchSivs(ptrdiff_t value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN float $s7BlinkID20CroppedImageSettingsV15extensionFactorSfvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID20CroppedImageSettingsV15extensionFactorSfvs(float value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID20CroppedImageSettingsV014returnDocumentD0Sbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID20CroppedImageSettingsV014returnDocumentD0Sbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID20CroppedImageSettingsV010returnFaceD0Sbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID20CroppedImageSettingsV010returnFaceD0Sbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID20CroppedImageSettingsV015returnSignatureD0Sbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID20CroppedImageSettingsV015returnSignatureD0Sbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID20CroppedImageSettingsV11dotsPerInch15extensionFactor014returnDocumentD00k4FaceD00k9SignatureD0ACSi_SfS3btcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, ptrdiff_t dotsPerInch, float extensionFactor, bool returnDocumentImage, bool returnFaceImage, bool returnSignatureImage) SWIFT_NOEXCEPT SWIFT_CALL; // init(dotsPerInch:extensionFactor:returnDocumentImage:returnFaceImage:returnSignatureImage:)
SWIFT_EXTERN ptrdiff_t $s7BlinkID18DataMatchFieldTypeO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_void_ptr_0_8 $s7BlinkID15DataMatchResultV6statesSayAA10FieldStateVGvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID15DataMatchResultV12overallStateAA0cdG0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID15DataMatchResultV8getState3forAA0cdG0OAA0cD9FieldTypeO_tF(SWIFT_INDIRECT_RESULT void * _Nonnull, const void * _Nonnull fieldType, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getState(for:)
SWIFT_EXTERN ptrdiff_t $s7BlinkID14DataMatchStateO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_BlinkID_uint64_t_0_8_uint8_t_8_9 {
  uint64_t _1;
  uint8_t _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_BlinkID_uint64_t_0_8_uint8_t_8_9(char * _Nonnull result, struct swift_interop_returnStub_BlinkID_uint64_t_0_8_uint8_t_8_9 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 1);
}

SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_uint8_t_8_9 $s7BlinkID10DateResultV3daySiSgvg(void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_uint8_t_8_9 $s7BlinkID10DateResultV5monthSiSgvg(void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_uint8_t_8_9 $s7BlinkID10DateResultV4yearSiSgvg(void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID10DateResultV23filledByDomainKnowledgeSbvg(void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID10DateResultV18successfullyParsedSbvg(void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID10DateResultV14originalStringxvg(SWIFT_INDIRECT_RESULT void * _Nonnull, void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID10DateResultV8toStringSSySSRszrlF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // toString()
SWIFT_EXTERN void $s7BlinkID26DetailedCroppedImageResultV4sideAA12ScanningSideOSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID26DetailedCroppedImageResultV8locationAA10RectangleFVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN UIImage *_Nullable $s7BlinkID26DetailedCroppedImageResultV02uiE0So7UIImageCSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID17DetailedFieldTypeV05fieldE0AA0dE0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID17DetailedFieldTypeV05fieldE0AA0dE0Ovs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID17DetailedFieldTypeV08alphabetE0AA08AlphabetE0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID17DetailedFieldTypeV08alphabetE0AA08AlphabetE0Ovs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID17DetailedFieldTypeV05fieldE008alphabetE0AcA0dE0O_AA08AlphabetE0OtcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, const void * _Nonnull fieldType, const void * _Nonnull alphabetType) SWIFT_NOEXCEPT SWIFT_CALL; // init(fieldType:alphabetType:)
SWIFT_EXTERN ptrdiff_t $s7BlinkID14DetectionLevelO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID15DetectionStatusO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkID_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID15DetectionStatusO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID29DocumentAnonymizationSettingsV14documentFilterAA0cG0Vvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID29DocumentAnonymizationSettingsV14documentFilterAA0cG0Vvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_void_ptr_0_8 $s7BlinkID29DocumentAnonymizationSettingsV6fieldsSayAA9FieldTypeOGvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_BlinkID_void_ptr_0_8 {
  void * _Nullable _1;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_BlinkID_void_ptr_0_8 swift_interop_passDirect_BlinkID_void_ptr_0_8(const char * _Nonnull value) {
  struct swift_interop_passStub_BlinkID_void_ptr_0_8 result;
  memcpy(&result._1, value + 0, 8);
  return result;
}

SWIFT_EXTERN void $s7BlinkID29DocumentAnonymizationSettingsV6fieldsSayAA9FieldTypeOGvs(struct swift_interop_passStub_BlinkID_void_ptr_0_8 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID29DocumentAnonymizationSettingsV014documentNumberdE0AA0cgdE0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID29DocumentAnonymizationSettingsV014documentNumberdE0AA0cgdE0VSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID29DocumentAnonymizationSettingsV14documentFilter6fields0f6NumberdE0AcA0cG0V_SayAA9FieldTypeOGAA0cidE0VSgtcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, const void * _Nonnull documentFilter, struct swift_interop_passStub_BlinkID_void_ptr_0_8 fields, const void * _Nonnull documentNumberAnonymizationSettings) SWIFT_NOEXCEPT SWIFT_CALL; // init(documentFilter:fields:documentNumberAnonymizationSettings:)
SWIFT_EXTERN void $s7BlinkID14DocumentFilterV7countryAA7CountryOSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID14DocumentFilterV7countryAA7CountryOSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID14DocumentFilterV6regionAA6RegionOSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID14DocumentFilterV6regionAA6RegionOSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID14DocumentFilterV12documentTypeAA0cF0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID14DocumentFilterV12documentTypeAA0cF0OSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID14DocumentFilterV7country6region12documentTypeAcA7CountryOSg_AA6RegionOSgAA0cH0OSgtcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, const void * _Nonnull country, const void * _Nonnull region, const void * _Nonnull documentType) SWIFT_NOEXCEPT SWIFT_CALL; // init(country:region:documentType:)
SWIFT_EXTERN void $s7BlinkID24DocumentImageColorStatusO8rawValueACSgSi_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, ptrdiff_t rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN ptrdiff_t $s7BlinkID24DocumentImageColorStatusO8rawValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s7BlinkID35DocumentNumberAnonymizationSettingsV19prefixDigitsVisibleSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID35DocumentNumberAnonymizationSettingsV19prefixDigitsVisibleSivs(ptrdiff_t value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s7BlinkID35DocumentNumberAnonymizationSettingsV19suffixDigitsVisibleSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID35DocumentNumberAnonymizationSettingsV19suffixDigitsVisibleSivs(ptrdiff_t value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID35DocumentNumberAnonymizationSettingsV19prefixDigitsVisible06suffixhI0ACSi_SitcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, ptrdiff_t prefixDigitsVisible, ptrdiff_t suffixDigitsVisible) SWIFT_NOEXCEPT SWIFT_CALL; // init(prefixDigitsVisible:suffixDigitsVisible:)
SWIFT_EXTERN void $s7BlinkID19DocumentOrientationO8rawValueACSgSi_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, ptrdiff_t rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN ptrdiff_t $s7BlinkID19DocumentOrientationO8rawValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16DocumentRotationO8rawValueACSgSi_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, ptrdiff_t rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN ptrdiff_t $s7BlinkID16DocumentRotationO8rawValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID13DocumentRulesV14documentFilterAA0cF0Vvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID13DocumentRulesV14documentFilterAA0cF0Vvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_void_ptr_0_8 $s7BlinkID13DocumentRulesV6fieldsSayAA17DetailedFieldTypeVGvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID13DocumentRulesV6fieldsSayAA17DetailedFieldTypeVGvs(struct swift_interop_passStub_BlinkID_void_ptr_0_8 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID13DocumentRulesV14documentFilter6fieldsAcA0cF0V_SayAA17DetailedFieldTypeVGtcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, const void * _Nonnull documentFilter, struct swift_interop_passStub_BlinkID_void_ptr_0_8 fields) SWIFT_NOEXCEPT SWIFT_CALL; // init(documentFilter:fields:)
SWIFT_EXTERN void $s7BlinkID12DocumentTypeO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkID_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID12DocumentTypeO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID25DriverLicenseDetailedInfoV12restrictionsxSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID25DriverLicenseDetailedInfoV12endorsementsxSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID25DriverLicenseDetailedInfoV12vehicleClassxSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID25DriverLicenseDetailedInfoV10conditionsxSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8 $s7BlinkID25DriverLicenseDetailedInfoV014vehicleClassesF0SayAA012VehicleClassF0VyxGGSgvg(void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID10FieldStateV9fieldTypeAA09DataMatchcF0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID10FieldStateV5stateAA09DataMatchD0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID9FieldTypeO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkID_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID9FieldTypeO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID18FrameProcessResultV12sessionErrorAA07SessionG0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID28ImageAnalysisDetectionStatusO8rawValueACSgSi_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, ptrdiff_t rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN ptrdiff_t $s7BlinkID28ImageAnalysisDetectionStatusO8rawValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s7BlinkID27ImageAnalysisLightingStatusO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s7BlinkID19ImageExtractionTypeO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s7BlinkID16ImageOrientationO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void * _Nonnull $s7BlinkID10InputImageC02uiD016regionOfInterestACSo7UIImageC_AA06RegiongH0VtcfC(UIImage *_Nonnull uiImage, const void * _Nonnull regionOfInterest, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // init(uiImage:regionOfInterest:)
SWIFT_EXTERN void * _Nonnull $s7BlinkID10InputImageC11cameraFrameAcA06CameraF0V_tcfC(const void * _Nonnull cameraFrame, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // init(cameraFrame:)
SWIFT_EXTERN void $s7BlinkID24InputImageAnalysisResultV16processingStatusAA010ProcessingH0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_void_ptr_0_8 $s7BlinkID24InputImageAnalysisResultV22missingMandatoryFieldsSayAA9FieldTypeOGvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_void_ptr_0_8 $s7BlinkID24InputImageAnalysisResultV15extractedFieldsSayAA9FieldTypeOGvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_void_ptr_0_8 $s7BlinkID24InputImageAnalysisResultV22invalidCharacterFieldsSayAA9FieldTypeOGvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_void_ptr_0_8 $s7BlinkID24InputImageAnalysisResultV18extraPresentFieldsSayAA9FieldTypeOGvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_void_ptr_0_8 $s7BlinkID24InputImageAnalysisResultV23imageExtractionFailuresSayAA0dH4TypeOGvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24InputImageAnalysisResultV12scanningSideAA08ScanningH0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24InputImageAnalysisResultV23documentDetectionStatusAA0hI0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24InputImageAnalysisResultV16documentLocationAA13QuadrilateralVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24InputImageAnalysisResultV19blurDetectionStatusAA0dehI0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24InputImageAnalysisResultV20glareDetectionStatusAA0dehI0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24InputImageAnalysisResultV19documentColorStatusAA08DocumentdhI0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24InputImageAnalysisResultV19documentMoireStatusAA0de9DetectionI0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24InputImageAnalysisResultV19faceDetectionStatusAA0dehI0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24InputImageAnalysisResultV18mrzDetectionStatusAA0dehI0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24InputImageAnalysisResultV22barcodeDetectionStatusAA0dehI0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24InputImageAnalysisResultV21realIDDetectionStatusAA0de9DetectionI0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24InputImageAnalysisResultV22documentLightingStatusAA0dehI0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24InputImageAnalysisResultV27documentHandOcclusionStatusAA0de9DetectionJ0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24InputImageAnalysisResultV19documentOrientationAA08DocumentH0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24InputImageAnalysisResultV16documentRotationAA08DocumentH0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN UIImage *_Nullable $s7BlinkID16InputImageResultV02uiD0So7UIImageCSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s7BlinkID16InputImageSourceO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID22InvalidLicenseKeyErrorV7messageSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s7BlinkID15MRZDocumentTypeO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID9MRZResultV12rawMRZStringSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID9MRZResultV12documentCodeSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID9MRZResultV6issuerSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID9MRZResultV14documentNumberSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID9MRZResultV4opt1SSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID9MRZResultV4opt2SSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID9MRZResultV6genderSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID9MRZResultV11nationalitySSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID9MRZResultV07primaryB0SSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID9MRZResultV09secondaryB0SSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID9MRZResultV10issuerNameSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID9MRZResultV15nationalityNameSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID9MRZResultV8verifiedSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID9MRZResultV11dateOfBirthAA10DateResultVySSGvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID9MRZResultV12dateOfExpiryAA10DateResultVySSGvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID9MRZResultV12documentTypeAA011MRZDocumentE0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID9MRZResultV13sanitizedOpt1SSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID9MRZResultV13sanitizedOpt2SSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID9MRZResultV20sanitizedNationalitySSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID9MRZResultV15sanitizedIssuerSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID9MRZResultV21sanitizedDocumentCodeSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID9MRZResultV23sanitizedDocumentNumberSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s7BlinkID18MemoryReserveErrorV011minRequiredC0Sivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID18MemoryReserveErrorV011minRequiredC0ACSi_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, ptrdiff_t minRequiredMemory) SWIFT_NOEXCEPT SWIFT_CALL; // init(minRequiredMemory:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID13MissingBundleV7messageSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_uint64_t_8_16 $s7BlinkID14ModelLoadErrorO16errorDescriptionSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s7BlinkID14ModelLoadErrorO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN int32_t $s7BlinkID5PointV1xs5Int32Vvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN int32_t $s7BlinkID5PointV1ys5Int32Vvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ProcessingStatusO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkID_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID16ProcessingStatusO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID13QuadrilateralV9upperLeftAA5PointVvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID13QuadrilateralV10upperRightAA5PointVvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID13QuadrilateralV10lowerRightAA5PointVvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID13QuadrilateralV9lowerLeftAA5PointVvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID15RecognitionModeO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkID_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID15RecognitionModeO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID21RecognitionModeFilterV11enableMrzIdSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID21RecognitionModeFilterV11enableMrzIdSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID21RecognitionModeFilterV13enableMrzVisaSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID21RecognitionModeFilterV13enableMrzVisaSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID21RecognitionModeFilterV17enableMrzPassportSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID21RecognitionModeFilterV17enableMrzPassportSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID21RecognitionModeFilterV13enablePhotoIdSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID21RecognitionModeFilterV13enablePhotoIdSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID21RecognitionModeFilterV15enableBarcodeIdSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID21RecognitionModeFilterV15enableBarcodeIdSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID21RecognitionModeFilterV018enableFullDocumentC0Sbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID21RecognitionModeFilterV018enableFullDocumentC0Sbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID21RecognitionModeFilterV11enableMrzId0fG4Visa0fG8Passport0f5PhotoH00f7BarcodeH00f12FullDocumentC0ACSb_S5btcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, bool enableMrzId, bool enableMrzVisa, bool enableMrzPassport, bool enablePhotoId, bool enableBarcodeId, bool enableFullDocumentRecognition) SWIFT_NOEXCEPT SWIFT_CALL; // init(enableMrzId:enableMrzVisa:enableMrzPassport:enablePhotoId:enableBarcodeId:enableFullDocumentRecognition:)
SWIFT_EXTERN void $s7BlinkID6RegionO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkID_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID6RegionO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN float $s7BlinkID16RegionOfInterestV1xSfvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN float $s7BlinkID16RegionOfInterestV1ySfvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN float $s7BlinkID16RegionOfInterestV5widthSfvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN float $s7BlinkID16RegionOfInterestV6heightSfvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16RegionOfInterestV1x1y5width6heightACSf_S3ftcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, float x, float y, float width, float height) SWIFT_NOEXCEPT SWIFT_CALL; // init(x:y:width:height:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID17ResourceLoadErrorV4nameSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID17ResourceLoadErrorV5errorAA05ModeldE0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_uint64_t_8_16 $s7BlinkID14ResourcesErrorO16errorDescriptionSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_uint64_t_8_16 $s7BlinkID12SDKInitErrorO16errorDescriptionSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s7BlinkID12ScanningModeO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV18blurDetectionLevelAA0fG0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV18blurDetectionLevelAA0fG0Ovs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID16ScanningSettingsV18skipImagesWithBlurSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV18skipImagesWithBlurSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV19glareDetectionLevelAA0fG0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV19glareDetectionLevelAA0fG0Ovs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID16ScanningSettingsV19skipImagesWithGlareSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV19skipImagesWithGlareSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV18tiltDetectionLevelAA0fG0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV18tiltDetectionLevelAA0fG0Ovs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID16ScanningSettingsV42skipImagesWithInadequateLightingConditionsSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV42skipImagesWithInadequateLightingConditionsSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID16ScanningSettingsV24skipImagesOccludedByHandSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV24skipImagesOccludedByHandSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID16ScanningSettingsV37combineResultsFromMultipleInputImagesSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV37combineResultsFromMultipleInputImagesSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID16ScanningSettingsV21enableBarcodeScanOnlySbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV21enableBarcodeScanOnlySbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8 $s7BlinkID16ScanningSettingsV19customDocumentRulesSayAA0fG0VGSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_BlinkID_uint64_t_0_8 {
  uint64_t _1;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_BlinkID_uint64_t_0_8 swift_interop_passDirect_BlinkID_uint64_t_0_8(const char * _Nonnull value) {
  struct swift_interop_passStub_BlinkID_uint64_t_0_8 result;
  memcpy(&result._1, value + 0, 8);
  return result;
}

SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV19customDocumentRulesSayAA0fG0VGSgvs(struct swift_interop_passStub_BlinkID_uint64_t_0_8 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV17anonymizationModeAA013AnonymizationF0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV17anonymizationModeAA013AnonymizationF0Ovs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8 $s7BlinkID16ScanningSettingsV027customDocumentAnonymizationD0SayAA0fgD0VGSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV027customDocumentAnonymizationD0SayAA0fgD0VGSgvs(struct swift_interop_passStub_BlinkID_uint64_t_0_8 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID16ScanningSettingsV17returnInputImagesSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV17returnInputImagesSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID16ScanningSettingsV24scanCroppedDocumentImageSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV24scanCroppedDocumentImageSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV21recognitionModeFilterAA011RecognitionfG0Vvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV21recognitionModeFilterAA011RecognitionfG0Vvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID16ScanningSettingsV25enableCharacterValidationSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV25enableCharacterValidationSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN float $s7BlinkID16ScanningSettingsV16inputImageMarginSfvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV16inputImageMarginSfvs(float value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID16ScanningSettingsV19scanUnsupportedBackSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV19scanUnsupportedBackSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID16ScanningSettingsV27allowUncertainFrontSideScanSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV27allowUncertainFrontSideScanSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s7BlinkID16ScanningSettingsV28maxAllowedMismatchesPerFieldSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV28maxAllowedMismatchesPerFieldSivs(ptrdiff_t value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID16ScanningSettingsV24scanPassportDataPageOnlySbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV24scanPassportDataPageOnlySbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV012croppedImageD0AA07CroppedfD0Vvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV012croppedImageD0AA07CroppedfD0Vvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV18blurDetectionLevel18skipImagesWithBlur05glarefG00hiJ5Glare04tiltfG00hiJ28InadequateLightingConditions0hI14OccludedByHand031combineResultsFromMultipleInputI021enableBarcodeScanOnly19customDocumentRules17anonymizationMode027customDocumentAnonymizationD006returnyI024scanCroppedDocumentImage0Z19CharacterValidation21recognitionModeFilter16inputImageMargin19scanUnsupportedBack27allowUncertainFrontSideScan28maxAllowedMismatchesPerField24scanPassportDataPageOnly012croppedImageD0AcA0fG0O_SbA_SbA_S4bSayAA13DocumentRulesVGSgAA17AnonymizationModeOSayAA021DocumentAnonymizationD0VGSgS3bAA21RecognitionModeFilterVSfS2bSiSbAA012CroppedImageD0VtcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, const void * _Nonnull blurDetectionLevel, bool skipImagesWithBlur, const void * _Nonnull glareDetectionLevel, bool skipImagesWithGlare, const void * _Nonnull tiltDetectionLevel, bool skipImagesWithInadequateLightingConditions, bool skipImagesOccludedByHand, bool combineResultsFromMultipleInputImages, bool enableBarcodeScanOnly, struct swift_interop_passStub_BlinkID_uint64_t_0_8 customDocumentRules, const void * _Nonnull anonymizationMode, struct swift_interop_passStub_BlinkID_uint64_t_0_8 customDocumentAnonymizationSettings, bool returnInputImages, bool scanCroppedDocumentImage, bool enableCharacterValidation, const void * _Nonnull recognitionModeFilter, float inputImageMargin, bool scanUnsupportedBack, bool allowUncertainFrontSideScan, ptrdiff_t maxAllowedMismatchesPerField, bool scanPassportDataPageOnly, const void * _Nonnull croppedImageSettings) SWIFT_NOEXCEPT SWIFT_CALL; // init(blurDetectionLevel:skipImagesWithBlur:glareDetectionLevel:skipImagesWithGlare:tiltDetectionLevel:skipImagesWithInadequateLightingConditions:skipImagesOccludedByHand:combineResultsFromMultipleInputImages:enableBarcodeScanOnly:customDocumentRules:anonymizationMode:customDocumentAnonymizationSettings:returnInputImages:scanCroppedDocumentImage:enableCharacterValidation:recognitionModeFilter:inputImageMargin:scanUnsupportedBack:allowUncertainFrontSideScan:maxAllowedMismatchesPerField:scanPassportDataPageOnly:croppedImageSettings:)
SWIFT_EXTERN void $s7BlinkID12ScanningSideO8rawValueACSgSi_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, ptrdiff_t rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN ptrdiff_t $s7BlinkID12ScanningSideO8rawValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s7BlinkID14ScanningStatusO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s7BlinkID12SessionErrorO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24SingleSideScanningResultV3vizAA9VIZResultVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24SingleSideScanningResultV3vizAA9VIZResultVSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24SingleSideScanningResultV3mrzAA9MRZResultVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24SingleSideScanningResultV3mrzAA9MRZResultVSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24SingleSideScanningResultV7barcodeAA07BarcodeF0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24SingleSideScanningResultV7barcodeAA07BarcodeF0VSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24SingleSideScanningResultV10inputImageAA05InputhF0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24SingleSideScanningResultV10inputImageAA05InputhF0VSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24SingleSideScanningResultV17barcodeInputImageAA0hiF0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24SingleSideScanningResultV17barcodeInputImageAA0hiF0VSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24SingleSideScanningResultV13documentImageAA07CroppedhF0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24SingleSideScanningResultV13documentImageAA07CroppedhF0VSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24SingleSideScanningResultV9faceImageAA015DetailedCroppedhF0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24SingleSideScanningResultV9faceImageAA015DetailedCroppedhF0VSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24SingleSideScanningResultV14signatureImageAA015DetailedCroppedhF0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24SingleSideScanningResultV14signatureImageAA015DetailedCroppedhF0VSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID9VIZResultV21dateOfExpiryPermanentSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_void_ptr_0_8 $s7BlinkID9VIZResultV14dependentsInfoSayAA09DependentE0VGvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16VehicleClassInfoV07vehicleD0xSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16VehicleClassInfoV11licenceTypexSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16VehicleClassInfoV13effectiveDateAA0G6ResultVyxGSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16VehicleClassInfoV10expiryDateAA0G6ResultVyxGSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _

#ifdef __cplusplus
}
}
}
namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID19AddressDetailedInfoV") AddressDetailedInfo;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::AddressDetailedInfo> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_AddressDetailedInfo;

// Type metadata accessor for AddressDetailedInfo
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID19AddressDetailedInfoVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID19AddressDetailedInfoV") AddressDetailedInfo final {
public:
  SWIFT_INLINE_THUNK ~AddressDetailedInfo() noexcept {
    auto metadata = _impl::$s7BlinkID19AddressDetailedInfoVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK AddressDetailedInfo(const AddressDetailedInfo &other) noexcept {
    auto metadata = _impl::$s7BlinkID19AddressDetailedInfoVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK AddressDetailedInfo &operator =(const AddressDetailedInfo &other) noexcept {
    auto metadata = _impl::$s7BlinkID19AddressDetailedInfoVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK AddressDetailedInfo &operator =(AddressDetailedInfo &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER AddressDetailedInfo(AddressDetailedInfo &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getStreet() const SWIFT_SYMBOL("s:7BlinkID19AddressDetailedInfoV6streetSSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getPostalCode() const SWIFT_SYMBOL("s:7BlinkID19AddressDetailedInfoV10postalCodeSSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getCity() const SWIFT_SYMBOL("s:7BlinkID19AddressDetailedInfoV4citySSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getJurisdiction() const SWIFT_SYMBOL("s:7BlinkID19AddressDetailedInfoV12jurisdictionSSSgvp");
private:
  SWIFT_INLINE_THUNK AddressDetailedInfo(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK AddressDetailedInfo _make() noexcept {
    auto metadata = _impl::$s7BlinkID19AddressDetailedInfoVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return AddressDetailedInfo(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_AddressDetailedInfo;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID19AddressDetailedInfoVD;
  static inline constexpr $s7BlinkID19AddressDetailedInfoVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_AddressDetailedInfo {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(AddressDetailedInfo &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const AddressDetailedInfo &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER AddressDetailedInfo returnNewValue(T callable) {
    auto result = AddressDetailedInfo::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID19AddressDetailedInfoVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::AddressDetailedInfo> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID19AddressDetailedInfoVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::AddressDetailedInfo> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::AddressDetailedInfo> = true;
template<>
struct implClassFor<BlinkID::AddressDetailedInfo> { using type = BlinkID::_impl::_impl_AddressDetailedInfo; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID12AlphabetTypeO") AlphabetType;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::AlphabetType> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
/// Represents the type of the alphabet used in the document.
namespace _impl {

class _impl_AlphabetType;

// Type metadata accessor for AlphabetType
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID12AlphabetTypeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum AlphabetType
extern "C" {
extern unsigned $s7BlinkID12AlphabetTypeO5latinyA2CmFWC;
extern unsigned $s7BlinkID12AlphabetTypeO6arabicyA2CmFWC;
extern unsigned $s7BlinkID12AlphabetTypeO8cyrillicyA2CmFWC;
extern unsigned $s7BlinkID12AlphabetTypeO5greekyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID12AlphabetTypeO") AlphabetType final {
public:
  SWIFT_INLINE_THUNK ~AlphabetType() noexcept {
    auto metadata = _impl::$s7BlinkID12AlphabetTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK AlphabetType(const AlphabetType &other) noexcept {
    auto metadata = _impl::$s7BlinkID12AlphabetTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK AlphabetType &operator =(const AlphabetType &other) noexcept {
    auto metadata = _impl::$s7BlinkID12AlphabetTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK AlphabetType &operator =(AlphabetType &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER AlphabetType(AlphabetType &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    latin SWIFT_SYMBOL("s:7BlinkID12AlphabetTypeO5latinyA2CmF"),
    arabic SWIFT_SYMBOL("s:7BlinkID12AlphabetTypeO6arabicyA2CmF"),
    cyrillic SWIFT_SYMBOL("s:7BlinkID12AlphabetTypeO8cyrillicyA2CmF"),
    greek SWIFT_SYMBOL("s:7BlinkID12AlphabetTypeO5greekyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_latin {  // impl struct for case latin
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::latin;
    }
    SWIFT_INLINE_THUNK AlphabetType operator()() const;
  } latin SWIFT_SYMBOL("s:7BlinkID12AlphabetTypeO5latinyA2CmF");
  SWIFT_INLINE_THUNK bool isLatin() const;

  inline const static struct _impl_arabic {  // impl struct for case arabic
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::arabic;
    }
    SWIFT_INLINE_THUNK AlphabetType operator()() const;
  } arabic SWIFT_SYMBOL("s:7BlinkID12AlphabetTypeO6arabicyA2CmF");
  SWIFT_INLINE_THUNK bool isArabic() const;

  inline const static struct _impl_cyrillic {  // impl struct for case cyrillic
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cyrillic;
    }
    SWIFT_INLINE_THUNK AlphabetType operator()() const;
  } cyrillic SWIFT_SYMBOL("s:7BlinkID12AlphabetTypeO8cyrillicyA2CmF");
  SWIFT_INLINE_THUNK bool isCyrillic() const;

  inline const static struct _impl_greek {  // impl struct for case greek
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::greek;
    }
    SWIFT_INLINE_THUNK AlphabetType operator()() const;
  } greek SWIFT_SYMBOL("s:7BlinkID12AlphabetTypeO5greekyA2CmF");
  SWIFT_INLINE_THUNK bool isGreek() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID12AlphabetTypeO5latinyA2CmFWC) return cases::latin;
    if (tag == _impl::$s7BlinkID12AlphabetTypeO6arabicyA2CmFWC) return cases::arabic;
    if (tag == _impl::$s7BlinkID12AlphabetTypeO8cyrillicyA2CmFWC) return cases::cyrillic;
    if (tag == _impl::$s7BlinkID12AlphabetTypeO5greekyA2CmFWC) return cases::greek;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<AlphabetType> init(const swift::String& rawValue) SWIFT_SYMBOL("s:7BlinkID12AlphabetTypeO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:7BlinkID12AlphabetTypeO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK AlphabetType(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK AlphabetType _make() noexcept {
    auto metadata = _impl::$s7BlinkID12AlphabetTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return AlphabetType(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID12AlphabetTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID12AlphabetTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID12AlphabetTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_AlphabetType;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID12AlphabetTypeOD;
  static inline constexpr $s7BlinkID12AlphabetTypeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_AlphabetType {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(AlphabetType &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const AlphabetType &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER AlphabetType returnNewValue(T callable) {
    auto result = AlphabetType::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID12AlphabetTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::AlphabetType> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID12AlphabetTypeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::AlphabetType> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::AlphabetType> = true;
template<>
struct implClassFor<BlinkID::AlphabetType> { using type = BlinkID::_impl::_impl_AlphabetType; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID17AnonymizationModeO") AnonymizationMode;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::AnonymizationMode> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
/// AnonymizationMode is used to define level of anonymization
/// performed on recognizer result.
namespace _impl {

class _impl_AnonymizationMode;

// Type metadata accessor for AnonymizationMode
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID17AnonymizationModeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum AnonymizationMode
extern "C" {
extern unsigned $s7BlinkID17AnonymizationModeO4noneyA2CmFWC;
extern unsigned $s7BlinkID17AnonymizationModeO9imageOnlyyA2CmFWC;
extern unsigned $s7BlinkID17AnonymizationModeO16resultFieldsOnlyyA2CmFWC;
extern unsigned $s7BlinkID17AnonymizationModeO10fullResultyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID17AnonymizationModeO") AnonymizationMode final {
public:
  SWIFT_INLINE_THUNK ~AnonymizationMode() noexcept {
    auto metadata = _impl::$s7BlinkID17AnonymizationModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK AnonymizationMode(const AnonymizationMode &other) noexcept {
    auto metadata = _impl::$s7BlinkID17AnonymizationModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK AnonymizationMode &operator =(const AnonymizationMode &other) noexcept {
    auto metadata = _impl::$s7BlinkID17AnonymizationModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK AnonymizationMode &operator =(AnonymizationMode &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER AnonymizationMode(AnonymizationMode &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    none SWIFT_SYMBOL("s:7BlinkID17AnonymizationModeO4noneyA2CmF"),
    imageOnly SWIFT_SYMBOL("s:7BlinkID17AnonymizationModeO9imageOnlyyA2CmF"),
    resultFieldsOnly SWIFT_SYMBOL("s:7BlinkID17AnonymizationModeO16resultFieldsOnlyyA2CmF"),
    fullResult SWIFT_SYMBOL("s:7BlinkID17AnonymizationModeO10fullResultyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_none {  // impl struct for case none
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::none;
    }
    SWIFT_INLINE_THUNK AnonymizationMode operator()() const;
  } none SWIFT_SYMBOL("s:7BlinkID17AnonymizationModeO4noneyA2CmF");
  SWIFT_INLINE_THUNK bool isNone() const;

  inline const static struct _impl_imageOnly {  // impl struct for case imageOnly
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::imageOnly;
    }
    SWIFT_INLINE_THUNK AnonymizationMode operator()() const;
  } imageOnly SWIFT_SYMBOL("s:7BlinkID17AnonymizationModeO9imageOnlyyA2CmF");
  SWIFT_INLINE_THUNK bool isImageOnly() const;

  inline const static struct _impl_resultFieldsOnly {  // impl struct for case resultFieldsOnly
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::resultFieldsOnly;
    }
    SWIFT_INLINE_THUNK AnonymizationMode operator()() const;
  } resultFieldsOnly SWIFT_SYMBOL("s:7BlinkID17AnonymizationModeO16resultFieldsOnlyyA2CmF");
  SWIFT_INLINE_THUNK bool isResultFieldsOnly() const;

  inline const static struct _impl_fullResult {  // impl struct for case fullResult
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::fullResult;
    }
    SWIFT_INLINE_THUNK AnonymizationMode operator()() const;
  } fullResult SWIFT_SYMBOL("s:7BlinkID17AnonymizationModeO10fullResultyA2CmF");
  SWIFT_INLINE_THUNK bool isFullResult() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID17AnonymizationModeO4noneyA2CmFWC) return cases::none;
    if (tag == _impl::$s7BlinkID17AnonymizationModeO9imageOnlyyA2CmFWC) return cases::imageOnly;
    if (tag == _impl::$s7BlinkID17AnonymizationModeO16resultFieldsOnlyyA2CmFWC) return cases::resultFieldsOnly;
    if (tag == _impl::$s7BlinkID17AnonymizationModeO10fullResultyA2CmFWC) return cases::fullResult;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::String getId() const SWIFT_SYMBOL("s:7BlinkID17AnonymizationModeO2idSSvp");
  static SWIFT_INLINE_THUNK swift::Optional<AnonymizationMode> init(const swift::String& rawValue) SWIFT_SYMBOL("s:7BlinkID17AnonymizationModeO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:7BlinkID17AnonymizationModeO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK AnonymizationMode(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK AnonymizationMode _make() noexcept {
    auto metadata = _impl::$s7BlinkID17AnonymizationModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return AnonymizationMode(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID17AnonymizationModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID17AnonymizationModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID17AnonymizationModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_AnonymizationMode;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID17AnonymizationModeOD;
  static inline constexpr $s7BlinkID17AnonymizationModeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_AnonymizationMode {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(AnonymizationMode &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const AnonymizationMode &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER AnonymizationMode returnNewValue(T callable) {
    auto result = AnonymizationMode::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID17AnonymizationModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::AnonymizationMode> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID17AnonymizationModeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::AnonymizationMode> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::AnonymizationMode> = true;
template<>
struct implClassFor<BlinkID::AnonymizationMode> { using type = BlinkID::_impl::_impl_AnonymizationMode; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO") BarcodeType;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::BarcodeType> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID11BarcodeDataV") BarcodeData;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::BarcodeData> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_BarcodeData;

// Type metadata accessor for BarcodeData
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID11BarcodeDataVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID11BarcodeDataV") BarcodeData final {
public:
  SWIFT_INLINE_THUNK ~BarcodeData() noexcept {
    auto metadata = _impl::$s7BlinkID11BarcodeDataVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK BarcodeData(const BarcodeData &other) noexcept {
    auto metadata = _impl::$s7BlinkID11BarcodeDataVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK BarcodeData &operator =(const BarcodeData &other) noexcept {
    auto metadata = _impl::$s7BlinkID11BarcodeDataVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK BarcodeData &operator =(BarcodeData &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER BarcodeData(BarcodeData &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getStringData() const SWIFT_SYMBOL("s:7BlinkID11BarcodeDataV06stringD0SSvp");
  SWIFT_INLINE_THUNK BarcodeType getBarcodeType() const SWIFT_SYMBOL("s:7BlinkID11BarcodeDataV11barcodeTypeAA0cF0Ovp");
  SWIFT_INLINE_THUNK bool getUncertain() const SWIFT_SYMBOL("s:7BlinkID11BarcodeDataV9uncertainSbvp");
private:
  SWIFT_INLINE_THUNK BarcodeData(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK BarcodeData _make() noexcept {
    auto metadata = _impl::$s7BlinkID11BarcodeDataVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return BarcodeData(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_BarcodeData;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID11BarcodeDataVD;
  static inline constexpr $s7BlinkID11BarcodeDataVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_BarcodeData {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(BarcodeData &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const BarcodeData &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER BarcodeData returnNewValue(T callable) {
    auto result = BarcodeData::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID11BarcodeDataVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::BarcodeData> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID11BarcodeDataVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::BarcodeData> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::BarcodeData> = true;
template<>
struct implClassFor<BlinkID::BarcodeData> { using type = BlinkID::_impl::_impl_BarcodeData; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO") BarcodeElementKey;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::BarcodeElementKey> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
/// Represents the fields present in the barcode.
/// Currently this is only used for AAMVACompliant documents.
namespace _impl {

class _impl_BarcodeElementKey;

// Type metadata accessor for BarcodeElementKey
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID17BarcodeElementKeyOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum BarcodeElementKey
extern "C" {
extern unsigned $s7BlinkID17BarcodeElementKeyO12documentTypeyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO21standardVersionNumberyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO18customerFamilyNameyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO17customerFirstNameyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO16customerFullNameyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO11dateOfBirthyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO3sexyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO8eyeColoryA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO13addressStreetyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO11addressCityyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO23addressJurisdictionCodeyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO17addressPostalCodeyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO11fullAddressyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO6heightyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO8heightInyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO8heightCmyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO18customerMiddleNameyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO9hairColoryA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO10nameSuffixyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO11akaFullNameyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO13akaFamilyNameyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO12akaGivenNameyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO13akaSuffixNameyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO11weightRangeyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO12weightPoundsyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO15weightKilogramsyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO16customerIdNumberyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO20familyNameTruncationyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO19firstNameTruncationyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO20middleNameTruncationyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO12placeOfBirthyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO14addressStreet2yA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO13raceEthnicityyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO10namePrefixyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO21countryIdentificationyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO22residenceStreetAddressyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO23residenceStreetAddress2yA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO13residenceCityyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO25residenceJurisdictionCodeyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO19residencePostalCodeyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO20residenceFullAddressyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO7under18yA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO7under19yA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO7under21yA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO20socialSecurityNumberyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO23akaSocialSecurityNumberyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO13akaMiddleNameyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO13akaPrefixNameyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO10organDonoryA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO7veteranyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO14akaDateOfBirthyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO26issuerIdentificationNumberyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO22documentExpirationDateyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO25jurisdictionVersionNumberyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO24jurisdictionVehicleClassyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO28jurisdictionRestrictionCodesyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO28jurisdictionEndorsementCodesyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO17documentIssueDateyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO29federalCommercialVehicleCodesyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO19issuingJurisdictionyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO29standardVehicleClassificationyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO23issuingJurisdictionNameyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO23standardEndorsementCodeyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO23standardRestrictionCodeyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO44jurisdictionVehicleClassificationDescriptionyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO37jurisdictionEndorsmentCodeDescriptionyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO38jurisdictionRestrictionCodeDescriptionyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO22inventoryControlNumberyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO16cardRevisionDateyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO21documentDiscriminatoryA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO23limitedDurationDocumentyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO16auditInformationyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO14complianceTypeyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO14issueTimestampyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO20permitExpirationDateyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO16permitIdentifieryA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO15permitIssueDateyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO18numberOfDuplicatesyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO20hazmatExpirationDateyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO16medicalIndicatoryA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO11nonResidentyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO16uniqueCustomerIdyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO17dataDiscriminatoryA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO23documentExpirationMonthyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO19documentNonexpiringyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO15securityVersionyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO") BarcodeElementKey final {
public:
  SWIFT_INLINE_THUNK ~BarcodeElementKey() noexcept {
    auto metadata = _impl::$s7BlinkID17BarcodeElementKeyOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK BarcodeElementKey(const BarcodeElementKey &other) noexcept {
    auto metadata = _impl::$s7BlinkID17BarcodeElementKeyOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK BarcodeElementKey &operator =(const BarcodeElementKey &other) noexcept {
    auto metadata = _impl::$s7BlinkID17BarcodeElementKeyOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey &operator =(BarcodeElementKey &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER BarcodeElementKey(BarcodeElementKey &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    documentType SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO12documentTypeyA2CmF"),
    standardVersionNumber SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO21standardVersionNumberyA2CmF"),
    customerFamilyName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO18customerFamilyNameyA2CmF"),
    customerFirstName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO17customerFirstNameyA2CmF"),
    customerFullName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO16customerFullNameyA2CmF"),
    dateOfBirth SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO11dateOfBirthyA2CmF"),
    sex SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO3sexyA2CmF"),
    eyeColor SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO8eyeColoryA2CmF"),
    addressStreet SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO13addressStreetyA2CmF"),
    addressCity SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO11addressCityyA2CmF"),
    addressJurisdictionCode SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO23addressJurisdictionCodeyA2CmF"),
    addressPostalCode SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO17addressPostalCodeyA2CmF"),
    fullAddress SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO11fullAddressyA2CmF"),
    height SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO6heightyA2CmF"),
    heightIn SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO8heightInyA2CmF"),
    heightCm SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO8heightCmyA2CmF"),
    customerMiddleName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO18customerMiddleNameyA2CmF"),
    hairColor SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO9hairColoryA2CmF"),
    nameSuffix SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO10nameSuffixyA2CmF"),
    akaFullName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO11akaFullNameyA2CmF"),
    akaFamilyName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO13akaFamilyNameyA2CmF"),
    akaGivenName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO12akaGivenNameyA2CmF"),
    akaSuffixName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO13akaSuffixNameyA2CmF"),
    weightRange SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO11weightRangeyA2CmF"),
    weightPounds SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO12weightPoundsyA2CmF"),
    weightKilograms SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO15weightKilogramsyA2CmF"),
    customerIdNumber SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO16customerIdNumberyA2CmF"),
    familyNameTruncation SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO20familyNameTruncationyA2CmF"),
    firstNameTruncation SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO19firstNameTruncationyA2CmF"),
    middleNameTruncation SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO20middleNameTruncationyA2CmF"),
    placeOfBirth SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO12placeOfBirthyA2CmF"),
    addressStreet2 SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO14addressStreet2yA2CmF"),
    raceEthnicity SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO13raceEthnicityyA2CmF"),
    namePrefix SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO10namePrefixyA2CmF"),
    countryIdentification SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO21countryIdentificationyA2CmF"),
    residenceStreetAddress SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO22residenceStreetAddressyA2CmF"),
    residenceStreetAddress2 SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO23residenceStreetAddress2yA2CmF"),
    residenceCity SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO13residenceCityyA2CmF"),
    residenceJurisdictionCode SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO25residenceJurisdictionCodeyA2CmF"),
    residencePostalCode SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO19residencePostalCodeyA2CmF"),
    residenceFullAddress SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO20residenceFullAddressyA2CmF"),
    under18 SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO7under18yA2CmF"),
    under19 SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO7under19yA2CmF"),
    under21 SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO7under21yA2CmF"),
    socialSecurityNumber SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO20socialSecurityNumberyA2CmF"),
    akaSocialSecurityNumber SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO23akaSocialSecurityNumberyA2CmF"),
    akaMiddleName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO13akaMiddleNameyA2CmF"),
    akaPrefixName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO13akaPrefixNameyA2CmF"),
    organDonor SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO10organDonoryA2CmF"),
    veteran SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO7veteranyA2CmF"),
    akaDateOfBirth SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO14akaDateOfBirthyA2CmF"),
    issuerIdentificationNumber SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO26issuerIdentificationNumberyA2CmF"),
    documentExpirationDate SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO22documentExpirationDateyA2CmF"),
    jurisdictionVersionNumber SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO25jurisdictionVersionNumberyA2CmF"),
    jurisdictionVehicleClass SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO24jurisdictionVehicleClassyA2CmF"),
    jurisdictionRestrictionCodes SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO28jurisdictionRestrictionCodesyA2CmF"),
    jurisdictionEndorsementCodes SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO28jurisdictionEndorsementCodesyA2CmF"),
    documentIssueDate SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO17documentIssueDateyA2CmF"),
    federalCommercialVehicleCodes SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO29federalCommercialVehicleCodesyA2CmF"),
    issuingJurisdiction SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO19issuingJurisdictionyA2CmF"),
    standardVehicleClassification SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO29standardVehicleClassificationyA2CmF"),
    issuingJurisdictionName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO23issuingJurisdictionNameyA2CmF"),
    standardEndorsementCode SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO23standardEndorsementCodeyA2CmF"),
    standardRestrictionCode SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO23standardRestrictionCodeyA2CmF"),
    jurisdictionVehicleClassificationDescription SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO44jurisdictionVehicleClassificationDescriptionyA2CmF"),
    jurisdictionEndorsmentCodeDescription SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO37jurisdictionEndorsmentCodeDescriptionyA2CmF"),
    jurisdictionRestrictionCodeDescription SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO38jurisdictionRestrictionCodeDescriptionyA2CmF"),
    inventoryControlNumber SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO22inventoryControlNumberyA2CmF"),
    cardRevisionDate SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO16cardRevisionDateyA2CmF"),
    documentDiscriminator SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO21documentDiscriminatoryA2CmF"),
    limitedDurationDocument SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO23limitedDurationDocumentyA2CmF"),
    auditInformation SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO16auditInformationyA2CmF"),
    complianceType SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO14complianceTypeyA2CmF"),
    issueTimestamp SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO14issueTimestampyA2CmF"),
    permitExpirationDate SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO20permitExpirationDateyA2CmF"),
    permitIdentifier SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO16permitIdentifieryA2CmF"),
    permitIssueDate SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO15permitIssueDateyA2CmF"),
    numberOfDuplicates SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO18numberOfDuplicatesyA2CmF"),
    hazmatExpirationDate SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO20hazmatExpirationDateyA2CmF"),
    medicalIndicator SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO16medicalIndicatoryA2CmF"),
    nonResident SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO11nonResidentyA2CmF"),
    uniqueCustomerId SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO16uniqueCustomerIdyA2CmF"),
    dataDiscriminator SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO17dataDiscriminatoryA2CmF"),
    documentExpirationMonth SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO23documentExpirationMonthyA2CmF"),
    documentNonexpiring SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO19documentNonexpiringyA2CmF"),
    securityVersion SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO15securityVersionyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_documentType {  // impl struct for case documentType
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::documentType;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } documentType SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO12documentTypeyA2CmF");
  SWIFT_INLINE_THUNK bool isDocumentType() const;

  inline const static struct _impl_standardVersionNumber {  // impl struct for case standardVersionNumber
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::standardVersionNumber;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } standardVersionNumber SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO21standardVersionNumberyA2CmF");
  SWIFT_INLINE_THUNK bool isStandardVersionNumber() const;

  inline const static struct _impl_customerFamilyName {  // impl struct for case customerFamilyName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::customerFamilyName;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } customerFamilyName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO18customerFamilyNameyA2CmF");
  SWIFT_INLINE_THUNK bool isCustomerFamilyName() const;

  inline const static struct _impl_customerFirstName {  // impl struct for case customerFirstName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::customerFirstName;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } customerFirstName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO17customerFirstNameyA2CmF");
  SWIFT_INLINE_THUNK bool isCustomerFirstName() const;

  inline const static struct _impl_customerFullName {  // impl struct for case customerFullName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::customerFullName;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } customerFullName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO16customerFullNameyA2CmF");
  SWIFT_INLINE_THUNK bool isCustomerFullName() const;

  inline const static struct _impl_dateOfBirth {  // impl struct for case dateOfBirth
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dateOfBirth;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } dateOfBirth SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO11dateOfBirthyA2CmF");
  SWIFT_INLINE_THUNK bool isDateOfBirth() const;

  inline const static struct _impl_sex {  // impl struct for case sex
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sex;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } sex SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO3sexyA2CmF");
  SWIFT_INLINE_THUNK bool isSex() const;

  inline const static struct _impl_eyeColor {  // impl struct for case eyeColor
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::eyeColor;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } eyeColor SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO8eyeColoryA2CmF");
  SWIFT_INLINE_THUNK bool isEyeColor() const;

  inline const static struct _impl_addressStreet {  // impl struct for case addressStreet
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::addressStreet;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } addressStreet SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO13addressStreetyA2CmF");
  SWIFT_INLINE_THUNK bool isAddressStreet() const;

  inline const static struct _impl_addressCity {  // impl struct for case addressCity
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::addressCity;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } addressCity SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO11addressCityyA2CmF");
  SWIFT_INLINE_THUNK bool isAddressCity() const;

  inline const static struct _impl_addressJurisdictionCode {  // impl struct for case addressJurisdictionCode
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::addressJurisdictionCode;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } addressJurisdictionCode SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO23addressJurisdictionCodeyA2CmF");
  SWIFT_INLINE_THUNK bool isAddressJurisdictionCode() const;

  inline const static struct _impl_addressPostalCode {  // impl struct for case addressPostalCode
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::addressPostalCode;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } addressPostalCode SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO17addressPostalCodeyA2CmF");
  SWIFT_INLINE_THUNK bool isAddressPostalCode() const;

  inline const static struct _impl_fullAddress {  // impl struct for case fullAddress
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::fullAddress;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } fullAddress SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO11fullAddressyA2CmF");
  SWIFT_INLINE_THUNK bool isFullAddress() const;

  inline const static struct _impl_height {  // impl struct for case height
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::height;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } height SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO6heightyA2CmF");
  SWIFT_INLINE_THUNK bool isHeight() const;

  inline const static struct _impl_heightIn {  // impl struct for case heightIn
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::heightIn;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } heightIn SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO8heightInyA2CmF");
  SWIFT_INLINE_THUNK bool isHeightIn() const;

  inline const static struct _impl_heightCm {  // impl struct for case heightCm
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::heightCm;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } heightCm SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO8heightCmyA2CmF");
  SWIFT_INLINE_THUNK bool isHeightCm() const;

  inline const static struct _impl_customerMiddleName {  // impl struct for case customerMiddleName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::customerMiddleName;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } customerMiddleName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO18customerMiddleNameyA2CmF");
  SWIFT_INLINE_THUNK bool isCustomerMiddleName() const;

  inline const static struct _impl_hairColor {  // impl struct for case hairColor
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::hairColor;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } hairColor SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO9hairColoryA2CmF");
  SWIFT_INLINE_THUNK bool isHairColor() const;

  inline const static struct _impl_nameSuffix {  // impl struct for case nameSuffix
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nameSuffix;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } nameSuffix SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO10nameSuffixyA2CmF");
  SWIFT_INLINE_THUNK bool isNameSuffix() const;

  inline const static struct _impl_akaFullName {  // impl struct for case akaFullName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::akaFullName;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } akaFullName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO11akaFullNameyA2CmF");
  SWIFT_INLINE_THUNK bool isAkaFullName() const;

  inline const static struct _impl_akaFamilyName {  // impl struct for case akaFamilyName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::akaFamilyName;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } akaFamilyName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO13akaFamilyNameyA2CmF");
  SWIFT_INLINE_THUNK bool isAkaFamilyName() const;

  inline const static struct _impl_akaGivenName {  // impl struct for case akaGivenName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::akaGivenName;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } akaGivenName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO12akaGivenNameyA2CmF");
  SWIFT_INLINE_THUNK bool isAkaGivenName() const;

  inline const static struct _impl_akaSuffixName {  // impl struct for case akaSuffixName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::akaSuffixName;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } akaSuffixName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO13akaSuffixNameyA2CmF");
  SWIFT_INLINE_THUNK bool isAkaSuffixName() const;

  inline const static struct _impl_weightRange {  // impl struct for case weightRange
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::weightRange;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } weightRange SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO11weightRangeyA2CmF");
  SWIFT_INLINE_THUNK bool isWeightRange() const;

  inline const static struct _impl_weightPounds {  // impl struct for case weightPounds
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::weightPounds;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } weightPounds SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO12weightPoundsyA2CmF");
  SWIFT_INLINE_THUNK bool isWeightPounds() const;

  inline const static struct _impl_weightKilograms {  // impl struct for case weightKilograms
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::weightKilograms;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } weightKilograms SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO15weightKilogramsyA2CmF");
  SWIFT_INLINE_THUNK bool isWeightKilograms() const;

  inline const static struct _impl_customerIdNumber {  // impl struct for case customerIdNumber
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::customerIdNumber;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } customerIdNumber SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO16customerIdNumberyA2CmF");
  SWIFT_INLINE_THUNK bool isCustomerIdNumber() const;

  inline const static struct _impl_familyNameTruncation {  // impl struct for case familyNameTruncation
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::familyNameTruncation;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } familyNameTruncation SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO20familyNameTruncationyA2CmF");
  SWIFT_INLINE_THUNK bool isFamilyNameTruncation() const;

  inline const static struct _impl_firstNameTruncation {  // impl struct for case firstNameTruncation
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::firstNameTruncation;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } firstNameTruncation SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO19firstNameTruncationyA2CmF");
  SWIFT_INLINE_THUNK bool isFirstNameTruncation() const;

  inline const static struct _impl_middleNameTruncation {  // impl struct for case middleNameTruncation
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::middleNameTruncation;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } middleNameTruncation SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO20middleNameTruncationyA2CmF");
  SWIFT_INLINE_THUNK bool isMiddleNameTruncation() const;

  inline const static struct _impl_placeOfBirth {  // impl struct for case placeOfBirth
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::placeOfBirth;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } placeOfBirth SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO12placeOfBirthyA2CmF");
  SWIFT_INLINE_THUNK bool isPlaceOfBirth() const;

  inline const static struct _impl_addressStreet2 {  // impl struct for case addressStreet2
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::addressStreet2;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } addressStreet2 SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO14addressStreet2yA2CmF");
  SWIFT_INLINE_THUNK bool isAddressStreet2() const;

  inline const static struct _impl_raceEthnicity {  // impl struct for case raceEthnicity
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::raceEthnicity;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } raceEthnicity SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO13raceEthnicityyA2CmF");
  SWIFT_INLINE_THUNK bool isRaceEthnicity() const;

  inline const static struct _impl_namePrefix {  // impl struct for case namePrefix
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::namePrefix;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } namePrefix SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO10namePrefixyA2CmF");
  SWIFT_INLINE_THUNK bool isNamePrefix() const;

  inline const static struct _impl_countryIdentification {  // impl struct for case countryIdentification
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::countryIdentification;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } countryIdentification SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO21countryIdentificationyA2CmF");
  SWIFT_INLINE_THUNK bool isCountryIdentification() const;

  inline const static struct _impl_residenceStreetAddress {  // impl struct for case residenceStreetAddress
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::residenceStreetAddress;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } residenceStreetAddress SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO22residenceStreetAddressyA2CmF");
  SWIFT_INLINE_THUNK bool isResidenceStreetAddress() const;

  inline const static struct _impl_residenceStreetAddress2 {  // impl struct for case residenceStreetAddress2
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::residenceStreetAddress2;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } residenceStreetAddress2 SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO23residenceStreetAddress2yA2CmF");
  SWIFT_INLINE_THUNK bool isResidenceStreetAddress2() const;

  inline const static struct _impl_residenceCity {  // impl struct for case residenceCity
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::residenceCity;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } residenceCity SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO13residenceCityyA2CmF");
  SWIFT_INLINE_THUNK bool isResidenceCity() const;

  inline const static struct _impl_residenceJurisdictionCode {  // impl struct for case residenceJurisdictionCode
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::residenceJurisdictionCode;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } residenceJurisdictionCode SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO25residenceJurisdictionCodeyA2CmF");
  SWIFT_INLINE_THUNK bool isResidenceJurisdictionCode() const;

  inline const static struct _impl_residencePostalCode {  // impl struct for case residencePostalCode
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::residencePostalCode;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } residencePostalCode SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO19residencePostalCodeyA2CmF");
  SWIFT_INLINE_THUNK bool isResidencePostalCode() const;

  inline const static struct _impl_residenceFullAddress {  // impl struct for case residenceFullAddress
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::residenceFullAddress;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } residenceFullAddress SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO20residenceFullAddressyA2CmF");
  SWIFT_INLINE_THUNK bool isResidenceFullAddress() const;

  inline const static struct _impl_under18 {  // impl struct for case under18
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::under18;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } under18 SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO7under18yA2CmF");
  SWIFT_INLINE_THUNK bool isUnder18() const;

  inline const static struct _impl_under19 {  // impl struct for case under19
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::under19;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } under19 SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO7under19yA2CmF");
  SWIFT_INLINE_THUNK bool isUnder19() const;

  inline const static struct _impl_under21 {  // impl struct for case under21
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::under21;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } under21 SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO7under21yA2CmF");
  SWIFT_INLINE_THUNK bool isUnder21() const;

  inline const static struct _impl_socialSecurityNumber {  // impl struct for case socialSecurityNumber
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::socialSecurityNumber;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } socialSecurityNumber SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO20socialSecurityNumberyA2CmF");
  SWIFT_INLINE_THUNK bool isSocialSecurityNumber() const;

  inline const static struct _impl_akaSocialSecurityNumber {  // impl struct for case akaSocialSecurityNumber
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::akaSocialSecurityNumber;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } akaSocialSecurityNumber SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO23akaSocialSecurityNumberyA2CmF");
  SWIFT_INLINE_THUNK bool isAkaSocialSecurityNumber() const;

  inline const static struct _impl_akaMiddleName {  // impl struct for case akaMiddleName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::akaMiddleName;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } akaMiddleName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO13akaMiddleNameyA2CmF");
  SWIFT_INLINE_THUNK bool isAkaMiddleName() const;

  inline const static struct _impl_akaPrefixName {  // impl struct for case akaPrefixName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::akaPrefixName;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } akaPrefixName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO13akaPrefixNameyA2CmF");
  SWIFT_INLINE_THUNK bool isAkaPrefixName() const;

  inline const static struct _impl_organDonor {  // impl struct for case organDonor
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::organDonor;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } organDonor SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO10organDonoryA2CmF");
  SWIFT_INLINE_THUNK bool isOrganDonor() const;

  inline const static struct _impl_veteran {  // impl struct for case veteran
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::veteran;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } veteran SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO7veteranyA2CmF");
  SWIFT_INLINE_THUNK bool isVeteran() const;

  inline const static struct _impl_akaDateOfBirth {  // impl struct for case akaDateOfBirth
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::akaDateOfBirth;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } akaDateOfBirth SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO14akaDateOfBirthyA2CmF");
  SWIFT_INLINE_THUNK bool isAkaDateOfBirth() const;

  inline const static struct _impl_issuerIdentificationNumber {  // impl struct for case issuerIdentificationNumber
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::issuerIdentificationNumber;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } issuerIdentificationNumber SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO26issuerIdentificationNumberyA2CmF");
  SWIFT_INLINE_THUNK bool isIssuerIdentificationNumber() const;

  inline const static struct _impl_documentExpirationDate {  // impl struct for case documentExpirationDate
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::documentExpirationDate;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } documentExpirationDate SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO22documentExpirationDateyA2CmF");
  SWIFT_INLINE_THUNK bool isDocumentExpirationDate() const;

  inline const static struct _impl_jurisdictionVersionNumber {  // impl struct for case jurisdictionVersionNumber
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::jurisdictionVersionNumber;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } jurisdictionVersionNumber SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO25jurisdictionVersionNumberyA2CmF");
  SWIFT_INLINE_THUNK bool isJurisdictionVersionNumber() const;

  inline const static struct _impl_jurisdictionVehicleClass {  // impl struct for case jurisdictionVehicleClass
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::jurisdictionVehicleClass;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } jurisdictionVehicleClass SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO24jurisdictionVehicleClassyA2CmF");
  SWIFT_INLINE_THUNK bool isJurisdictionVehicleClass() const;

  inline const static struct _impl_jurisdictionRestrictionCodes {  // impl struct for case jurisdictionRestrictionCodes
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::jurisdictionRestrictionCodes;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } jurisdictionRestrictionCodes SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO28jurisdictionRestrictionCodesyA2CmF");
  SWIFT_INLINE_THUNK bool isJurisdictionRestrictionCodes() const;

  inline const static struct _impl_jurisdictionEndorsementCodes {  // impl struct for case jurisdictionEndorsementCodes
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::jurisdictionEndorsementCodes;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } jurisdictionEndorsementCodes SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO28jurisdictionEndorsementCodesyA2CmF");
  SWIFT_INLINE_THUNK bool isJurisdictionEndorsementCodes() const;

  inline const static struct _impl_documentIssueDate {  // impl struct for case documentIssueDate
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::documentIssueDate;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } documentIssueDate SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO17documentIssueDateyA2CmF");
  SWIFT_INLINE_THUNK bool isDocumentIssueDate() const;

  inline const static struct _impl_federalCommercialVehicleCodes {  // impl struct for case federalCommercialVehicleCodes
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::federalCommercialVehicleCodes;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } federalCommercialVehicleCodes SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO29federalCommercialVehicleCodesyA2CmF");
  SWIFT_INLINE_THUNK bool isFederalCommercialVehicleCodes() const;

  inline const static struct _impl_issuingJurisdiction {  // impl struct for case issuingJurisdiction
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::issuingJurisdiction;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } issuingJurisdiction SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO19issuingJurisdictionyA2CmF");
  SWIFT_INLINE_THUNK bool isIssuingJurisdiction() const;

  inline const static struct _impl_standardVehicleClassification {  // impl struct for case standardVehicleClassification
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::standardVehicleClassification;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } standardVehicleClassification SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO29standardVehicleClassificationyA2CmF");
  SWIFT_INLINE_THUNK bool isStandardVehicleClassification() const;

  inline const static struct _impl_issuingJurisdictionName {  // impl struct for case issuingJurisdictionName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::issuingJurisdictionName;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } issuingJurisdictionName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO23issuingJurisdictionNameyA2CmF");
  SWIFT_INLINE_THUNK bool isIssuingJurisdictionName() const;

  inline const static struct _impl_standardEndorsementCode {  // impl struct for case standardEndorsementCode
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::standardEndorsementCode;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } standardEndorsementCode SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO23standardEndorsementCodeyA2CmF");
  SWIFT_INLINE_THUNK bool isStandardEndorsementCode() const;

  inline const static struct _impl_standardRestrictionCode {  // impl struct for case standardRestrictionCode
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::standardRestrictionCode;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } standardRestrictionCode SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO23standardRestrictionCodeyA2CmF");
  SWIFT_INLINE_THUNK bool isStandardRestrictionCode() const;

  inline const static struct _impl_jurisdictionVehicleClassificationDescription {  // impl struct for case jurisdictionVehicleClassificationDescription
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::jurisdictionVehicleClassificationDescription;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } jurisdictionVehicleClassificationDescription SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO44jurisdictionVehicleClassificationDescriptionyA2CmF");
  SWIFT_INLINE_THUNK bool isJurisdictionVehicleClassificationDescription() const;

  inline const static struct _impl_jurisdictionEndorsmentCodeDescription {  // impl struct for case jurisdictionEndorsmentCodeDescription
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::jurisdictionEndorsmentCodeDescription;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } jurisdictionEndorsmentCodeDescription SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO37jurisdictionEndorsmentCodeDescriptionyA2CmF");
  SWIFT_INLINE_THUNK bool isJurisdictionEndorsmentCodeDescription() const;

  inline const static struct _impl_jurisdictionRestrictionCodeDescription {  // impl struct for case jurisdictionRestrictionCodeDescription
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::jurisdictionRestrictionCodeDescription;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } jurisdictionRestrictionCodeDescription SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO38jurisdictionRestrictionCodeDescriptionyA2CmF");
  SWIFT_INLINE_THUNK bool isJurisdictionRestrictionCodeDescription() const;

  inline const static struct _impl_inventoryControlNumber {  // impl struct for case inventoryControlNumber
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::inventoryControlNumber;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } inventoryControlNumber SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO22inventoryControlNumberyA2CmF");
  SWIFT_INLINE_THUNK bool isInventoryControlNumber() const;

  inline const static struct _impl_cardRevisionDate {  // impl struct for case cardRevisionDate
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cardRevisionDate;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } cardRevisionDate SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO16cardRevisionDateyA2CmF");
  SWIFT_INLINE_THUNK bool isCardRevisionDate() const;

  inline const static struct _impl_documentDiscriminator {  // impl struct for case documentDiscriminator
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::documentDiscriminator;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } documentDiscriminator SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO21documentDiscriminatoryA2CmF");
  SWIFT_INLINE_THUNK bool isDocumentDiscriminator() const;

  inline const static struct _impl_limitedDurationDocument {  // impl struct for case limitedDurationDocument
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::limitedDurationDocument;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } limitedDurationDocument SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO23limitedDurationDocumentyA2CmF");
  SWIFT_INLINE_THUNK bool isLimitedDurationDocument() const;

  inline const static struct _impl_auditInformation {  // impl struct for case auditInformation
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::auditInformation;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } auditInformation SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO16auditInformationyA2CmF");
  SWIFT_INLINE_THUNK bool isAuditInformation() const;

  inline const static struct _impl_complianceType {  // impl struct for case complianceType
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::complianceType;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } complianceType SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO14complianceTypeyA2CmF");
  SWIFT_INLINE_THUNK bool isComplianceType() const;

  inline const static struct _impl_issueTimestamp {  // impl struct for case issueTimestamp
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::issueTimestamp;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } issueTimestamp SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO14issueTimestampyA2CmF");
  SWIFT_INLINE_THUNK bool isIssueTimestamp() const;

  inline const static struct _impl_permitExpirationDate {  // impl struct for case permitExpirationDate
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::permitExpirationDate;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } permitExpirationDate SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO20permitExpirationDateyA2CmF");
  SWIFT_INLINE_THUNK bool isPermitExpirationDate() const;

  inline const static struct _impl_permitIdentifier {  // impl struct for case permitIdentifier
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::permitIdentifier;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } permitIdentifier SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO16permitIdentifieryA2CmF");
  SWIFT_INLINE_THUNK bool isPermitIdentifier() const;

  inline const static struct _impl_permitIssueDate {  // impl struct for case permitIssueDate
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::permitIssueDate;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } permitIssueDate SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO15permitIssueDateyA2CmF");
  SWIFT_INLINE_THUNK bool isPermitIssueDate() const;

  inline const static struct _impl_numberOfDuplicates {  // impl struct for case numberOfDuplicates
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::numberOfDuplicates;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } numberOfDuplicates SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO18numberOfDuplicatesyA2CmF");
  SWIFT_INLINE_THUNK bool isNumberOfDuplicates() const;

  inline const static struct _impl_hazmatExpirationDate {  // impl struct for case hazmatExpirationDate
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::hazmatExpirationDate;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } hazmatExpirationDate SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO20hazmatExpirationDateyA2CmF");
  SWIFT_INLINE_THUNK bool isHazmatExpirationDate() const;

  inline const static struct _impl_medicalIndicator {  // impl struct for case medicalIndicator
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::medicalIndicator;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } medicalIndicator SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO16medicalIndicatoryA2CmF");
  SWIFT_INLINE_THUNK bool isMedicalIndicator() const;

  inline const static struct _impl_nonResident {  // impl struct for case nonResident
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nonResident;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } nonResident SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO11nonResidentyA2CmF");
  SWIFT_INLINE_THUNK bool isNonResident() const;

  inline const static struct _impl_uniqueCustomerId {  // impl struct for case uniqueCustomerId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::uniqueCustomerId;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } uniqueCustomerId SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO16uniqueCustomerIdyA2CmF");
  SWIFT_INLINE_THUNK bool isUniqueCustomerId() const;

  inline const static struct _impl_dataDiscriminator {  // impl struct for case dataDiscriminator
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dataDiscriminator;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } dataDiscriminator SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO17dataDiscriminatoryA2CmF");
  SWIFT_INLINE_THUNK bool isDataDiscriminator() const;

  inline const static struct _impl_documentExpirationMonth {  // impl struct for case documentExpirationMonth
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::documentExpirationMonth;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } documentExpirationMonth SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO23documentExpirationMonthyA2CmF");
  SWIFT_INLINE_THUNK bool isDocumentExpirationMonth() const;

  inline const static struct _impl_documentNonexpiring {  // impl struct for case documentNonexpiring
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::documentNonexpiring;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } documentNonexpiring SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO19documentNonexpiringyA2CmF");
  SWIFT_INLINE_THUNK bool isDocumentNonexpiring() const;

  inline const static struct _impl_securityVersion {  // impl struct for case securityVersion
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::securityVersion;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } securityVersion SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO15securityVersionyA2CmF");
  SWIFT_INLINE_THUNK bool isSecurityVersion() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO12documentTypeyA2CmFWC) return cases::documentType;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO21standardVersionNumberyA2CmFWC) return cases::standardVersionNumber;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO18customerFamilyNameyA2CmFWC) return cases::customerFamilyName;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO17customerFirstNameyA2CmFWC) return cases::customerFirstName;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO16customerFullNameyA2CmFWC) return cases::customerFullName;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO11dateOfBirthyA2CmFWC) return cases::dateOfBirth;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO3sexyA2CmFWC) return cases::sex;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO8eyeColoryA2CmFWC) return cases::eyeColor;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO13addressStreetyA2CmFWC) return cases::addressStreet;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO11addressCityyA2CmFWC) return cases::addressCity;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO23addressJurisdictionCodeyA2CmFWC) return cases::addressJurisdictionCode;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO17addressPostalCodeyA2CmFWC) return cases::addressPostalCode;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO11fullAddressyA2CmFWC) return cases::fullAddress;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO6heightyA2CmFWC) return cases::height;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO8heightInyA2CmFWC) return cases::heightIn;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO8heightCmyA2CmFWC) return cases::heightCm;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO18customerMiddleNameyA2CmFWC) return cases::customerMiddleName;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO9hairColoryA2CmFWC) return cases::hairColor;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO10nameSuffixyA2CmFWC) return cases::nameSuffix;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO11akaFullNameyA2CmFWC) return cases::akaFullName;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO13akaFamilyNameyA2CmFWC) return cases::akaFamilyName;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO12akaGivenNameyA2CmFWC) return cases::akaGivenName;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO13akaSuffixNameyA2CmFWC) return cases::akaSuffixName;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO11weightRangeyA2CmFWC) return cases::weightRange;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO12weightPoundsyA2CmFWC) return cases::weightPounds;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO15weightKilogramsyA2CmFWC) return cases::weightKilograms;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO16customerIdNumberyA2CmFWC) return cases::customerIdNumber;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO20familyNameTruncationyA2CmFWC) return cases::familyNameTruncation;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO19firstNameTruncationyA2CmFWC) return cases::firstNameTruncation;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO20middleNameTruncationyA2CmFWC) return cases::middleNameTruncation;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO12placeOfBirthyA2CmFWC) return cases::placeOfBirth;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO14addressStreet2yA2CmFWC) return cases::addressStreet2;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO13raceEthnicityyA2CmFWC) return cases::raceEthnicity;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO10namePrefixyA2CmFWC) return cases::namePrefix;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO21countryIdentificationyA2CmFWC) return cases::countryIdentification;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO22residenceStreetAddressyA2CmFWC) return cases::residenceStreetAddress;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO23residenceStreetAddress2yA2CmFWC) return cases::residenceStreetAddress2;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO13residenceCityyA2CmFWC) return cases::residenceCity;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO25residenceJurisdictionCodeyA2CmFWC) return cases::residenceJurisdictionCode;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO19residencePostalCodeyA2CmFWC) return cases::residencePostalCode;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO20residenceFullAddressyA2CmFWC) return cases::residenceFullAddress;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO7under18yA2CmFWC) return cases::under18;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO7under19yA2CmFWC) return cases::under19;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO7under21yA2CmFWC) return cases::under21;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO20socialSecurityNumberyA2CmFWC) return cases::socialSecurityNumber;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO23akaSocialSecurityNumberyA2CmFWC) return cases::akaSocialSecurityNumber;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO13akaMiddleNameyA2CmFWC) return cases::akaMiddleName;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO13akaPrefixNameyA2CmFWC) return cases::akaPrefixName;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO10organDonoryA2CmFWC) return cases::organDonor;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO7veteranyA2CmFWC) return cases::veteran;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO14akaDateOfBirthyA2CmFWC) return cases::akaDateOfBirth;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO26issuerIdentificationNumberyA2CmFWC) return cases::issuerIdentificationNumber;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO22documentExpirationDateyA2CmFWC) return cases::documentExpirationDate;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO25jurisdictionVersionNumberyA2CmFWC) return cases::jurisdictionVersionNumber;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO24jurisdictionVehicleClassyA2CmFWC) return cases::jurisdictionVehicleClass;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO28jurisdictionRestrictionCodesyA2CmFWC) return cases::jurisdictionRestrictionCodes;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO28jurisdictionEndorsementCodesyA2CmFWC) return cases::jurisdictionEndorsementCodes;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO17documentIssueDateyA2CmFWC) return cases::documentIssueDate;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO29federalCommercialVehicleCodesyA2CmFWC) return cases::federalCommercialVehicleCodes;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO19issuingJurisdictionyA2CmFWC) return cases::issuingJurisdiction;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO29standardVehicleClassificationyA2CmFWC) return cases::standardVehicleClassification;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO23issuingJurisdictionNameyA2CmFWC) return cases::issuingJurisdictionName;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO23standardEndorsementCodeyA2CmFWC) return cases::standardEndorsementCode;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO23standardRestrictionCodeyA2CmFWC) return cases::standardRestrictionCode;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO44jurisdictionVehicleClassificationDescriptionyA2CmFWC) return cases::jurisdictionVehicleClassificationDescription;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO37jurisdictionEndorsmentCodeDescriptionyA2CmFWC) return cases::jurisdictionEndorsmentCodeDescription;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO38jurisdictionRestrictionCodeDescriptionyA2CmFWC) return cases::jurisdictionRestrictionCodeDescription;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO22inventoryControlNumberyA2CmFWC) return cases::inventoryControlNumber;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO16cardRevisionDateyA2CmFWC) return cases::cardRevisionDate;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO21documentDiscriminatoryA2CmFWC) return cases::documentDiscriminator;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO23limitedDurationDocumentyA2CmFWC) return cases::limitedDurationDocument;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO16auditInformationyA2CmFWC) return cases::auditInformation;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO14complianceTypeyA2CmFWC) return cases::complianceType;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO14issueTimestampyA2CmFWC) return cases::issueTimestamp;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO20permitExpirationDateyA2CmFWC) return cases::permitExpirationDate;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO16permitIdentifieryA2CmFWC) return cases::permitIdentifier;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO15permitIssueDateyA2CmFWC) return cases::permitIssueDate;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO18numberOfDuplicatesyA2CmFWC) return cases::numberOfDuplicates;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO20hazmatExpirationDateyA2CmFWC) return cases::hazmatExpirationDate;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO16medicalIndicatoryA2CmFWC) return cases::medicalIndicator;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO11nonResidentyA2CmFWC) return cases::nonResident;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO16uniqueCustomerIdyA2CmFWC) return cases::uniqueCustomerId;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO17dataDiscriminatoryA2CmFWC) return cases::dataDiscriminator;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO23documentExpirationMonthyA2CmFWC) return cases::documentExpirationMonth;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO19documentNonexpiringyA2CmFWC) return cases::documentNonexpiring;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO15securityVersionyA2CmFWC) return cases::securityVersion;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK BarcodeElementKey(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK BarcodeElementKey _make() noexcept {
    auto metadata = _impl::$s7BlinkID17BarcodeElementKeyOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return BarcodeElementKey(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID17BarcodeElementKeyOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID17BarcodeElementKeyOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID17BarcodeElementKeyOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_BarcodeElementKey;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID17BarcodeElementKeyOD;
  static inline constexpr $s7BlinkID17BarcodeElementKeyOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_BarcodeElementKey {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(BarcodeElementKey &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const BarcodeElementKey &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER BarcodeElementKey returnNewValue(T callable) {
    auto result = BarcodeElementKey::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID17BarcodeElementKeyOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::BarcodeElementKey> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID17BarcodeElementKeyOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::BarcodeElementKey> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::BarcodeElementKey> = true;
template<>
struct implClassFor<BlinkID::BarcodeElementKey> { using type = BlinkID::_impl::_impl_BarcodeElementKey; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID15BarcodeElementsV") BarcodeElements;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::BarcodeElements> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_BarcodeElements;

// Type metadata accessor for BarcodeElements
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID15BarcodeElementsVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID15BarcodeElementsV") BarcodeElements final {
public:
  SWIFT_INLINE_THUNK ~BarcodeElements() noexcept {
    auto metadata = _impl::$s7BlinkID15BarcodeElementsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK BarcodeElements(const BarcodeElements &other) noexcept {
    auto metadata = _impl::$s7BlinkID15BarcodeElementsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK BarcodeElements &operator =(const BarcodeElements &other) noexcept {
    auto metadata = _impl::$s7BlinkID15BarcodeElementsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK BarcodeElements &operator =(BarcodeElements &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER BarcodeElements(BarcodeElements &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getValue(const BarcodeElementKey& barcodeElementKey) SWIFT_SYMBOL("s:7BlinkID15BarcodeElementsV8getValue3forSSAA0C10ElementKeyO_tF");
private:
  SWIFT_INLINE_THUNK BarcodeElements(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK BarcodeElements _make() noexcept {
    auto metadata = _impl::$s7BlinkID15BarcodeElementsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return BarcodeElements(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_BarcodeElements;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID15BarcodeElementsVD;
  static inline constexpr $s7BlinkID15BarcodeElementsVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_BarcodeElements {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(BarcodeElements &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const BarcodeElements &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER BarcodeElements returnNewValue(T callable) {
    auto result = BarcodeElements::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID15BarcodeElementsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::BarcodeElements> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID15BarcodeElementsVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::BarcodeElements> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::BarcodeElements> = true;
template<>
struct implClassFor<BlinkID::BarcodeElements> { using type = BlinkID::_impl::_impl_BarcodeElements; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:7BlinkID10DateResultV") DateResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
static inline const constexpr bool isUsableInGenericContext<BlinkID::DateResult<T_0_0>> = isUsableInGenericContext<T_0_0>;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:7BlinkID25DriverLicenseDetailedInfoV") DriverLicenseDetailedInfo;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
static inline const constexpr bool isUsableInGenericContext<BlinkID::DriverLicenseDetailedInfo<T_0_0>> = isUsableInGenericContext<T_0_0>;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV") BarcodeResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::BarcodeResult> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_BarcodeResult;

// Type metadata accessor for BarcodeResult
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID13BarcodeResultVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV") BarcodeResult final {
public:
  SWIFT_INLINE_THUNK ~BarcodeResult() noexcept {
    auto metadata = _impl::$s7BlinkID13BarcodeResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK BarcodeResult(const BarcodeResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID13BarcodeResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK BarcodeResult &operator =(const BarcodeResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID13BarcodeResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK BarcodeResult &operator =(BarcodeResult &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER BarcodeResult(BarcodeResult &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK BarcodeData getBarcodeData() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV11barcodeDataAA0cF0Vvp");
  SWIFT_INLINE_THUNK swift::String getFirstName() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV9firstNameSSvp");
  SWIFT_INLINE_THUNK swift::String getMiddleName() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV10middleNameSSvp");
  SWIFT_INLINE_THUNK swift::String getLastName() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV8lastNameSSvp");
  SWIFT_INLINE_THUNK swift::String getFullName() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV8fullNameSSvp");
  SWIFT_INLINE_THUNK swift::String getAdditionalNameInformation() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV25additionalNameInformationSSvp");
  SWIFT_INLINE_THUNK swift::String getAddress() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV7addressSSvp");
  SWIFT_INLINE_THUNK swift::String getPlaceOfBirth() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV12placeOfBirthSSvp");
  SWIFT_INLINE_THUNK swift::String getNationality() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV11nationalitySSvp");
  SWIFT_INLINE_THUNK swift::String getRace() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV4raceSSvp");
  SWIFT_INLINE_THUNK swift::String getReligion() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV8religionSSvp");
  SWIFT_INLINE_THUNK swift::String getProfession() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV10professionSSvp");
  SWIFT_INLINE_THUNK swift::String getMaritalStatus() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV13maritalStatusSSvp");
  SWIFT_INLINE_THUNK swift::String getResidentialStatus() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV17residentialStatusSSvp");
  SWIFT_INLINE_THUNK swift::String getEmployer() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV8employerSSvp");
  SWIFT_INLINE_THUNK swift::String getSex() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV3sexSSvp");
  SWIFT_INLINE_THUNK DateResult<swift::String> getDateOfBirth() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV11dateOfBirthAA04DateD0VySSGvp");
  SWIFT_INLINE_THUNK DateResult<swift::String> getDateOfIssue() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV11dateOfIssueAA04DateD0VySSGvp");
  SWIFT_INLINE_THUNK DateResult<swift::String> getDateOfExpiry() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV12dateOfExpiryAA04DateD0VySSGvp");
  SWIFT_INLINE_THUNK swift::String getDocumentNumber() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV14documentNumberSSvp");
  SWIFT_INLINE_THUNK swift::String getPersonalIdNumber() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV16personalIdNumberSSvp");
  SWIFT_INLINE_THUNK swift::String getDocumentAdditionalNumber() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV24documentAdditionalNumberSSvp");
  SWIFT_INLINE_THUNK swift::String getIssuingAuthority() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV16issuingAuthoritySSvp");
  SWIFT_INLINE_THUNK AddressDetailedInfo getAddressDetailedInfo() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV19addressDetailedInfoAA07AddressfG0Vvp");
  SWIFT_INLINE_THUNK DriverLicenseDetailedInfo<swift::String> getDriverLicenseDetailedInfo() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV25driverLicenseDetailedInfoAA06DriverfgH0VySSGvp");
  SWIFT_INLINE_THUNK BarcodeElements getExtendedElements() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV16extendedElementsAA0cF0Vvp");
private:
  SWIFT_INLINE_THUNK BarcodeResult(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK BarcodeResult _make() noexcept {
    auto metadata = _impl::$s7BlinkID13BarcodeResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return BarcodeResult(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_BarcodeResult;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID13BarcodeResultVD;
  static inline constexpr $s7BlinkID13BarcodeResultVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_BarcodeResult {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(BarcodeResult &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const BarcodeResult &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER BarcodeResult returnNewValue(T callable) {
    auto result = BarcodeResult::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID13BarcodeResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::BarcodeResult> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID13BarcodeResultVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::BarcodeResult> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::BarcodeResult> = true;
template<>
struct implClassFor<BlinkID::BarcodeResult> { using type = BlinkID::_impl::_impl_BarcodeResult; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

/// Represents the type of scanned barcode
namespace _impl {

class _impl_BarcodeType;

// Type metadata accessor for BarcodeType
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID11BarcodeTypeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum BarcodeType
extern "C" {
extern unsigned $s7BlinkID11BarcodeTypeO4noneyA2CmFWC;
extern unsigned $s7BlinkID11BarcodeTypeO6qrCodeyA2CmFWC;
extern unsigned $s7BlinkID11BarcodeTypeO10dataMatrixyA2CmFWC;
extern unsigned $s7BlinkID11BarcodeTypeO4upceyA2CmFWC;
extern unsigned $s7BlinkID11BarcodeTypeO4upcayA2CmFWC;
extern unsigned $s7BlinkID11BarcodeTypeO4ean8yA2CmFWC;
extern unsigned $s7BlinkID11BarcodeTypeO5ean13yA2CmFWC;
extern unsigned $s7BlinkID11BarcodeTypeO7code128yA2CmFWC;
extern unsigned $s7BlinkID11BarcodeTypeO6code39yA2CmFWC;
extern unsigned $s7BlinkID11BarcodeTypeO3itfyA2CmFWC;
extern unsigned $s7BlinkID11BarcodeTypeO5aztecyA2CmFWC;
extern unsigned $s7BlinkID11BarcodeTypeO6pdf417yA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO") BarcodeType final {
public:
  SWIFT_INLINE_THUNK ~BarcodeType() noexcept {
    auto metadata = _impl::$s7BlinkID11BarcodeTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK BarcodeType(const BarcodeType &other) noexcept {
    auto metadata = _impl::$s7BlinkID11BarcodeTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK BarcodeType &operator =(const BarcodeType &other) noexcept {
    auto metadata = _impl::$s7BlinkID11BarcodeTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK BarcodeType &operator =(BarcodeType &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER BarcodeType(BarcodeType &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    none SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO4noneyA2CmF"),
    qrCode SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO6qrCodeyA2CmF"),
    dataMatrix SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO10dataMatrixyA2CmF"),
    upce SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO4upceyA2CmF"),
    upca SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO4upcayA2CmF"),
    ean8 SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO4ean8yA2CmF"),
    ean13 SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO5ean13yA2CmF"),
    code128 SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO7code128yA2CmF"),
    code39 SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO6code39yA2CmF"),
    itf SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO3itfyA2CmF"),
    aztec SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO5aztecyA2CmF"),
    pdf417 SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO6pdf417yA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_none {  // impl struct for case none
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::none;
    }
    SWIFT_INLINE_THUNK BarcodeType operator()() const;
  } none SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO4noneyA2CmF");
  SWIFT_INLINE_THUNK bool isNone() const;

  inline const static struct _impl_qrCode {  // impl struct for case qrCode
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::qrCode;
    }
    SWIFT_INLINE_THUNK BarcodeType operator()() const;
  } qrCode SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO6qrCodeyA2CmF");
  SWIFT_INLINE_THUNK bool isQrCode() const;

  inline const static struct _impl_dataMatrix {  // impl struct for case dataMatrix
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dataMatrix;
    }
    SWIFT_INLINE_THUNK BarcodeType operator()() const;
  } dataMatrix SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO10dataMatrixyA2CmF");
  SWIFT_INLINE_THUNK bool isDataMatrix() const;

  inline const static struct _impl_upce {  // impl struct for case upce
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::upce;
    }
    SWIFT_INLINE_THUNK BarcodeType operator()() const;
  } upce SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO4upceyA2CmF");
  SWIFT_INLINE_THUNK bool isUpce() const;

  inline const static struct _impl_upca {  // impl struct for case upca
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::upca;
    }
    SWIFT_INLINE_THUNK BarcodeType operator()() const;
  } upca SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO4upcayA2CmF");
  SWIFT_INLINE_THUNK bool isUpca() const;

  inline const static struct _impl_ean8 {  // impl struct for case ean8
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ean8;
    }
    SWIFT_INLINE_THUNK BarcodeType operator()() const;
  } ean8 SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO4ean8yA2CmF");
  SWIFT_INLINE_THUNK bool isEan8() const;

  inline const static struct _impl_ean13 {  // impl struct for case ean13
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ean13;
    }
    SWIFT_INLINE_THUNK BarcodeType operator()() const;
  } ean13 SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO5ean13yA2CmF");
  SWIFT_INLINE_THUNK bool isEan13() const;

  inline const static struct _impl_code128 {  // impl struct for case code128
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::code128;
    }
    SWIFT_INLINE_THUNK BarcodeType operator()() const;
  } code128 SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO7code128yA2CmF");
  SWIFT_INLINE_THUNK bool isCode128() const;

  inline const static struct _impl_code39 {  // impl struct for case code39
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::code39;
    }
    SWIFT_INLINE_THUNK BarcodeType operator()() const;
  } code39 SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO6code39yA2CmF");
  SWIFT_INLINE_THUNK bool isCode39() const;

  inline const static struct _impl_itf {  // impl struct for case itf
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::itf;
    }
    SWIFT_INLINE_THUNK BarcodeType operator()() const;
  } itf SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO3itfyA2CmF");
  SWIFT_INLINE_THUNK bool isItf() const;

  inline const static struct _impl_aztec {  // impl struct for case aztec
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::aztec;
    }
    SWIFT_INLINE_THUNK BarcodeType operator()() const;
  } aztec SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO5aztecyA2CmF");
  SWIFT_INLINE_THUNK bool isAztec() const;

  inline const static struct _impl_pdf417 {  // impl struct for case pdf417
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::pdf417;
    }
    SWIFT_INLINE_THUNK BarcodeType operator()() const;
  } pdf417 SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO6pdf417yA2CmF");
  SWIFT_INLINE_THUNK bool isPdf417() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID11BarcodeTypeO4noneyA2CmFWC) return cases::none;
    if (tag == _impl::$s7BlinkID11BarcodeTypeO6qrCodeyA2CmFWC) return cases::qrCode;
    if (tag == _impl::$s7BlinkID11BarcodeTypeO10dataMatrixyA2CmFWC) return cases::dataMatrix;
    if (tag == _impl::$s7BlinkID11BarcodeTypeO4upceyA2CmFWC) return cases::upce;
    if (tag == _impl::$s7BlinkID11BarcodeTypeO4upcayA2CmFWC) return cases::upca;
    if (tag == _impl::$s7BlinkID11BarcodeTypeO4ean8yA2CmFWC) return cases::ean8;
    if (tag == _impl::$s7BlinkID11BarcodeTypeO5ean13yA2CmFWC) return cases::ean13;
    if (tag == _impl::$s7BlinkID11BarcodeTypeO7code128yA2CmFWC) return cases::code128;
    if (tag == _impl::$s7BlinkID11BarcodeTypeO6code39yA2CmFWC) return cases::code39;
    if (tag == _impl::$s7BlinkID11BarcodeTypeO3itfyA2CmFWC) return cases::itf;
    if (tag == _impl::$s7BlinkID11BarcodeTypeO5aztecyA2CmFWC) return cases::aztec;
    if (tag == _impl::$s7BlinkID11BarcodeTypeO6pdf417yA2CmFWC) return cases::pdf417;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK BarcodeType(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK BarcodeType _make() noexcept {
    auto metadata = _impl::$s7BlinkID11BarcodeTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return BarcodeType(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID11BarcodeTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID11BarcodeTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID11BarcodeTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_BarcodeType;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID11BarcodeTypeOD;
  static inline constexpr $s7BlinkID11BarcodeTypeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_BarcodeType {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(BarcodeType &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const BarcodeType &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER BarcodeType returnNewValue(T callable) {
    auto result = BarcodeType::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID11BarcodeTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::BarcodeType> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID11BarcodeTypeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::BarcodeType> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::BarcodeType> = true;
template<>
struct implClassFor<BlinkID::BarcodeType> { using type = BlinkID::_impl::_impl_BarcodeType; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID0A5IDSDKV") BlinkIDSDK;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::BlinkIDSDK> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_BlinkIDSDK;

// Type metadata accessor for BlinkIDSDK
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID0A5IDSDKVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID0A5IDSDKV") BlinkIDSDK final {
public:
  SWIFT_INLINE_THUNK ~BlinkIDSDK() noexcept {
    auto metadata = _impl::$s7BlinkID0A5IDSDKVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK BlinkIDSDK(const BlinkIDSDK &other) noexcept {
    auto metadata = _impl::$s7BlinkID0A5IDSDKVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK BlinkIDSDK &operator =(const BlinkIDSDK &other) noexcept {
    auto metadata = _impl::$s7BlinkID0A5IDSDKVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK BlinkIDSDK &operator =(BlinkIDSDK &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER BlinkIDSDK(BlinkIDSDK &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
private:
  SWIFT_INLINE_THUNK BlinkIDSDK(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK BlinkIDSDK _make() noexcept {
    auto metadata = _impl::$s7BlinkID0A5IDSDKVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return BlinkIDSDK(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_BlinkIDSDK;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID0A5IDSDKVD;
  static inline constexpr $s7BlinkID0A5IDSDKVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_BlinkIDSDK {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(BlinkIDSDK &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const BlinkIDSDK &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER BlinkIDSDK returnNewValue(T callable) {
    auto result = BlinkIDSDK::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID0A5IDSDKVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::BlinkIDSDK> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID0A5IDSDKVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::BlinkIDSDK> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::BlinkIDSDK> = true;
template<>
struct implClassFor<BlinkID::BlinkIDSDK> { using type = BlinkID::_impl::_impl_BlinkIDSDK; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID15RecognitionModeO") RecognitionMode;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::RecognitionMode> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID0A5IDSDKV17DocumentClassInfoV") DocumentClassInfo;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::DocumentClassInfo> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID15DataMatchResultV") DataMatchResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::DataMatchResult> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID0A5IDSDKV12StringResultV") StringResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::StringResult> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID13DependentInfoV") DependentInfo;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::DependentInfo> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID24SingleSideScanningResultV") SingleSideScanningResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::SingleSideScanningResult> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID12ScanningSideO") ScanningSide;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::ScanningSide> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID16InputImageResultV") InputImageResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::InputImageResult> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID18CroppedImageResultV") CroppedImageResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::CroppedImageResult> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID26DetailedCroppedImageResultV") DetailedCroppedImageResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::DetailedCroppedImageResult> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID0A16IDScanningResultV") BlinkIDScanningResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::BlinkIDScanningResult> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_BlinkIDScanningResult;

// Type metadata accessor for BlinkIDScanningResult
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID0A16IDScanningResultVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID0A16IDScanningResultV") BlinkIDScanningResult final {
public:
  SWIFT_INLINE_THUNK ~BlinkIDScanningResult() noexcept {
    auto metadata = _impl::$s7BlinkID0A16IDScanningResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK BlinkIDScanningResult(const BlinkIDScanningResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID0A16IDScanningResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK BlinkIDScanningResult &operator =(const BlinkIDScanningResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID0A16IDScanningResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK BlinkIDScanningResult &operator =(BlinkIDScanningResult &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER BlinkIDScanningResult(BlinkIDScanningResult &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK RecognitionMode getRecognitionMode() const SWIFT_SYMBOL("s:7BlinkID0A16IDScanningResultV15recognitionModeAA011RecognitionF0Ovp");
  SWIFT_INLINE_THUNK swift::Optional<DataMatchResult> getDataMatchResult() const SWIFT_SYMBOL("s:7BlinkID0A16IDScanningResultV09dataMatchD0AA04DatafD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<bool> getDateOfExpiryPermanent() const SWIFT_SYMBOL("s:7BlinkID0A16IDScanningResultV21dateOfExpiryPermanentSbSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::Array<DependentInfo>> getDependentsInfo() const SWIFT_SYMBOL("s:7BlinkID0A16IDScanningResultV14dependentsInfoSayAA09DependentF0VGSgvp");
  SWIFT_INLINE_THUNK swift::Array<SingleSideScanningResult> getSubResults() const SWIFT_SYMBOL("s:7BlinkID0A16IDScanningResultV10subResultsSayAA018SingleSideScanningD0VGvp");
/// Returns the input image for the given scanning side.
/// \param scanningSide The scanning side. 
///
///
/// returns:
/// The input image for the given scanning side or <code>nil</code> if the input image is not available.
  SWIFT_INLINE_THUNK swift::Optional<InputImageResult> getInputImage(const ScanningSide& scanningSide) const SWIFT_SYMBOL("s:7BlinkID0A16IDScanningResultV13getInputImage12scanningSideAA0fgD0VSgAA08ScanningI0O_tF");
/// Returns the input image containing parsable barcode.
///
/// returns:
/// The input image containing parsable barcode or <code>nil</code> if the barcode input image is not available.
  SWIFT_INLINE_THUNK swift::Optional<InputImageResult> getBarcodeInputImage() const SWIFT_SYMBOL("s:7BlinkID0A16IDScanningResultV20getBarcodeInputImageAA0ghD0VSgyF");
/// Returns the cropped document image for the given scanning side.
/// \param scanningSide The scanning side. 
///
///
/// returns:
/// The cropped document image for the given scanning side or <code>nil</code> if the document image is not available.
  SWIFT_INLINE_THUNK swift::Optional<CroppedImageResult> getDocumentImage(const ScanningSide& scanningSide) const SWIFT_SYMBOL("s:7BlinkID0A16IDScanningResultV16getDocumentImage12scanningSideAA07CroppedgD0VSgAA08ScanningI0O_tF");
/// Returns the cropped face image with additional info.
///
/// returns:
/// The cropped face image with additional info or <code>nil</code> if the face image is not available.
  SWIFT_INLINE_THUNK swift::Optional<DetailedCroppedImageResult> getFaceImage() const SWIFT_SYMBOL("s:7BlinkID0A16IDScanningResultV12getFaceImageAA015DetailedCroppedgD0VSgyF");
/// Returns the cropped signature image with additional info.
///
/// returns:
/// The cropped signature image with additional info or <code>nil</code> if the signature image is not available.
  SWIFT_INLINE_THUNK swift::Optional<DetailedCroppedImageResult> getSignatureImage() const SWIFT_SYMBOL("s:7BlinkID0A16IDScanningResultV17getSignatureImageAA015DetailedCroppedgD0VSgyF");
private:
  SWIFT_INLINE_THUNK BlinkIDScanningResult(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK BlinkIDScanningResult _make() noexcept {
    auto metadata = _impl::$s7BlinkID0A16IDScanningResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return BlinkIDScanningResult(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_BlinkIDScanningResult;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID0A16IDScanningResultVD;
  static inline constexpr $s7BlinkID0A16IDScanningResultVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_BlinkIDScanningResult {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(BlinkIDScanningResult &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const BlinkIDScanningResult &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER BlinkIDScanningResult returnNewValue(T callable) {
    auto result = BlinkIDScanningResult::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID0A16IDScanningResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::BlinkIDScanningResult> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID0A16IDScanningResultVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::BlinkIDScanningResult> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::BlinkIDScanningResult> = true;
template<>
struct implClassFor<BlinkID::BlinkIDScanningResult> { using type = BlinkID::_impl::_impl_BlinkIDScanningResult; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {


/// A thread-safe SDK for document verification and scanning operations.
/// <code>BlinkIDSdk</code> provides functionality for creating document scanning sessions
/// and managing SDK lifecycle.
/// Example usage:
/// \code
/// let settings = BlinkIDSdkSettings(
///     licenseKey: "your-license-key",
///     downloadResources: true,
/// )
///
/// do {
///     let sdk = try await createBlinkIDSdk(withSettings: settings)
///     let session = await sdk.createScanningSession()
///     // Use the session for document scanning
/// } catch {
///     // Handle initialization errors
/// }
///
/// \endcode
class SWIFT_SYMBOL("s:7BlinkID0A5IDSdkC") BlinkIDSdk;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::BlinkIDSdk> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_BlinkIDSdk;
// Type metadata accessor for BlinkIDSdk
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID0A5IDSdkCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID0A5IDSdkC") BlinkIDSdk final : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
protected:
  SWIFT_INLINE_THUNK BlinkIDSdk(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_BlinkIDSdk;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID0A5IDSdkCD;
  static inline constexpr $s7BlinkID0A5IDSdkCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_BlinkIDSdk {
public:
static SWIFT_INLINE_THUNK BlinkIDSdk makeRetained(void * _Nonnull ptr) noexcept { return BlinkIDSdk(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::BlinkIDSdk> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID0A5IDSdkCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<BlinkID::BlinkIDSdk> { using type = BlinkID::_impl::_impl_BlinkIDSdk; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID14RequestTimeoutV") RequestTimeout;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::RequestTimeout> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID0A13IDSdkSettingsV") BlinkIDSdkSettings;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::BlinkIDSdkSettings> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_BlinkIDSdkSettings;

// Type metadata accessor for BlinkIDSdkSettings
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID0A13IDSdkSettingsVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID0A13IDSdkSettingsV") BlinkIDSdkSettings final {
public:
  SWIFT_INLINE_THUNK ~BlinkIDSdkSettings() noexcept {
    auto metadata = _impl::$s7BlinkID0A13IDSdkSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK BlinkIDSdkSettings(const BlinkIDSdkSettings &other) noexcept {
    auto metadata = _impl::$s7BlinkID0A13IDSdkSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK BlinkIDSdkSettings &operator =(const BlinkIDSdkSettings &other) noexcept {
    auto metadata = _impl::$s7BlinkID0A13IDSdkSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK BlinkIDSdkSettings &operator =(BlinkIDSdkSettings &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER BlinkIDSdkSettings(BlinkIDSdkSettings &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getLicenseKey() const SWIFT_SYMBOL("s:7BlinkID0A13IDSdkSettingsV10licenseKeySSvp");
  SWIFT_INLINE_THUNK void setLicenseKey(const swift::String& value) SWIFT_SYMBOL("s:7BlinkID0A13IDSdkSettingsV10licenseKeySSvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getLicensee() const SWIFT_SYMBOL("s:7BlinkID0A13IDSdkSettingsV8licenseeSSSgvp");
  SWIFT_INLINE_THUNK void setLicensee(const swift::Optional<swift::String>& value) SWIFT_SYMBOL("s:7BlinkID0A13IDSdkSettingsV8licenseeSSSgvp");
  SWIFT_INLINE_THUNK bool getHelloLogEnabled() const SWIFT_SYMBOL("s:7BlinkID0A13IDSdkSettingsV15helloLogEnabledSbvp");
  SWIFT_INLINE_THUNK void setHelloLogEnabled(bool value) SWIFT_SYMBOL("s:7BlinkID0A13IDSdkSettingsV15helloLogEnabledSbvp");
  SWIFT_INLINE_THUNK bool getDownloadResources() const SWIFT_SYMBOL("s:7BlinkID0A13IDSdkSettingsV17downloadResourcesSbvp");
  SWIFT_INLINE_THUNK void setDownloadResources(bool value) SWIFT_SYMBOL("s:7BlinkID0A13IDSdkSettingsV17downloadResourcesSbvp");
  SWIFT_INLINE_THUNK swift::String getResourceDownloadUrl() const SWIFT_SYMBOL("s:7BlinkID0A13IDSdkSettingsV19resourceDownloadUrlSSvp");
  SWIFT_INLINE_THUNK void setResourceDownloadUrl(const swift::String& value) SWIFT_SYMBOL("s:7BlinkID0A13IDSdkSettingsV19resourceDownloadUrlSSvp");
  SWIFT_INLINE_THUNK swift::String getResourceLocalFolder() const SWIFT_SYMBOL("s:7BlinkID0A13IDSdkSettingsV19resourceLocalFolderSSvp");
  SWIFT_INLINE_THUNK void setResourceLocalFolder(const swift::String& value) SWIFT_SYMBOL("s:7BlinkID0A13IDSdkSettingsV19resourceLocalFolderSSvp");
  SWIFT_INLINE_THUNK RequestTimeout getResourceRequestTimeout() const SWIFT_SYMBOL("s:7BlinkID0A13IDSdkSettingsV22resourceRequestTimeoutAA0fG0Vvp");
  SWIFT_INLINE_THUNK void setResourceRequestTimeout(const RequestTimeout& value) SWIFT_SYMBOL("s:7BlinkID0A13IDSdkSettingsV22resourceRequestTimeoutAA0fG0Vvp");
private:
  SWIFT_INLINE_THUNK BlinkIDSdkSettings(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK BlinkIDSdkSettings _make() noexcept {
    auto metadata = _impl::$s7BlinkID0A13IDSdkSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return BlinkIDSdkSettings(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_BlinkIDSdkSettings;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID0A13IDSdkSettingsVD;
  static inline constexpr $s7BlinkID0A13IDSdkSettingsVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_BlinkIDSdkSettings {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(BlinkIDSdkSettings &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const BlinkIDSdkSettings &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER BlinkIDSdkSettings returnNewValue(T callable) {
    auto result = BlinkIDSdkSettings::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID0A13IDSdkSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::BlinkIDSdkSettings> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID0A13IDSdkSettingsVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::BlinkIDSdkSettings> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::BlinkIDSdkSettings> = true;
template<>
struct implClassFor<BlinkID::BlinkIDSdkSettings> { using type = BlinkID::_impl::_impl_BlinkIDSdkSettings; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {


/// A session controller for BlinkID SDK
/// <code>BlinkIDSession</code> manages the lifecycle of a BlinkID session,
/// handling image processing, barcode scanning, and result generation.
class SWIFT_SYMBOL("s:7BlinkID0A9IDSessionC") BlinkIDSession;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::BlinkIDSession> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_BlinkIDSession;
// Type metadata accessor for BlinkIDSession
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID0A9IDSessionCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID0A9IDSessionC") BlinkIDSession final : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
/// Cancels any ongoing processing operations.
/// This method can be called from any context to immediately stop
/// the current processing operation. It’s useful when needing to
/// abort a verification session or handle user cancellation.
  SWIFT_INLINE_THUNK void cancelActiveProcessing() SWIFT_SYMBOL("s:7BlinkID0A9IDSessionC22cancelActiveProcessingyyF");
/// Resums any ongoing processing operations.
/// This method can be called from any context to immediately start
/// the current processing operation which wwas canceled. It’s useful when needing to
/// resume a BlinkID session after handling cancelation.
  SWIFT_INLINE_THUNK void resumeActiveProcessing() SWIFT_SYMBOL("s:7BlinkID0A9IDSessionC22resumeActiveProcessingyyF");
protected:
  SWIFT_INLINE_THUNK BlinkIDSession(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_BlinkIDSession;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID0A9IDSessionCD;
  static inline constexpr $s7BlinkID0A9IDSessionCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_BlinkIDSession {
public:
static SWIFT_INLINE_THUNK BlinkIDSession makeRetained(void * _Nonnull ptr) noexcept { return BlinkIDSession(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::BlinkIDSession> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID0A9IDSessionCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<BlinkID::BlinkIDSession> { using type = BlinkID::_impl::_impl_BlinkIDSession; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID16InputImageSourceO") InputImageSource;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::InputImageSource> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID12ScanningModeO") ScanningMode;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::ScanningMode> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV") ScanningSettings;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::ScanningSettings> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID0A17IDSessionSettingsV") BlinkIDSessionSettings;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::BlinkIDSessionSettings> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_BlinkIDSessionSettings;

// Type metadata accessor for BlinkIDSessionSettings
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID0A17IDSessionSettingsVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID0A17IDSessionSettingsV") BlinkIDSessionSettings final {
public:
  SWIFT_INLINE_THUNK ~BlinkIDSessionSettings() noexcept {
    auto metadata = _impl::$s7BlinkID0A17IDSessionSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK BlinkIDSessionSettings(const BlinkIDSessionSettings &other) noexcept {
    auto metadata = _impl::$s7BlinkID0A17IDSessionSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK BlinkIDSessionSettings &operator =(const BlinkIDSessionSettings &other) noexcept {
    auto metadata = _impl::$s7BlinkID0A17IDSessionSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK BlinkIDSessionSettings &operator =(BlinkIDSessionSettings &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER BlinkIDSessionSettings(BlinkIDSessionSettings &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK InputImageSource getInputImageSource() const SWIFT_SYMBOL("s:7BlinkID0A17IDSessionSettingsV16inputImageSourceAA05InputfG0Ovp");
  SWIFT_INLINE_THUNK void setInputImageSource(const InputImageSource& value) SWIFT_SYMBOL("s:7BlinkID0A17IDSessionSettingsV16inputImageSourceAA05InputfG0Ovp");
  SWIFT_INLINE_THUNK ScanningMode getScanningMode() const SWIFT_SYMBOL("s:7BlinkID0A17IDSessionSettingsV12scanningModeAA08ScanningF0Ovp");
  SWIFT_INLINE_THUNK void setScanningMode(const ScanningMode& value) SWIFT_SYMBOL("s:7BlinkID0A17IDSessionSettingsV12scanningModeAA08ScanningF0Ovp");
  SWIFT_INLINE_THUNK ScanningSettings getScanningSettings() const SWIFT_SYMBOL("s:7BlinkID0A17IDSessionSettingsV08scanningD0AA08ScanningD0Vvp");
  SWIFT_INLINE_THUNK void setScanningSettings(const ScanningSettings& value) SWIFT_SYMBOL("s:7BlinkID0A17IDSessionSettingsV08scanningD0AA08ScanningD0Vvp");
  SWIFT_INLINE_THUNK double getStepTimeoutDuration() const SWIFT_SYMBOL("s:7BlinkID0A17IDSessionSettingsV19stepTimeoutDurationSdvp");
  SWIFT_INLINE_THUNK void setStepTimeoutDuration(double value) SWIFT_SYMBOL("s:7BlinkID0A17IDSessionSettingsV19stepTimeoutDurationSdvp");
  static SWIFT_INLINE_THUNK BlinkIDSessionSettings init(const InputImageSource& inputImageSource, const ScanningMode& scanningMode, const ScanningSettings& scanningSettings, double stepTimeoutDuration) SWIFT_SYMBOL("s:7BlinkID0A17IDSessionSettingsV16inputImageSource12scanningMode0hD019stepTimeoutDurationAcA05InputfG0O_AA08ScanningI0OAA0nD0VSdtcfc");
private:
  SWIFT_INLINE_THUNK BlinkIDSessionSettings(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK BlinkIDSessionSettings _make() noexcept {
    auto metadata = _impl::$s7BlinkID0A17IDSessionSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return BlinkIDSessionSettings(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_BlinkIDSessionSettings;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID0A17IDSessionSettingsVD;
  static inline constexpr $s7BlinkID0A17IDSessionSettingsVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_BlinkIDSessionSettings {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(BlinkIDSessionSettings &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const BlinkIDSessionSettings &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER BlinkIDSessionSettings returnNewValue(T callable) {
    auto result = BlinkIDSessionSettings::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID0A17IDSessionSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::BlinkIDSessionSettings> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID0A17IDSessionSettingsVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::BlinkIDSessionSettings> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::BlinkIDSessionSettings> = true;
template<>
struct implClassFor<BlinkID::BlinkIDSessionSettings> { using type = BlinkID::_impl::_impl_BlinkIDSessionSettings; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID16RegionOfInterestV") RegionOfInterest;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::RegionOfInterest> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID27CameraFrameVideoOrientationO") CameraFrameVideoOrientation;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::CameraFrameVideoOrientation> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID11CameraFrameV") CameraFrame;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::CameraFrame> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_CameraFrame;

// Type metadata accessor for CameraFrame
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID11CameraFrameVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID11CameraFrameV") CameraFrame final {
public:
  SWIFT_INLINE_THUNK ~CameraFrame() noexcept {
    auto metadata = _impl::$s7BlinkID11CameraFrameVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CameraFrame(const CameraFrame &other) noexcept {
    auto metadata = _impl::$s7BlinkID11CameraFrameVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CameraFrame &operator =(const CameraFrame &other) noexcept {
    auto metadata = _impl::$s7BlinkID11CameraFrameVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CameraFrame &operator =(CameraFrame &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CameraFrame(CameraFrame &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK MBSampleBufferWrapper *_Nonnull getBuffer() const SWIFT_SYMBOL("s:7BlinkID11CameraFrameV6bufferSo21MBSampleBufferWrapperCvp");
  SWIFT_INLINE_THUNK RegionOfInterest getRoi() const SWIFT_SYMBOL("s:7BlinkID11CameraFrameV3roiAA16RegionOfInterestVvp");
  SWIFT_INLINE_THUNK CameraFrameVideoOrientation getOrientation() const SWIFT_SYMBOL("s:7BlinkID11CameraFrameV11orientationAA0cD16VideoOrientationOvp");
/// Creates a new camera frame instance.
/// \param buffer The wrapped sample buffer containing the image data
///
/// \param roi The region of interest within the frame. Defaults to full frame
///
/// \param orientation The orientation of the camera. Defaults to portrait
///
  static SWIFT_INLINE_THUNK CameraFrame init(MBSampleBufferWrapper *_Nonnull buffer, const RegionOfInterest& roi, const CameraFrameVideoOrientation& orientation) SWIFT_SYMBOL("s:7BlinkID11CameraFrameV6buffer3roi11orientationACSo21MBSampleBufferWrapperC_AA16RegionOfInterestVAA0cD16VideoOrientationOtcfc");
  SWIFT_INLINE_THUNK swift::Int getWidth() const SWIFT_SYMBOL("s:7BlinkID11CameraFrameV5widthSivp");
  SWIFT_INLINE_THUNK swift::Int getHeight() const SWIFT_SYMBOL("s:7BlinkID11CameraFrameV6heightSivp");
private:
  SWIFT_INLINE_THUNK CameraFrame(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CameraFrame _make() noexcept {
    auto metadata = _impl::$s7BlinkID11CameraFrameVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CameraFrame(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CameraFrame;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID11CameraFrameVD;
  static inline constexpr $s7BlinkID11CameraFrameVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CameraFrame {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CameraFrame &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CameraFrame &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CameraFrame returnNewValue(T callable) {
    auto result = CameraFrame::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID11CameraFrameVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::CameraFrame> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID11CameraFrameVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::CameraFrame> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::CameraFrame> = true;
template<>
struct implClassFor<BlinkID::CameraFrame> { using type = BlinkID::_impl::_impl_CameraFrame; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

/// Represents the video orientation of a camera frame.
/// This enum defines the possible orientations of the device when capturing
/// camera frames, which is essential for proper image processing.
namespace _impl {

class _impl_CameraFrameVideoOrientation;

// Type metadata accessor for CameraFrameVideoOrientation
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID27CameraFrameVideoOrientationOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum CameraFrameVideoOrientation
extern "C" {
extern unsigned $s7BlinkID27CameraFrameVideoOrientationO8portraityA2CmFWC;
extern unsigned $s7BlinkID27CameraFrameVideoOrientationO18portraitUpsideDownyA2CmFWC;
extern unsigned $s7BlinkID27CameraFrameVideoOrientationO14landscapeRightyA2CmFWC;
extern unsigned $s7BlinkID27CameraFrameVideoOrientationO13landscapeLeftyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID27CameraFrameVideoOrientationO") CameraFrameVideoOrientation final {
public:
  SWIFT_INLINE_THUNK ~CameraFrameVideoOrientation() noexcept {
    auto metadata = _impl::$s7BlinkID27CameraFrameVideoOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CameraFrameVideoOrientation(const CameraFrameVideoOrientation &other) noexcept {
    auto metadata = _impl::$s7BlinkID27CameraFrameVideoOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CameraFrameVideoOrientation &operator =(const CameraFrameVideoOrientation &other) noexcept {
    auto metadata = _impl::$s7BlinkID27CameraFrameVideoOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CameraFrameVideoOrientation &operator =(CameraFrameVideoOrientation &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CameraFrameVideoOrientation(CameraFrameVideoOrientation &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    portrait SWIFT_SYMBOL("s:7BlinkID27CameraFrameVideoOrientationO8portraityA2CmF"),
    portraitUpsideDown SWIFT_SYMBOL("s:7BlinkID27CameraFrameVideoOrientationO18portraitUpsideDownyA2CmF"),
    landscapeRight SWIFT_SYMBOL("s:7BlinkID27CameraFrameVideoOrientationO14landscapeRightyA2CmF"),
    landscapeLeft SWIFT_SYMBOL("s:7BlinkID27CameraFrameVideoOrientationO13landscapeLeftyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_portrait {  // impl struct for case portrait
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::portrait;
    }
    SWIFT_INLINE_THUNK CameraFrameVideoOrientation operator()() const;
  } portrait SWIFT_SYMBOL("s:7BlinkID27CameraFrameVideoOrientationO8portraityA2CmF");
  SWIFT_INLINE_THUNK bool isPortrait() const;

  inline const static struct _impl_portraitUpsideDown {  // impl struct for case portraitUpsideDown
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::portraitUpsideDown;
    }
    SWIFT_INLINE_THUNK CameraFrameVideoOrientation operator()() const;
  } portraitUpsideDown SWIFT_SYMBOL("s:7BlinkID27CameraFrameVideoOrientationO18portraitUpsideDownyA2CmF");
  SWIFT_INLINE_THUNK bool isPortraitUpsideDown() const;

  inline const static struct _impl_landscapeRight {  // impl struct for case landscapeRight
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::landscapeRight;
    }
    SWIFT_INLINE_THUNK CameraFrameVideoOrientation operator()() const;
  } landscapeRight SWIFT_SYMBOL("s:7BlinkID27CameraFrameVideoOrientationO14landscapeRightyA2CmF");
  SWIFT_INLINE_THUNK bool isLandscapeRight() const;

  inline const static struct _impl_landscapeLeft {  // impl struct for case landscapeLeft
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::landscapeLeft;
    }
    SWIFT_INLINE_THUNK CameraFrameVideoOrientation operator()() const;
  } landscapeLeft SWIFT_SYMBOL("s:7BlinkID27CameraFrameVideoOrientationO13landscapeLeftyA2CmF");
  SWIFT_INLINE_THUNK bool isLandscapeLeft() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID27CameraFrameVideoOrientationO8portraityA2CmFWC) return cases::portrait;
    if (tag == _impl::$s7BlinkID27CameraFrameVideoOrientationO18portraitUpsideDownyA2CmFWC) return cases::portraitUpsideDown;
    if (tag == _impl::$s7BlinkID27CameraFrameVideoOrientationO14landscapeRightyA2CmFWC) return cases::landscapeRight;
    if (tag == _impl::$s7BlinkID27CameraFrameVideoOrientationO13landscapeLeftyA2CmFWC) return cases::landscapeLeft;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:7BlinkID27CameraFrameVideoOrientationO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK CameraFrameVideoOrientation(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CameraFrameVideoOrientation _make() noexcept {
    auto metadata = _impl::$s7BlinkID27CameraFrameVideoOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CameraFrameVideoOrientation(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID27CameraFrameVideoOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID27CameraFrameVideoOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID27CameraFrameVideoOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CameraFrameVideoOrientation;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID27CameraFrameVideoOrientationOD;
  static inline constexpr $s7BlinkID27CameraFrameVideoOrientationOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CameraFrameVideoOrientation {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CameraFrameVideoOrientation &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CameraFrameVideoOrientation &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CameraFrameVideoOrientation returnNewValue(T callable) {
    auto result = CameraFrameVideoOrientation::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID27CameraFrameVideoOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::CameraFrameVideoOrientation> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID27CameraFrameVideoOrientationOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::CameraFrameVideoOrientation> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::CameraFrameVideoOrientation> = true;
template<>
struct implClassFor<BlinkID::CameraFrameVideoOrientation> { using type = BlinkID::_impl::_impl_CameraFrameVideoOrientation; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID7CountryO") Country;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::Country> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
/// Document country.
namespace _impl {

class _impl_Country;

// Type metadata accessor for Country
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID7CountryOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum Country
extern "C" {
extern unsigned $s7BlinkID7CountryO4noneyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7albaniayA2CmFWC;
extern unsigned $s7BlinkID7CountryO7algeriayA2CmFWC;
extern unsigned $s7BlinkID7CountryO9argentinayA2CmFWC;
extern unsigned $s7BlinkID7CountryO9australiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO7austriayA2CmFWC;
extern unsigned $s7BlinkID7CountryO10azerbaijanyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7bahrainyA2CmFWC;
extern unsigned $s7BlinkID7CountryO10bangladeshyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7belgiumyA2CmFWC;
extern unsigned $s7BlinkID7CountryO20bosniaAndHerzegovinayA2CmFWC;
extern unsigned $s7BlinkID7CountryO6bruneiyA2CmFWC;
extern unsigned $s7BlinkID7CountryO8bulgariayA2CmFWC;
extern unsigned $s7BlinkID7CountryO8cambodiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO6canadayA2CmFWC;
extern unsigned $s7BlinkID7CountryO5chileyA2CmFWC;
extern unsigned $s7BlinkID7CountryO8colombiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO9costaRicayA2CmFWC;
extern unsigned $s7BlinkID7CountryO7croatiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO6cyprusyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7czechiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO7denmarkyA2CmFWC;
extern unsigned $s7BlinkID7CountryO17dominicanRepublicyA2CmFWC;
extern unsigned $s7BlinkID7CountryO5egyptyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7estoniayA2CmFWC;
extern unsigned $s7BlinkID7CountryO7finlandyA2CmFWC;
extern unsigned $s7BlinkID7CountryO6franceyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7georgiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO7germanyyA2CmFWC;
extern unsigned $s7BlinkID7CountryO5ghanayA2CmFWC;
extern unsigned $s7BlinkID7CountryO6greeceyA2CmFWC;
extern unsigned $s7BlinkID7CountryO9guatemalayA2CmFWC;
extern unsigned $s7BlinkID7CountryO8hongKongyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7hungaryyA2CmFWC;
extern unsigned $s7BlinkID7CountryO5indiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO9indonesiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO7irelandyA2CmFWC;
extern unsigned $s7BlinkID7CountryO6israelyA2CmFWC;
extern unsigned $s7BlinkID7CountryO5italyyA2CmFWC;
extern unsigned $s7BlinkID7CountryO6jordanyA2CmFWC;
extern unsigned $s7BlinkID7CountryO10kazakhstanyA2CmFWC;
extern unsigned $s7BlinkID7CountryO5kenyayA2CmFWC;
extern unsigned $s7BlinkID7CountryO6kosovoyA2CmFWC;
extern unsigned $s7BlinkID7CountryO6kuwaityA2CmFWC;
extern unsigned $s7BlinkID7CountryO6latviayA2CmFWC;
extern unsigned $s7BlinkID7CountryO9lithuaniayA2CmFWC;
extern unsigned $s7BlinkID7CountryO8malaysiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO8maldivesyA2CmFWC;
extern unsigned $s7BlinkID7CountryO5maltayA2CmFWC;
extern unsigned $s7BlinkID7CountryO9mauritiusyA2CmFWC;
extern unsigned $s7BlinkID7CountryO6mexicoyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7moroccoyA2CmFWC;
extern unsigned $s7BlinkID7CountryO11netherlandsyA2CmFWC;
extern unsigned $s7BlinkID7CountryO10newZealandyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7nigeriayA2CmFWC;
extern unsigned $s7BlinkID7CountryO8pakistanyA2CmFWC;
extern unsigned $s7BlinkID7CountryO6panamayA2CmFWC;
extern unsigned $s7BlinkID7CountryO8paraguayyA2CmFWC;
extern unsigned $s7BlinkID7CountryO11philippinesyA2CmFWC;
extern unsigned $s7BlinkID7CountryO6polandyA2CmFWC;
extern unsigned $s7BlinkID7CountryO8portugalyA2CmFWC;
extern unsigned $s7BlinkID7CountryO10puertoRicoyA2CmFWC;
extern unsigned $s7BlinkID7CountryO5qataryA2CmFWC;
extern unsigned $s7BlinkID7CountryO7romaniayA2CmFWC;
extern unsigned $s7BlinkID7CountryO6russiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO11saudiArabiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO6serbiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO9singaporeyA2CmFWC;
extern unsigned $s7BlinkID7CountryO8slovakiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO8sloveniayA2CmFWC;
extern unsigned $s7BlinkID7CountryO11southAfricayA2CmFWC;
extern unsigned $s7BlinkID7CountryO5spainyA2CmFWC;
extern unsigned $s7BlinkID7CountryO6swedenyA2CmFWC;
extern unsigned $s7BlinkID7CountryO11switzerlandyA2CmFWC;
extern unsigned $s7BlinkID7CountryO6taiwanyA2CmFWC;
extern unsigned $s7BlinkID7CountryO8thailandyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7tunisiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO6turkeyyA2CmFWC;
extern unsigned $s7BlinkID7CountryO3uaeyA2CmFWC;
extern unsigned $s7BlinkID7CountryO6ugandayA2CmFWC;
extern unsigned $s7BlinkID7CountryO2ukyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7ukraineyA2CmFWC;
extern unsigned $s7BlinkID7CountryO3usayA2CmFWC;
extern unsigned $s7BlinkID7CountryO7vietnamyA2CmFWC;
extern unsigned $s7BlinkID7CountryO6brazilyA2CmFWC;
extern unsigned $s7BlinkID7CountryO6norwayyA2CmFWC;
extern unsigned $s7BlinkID7CountryO4omanyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7ecuadoryA2CmFWC;
extern unsigned $s7BlinkID7CountryO10elSalvadoryA2CmFWC;
extern unsigned $s7BlinkID7CountryO8sriLankayA2CmFWC;
extern unsigned $s7BlinkID7CountryO4peruyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7uruguayyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7bahamasyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7bermudayA2CmFWC;
extern unsigned $s7BlinkID7CountryO7boliviayA2CmFWC;
extern unsigned $s7BlinkID7CountryO5chinayA2CmFWC;
extern unsigned $s7BlinkID7CountryO13europeanUnionyA2CmFWC;
extern unsigned $s7BlinkID7CountryO5haitiyA2CmFWC;
extern unsigned $s7BlinkID7CountryO8hondurasyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7icelandyA2CmFWC;
extern unsigned $s7BlinkID7CountryO5japanyA2CmFWC;
extern unsigned $s7BlinkID7CountryO10luxembourgyA2CmFWC;
extern unsigned $s7BlinkID7CountryO10montenegroyA2CmFWC;
extern unsigned $s7BlinkID7CountryO9nicaraguayA2CmFWC;
extern unsigned $s7BlinkID7CountryO10southKoreayA2CmFWC;
extern unsigned $s7BlinkID7CountryO9venezuelayA2CmFWC;
extern unsigned $s7BlinkID7CountryO11afghanistanyA2CmFWC;
extern unsigned $s7BlinkID7CountryO12alandIslandsyA2CmFWC;
extern unsigned $s7BlinkID7CountryO13americanSamoayA2CmFWC;
extern unsigned $s7BlinkID7CountryO7andorrayA2CmFWC;
extern unsigned $s7BlinkID7CountryO6angolayA2CmFWC;
extern unsigned $s7BlinkID7CountryO8anguillayA2CmFWC;
extern unsigned $s7BlinkID7CountryO10antarcticayA2CmFWC;
extern unsigned $s7BlinkID7CountryO17antiguaAndBarbudayA2CmFWC;
extern unsigned $s7BlinkID7CountryO7armeniayA2CmFWC;
extern unsigned $s7BlinkID7CountryO5arubayA2CmFWC;
extern unsigned $s7BlinkID7CountryO19bailiwickOfGuernseyyA2CmFWC;
extern unsigned $s7BlinkID7CountryO17bailiwickOfJerseyyA2CmFWC;
extern unsigned $s7BlinkID7CountryO8barbadosyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7belarusyA2CmFWC;
extern unsigned $s7BlinkID7CountryO6belizeyA2CmFWC;
extern unsigned $s7BlinkID7CountryO5beninyA2CmFWC;
extern unsigned $s7BlinkID7CountryO6bhutanyA2CmFWC;
extern unsigned $s7BlinkID7CountryO28bonaireSaintEustatiusAndSabayA2CmFWC;
extern unsigned $s7BlinkID7CountryO8botswanayA2CmFWC;
extern unsigned $s7BlinkID7CountryO12bouvetIslandyA2CmFWC;
extern unsigned $s7BlinkID7CountryO27britishIndianOceanTerritoryyA2CmFWC;
extern unsigned $s7BlinkID7CountryO11burkinaFasoyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7burundiyA2CmFWC;
extern unsigned $s7BlinkID7CountryO8cameroonyA2CmFWC;
extern unsigned $s7BlinkID7CountryO9capeVerdeyA2CmFWC;
extern unsigned $s7BlinkID7CountryO20caribbeanNetherlandsyA2CmFWC;
extern unsigned $s7BlinkID7CountryO13caymanIslandsyA2CmFWC;
extern unsigned $s7BlinkID7CountryO22centralAfricanRepublicyA2CmFWC;
extern unsigned $s7BlinkID7CountryO4chadyA2CmFWC;
extern unsigned $s7BlinkID7CountryO15christmasIslandyA2CmFWC;
extern unsigned $s7BlinkID7CountryO12cocosIslandsyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7comorosyA2CmFWC;
extern unsigned $s7BlinkID7CountryO5congoyA2CmFWC;
extern unsigned $s7BlinkID7CountryO11cookIslandsyA2CmFWC;
extern unsigned $s7BlinkID7CountryO4cubayA2CmFWC;
extern unsigned $s7BlinkID7CountryO7curacaoyA2CmFWC;
extern unsigned $s7BlinkID7CountryO28democraticRepublicOfTheCongoyA2CmFWC;
extern unsigned $s7BlinkID7CountryO8djiboutiyA2CmFWC;
extern unsigned $s7BlinkID7CountryO8dominicayA2CmFWC;
extern unsigned $s7BlinkID7CountryO9eastTimoryA2CmFWC;
extern unsigned $s7BlinkID7CountryO16equatorialGuineayA2CmFWC;
extern unsigned $s7BlinkID7CountryO7eritreayA2CmFWC;
extern unsigned $s7BlinkID7CountryO8ethiopiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO15falklandIslandsyA2CmFWC;
extern unsigned $s7BlinkID7CountryO12faroeIslandsyA2CmFWC;
extern unsigned $s7BlinkID7CountryO27federatedStatesOfMicronesiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO4fijiyA2CmFWC;
extern unsigned $s7BlinkID7CountryO12frenchGuianayA2CmFWC;
extern unsigned $s7BlinkID7CountryO15frenchPolynesiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO25frenchSouthernTerritoriesyA2CmFWC;
extern unsigned $s7BlinkID7CountryO5gabonyA2CmFWC;
extern unsigned $s7BlinkID7CountryO6gambiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO9gibraltaryA2CmFWC;
extern unsigned $s7BlinkID7CountryO9greenlandyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7grenadayA2CmFWC;
extern unsigned $s7BlinkID7CountryO10guadeloupeyA2CmFWC;
extern unsigned $s7BlinkID7CountryO4guamyA2CmFWC;
extern unsigned $s7BlinkID7CountryO6guineayA2CmFWC;
extern unsigned $s7BlinkID7CountryO12guineaBissauyA2CmFWC;
extern unsigned $s7BlinkID7CountryO6guyanayA2CmFWC;
extern unsigned $s7BlinkID7CountryO29heardIslandAndMcdonaldIslandsyA2CmFWC;
extern unsigned $s7BlinkID7CountryO4iranyA2CmFWC;
extern unsigned $s7BlinkID7CountryO4iraqyA2CmFWC;
extern unsigned $s7BlinkID7CountryO9isleOfManyA2CmFWC;
extern unsigned $s7BlinkID7CountryO10ivoryCoastyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7jamaicayA2CmFWC;
extern unsigned $s7BlinkID7CountryO8kiribatiyA2CmFWC;
extern unsigned $s7BlinkID7CountryO10kyrgyzstanyA2CmFWC;
extern unsigned $s7BlinkID7CountryO4laosyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7lebanonyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7lesothoyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7liberiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO5libyayA2CmFWC;
extern unsigned $s7BlinkID7CountryO13liechtensteinyA2CmFWC;
extern unsigned $s7BlinkID7CountryO5macauyA2CmFWC;
extern unsigned $s7BlinkID7CountryO10madagascaryA2CmFWC;
extern unsigned $s7BlinkID7CountryO6malawiyA2CmFWC;
extern unsigned $s7BlinkID7CountryO4maliyA2CmFWC;
extern unsigned $s7BlinkID7CountryO15marshallIslandsyA2CmFWC;
extern unsigned $s7BlinkID7CountryO10martiniqueyA2CmFWC;
extern unsigned $s7BlinkID7CountryO10mauritaniayA2CmFWC;
extern unsigned $s7BlinkID7CountryO7mayotteyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7moldovayA2CmFWC;
extern unsigned $s7BlinkID7CountryO6monacoyA2CmFWC;
extern unsigned $s7BlinkID7CountryO8mongoliayA2CmFWC;
extern unsigned $s7BlinkID7CountryO10montserratyA2CmFWC;
extern unsigned $s7BlinkID7CountryO10mozambiqueyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7myanmaryA2CmFWC;
extern unsigned $s7BlinkID7CountryO7namibiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO5nauruyA2CmFWC;
extern unsigned $s7BlinkID7CountryO5nepalyA2CmFWC;
extern unsigned $s7BlinkID7CountryO12newCaledoniayA2CmFWC;
extern unsigned $s7BlinkID7CountryO5nigeryA2CmFWC;
extern unsigned $s7BlinkID7CountryO4niueyA2CmFWC;
extern unsigned $s7BlinkID7CountryO13norfolkIslandyA2CmFWC;
extern unsigned $s7BlinkID7CountryO14northernCyprusyA2CmFWC;
extern unsigned $s7BlinkID7CountryO22northernMarianaIslandsyA2CmFWC;
extern unsigned $s7BlinkID7CountryO10northKoreayA2CmFWC;
extern unsigned $s7BlinkID7CountryO14northMacedoniayA2CmFWC;
extern unsigned $s7BlinkID7CountryO5palauyA2CmFWC;
extern unsigned $s7BlinkID7CountryO9palestineyA2CmFWC;
extern unsigned $s7BlinkID7CountryO14papuaNewGuineayA2CmFWC;
extern unsigned $s7BlinkID7CountryO8pitcairnyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7reunionyA2CmFWC;
extern unsigned $s7BlinkID7CountryO6rwandayA2CmFWC;
extern unsigned $s7BlinkID7CountryO15saintBarthelemyyA2CmFWC;
extern unsigned $s7BlinkID7CountryO38saintHelenaAscensionAndTristianDaCunhayA2CmFWC;
extern unsigned $s7BlinkID7CountryO18saintKittsAndNevisyA2CmFWC;
extern unsigned $s7BlinkID7CountryO10saintLuciayA2CmFWC;
extern unsigned $s7BlinkID7CountryO11saintMartinyA2CmFWC;
extern unsigned $s7BlinkID7CountryO22saintPierreAndMiquelonyA2CmFWC;
extern unsigned $s7BlinkID7CountryO28saintVincentAndTheGrenadinesyA2CmFWC;
extern unsigned $s7BlinkID7CountryO5samoayA2CmFWC;
extern unsigned $s7BlinkID7CountryO9sanMarinoyA2CmFWC;
extern unsigned $s7BlinkID7CountryO18saoTomeAndPrincipeyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7senegalyA2CmFWC;
extern unsigned $s7BlinkID7CountryO10seychellesyA2CmFWC;
extern unsigned $s7BlinkID7CountryO11sierraLeoneyA2CmFWC;
extern unsigned $s7BlinkID7CountryO11sintMaartenyA2CmFWC;
extern unsigned $s7BlinkID7CountryO14solomonIslandsyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7somaliayA2CmFWC;
extern unsigned $s7BlinkID7CountryO38southGeorgiaAndTheSouthSandwichIslandsyA2CmFWC;
extern unsigned $s7BlinkID7CountryO10southSudanyA2CmFWC;
extern unsigned $s7BlinkID7CountryO5sudanyA2CmFWC;
extern unsigned $s7BlinkID7CountryO8surinameyA2CmFWC;
extern unsigned $s7BlinkID7CountryO19svalbardAndJanMayenyA2CmFWC;
extern unsigned $s7BlinkID7CountryO8eswatiniyA2CmFWC;
extern unsigned $s7BlinkID7CountryO5syriayA2CmFWC;
extern unsigned $s7BlinkID7CountryO10tajikistanyA2CmFWC;
extern unsigned $s7BlinkID7CountryO8tanzaniayA2CmFWC;
extern unsigned $s7BlinkID7CountryO4togoyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7tokelauyA2CmFWC;
extern unsigned $s7BlinkID7CountryO5tongayA2CmFWC;
extern unsigned $s7BlinkID7CountryO17trinidadAndTobagoyA2CmFWC;
extern unsigned $s7BlinkID7CountryO12turkmenistanyA2CmFWC;
extern unsigned $s7BlinkID7CountryO21turksAndCaicosIslandsyA2CmFWC;
extern unsigned $s7BlinkID7CountryO6tuvaluyA2CmFWC;
extern unsigned $s7BlinkID7CountryO32unitedStatesMinorOutlyingIslandsyA2CmFWC;
extern unsigned $s7BlinkID7CountryO10uzbekistanyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7vanuatuyA2CmFWC;
extern unsigned $s7BlinkID7CountryO11vaticanCityyA2CmFWC;
extern unsigned $s7BlinkID7CountryO20virginIslandsBritishyA2CmFWC;
extern unsigned $s7BlinkID7CountryO15virginIslandsUsyA2CmFWC;
extern unsigned $s7BlinkID7CountryO15wallisAndFutunayA2CmFWC;
extern unsigned $s7BlinkID7CountryO13westernSaharayA2CmFWC;
extern unsigned $s7BlinkID7CountryO5yemenyA2CmFWC;
extern unsigned $s7BlinkID7CountryO10yugoslaviayA2CmFWC;
extern unsigned $s7BlinkID7CountryO6zambiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO8zimbabweyA2CmFWC;
extern unsigned $s7BlinkID7CountryO13schengen_areayA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID7CountryO") Country final {
public:
  SWIFT_INLINE_THUNK ~Country() noexcept {
    auto metadata = _impl::$s7BlinkID7CountryOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK Country(const Country &other) noexcept {
    auto metadata = _impl::$s7BlinkID7CountryOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK Country &operator =(const Country &other) noexcept {
    auto metadata = _impl::$s7BlinkID7CountryOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK Country &operator =(Country &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER Country(Country &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    none SWIFT_SYMBOL("s:7BlinkID7CountryO4noneyA2CmF"),
    albania SWIFT_SYMBOL("s:7BlinkID7CountryO7albaniayA2CmF"),
    algeria SWIFT_SYMBOL("s:7BlinkID7CountryO7algeriayA2CmF"),
    argentina SWIFT_SYMBOL("s:7BlinkID7CountryO9argentinayA2CmF"),
    australia SWIFT_SYMBOL("s:7BlinkID7CountryO9australiayA2CmF"),
    austria SWIFT_SYMBOL("s:7BlinkID7CountryO7austriayA2CmF"),
    azerbaijan SWIFT_SYMBOL("s:7BlinkID7CountryO10azerbaijanyA2CmF"),
    bahrain SWIFT_SYMBOL("s:7BlinkID7CountryO7bahrainyA2CmF"),
    bangladesh SWIFT_SYMBOL("s:7BlinkID7CountryO10bangladeshyA2CmF"),
    belgium SWIFT_SYMBOL("s:7BlinkID7CountryO7belgiumyA2CmF"),
    bosniaAndHerzegovina SWIFT_SYMBOL("s:7BlinkID7CountryO20bosniaAndHerzegovinayA2CmF"),
    brunei SWIFT_SYMBOL("s:7BlinkID7CountryO6bruneiyA2CmF"),
    bulgaria SWIFT_SYMBOL("s:7BlinkID7CountryO8bulgariayA2CmF"),
    cambodia SWIFT_SYMBOL("s:7BlinkID7CountryO8cambodiayA2CmF"),
    canada SWIFT_SYMBOL("s:7BlinkID7CountryO6canadayA2CmF"),
    chile SWIFT_SYMBOL("s:7BlinkID7CountryO5chileyA2CmF"),
    colombia SWIFT_SYMBOL("s:7BlinkID7CountryO8colombiayA2CmF"),
    costaRica SWIFT_SYMBOL("s:7BlinkID7CountryO9costaRicayA2CmF"),
    croatia SWIFT_SYMBOL("s:7BlinkID7CountryO7croatiayA2CmF"),
    cyprus SWIFT_SYMBOL("s:7BlinkID7CountryO6cyprusyA2CmF"),
    czechia SWIFT_SYMBOL("s:7BlinkID7CountryO7czechiayA2CmF"),
    denmark SWIFT_SYMBOL("s:7BlinkID7CountryO7denmarkyA2CmF"),
    dominicanRepublic SWIFT_SYMBOL("s:7BlinkID7CountryO17dominicanRepublicyA2CmF"),
    egypt SWIFT_SYMBOL("s:7BlinkID7CountryO5egyptyA2CmF"),
    estonia SWIFT_SYMBOL("s:7BlinkID7CountryO7estoniayA2CmF"),
    finland SWIFT_SYMBOL("s:7BlinkID7CountryO7finlandyA2CmF"),
    france SWIFT_SYMBOL("s:7BlinkID7CountryO6franceyA2CmF"),
    georgia SWIFT_SYMBOL("s:7BlinkID7CountryO7georgiayA2CmF"),
    germany SWIFT_SYMBOL("s:7BlinkID7CountryO7germanyyA2CmF"),
    ghana SWIFT_SYMBOL("s:7BlinkID7CountryO5ghanayA2CmF"),
    greece SWIFT_SYMBOL("s:7BlinkID7CountryO6greeceyA2CmF"),
    guatemala SWIFT_SYMBOL("s:7BlinkID7CountryO9guatemalayA2CmF"),
    hongKong SWIFT_SYMBOL("s:7BlinkID7CountryO8hongKongyA2CmF"),
    hungary SWIFT_SYMBOL("s:7BlinkID7CountryO7hungaryyA2CmF"),
    india SWIFT_SYMBOL("s:7BlinkID7CountryO5indiayA2CmF"),
    indonesia SWIFT_SYMBOL("s:7BlinkID7CountryO9indonesiayA2CmF"),
    ireland SWIFT_SYMBOL("s:7BlinkID7CountryO7irelandyA2CmF"),
    israel SWIFT_SYMBOL("s:7BlinkID7CountryO6israelyA2CmF"),
    italy SWIFT_SYMBOL("s:7BlinkID7CountryO5italyyA2CmF"),
    jordan SWIFT_SYMBOL("s:7BlinkID7CountryO6jordanyA2CmF"),
    kazakhstan SWIFT_SYMBOL("s:7BlinkID7CountryO10kazakhstanyA2CmF"),
    kenya SWIFT_SYMBOL("s:7BlinkID7CountryO5kenyayA2CmF"),
    kosovo SWIFT_SYMBOL("s:7BlinkID7CountryO6kosovoyA2CmF"),
    kuwait SWIFT_SYMBOL("s:7BlinkID7CountryO6kuwaityA2CmF"),
    latvia SWIFT_SYMBOL("s:7BlinkID7CountryO6latviayA2CmF"),
    lithuania SWIFT_SYMBOL("s:7BlinkID7CountryO9lithuaniayA2CmF"),
    malaysia SWIFT_SYMBOL("s:7BlinkID7CountryO8malaysiayA2CmF"),
    maldives SWIFT_SYMBOL("s:7BlinkID7CountryO8maldivesyA2CmF"),
    malta SWIFT_SYMBOL("s:7BlinkID7CountryO5maltayA2CmF"),
    mauritius SWIFT_SYMBOL("s:7BlinkID7CountryO9mauritiusyA2CmF"),
    mexico SWIFT_SYMBOL("s:7BlinkID7CountryO6mexicoyA2CmF"),
    morocco SWIFT_SYMBOL("s:7BlinkID7CountryO7moroccoyA2CmF"),
    netherlands SWIFT_SYMBOL("s:7BlinkID7CountryO11netherlandsyA2CmF"),
    newZealand SWIFT_SYMBOL("s:7BlinkID7CountryO10newZealandyA2CmF"),
    nigeria SWIFT_SYMBOL("s:7BlinkID7CountryO7nigeriayA2CmF"),
    pakistan SWIFT_SYMBOL("s:7BlinkID7CountryO8pakistanyA2CmF"),
    panama SWIFT_SYMBOL("s:7BlinkID7CountryO6panamayA2CmF"),
    paraguay SWIFT_SYMBOL("s:7BlinkID7CountryO8paraguayyA2CmF"),
    philippines SWIFT_SYMBOL("s:7BlinkID7CountryO11philippinesyA2CmF"),
    poland SWIFT_SYMBOL("s:7BlinkID7CountryO6polandyA2CmF"),
    portugal SWIFT_SYMBOL("s:7BlinkID7CountryO8portugalyA2CmF"),
    puertoRico SWIFT_SYMBOL("s:7BlinkID7CountryO10puertoRicoyA2CmF"),
    qatar SWIFT_SYMBOL("s:7BlinkID7CountryO5qataryA2CmF"),
    romania SWIFT_SYMBOL("s:7BlinkID7CountryO7romaniayA2CmF"),
    russia SWIFT_SYMBOL("s:7BlinkID7CountryO6russiayA2CmF"),
    saudiArabia SWIFT_SYMBOL("s:7BlinkID7CountryO11saudiArabiayA2CmF"),
    serbia SWIFT_SYMBOL("s:7BlinkID7CountryO6serbiayA2CmF"),
    singapore SWIFT_SYMBOL("s:7BlinkID7CountryO9singaporeyA2CmF"),
    slovakia SWIFT_SYMBOL("s:7BlinkID7CountryO8slovakiayA2CmF"),
    slovenia SWIFT_SYMBOL("s:7BlinkID7CountryO8sloveniayA2CmF"),
    southAfrica SWIFT_SYMBOL("s:7BlinkID7CountryO11southAfricayA2CmF"),
    spain SWIFT_SYMBOL("s:7BlinkID7CountryO5spainyA2CmF"),
    sweden SWIFT_SYMBOL("s:7BlinkID7CountryO6swedenyA2CmF"),
    switzerland SWIFT_SYMBOL("s:7BlinkID7CountryO11switzerlandyA2CmF"),
    taiwan SWIFT_SYMBOL("s:7BlinkID7CountryO6taiwanyA2CmF"),
    thailand SWIFT_SYMBOL("s:7BlinkID7CountryO8thailandyA2CmF"),
    tunisia SWIFT_SYMBOL("s:7BlinkID7CountryO7tunisiayA2CmF"),
    turkey SWIFT_SYMBOL("s:7BlinkID7CountryO6turkeyyA2CmF"),
    uae SWIFT_SYMBOL("s:7BlinkID7CountryO3uaeyA2CmF"),
    uganda SWIFT_SYMBOL("s:7BlinkID7CountryO6ugandayA2CmF"),
    uk SWIFT_SYMBOL("s:7BlinkID7CountryO2ukyA2CmF"),
    ukraine SWIFT_SYMBOL("s:7BlinkID7CountryO7ukraineyA2CmF"),
    usa SWIFT_SYMBOL("s:7BlinkID7CountryO3usayA2CmF"),
    vietnam SWIFT_SYMBOL("s:7BlinkID7CountryO7vietnamyA2CmF"),
    brazil SWIFT_SYMBOL("s:7BlinkID7CountryO6brazilyA2CmF"),
    norway SWIFT_SYMBOL("s:7BlinkID7CountryO6norwayyA2CmF"),
    oman SWIFT_SYMBOL("s:7BlinkID7CountryO4omanyA2CmF"),
    ecuador SWIFT_SYMBOL("s:7BlinkID7CountryO7ecuadoryA2CmF"),
    elSalvador SWIFT_SYMBOL("s:7BlinkID7CountryO10elSalvadoryA2CmF"),
    sriLanka SWIFT_SYMBOL("s:7BlinkID7CountryO8sriLankayA2CmF"),
    peru SWIFT_SYMBOL("s:7BlinkID7CountryO4peruyA2CmF"),
    uruguay SWIFT_SYMBOL("s:7BlinkID7CountryO7uruguayyA2CmF"),
    bahamas SWIFT_SYMBOL("s:7BlinkID7CountryO7bahamasyA2CmF"),
    bermuda SWIFT_SYMBOL("s:7BlinkID7CountryO7bermudayA2CmF"),
    bolivia SWIFT_SYMBOL("s:7BlinkID7CountryO7boliviayA2CmF"),
    china SWIFT_SYMBOL("s:7BlinkID7CountryO5chinayA2CmF"),
    europeanUnion SWIFT_SYMBOL("s:7BlinkID7CountryO13europeanUnionyA2CmF"),
    haiti SWIFT_SYMBOL("s:7BlinkID7CountryO5haitiyA2CmF"),
    honduras SWIFT_SYMBOL("s:7BlinkID7CountryO8hondurasyA2CmF"),
    iceland SWIFT_SYMBOL("s:7BlinkID7CountryO7icelandyA2CmF"),
    japan SWIFT_SYMBOL("s:7BlinkID7CountryO5japanyA2CmF"),
    luxembourg SWIFT_SYMBOL("s:7BlinkID7CountryO10luxembourgyA2CmF"),
    montenegro SWIFT_SYMBOL("s:7BlinkID7CountryO10montenegroyA2CmF"),
    nicaragua SWIFT_SYMBOL("s:7BlinkID7CountryO9nicaraguayA2CmF"),
    southKorea SWIFT_SYMBOL("s:7BlinkID7CountryO10southKoreayA2CmF"),
    venezuela SWIFT_SYMBOL("s:7BlinkID7CountryO9venezuelayA2CmF"),
    afghanistan SWIFT_SYMBOL("s:7BlinkID7CountryO11afghanistanyA2CmF"),
    alandIslands SWIFT_SYMBOL("s:7BlinkID7CountryO12alandIslandsyA2CmF"),
    americanSamoa SWIFT_SYMBOL("s:7BlinkID7CountryO13americanSamoayA2CmF"),
    andorra SWIFT_SYMBOL("s:7BlinkID7CountryO7andorrayA2CmF"),
    angola SWIFT_SYMBOL("s:7BlinkID7CountryO6angolayA2CmF"),
    anguilla SWIFT_SYMBOL("s:7BlinkID7CountryO8anguillayA2CmF"),
    antarctica SWIFT_SYMBOL("s:7BlinkID7CountryO10antarcticayA2CmF"),
    antiguaAndBarbuda SWIFT_SYMBOL("s:7BlinkID7CountryO17antiguaAndBarbudayA2CmF"),
    armenia SWIFT_SYMBOL("s:7BlinkID7CountryO7armeniayA2CmF"),
    aruba SWIFT_SYMBOL("s:7BlinkID7CountryO5arubayA2CmF"),
    bailiwickOfGuernsey SWIFT_SYMBOL("s:7BlinkID7CountryO19bailiwickOfGuernseyyA2CmF"),
    bailiwickOfJersey SWIFT_SYMBOL("s:7BlinkID7CountryO17bailiwickOfJerseyyA2CmF"),
    barbados SWIFT_SYMBOL("s:7BlinkID7CountryO8barbadosyA2CmF"),
    belarus SWIFT_SYMBOL("s:7BlinkID7CountryO7belarusyA2CmF"),
    belize SWIFT_SYMBOL("s:7BlinkID7CountryO6belizeyA2CmF"),
    benin SWIFT_SYMBOL("s:7BlinkID7CountryO5beninyA2CmF"),
    bhutan SWIFT_SYMBOL("s:7BlinkID7CountryO6bhutanyA2CmF"),
    bonaireSaintEustatiusAndSaba SWIFT_SYMBOL("s:7BlinkID7CountryO28bonaireSaintEustatiusAndSabayA2CmF"),
    botswana SWIFT_SYMBOL("s:7BlinkID7CountryO8botswanayA2CmF"),
    bouvetIsland SWIFT_SYMBOL("s:7BlinkID7CountryO12bouvetIslandyA2CmF"),
    britishIndianOceanTerritory SWIFT_SYMBOL("s:7BlinkID7CountryO27britishIndianOceanTerritoryyA2CmF"),
    burkinaFaso SWIFT_SYMBOL("s:7BlinkID7CountryO11burkinaFasoyA2CmF"),
    burundi SWIFT_SYMBOL("s:7BlinkID7CountryO7burundiyA2CmF"),
    cameroon SWIFT_SYMBOL("s:7BlinkID7CountryO8cameroonyA2CmF"),
    capeVerde SWIFT_SYMBOL("s:7BlinkID7CountryO9capeVerdeyA2CmF"),
    caribbeanNetherlands SWIFT_SYMBOL("s:7BlinkID7CountryO20caribbeanNetherlandsyA2CmF"),
    caymanIslands SWIFT_SYMBOL("s:7BlinkID7CountryO13caymanIslandsyA2CmF"),
    centralAfricanRepublic SWIFT_SYMBOL("s:7BlinkID7CountryO22centralAfricanRepublicyA2CmF"),
    chad SWIFT_SYMBOL("s:7BlinkID7CountryO4chadyA2CmF"),
    christmasIsland SWIFT_SYMBOL("s:7BlinkID7CountryO15christmasIslandyA2CmF"),
    cocosIslands SWIFT_SYMBOL("s:7BlinkID7CountryO12cocosIslandsyA2CmF"),
    comoros SWIFT_SYMBOL("s:7BlinkID7CountryO7comorosyA2CmF"),
    congo SWIFT_SYMBOL("s:7BlinkID7CountryO5congoyA2CmF"),
    cookIslands SWIFT_SYMBOL("s:7BlinkID7CountryO11cookIslandsyA2CmF"),
    cuba SWIFT_SYMBOL("s:7BlinkID7CountryO4cubayA2CmF"),
    curacao SWIFT_SYMBOL("s:7BlinkID7CountryO7curacaoyA2CmF"),
    democraticRepublicOfTheCongo SWIFT_SYMBOL("s:7BlinkID7CountryO28democraticRepublicOfTheCongoyA2CmF"),
    djibouti SWIFT_SYMBOL("s:7BlinkID7CountryO8djiboutiyA2CmF"),
    dominica SWIFT_SYMBOL("s:7BlinkID7CountryO8dominicayA2CmF"),
    eastTimor SWIFT_SYMBOL("s:7BlinkID7CountryO9eastTimoryA2CmF"),
    equatorialGuinea SWIFT_SYMBOL("s:7BlinkID7CountryO16equatorialGuineayA2CmF"),
    eritrea SWIFT_SYMBOL("s:7BlinkID7CountryO7eritreayA2CmF"),
    ethiopia SWIFT_SYMBOL("s:7BlinkID7CountryO8ethiopiayA2CmF"),
    falklandIslands SWIFT_SYMBOL("s:7BlinkID7CountryO15falklandIslandsyA2CmF"),
    faroeIslands SWIFT_SYMBOL("s:7BlinkID7CountryO12faroeIslandsyA2CmF"),
    federatedStatesOfMicronesia SWIFT_SYMBOL("s:7BlinkID7CountryO27federatedStatesOfMicronesiayA2CmF"),
    fiji SWIFT_SYMBOL("s:7BlinkID7CountryO4fijiyA2CmF"),
    frenchGuiana SWIFT_SYMBOL("s:7BlinkID7CountryO12frenchGuianayA2CmF"),
    frenchPolynesia SWIFT_SYMBOL("s:7BlinkID7CountryO15frenchPolynesiayA2CmF"),
    frenchSouthernTerritories SWIFT_SYMBOL("s:7BlinkID7CountryO25frenchSouthernTerritoriesyA2CmF"),
    gabon SWIFT_SYMBOL("s:7BlinkID7CountryO5gabonyA2CmF"),
    gambia SWIFT_SYMBOL("s:7BlinkID7CountryO6gambiayA2CmF"),
    gibraltar SWIFT_SYMBOL("s:7BlinkID7CountryO9gibraltaryA2CmF"),
    greenland SWIFT_SYMBOL("s:7BlinkID7CountryO9greenlandyA2CmF"),
    grenada SWIFT_SYMBOL("s:7BlinkID7CountryO7grenadayA2CmF"),
    guadeloupe SWIFT_SYMBOL("s:7BlinkID7CountryO10guadeloupeyA2CmF"),
    guam SWIFT_SYMBOL("s:7BlinkID7CountryO4guamyA2CmF"),
    guinea SWIFT_SYMBOL("s:7BlinkID7CountryO6guineayA2CmF"),
    guineaBissau SWIFT_SYMBOL("s:7BlinkID7CountryO12guineaBissauyA2CmF"),
    guyana SWIFT_SYMBOL("s:7BlinkID7CountryO6guyanayA2CmF"),
    heardIslandAndMcdonaldIslands SWIFT_SYMBOL("s:7BlinkID7CountryO29heardIslandAndMcdonaldIslandsyA2CmF"),
    iran SWIFT_SYMBOL("s:7BlinkID7CountryO4iranyA2CmF"),
    iraq SWIFT_SYMBOL("s:7BlinkID7CountryO4iraqyA2CmF"),
    isleOfMan SWIFT_SYMBOL("s:7BlinkID7CountryO9isleOfManyA2CmF"),
    ivoryCoast SWIFT_SYMBOL("s:7BlinkID7CountryO10ivoryCoastyA2CmF"),
    jamaica SWIFT_SYMBOL("s:7BlinkID7CountryO7jamaicayA2CmF"),
    kiribati SWIFT_SYMBOL("s:7BlinkID7CountryO8kiribatiyA2CmF"),
    kyrgyzstan SWIFT_SYMBOL("s:7BlinkID7CountryO10kyrgyzstanyA2CmF"),
    laos SWIFT_SYMBOL("s:7BlinkID7CountryO4laosyA2CmF"),
    lebanon SWIFT_SYMBOL("s:7BlinkID7CountryO7lebanonyA2CmF"),
    lesotho SWIFT_SYMBOL("s:7BlinkID7CountryO7lesothoyA2CmF"),
    liberia SWIFT_SYMBOL("s:7BlinkID7CountryO7liberiayA2CmF"),
    libya SWIFT_SYMBOL("s:7BlinkID7CountryO5libyayA2CmF"),
    liechtenstein SWIFT_SYMBOL("s:7BlinkID7CountryO13liechtensteinyA2CmF"),
    macau SWIFT_SYMBOL("s:7BlinkID7CountryO5macauyA2CmF"),
    madagascar SWIFT_SYMBOL("s:7BlinkID7CountryO10madagascaryA2CmF"),
    malawi SWIFT_SYMBOL("s:7BlinkID7CountryO6malawiyA2CmF"),
    mali SWIFT_SYMBOL("s:7BlinkID7CountryO4maliyA2CmF"),
    marshallIslands SWIFT_SYMBOL("s:7BlinkID7CountryO15marshallIslandsyA2CmF"),
    martinique SWIFT_SYMBOL("s:7BlinkID7CountryO10martiniqueyA2CmF"),
    mauritania SWIFT_SYMBOL("s:7BlinkID7CountryO10mauritaniayA2CmF"),
    mayotte SWIFT_SYMBOL("s:7BlinkID7CountryO7mayotteyA2CmF"),
    moldova SWIFT_SYMBOL("s:7BlinkID7CountryO7moldovayA2CmF"),
    monaco SWIFT_SYMBOL("s:7BlinkID7CountryO6monacoyA2CmF"),
    mongolia SWIFT_SYMBOL("s:7BlinkID7CountryO8mongoliayA2CmF"),
    montserrat SWIFT_SYMBOL("s:7BlinkID7CountryO10montserratyA2CmF"),
    mozambique SWIFT_SYMBOL("s:7BlinkID7CountryO10mozambiqueyA2CmF"),
    myanmar SWIFT_SYMBOL("s:7BlinkID7CountryO7myanmaryA2CmF"),
    namibia SWIFT_SYMBOL("s:7BlinkID7CountryO7namibiayA2CmF"),
    nauru SWIFT_SYMBOL("s:7BlinkID7CountryO5nauruyA2CmF"),
    nepal SWIFT_SYMBOL("s:7BlinkID7CountryO5nepalyA2CmF"),
    newCaledonia SWIFT_SYMBOL("s:7BlinkID7CountryO12newCaledoniayA2CmF"),
    niger SWIFT_SYMBOL("s:7BlinkID7CountryO5nigeryA2CmF"),
    niue SWIFT_SYMBOL("s:7BlinkID7CountryO4niueyA2CmF"),
    norfolkIsland SWIFT_SYMBOL("s:7BlinkID7CountryO13norfolkIslandyA2CmF"),
    northernCyprus SWIFT_SYMBOL("s:7BlinkID7CountryO14northernCyprusyA2CmF"),
    northernMarianaIslands SWIFT_SYMBOL("s:7BlinkID7CountryO22northernMarianaIslandsyA2CmF"),
    northKorea SWIFT_SYMBOL("s:7BlinkID7CountryO10northKoreayA2CmF"),
    northMacedonia SWIFT_SYMBOL("s:7BlinkID7CountryO14northMacedoniayA2CmF"),
    palau SWIFT_SYMBOL("s:7BlinkID7CountryO5palauyA2CmF"),
    palestine SWIFT_SYMBOL("s:7BlinkID7CountryO9palestineyA2CmF"),
    papuaNewGuinea SWIFT_SYMBOL("s:7BlinkID7CountryO14papuaNewGuineayA2CmF"),
    pitcairn SWIFT_SYMBOL("s:7BlinkID7CountryO8pitcairnyA2CmF"),
    reunion SWIFT_SYMBOL("s:7BlinkID7CountryO7reunionyA2CmF"),
    rwanda SWIFT_SYMBOL("s:7BlinkID7CountryO6rwandayA2CmF"),
    saintBarthelemy SWIFT_SYMBOL("s:7BlinkID7CountryO15saintBarthelemyyA2CmF"),
    saintHelenaAscensionAndTristianDaCunha SWIFT_SYMBOL("s:7BlinkID7CountryO38saintHelenaAscensionAndTristianDaCunhayA2CmF"),
    saintKittsAndNevis SWIFT_SYMBOL("s:7BlinkID7CountryO18saintKittsAndNevisyA2CmF"),
    saintLucia SWIFT_SYMBOL("s:7BlinkID7CountryO10saintLuciayA2CmF"),
    saintMartin SWIFT_SYMBOL("s:7BlinkID7CountryO11saintMartinyA2CmF"),
    saintPierreAndMiquelon SWIFT_SYMBOL("s:7BlinkID7CountryO22saintPierreAndMiquelonyA2CmF"),
    saintVincentAndTheGrenadines SWIFT_SYMBOL("s:7BlinkID7CountryO28saintVincentAndTheGrenadinesyA2CmF"),
    samoa SWIFT_SYMBOL("s:7BlinkID7CountryO5samoayA2CmF"),
    sanMarino SWIFT_SYMBOL("s:7BlinkID7CountryO9sanMarinoyA2CmF"),
    saoTomeAndPrincipe SWIFT_SYMBOL("s:7BlinkID7CountryO18saoTomeAndPrincipeyA2CmF"),
    senegal SWIFT_SYMBOL("s:7BlinkID7CountryO7senegalyA2CmF"),
    seychelles SWIFT_SYMBOL("s:7BlinkID7CountryO10seychellesyA2CmF"),
    sierraLeone SWIFT_SYMBOL("s:7BlinkID7CountryO11sierraLeoneyA2CmF"),
    sintMaarten SWIFT_SYMBOL("s:7BlinkID7CountryO11sintMaartenyA2CmF"),
    solomonIslands SWIFT_SYMBOL("s:7BlinkID7CountryO14solomonIslandsyA2CmF"),
    somalia SWIFT_SYMBOL("s:7BlinkID7CountryO7somaliayA2CmF"),
    southGeorgiaAndTheSouthSandwichIslands SWIFT_SYMBOL("s:7BlinkID7CountryO38southGeorgiaAndTheSouthSandwichIslandsyA2CmF"),
    southSudan SWIFT_SYMBOL("s:7BlinkID7CountryO10southSudanyA2CmF"),
    sudan SWIFT_SYMBOL("s:7BlinkID7CountryO5sudanyA2CmF"),
    suriname SWIFT_SYMBOL("s:7BlinkID7CountryO8surinameyA2CmF"),
    svalbardAndJanMayen SWIFT_SYMBOL("s:7BlinkID7CountryO19svalbardAndJanMayenyA2CmF"),
    eswatini SWIFT_SYMBOL("s:7BlinkID7CountryO8eswatiniyA2CmF"),
    syria SWIFT_SYMBOL("s:7BlinkID7CountryO5syriayA2CmF"),
    tajikistan SWIFT_SYMBOL("s:7BlinkID7CountryO10tajikistanyA2CmF"),
    tanzania SWIFT_SYMBOL("s:7BlinkID7CountryO8tanzaniayA2CmF"),
    togo SWIFT_SYMBOL("s:7BlinkID7CountryO4togoyA2CmF"),
    tokelau SWIFT_SYMBOL("s:7BlinkID7CountryO7tokelauyA2CmF"),
    tonga SWIFT_SYMBOL("s:7BlinkID7CountryO5tongayA2CmF"),
    trinidadAndTobago SWIFT_SYMBOL("s:7BlinkID7CountryO17trinidadAndTobagoyA2CmF"),
    turkmenistan SWIFT_SYMBOL("s:7BlinkID7CountryO12turkmenistanyA2CmF"),
    turksAndCaicosIslands SWIFT_SYMBOL("s:7BlinkID7CountryO21turksAndCaicosIslandsyA2CmF"),
    tuvalu SWIFT_SYMBOL("s:7BlinkID7CountryO6tuvaluyA2CmF"),
    unitedStatesMinorOutlyingIslands SWIFT_SYMBOL("s:7BlinkID7CountryO32unitedStatesMinorOutlyingIslandsyA2CmF"),
    uzbekistan SWIFT_SYMBOL("s:7BlinkID7CountryO10uzbekistanyA2CmF"),
    vanuatu SWIFT_SYMBOL("s:7BlinkID7CountryO7vanuatuyA2CmF"),
    vaticanCity SWIFT_SYMBOL("s:7BlinkID7CountryO11vaticanCityyA2CmF"),
    virginIslandsBritish SWIFT_SYMBOL("s:7BlinkID7CountryO20virginIslandsBritishyA2CmF"),
    virginIslandsUs SWIFT_SYMBOL("s:7BlinkID7CountryO15virginIslandsUsyA2CmF"),
    wallisAndFutuna SWIFT_SYMBOL("s:7BlinkID7CountryO15wallisAndFutunayA2CmF"),
    westernSahara SWIFT_SYMBOL("s:7BlinkID7CountryO13westernSaharayA2CmF"),
    yemen SWIFT_SYMBOL("s:7BlinkID7CountryO5yemenyA2CmF"),
    yugoslavia SWIFT_SYMBOL("s:7BlinkID7CountryO10yugoslaviayA2CmF"),
    zambia SWIFT_SYMBOL("s:7BlinkID7CountryO6zambiayA2CmF"),
    zimbabwe SWIFT_SYMBOL("s:7BlinkID7CountryO8zimbabweyA2CmF"),
    schengen_area SWIFT_SYMBOL("s:7BlinkID7CountryO13schengen_areayA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_none {  // impl struct for case none
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::none;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } none SWIFT_SYMBOL("s:7BlinkID7CountryO4noneyA2CmF");
  SWIFT_INLINE_THUNK bool isNone() const;

  inline const static struct _impl_albania {  // impl struct for case albania
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::albania;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } albania SWIFT_SYMBOL("s:7BlinkID7CountryO7albaniayA2CmF");
  SWIFT_INLINE_THUNK bool isAlbania() const;

  inline const static struct _impl_algeria {  // impl struct for case algeria
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::algeria;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } algeria SWIFT_SYMBOL("s:7BlinkID7CountryO7algeriayA2CmF");
  SWIFT_INLINE_THUNK bool isAlgeria() const;

  inline const static struct _impl_argentina {  // impl struct for case argentina
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::argentina;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } argentina SWIFT_SYMBOL("s:7BlinkID7CountryO9argentinayA2CmF");
  SWIFT_INLINE_THUNK bool isArgentina() const;

  inline const static struct _impl_australia {  // impl struct for case australia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::australia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } australia SWIFT_SYMBOL("s:7BlinkID7CountryO9australiayA2CmF");
  SWIFT_INLINE_THUNK bool isAustralia() const;

  inline const static struct _impl_austria {  // impl struct for case austria
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::austria;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } austria SWIFT_SYMBOL("s:7BlinkID7CountryO7austriayA2CmF");
  SWIFT_INLINE_THUNK bool isAustria() const;

  inline const static struct _impl_azerbaijan {  // impl struct for case azerbaijan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::azerbaijan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } azerbaijan SWIFT_SYMBOL("s:7BlinkID7CountryO10azerbaijanyA2CmF");
  SWIFT_INLINE_THUNK bool isAzerbaijan() const;

  inline const static struct _impl_bahrain {  // impl struct for case bahrain
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bahrain;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } bahrain SWIFT_SYMBOL("s:7BlinkID7CountryO7bahrainyA2CmF");
  SWIFT_INLINE_THUNK bool isBahrain() const;

  inline const static struct _impl_bangladesh {  // impl struct for case bangladesh
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bangladesh;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } bangladesh SWIFT_SYMBOL("s:7BlinkID7CountryO10bangladeshyA2CmF");
  SWIFT_INLINE_THUNK bool isBangladesh() const;

  inline const static struct _impl_belgium {  // impl struct for case belgium
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::belgium;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } belgium SWIFT_SYMBOL("s:7BlinkID7CountryO7belgiumyA2CmF");
  SWIFT_INLINE_THUNK bool isBelgium() const;

  inline const static struct _impl_bosniaAndHerzegovina {  // impl struct for case bosniaAndHerzegovina
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bosniaAndHerzegovina;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } bosniaAndHerzegovina SWIFT_SYMBOL("s:7BlinkID7CountryO20bosniaAndHerzegovinayA2CmF");
  SWIFT_INLINE_THUNK bool isBosniaAndHerzegovina() const;

  inline const static struct _impl_brunei {  // impl struct for case brunei
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::brunei;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } brunei SWIFT_SYMBOL("s:7BlinkID7CountryO6bruneiyA2CmF");
  SWIFT_INLINE_THUNK bool isBrunei() const;

  inline const static struct _impl_bulgaria {  // impl struct for case bulgaria
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bulgaria;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } bulgaria SWIFT_SYMBOL("s:7BlinkID7CountryO8bulgariayA2CmF");
  SWIFT_INLINE_THUNK bool isBulgaria() const;

  inline const static struct _impl_cambodia {  // impl struct for case cambodia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cambodia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } cambodia SWIFT_SYMBOL("s:7BlinkID7CountryO8cambodiayA2CmF");
  SWIFT_INLINE_THUNK bool isCambodia() const;

  inline const static struct _impl_canada {  // impl struct for case canada
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::canada;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } canada SWIFT_SYMBOL("s:7BlinkID7CountryO6canadayA2CmF");
  SWIFT_INLINE_THUNK bool isCanada() const;

  inline const static struct _impl_chile {  // impl struct for case chile
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::chile;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } chile SWIFT_SYMBOL("s:7BlinkID7CountryO5chileyA2CmF");
  SWIFT_INLINE_THUNK bool isChile() const;

  inline const static struct _impl_colombia {  // impl struct for case colombia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::colombia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } colombia SWIFT_SYMBOL("s:7BlinkID7CountryO8colombiayA2CmF");
  SWIFT_INLINE_THUNK bool isColombia() const;

  inline const static struct _impl_costaRica {  // impl struct for case costaRica
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::costaRica;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } costaRica SWIFT_SYMBOL("s:7BlinkID7CountryO9costaRicayA2CmF");
  SWIFT_INLINE_THUNK bool isCostaRica() const;

  inline const static struct _impl_croatia {  // impl struct for case croatia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::croatia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } croatia SWIFT_SYMBOL("s:7BlinkID7CountryO7croatiayA2CmF");
  SWIFT_INLINE_THUNK bool isCroatia() const;

  inline const static struct _impl_cyprus {  // impl struct for case cyprus
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cyprus;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } cyprus SWIFT_SYMBOL("s:7BlinkID7CountryO6cyprusyA2CmF");
  SWIFT_INLINE_THUNK bool isCyprus() const;

  inline const static struct _impl_czechia {  // impl struct for case czechia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::czechia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } czechia SWIFT_SYMBOL("s:7BlinkID7CountryO7czechiayA2CmF");
  SWIFT_INLINE_THUNK bool isCzechia() const;

  inline const static struct _impl_denmark {  // impl struct for case denmark
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::denmark;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } denmark SWIFT_SYMBOL("s:7BlinkID7CountryO7denmarkyA2CmF");
  SWIFT_INLINE_THUNK bool isDenmark() const;

  inline const static struct _impl_dominicanRepublic {  // impl struct for case dominicanRepublic
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dominicanRepublic;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } dominicanRepublic SWIFT_SYMBOL("s:7BlinkID7CountryO17dominicanRepublicyA2CmF");
  SWIFT_INLINE_THUNK bool isDominicanRepublic() const;

  inline const static struct _impl_egypt {  // impl struct for case egypt
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::egypt;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } egypt SWIFT_SYMBOL("s:7BlinkID7CountryO5egyptyA2CmF");
  SWIFT_INLINE_THUNK bool isEgypt() const;

  inline const static struct _impl_estonia {  // impl struct for case estonia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::estonia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } estonia SWIFT_SYMBOL("s:7BlinkID7CountryO7estoniayA2CmF");
  SWIFT_INLINE_THUNK bool isEstonia() const;

  inline const static struct _impl_finland {  // impl struct for case finland
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::finland;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } finland SWIFT_SYMBOL("s:7BlinkID7CountryO7finlandyA2CmF");
  SWIFT_INLINE_THUNK bool isFinland() const;

  inline const static struct _impl_france {  // impl struct for case france
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::france;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } france SWIFT_SYMBOL("s:7BlinkID7CountryO6franceyA2CmF");
  SWIFT_INLINE_THUNK bool isFrance() const;

  inline const static struct _impl_georgia {  // impl struct for case georgia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::georgia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } georgia SWIFT_SYMBOL("s:7BlinkID7CountryO7georgiayA2CmF");
  SWIFT_INLINE_THUNK bool isGeorgia() const;

  inline const static struct _impl_germany {  // impl struct for case germany
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::germany;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } germany SWIFT_SYMBOL("s:7BlinkID7CountryO7germanyyA2CmF");
  SWIFT_INLINE_THUNK bool isGermany() const;

  inline const static struct _impl_ghana {  // impl struct for case ghana
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ghana;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } ghana SWIFT_SYMBOL("s:7BlinkID7CountryO5ghanayA2CmF");
  SWIFT_INLINE_THUNK bool isGhana() const;

  inline const static struct _impl_greece {  // impl struct for case greece
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::greece;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } greece SWIFT_SYMBOL("s:7BlinkID7CountryO6greeceyA2CmF");
  SWIFT_INLINE_THUNK bool isGreece() const;

  inline const static struct _impl_guatemala {  // impl struct for case guatemala
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::guatemala;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } guatemala SWIFT_SYMBOL("s:7BlinkID7CountryO9guatemalayA2CmF");
  SWIFT_INLINE_THUNK bool isGuatemala() const;

  inline const static struct _impl_hongKong {  // impl struct for case hongKong
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::hongKong;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } hongKong SWIFT_SYMBOL("s:7BlinkID7CountryO8hongKongyA2CmF");
  SWIFT_INLINE_THUNK bool isHongKong() const;

  inline const static struct _impl_hungary {  // impl struct for case hungary
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::hungary;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } hungary SWIFT_SYMBOL("s:7BlinkID7CountryO7hungaryyA2CmF");
  SWIFT_INLINE_THUNK bool isHungary() const;

  inline const static struct _impl_india {  // impl struct for case india
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::india;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } india SWIFT_SYMBOL("s:7BlinkID7CountryO5indiayA2CmF");
  SWIFT_INLINE_THUNK bool isIndia() const;

  inline const static struct _impl_indonesia {  // impl struct for case indonesia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::indonesia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } indonesia SWIFT_SYMBOL("s:7BlinkID7CountryO9indonesiayA2CmF");
  SWIFT_INLINE_THUNK bool isIndonesia() const;

  inline const static struct _impl_ireland {  // impl struct for case ireland
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ireland;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } ireland SWIFT_SYMBOL("s:7BlinkID7CountryO7irelandyA2CmF");
  SWIFT_INLINE_THUNK bool isIreland() const;

  inline const static struct _impl_israel {  // impl struct for case israel
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::israel;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } israel SWIFT_SYMBOL("s:7BlinkID7CountryO6israelyA2CmF");
  SWIFT_INLINE_THUNK bool isIsrael() const;

  inline const static struct _impl_italy {  // impl struct for case italy
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::italy;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } italy SWIFT_SYMBOL("s:7BlinkID7CountryO5italyyA2CmF");
  SWIFT_INLINE_THUNK bool isItaly() const;

  inline const static struct _impl_jordan {  // impl struct for case jordan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::jordan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } jordan SWIFT_SYMBOL("s:7BlinkID7CountryO6jordanyA2CmF");
  SWIFT_INLINE_THUNK bool isJordan() const;

  inline const static struct _impl_kazakhstan {  // impl struct for case kazakhstan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::kazakhstan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } kazakhstan SWIFT_SYMBOL("s:7BlinkID7CountryO10kazakhstanyA2CmF");
  SWIFT_INLINE_THUNK bool isKazakhstan() const;

  inline const static struct _impl_kenya {  // impl struct for case kenya
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::kenya;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } kenya SWIFT_SYMBOL("s:7BlinkID7CountryO5kenyayA2CmF");
  SWIFT_INLINE_THUNK bool isKenya() const;

  inline const static struct _impl_kosovo {  // impl struct for case kosovo
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::kosovo;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } kosovo SWIFT_SYMBOL("s:7BlinkID7CountryO6kosovoyA2CmF");
  SWIFT_INLINE_THUNK bool isKosovo() const;

  inline const static struct _impl_kuwait {  // impl struct for case kuwait
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::kuwait;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } kuwait SWIFT_SYMBOL("s:7BlinkID7CountryO6kuwaityA2CmF");
  SWIFT_INLINE_THUNK bool isKuwait() const;

  inline const static struct _impl_latvia {  // impl struct for case latvia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::latvia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } latvia SWIFT_SYMBOL("s:7BlinkID7CountryO6latviayA2CmF");
  SWIFT_INLINE_THUNK bool isLatvia() const;

  inline const static struct _impl_lithuania {  // impl struct for case lithuania
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::lithuania;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } lithuania SWIFT_SYMBOL("s:7BlinkID7CountryO9lithuaniayA2CmF");
  SWIFT_INLINE_THUNK bool isLithuania() const;

  inline const static struct _impl_malaysia {  // impl struct for case malaysia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::malaysia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } malaysia SWIFT_SYMBOL("s:7BlinkID7CountryO8malaysiayA2CmF");
  SWIFT_INLINE_THUNK bool isMalaysia() const;

  inline const static struct _impl_maldives {  // impl struct for case maldives
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::maldives;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } maldives SWIFT_SYMBOL("s:7BlinkID7CountryO8maldivesyA2CmF");
  SWIFT_INLINE_THUNK bool isMaldives() const;

  inline const static struct _impl_malta {  // impl struct for case malta
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::malta;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } malta SWIFT_SYMBOL("s:7BlinkID7CountryO5maltayA2CmF");
  SWIFT_INLINE_THUNK bool isMalta() const;

  inline const static struct _impl_mauritius {  // impl struct for case mauritius
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mauritius;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } mauritius SWIFT_SYMBOL("s:7BlinkID7CountryO9mauritiusyA2CmF");
  SWIFT_INLINE_THUNK bool isMauritius() const;

  inline const static struct _impl_mexico {  // impl struct for case mexico
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mexico;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } mexico SWIFT_SYMBOL("s:7BlinkID7CountryO6mexicoyA2CmF");
  SWIFT_INLINE_THUNK bool isMexico() const;

  inline const static struct _impl_morocco {  // impl struct for case morocco
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::morocco;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } morocco SWIFT_SYMBOL("s:7BlinkID7CountryO7moroccoyA2CmF");
  SWIFT_INLINE_THUNK bool isMorocco() const;

  inline const static struct _impl_netherlands {  // impl struct for case netherlands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::netherlands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } netherlands SWIFT_SYMBOL("s:7BlinkID7CountryO11netherlandsyA2CmF");
  SWIFT_INLINE_THUNK bool isNetherlands() const;

  inline const static struct _impl_newZealand {  // impl struct for case newZealand
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::newZealand;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } newZealand SWIFT_SYMBOL("s:7BlinkID7CountryO10newZealandyA2CmF");
  SWIFT_INLINE_THUNK bool isNewZealand() const;

  inline const static struct _impl_nigeria {  // impl struct for case nigeria
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nigeria;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } nigeria SWIFT_SYMBOL("s:7BlinkID7CountryO7nigeriayA2CmF");
  SWIFT_INLINE_THUNK bool isNigeria() const;

  inline const static struct _impl_pakistan {  // impl struct for case pakistan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::pakistan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } pakistan SWIFT_SYMBOL("s:7BlinkID7CountryO8pakistanyA2CmF");
  SWIFT_INLINE_THUNK bool isPakistan() const;

  inline const static struct _impl_panama {  // impl struct for case panama
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::panama;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } panama SWIFT_SYMBOL("s:7BlinkID7CountryO6panamayA2CmF");
  SWIFT_INLINE_THUNK bool isPanama() const;

  inline const static struct _impl_paraguay {  // impl struct for case paraguay
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::paraguay;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } paraguay SWIFT_SYMBOL("s:7BlinkID7CountryO8paraguayyA2CmF");
  SWIFT_INLINE_THUNK bool isParaguay() const;

  inline const static struct _impl_philippines {  // impl struct for case philippines
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::philippines;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } philippines SWIFT_SYMBOL("s:7BlinkID7CountryO11philippinesyA2CmF");
  SWIFT_INLINE_THUNK bool isPhilippines() const;

  inline const static struct _impl_poland {  // impl struct for case poland
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::poland;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } poland SWIFT_SYMBOL("s:7BlinkID7CountryO6polandyA2CmF");
  SWIFT_INLINE_THUNK bool isPoland() const;

  inline const static struct _impl_portugal {  // impl struct for case portugal
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::portugal;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } portugal SWIFT_SYMBOL("s:7BlinkID7CountryO8portugalyA2CmF");
  SWIFT_INLINE_THUNK bool isPortugal() const;

  inline const static struct _impl_puertoRico {  // impl struct for case puertoRico
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::puertoRico;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } puertoRico SWIFT_SYMBOL("s:7BlinkID7CountryO10puertoRicoyA2CmF");
  SWIFT_INLINE_THUNK bool isPuertoRico() const;

  inline const static struct _impl_qatar {  // impl struct for case qatar
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::qatar;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } qatar SWIFT_SYMBOL("s:7BlinkID7CountryO5qataryA2CmF");
  SWIFT_INLINE_THUNK bool isQatar() const;

  inline const static struct _impl_romania {  // impl struct for case romania
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::romania;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } romania SWIFT_SYMBOL("s:7BlinkID7CountryO7romaniayA2CmF");
  SWIFT_INLINE_THUNK bool isRomania() const;

  inline const static struct _impl_russia {  // impl struct for case russia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::russia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } russia SWIFT_SYMBOL("s:7BlinkID7CountryO6russiayA2CmF");
  SWIFT_INLINE_THUNK bool isRussia() const;

  inline const static struct _impl_saudiArabia {  // impl struct for case saudiArabia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::saudiArabia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } saudiArabia SWIFT_SYMBOL("s:7BlinkID7CountryO11saudiArabiayA2CmF");
  SWIFT_INLINE_THUNK bool isSaudiArabia() const;

  inline const static struct _impl_serbia {  // impl struct for case serbia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::serbia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } serbia SWIFT_SYMBOL("s:7BlinkID7CountryO6serbiayA2CmF");
  SWIFT_INLINE_THUNK bool isSerbia() const;

  inline const static struct _impl_singapore {  // impl struct for case singapore
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::singapore;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } singapore SWIFT_SYMBOL("s:7BlinkID7CountryO9singaporeyA2CmF");
  SWIFT_INLINE_THUNK bool isSingapore() const;

  inline const static struct _impl_slovakia {  // impl struct for case slovakia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::slovakia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } slovakia SWIFT_SYMBOL("s:7BlinkID7CountryO8slovakiayA2CmF");
  SWIFT_INLINE_THUNK bool isSlovakia() const;

  inline const static struct _impl_slovenia {  // impl struct for case slovenia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::slovenia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } slovenia SWIFT_SYMBOL("s:7BlinkID7CountryO8sloveniayA2CmF");
  SWIFT_INLINE_THUNK bool isSlovenia() const;

  inline const static struct _impl_southAfrica {  // impl struct for case southAfrica
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::southAfrica;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } southAfrica SWIFT_SYMBOL("s:7BlinkID7CountryO11southAfricayA2CmF");
  SWIFT_INLINE_THUNK bool isSouthAfrica() const;

  inline const static struct _impl_spain {  // impl struct for case spain
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::spain;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } spain SWIFT_SYMBOL("s:7BlinkID7CountryO5spainyA2CmF");
  SWIFT_INLINE_THUNK bool isSpain() const;

  inline const static struct _impl_sweden {  // impl struct for case sweden
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sweden;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } sweden SWIFT_SYMBOL("s:7BlinkID7CountryO6swedenyA2CmF");
  SWIFT_INLINE_THUNK bool isSweden() const;

  inline const static struct _impl_switzerland {  // impl struct for case switzerland
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::switzerland;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } switzerland SWIFT_SYMBOL("s:7BlinkID7CountryO11switzerlandyA2CmF");
  SWIFT_INLINE_THUNK bool isSwitzerland() const;

  inline const static struct _impl_taiwan {  // impl struct for case taiwan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::taiwan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } taiwan SWIFT_SYMBOL("s:7BlinkID7CountryO6taiwanyA2CmF");
  SWIFT_INLINE_THUNK bool isTaiwan() const;

  inline const static struct _impl_thailand {  // impl struct for case thailand
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::thailand;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } thailand SWIFT_SYMBOL("s:7BlinkID7CountryO8thailandyA2CmF");
  SWIFT_INLINE_THUNK bool isThailand() const;

  inline const static struct _impl_tunisia {  // impl struct for case tunisia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tunisia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } tunisia SWIFT_SYMBOL("s:7BlinkID7CountryO7tunisiayA2CmF");
  SWIFT_INLINE_THUNK bool isTunisia() const;

  inline const static struct _impl_turkey {  // impl struct for case turkey
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::turkey;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } turkey SWIFT_SYMBOL("s:7BlinkID7CountryO6turkeyyA2CmF");
  SWIFT_INLINE_THUNK bool isTurkey() const;

  inline const static struct _impl_uae {  // impl struct for case uae
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::uae;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } uae SWIFT_SYMBOL("s:7BlinkID7CountryO3uaeyA2CmF");
  SWIFT_INLINE_THUNK bool isUae() const;

  inline const static struct _impl_uganda {  // impl struct for case uganda
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::uganda;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } uganda SWIFT_SYMBOL("s:7BlinkID7CountryO6ugandayA2CmF");
  SWIFT_INLINE_THUNK bool isUganda() const;

  inline const static struct _impl_uk {  // impl struct for case uk
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::uk;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } uk SWIFT_SYMBOL("s:7BlinkID7CountryO2ukyA2CmF");
  SWIFT_INLINE_THUNK bool isUk() const;

  inline const static struct _impl_ukraine {  // impl struct for case ukraine
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ukraine;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } ukraine SWIFT_SYMBOL("s:7BlinkID7CountryO7ukraineyA2CmF");
  SWIFT_INLINE_THUNK bool isUkraine() const;

  inline const static struct _impl_usa {  // impl struct for case usa
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::usa;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } usa SWIFT_SYMBOL("s:7BlinkID7CountryO3usayA2CmF");
  SWIFT_INLINE_THUNK bool isUsa() const;

  inline const static struct _impl_vietnam {  // impl struct for case vietnam
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::vietnam;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } vietnam SWIFT_SYMBOL("s:7BlinkID7CountryO7vietnamyA2CmF");
  SWIFT_INLINE_THUNK bool isVietnam() const;

  inline const static struct _impl_brazil {  // impl struct for case brazil
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::brazil;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } brazil SWIFT_SYMBOL("s:7BlinkID7CountryO6brazilyA2CmF");
  SWIFT_INLINE_THUNK bool isBrazil() const;

  inline const static struct _impl_norway {  // impl struct for case norway
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::norway;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } norway SWIFT_SYMBOL("s:7BlinkID7CountryO6norwayyA2CmF");
  SWIFT_INLINE_THUNK bool isNorway() const;

  inline const static struct _impl_oman {  // impl struct for case oman
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::oman;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } oman SWIFT_SYMBOL("s:7BlinkID7CountryO4omanyA2CmF");
  SWIFT_INLINE_THUNK bool isOman() const;

  inline const static struct _impl_ecuador {  // impl struct for case ecuador
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ecuador;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } ecuador SWIFT_SYMBOL("s:7BlinkID7CountryO7ecuadoryA2CmF");
  SWIFT_INLINE_THUNK bool isEcuador() const;

  inline const static struct _impl_elSalvador {  // impl struct for case elSalvador
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::elSalvador;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } elSalvador SWIFT_SYMBOL("s:7BlinkID7CountryO10elSalvadoryA2CmF");
  SWIFT_INLINE_THUNK bool isElSalvador() const;

  inline const static struct _impl_sriLanka {  // impl struct for case sriLanka
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sriLanka;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } sriLanka SWIFT_SYMBOL("s:7BlinkID7CountryO8sriLankayA2CmF");
  SWIFT_INLINE_THUNK bool isSriLanka() const;

  inline const static struct _impl_peru {  // impl struct for case peru
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::peru;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } peru SWIFT_SYMBOL("s:7BlinkID7CountryO4peruyA2CmF");
  SWIFT_INLINE_THUNK bool isPeru() const;

  inline const static struct _impl_uruguay {  // impl struct for case uruguay
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::uruguay;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } uruguay SWIFT_SYMBOL("s:7BlinkID7CountryO7uruguayyA2CmF");
  SWIFT_INLINE_THUNK bool isUruguay() const;

  inline const static struct _impl_bahamas {  // impl struct for case bahamas
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bahamas;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } bahamas SWIFT_SYMBOL("s:7BlinkID7CountryO7bahamasyA2CmF");
  SWIFT_INLINE_THUNK bool isBahamas() const;

  inline const static struct _impl_bermuda {  // impl struct for case bermuda
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bermuda;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } bermuda SWIFT_SYMBOL("s:7BlinkID7CountryO7bermudayA2CmF");
  SWIFT_INLINE_THUNK bool isBermuda() const;

  inline const static struct _impl_bolivia {  // impl struct for case bolivia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bolivia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } bolivia SWIFT_SYMBOL("s:7BlinkID7CountryO7boliviayA2CmF");
  SWIFT_INLINE_THUNK bool isBolivia() const;

  inline const static struct _impl_china {  // impl struct for case china
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::china;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } china SWIFT_SYMBOL("s:7BlinkID7CountryO5chinayA2CmF");
  SWIFT_INLINE_THUNK bool isChina() const;

  inline const static struct _impl_europeanUnion {  // impl struct for case europeanUnion
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::europeanUnion;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } europeanUnion SWIFT_SYMBOL("s:7BlinkID7CountryO13europeanUnionyA2CmF");
  SWIFT_INLINE_THUNK bool isEuropeanUnion() const;

  inline const static struct _impl_haiti {  // impl struct for case haiti
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::haiti;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } haiti SWIFT_SYMBOL("s:7BlinkID7CountryO5haitiyA2CmF");
  SWIFT_INLINE_THUNK bool isHaiti() const;

  inline const static struct _impl_honduras {  // impl struct for case honduras
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::honduras;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } honduras SWIFT_SYMBOL("s:7BlinkID7CountryO8hondurasyA2CmF");
  SWIFT_INLINE_THUNK bool isHonduras() const;

  inline const static struct _impl_iceland {  // impl struct for case iceland
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::iceland;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } iceland SWIFT_SYMBOL("s:7BlinkID7CountryO7icelandyA2CmF");
  SWIFT_INLINE_THUNK bool isIceland() const;

  inline const static struct _impl_japan {  // impl struct for case japan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::japan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } japan SWIFT_SYMBOL("s:7BlinkID7CountryO5japanyA2CmF");
  SWIFT_INLINE_THUNK bool isJapan() const;

  inline const static struct _impl_luxembourg {  // impl struct for case luxembourg
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::luxembourg;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } luxembourg SWIFT_SYMBOL("s:7BlinkID7CountryO10luxembourgyA2CmF");
  SWIFT_INLINE_THUNK bool isLuxembourg() const;

  inline const static struct _impl_montenegro {  // impl struct for case montenegro
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::montenegro;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } montenegro SWIFT_SYMBOL("s:7BlinkID7CountryO10montenegroyA2CmF");
  SWIFT_INLINE_THUNK bool isMontenegro() const;

  inline const static struct _impl_nicaragua {  // impl struct for case nicaragua
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nicaragua;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } nicaragua SWIFT_SYMBOL("s:7BlinkID7CountryO9nicaraguayA2CmF");
  SWIFT_INLINE_THUNK bool isNicaragua() const;

  inline const static struct _impl_southKorea {  // impl struct for case southKorea
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::southKorea;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } southKorea SWIFT_SYMBOL("s:7BlinkID7CountryO10southKoreayA2CmF");
  SWIFT_INLINE_THUNK bool isSouthKorea() const;

  inline const static struct _impl_venezuela {  // impl struct for case venezuela
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::venezuela;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } venezuela SWIFT_SYMBOL("s:7BlinkID7CountryO9venezuelayA2CmF");
  SWIFT_INLINE_THUNK bool isVenezuela() const;

  inline const static struct _impl_afghanistan {  // impl struct for case afghanistan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::afghanistan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } afghanistan SWIFT_SYMBOL("s:7BlinkID7CountryO11afghanistanyA2CmF");
  SWIFT_INLINE_THUNK bool isAfghanistan() const;

  inline const static struct _impl_alandIslands {  // impl struct for case alandIslands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::alandIslands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } alandIslands SWIFT_SYMBOL("s:7BlinkID7CountryO12alandIslandsyA2CmF");
  SWIFT_INLINE_THUNK bool isAlandIslands() const;

  inline const static struct _impl_americanSamoa {  // impl struct for case americanSamoa
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::americanSamoa;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } americanSamoa SWIFT_SYMBOL("s:7BlinkID7CountryO13americanSamoayA2CmF");
  SWIFT_INLINE_THUNK bool isAmericanSamoa() const;

  inline const static struct _impl_andorra {  // impl struct for case andorra
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::andorra;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } andorra SWIFT_SYMBOL("s:7BlinkID7CountryO7andorrayA2CmF");
  SWIFT_INLINE_THUNK bool isAndorra() const;

  inline const static struct _impl_angola {  // impl struct for case angola
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::angola;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } angola SWIFT_SYMBOL("s:7BlinkID7CountryO6angolayA2CmF");
  SWIFT_INLINE_THUNK bool isAngola() const;

  inline const static struct _impl_anguilla {  // impl struct for case anguilla
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::anguilla;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } anguilla SWIFT_SYMBOL("s:7BlinkID7CountryO8anguillayA2CmF");
  SWIFT_INLINE_THUNK bool isAnguilla() const;

  inline const static struct _impl_antarctica {  // impl struct for case antarctica
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::antarctica;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } antarctica SWIFT_SYMBOL("s:7BlinkID7CountryO10antarcticayA2CmF");
  SWIFT_INLINE_THUNK bool isAntarctica() const;

  inline const static struct _impl_antiguaAndBarbuda {  // impl struct for case antiguaAndBarbuda
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::antiguaAndBarbuda;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } antiguaAndBarbuda SWIFT_SYMBOL("s:7BlinkID7CountryO17antiguaAndBarbudayA2CmF");
  SWIFT_INLINE_THUNK bool isAntiguaAndBarbuda() const;

  inline const static struct _impl_armenia {  // impl struct for case armenia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::armenia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } armenia SWIFT_SYMBOL("s:7BlinkID7CountryO7armeniayA2CmF");
  SWIFT_INLINE_THUNK bool isArmenia() const;

  inline const static struct _impl_aruba {  // impl struct for case aruba
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::aruba;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } aruba SWIFT_SYMBOL("s:7BlinkID7CountryO5arubayA2CmF");
  SWIFT_INLINE_THUNK bool isAruba() const;

  inline const static struct _impl_bailiwickOfGuernsey {  // impl struct for case bailiwickOfGuernsey
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bailiwickOfGuernsey;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } bailiwickOfGuernsey SWIFT_SYMBOL("s:7BlinkID7CountryO19bailiwickOfGuernseyyA2CmF");
  SWIFT_INLINE_THUNK bool isBailiwickOfGuernsey() const;

  inline const static struct _impl_bailiwickOfJersey {  // impl struct for case bailiwickOfJersey
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bailiwickOfJersey;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } bailiwickOfJersey SWIFT_SYMBOL("s:7BlinkID7CountryO17bailiwickOfJerseyyA2CmF");
  SWIFT_INLINE_THUNK bool isBailiwickOfJersey() const;

  inline const static struct _impl_barbados {  // impl struct for case barbados
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::barbados;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } barbados SWIFT_SYMBOL("s:7BlinkID7CountryO8barbadosyA2CmF");
  SWIFT_INLINE_THUNK bool isBarbados() const;

  inline const static struct _impl_belarus {  // impl struct for case belarus
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::belarus;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } belarus SWIFT_SYMBOL("s:7BlinkID7CountryO7belarusyA2CmF");
  SWIFT_INLINE_THUNK bool isBelarus() const;

  inline const static struct _impl_belize {  // impl struct for case belize
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::belize;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } belize SWIFT_SYMBOL("s:7BlinkID7CountryO6belizeyA2CmF");
  SWIFT_INLINE_THUNK bool isBelize() const;

  inline const static struct _impl_benin {  // impl struct for case benin
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::benin;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } benin SWIFT_SYMBOL("s:7BlinkID7CountryO5beninyA2CmF");
  SWIFT_INLINE_THUNK bool isBenin() const;

  inline const static struct _impl_bhutan {  // impl struct for case bhutan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bhutan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } bhutan SWIFT_SYMBOL("s:7BlinkID7CountryO6bhutanyA2CmF");
  SWIFT_INLINE_THUNK bool isBhutan() const;

  inline const static struct _impl_bonaireSaintEustatiusAndSaba {  // impl struct for case bonaireSaintEustatiusAndSaba
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bonaireSaintEustatiusAndSaba;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } bonaireSaintEustatiusAndSaba SWIFT_SYMBOL("s:7BlinkID7CountryO28bonaireSaintEustatiusAndSabayA2CmF");
  SWIFT_INLINE_THUNK bool isBonaireSaintEustatiusAndSaba() const;

  inline const static struct _impl_botswana {  // impl struct for case botswana
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::botswana;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } botswana SWIFT_SYMBOL("s:7BlinkID7CountryO8botswanayA2CmF");
  SWIFT_INLINE_THUNK bool isBotswana() const;

  inline const static struct _impl_bouvetIsland {  // impl struct for case bouvetIsland
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bouvetIsland;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } bouvetIsland SWIFT_SYMBOL("s:7BlinkID7CountryO12bouvetIslandyA2CmF");
  SWIFT_INLINE_THUNK bool isBouvetIsland() const;

  inline const static struct _impl_britishIndianOceanTerritory {  // impl struct for case britishIndianOceanTerritory
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::britishIndianOceanTerritory;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } britishIndianOceanTerritory SWIFT_SYMBOL("s:7BlinkID7CountryO27britishIndianOceanTerritoryyA2CmF");
  SWIFT_INLINE_THUNK bool isBritishIndianOceanTerritory() const;

  inline const static struct _impl_burkinaFaso {  // impl struct for case burkinaFaso
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::burkinaFaso;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } burkinaFaso SWIFT_SYMBOL("s:7BlinkID7CountryO11burkinaFasoyA2CmF");
  SWIFT_INLINE_THUNK bool isBurkinaFaso() const;

  inline const static struct _impl_burundi {  // impl struct for case burundi
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::burundi;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } burundi SWIFT_SYMBOL("s:7BlinkID7CountryO7burundiyA2CmF");
  SWIFT_INLINE_THUNK bool isBurundi() const;

  inline const static struct _impl_cameroon {  // impl struct for case cameroon
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cameroon;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } cameroon SWIFT_SYMBOL("s:7BlinkID7CountryO8cameroonyA2CmF");
  SWIFT_INLINE_THUNK bool isCameroon() const;

  inline const static struct _impl_capeVerde {  // impl struct for case capeVerde
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::capeVerde;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } capeVerde SWIFT_SYMBOL("s:7BlinkID7CountryO9capeVerdeyA2CmF");
  SWIFT_INLINE_THUNK bool isCapeVerde() const;

  inline const static struct _impl_caribbeanNetherlands {  // impl struct for case caribbeanNetherlands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::caribbeanNetherlands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } caribbeanNetherlands SWIFT_SYMBOL("s:7BlinkID7CountryO20caribbeanNetherlandsyA2CmF");
  SWIFT_INLINE_THUNK bool isCaribbeanNetherlands() const;

  inline const static struct _impl_caymanIslands {  // impl struct for case caymanIslands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::caymanIslands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } caymanIslands SWIFT_SYMBOL("s:7BlinkID7CountryO13caymanIslandsyA2CmF");
  SWIFT_INLINE_THUNK bool isCaymanIslands() const;

  inline const static struct _impl_centralAfricanRepublic {  // impl struct for case centralAfricanRepublic
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::centralAfricanRepublic;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } centralAfricanRepublic SWIFT_SYMBOL("s:7BlinkID7CountryO22centralAfricanRepublicyA2CmF");
  SWIFT_INLINE_THUNK bool isCentralAfricanRepublic() const;

  inline const static struct _impl_chad {  // impl struct for case chad
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::chad;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } chad SWIFT_SYMBOL("s:7BlinkID7CountryO4chadyA2CmF");
  SWIFT_INLINE_THUNK bool isChad() const;

  inline const static struct _impl_christmasIsland {  // impl struct for case christmasIsland
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::christmasIsland;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } christmasIsland SWIFT_SYMBOL("s:7BlinkID7CountryO15christmasIslandyA2CmF");
  SWIFT_INLINE_THUNK bool isChristmasIsland() const;

  inline const static struct _impl_cocosIslands {  // impl struct for case cocosIslands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cocosIslands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } cocosIslands SWIFT_SYMBOL("s:7BlinkID7CountryO12cocosIslandsyA2CmF");
  SWIFT_INLINE_THUNK bool isCocosIslands() const;

  inline const static struct _impl_comoros {  // impl struct for case comoros
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::comoros;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } comoros SWIFT_SYMBOL("s:7BlinkID7CountryO7comorosyA2CmF");
  SWIFT_INLINE_THUNK bool isComoros() const;

  inline const static struct _impl_congo {  // impl struct for case congo
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::congo;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } congo SWIFT_SYMBOL("s:7BlinkID7CountryO5congoyA2CmF");
  SWIFT_INLINE_THUNK bool isCongo() const;

  inline const static struct _impl_cookIslands {  // impl struct for case cookIslands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cookIslands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } cookIslands SWIFT_SYMBOL("s:7BlinkID7CountryO11cookIslandsyA2CmF");
  SWIFT_INLINE_THUNK bool isCookIslands() const;

  inline const static struct _impl_cuba {  // impl struct for case cuba
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cuba;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } cuba SWIFT_SYMBOL("s:7BlinkID7CountryO4cubayA2CmF");
  SWIFT_INLINE_THUNK bool isCuba() const;

  inline const static struct _impl_curacao {  // impl struct for case curacao
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::curacao;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } curacao SWIFT_SYMBOL("s:7BlinkID7CountryO7curacaoyA2CmF");
  SWIFT_INLINE_THUNK bool isCuracao() const;

  inline const static struct _impl_democraticRepublicOfTheCongo {  // impl struct for case democraticRepublicOfTheCongo
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::democraticRepublicOfTheCongo;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } democraticRepublicOfTheCongo SWIFT_SYMBOL("s:7BlinkID7CountryO28democraticRepublicOfTheCongoyA2CmF");
  SWIFT_INLINE_THUNK bool isDemocraticRepublicOfTheCongo() const;

  inline const static struct _impl_djibouti {  // impl struct for case djibouti
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::djibouti;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } djibouti SWIFT_SYMBOL("s:7BlinkID7CountryO8djiboutiyA2CmF");
  SWIFT_INLINE_THUNK bool isDjibouti() const;

  inline const static struct _impl_dominica {  // impl struct for case dominica
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dominica;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } dominica SWIFT_SYMBOL("s:7BlinkID7CountryO8dominicayA2CmF");
  SWIFT_INLINE_THUNK bool isDominica() const;

  inline const static struct _impl_eastTimor {  // impl struct for case eastTimor
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::eastTimor;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } eastTimor SWIFT_SYMBOL("s:7BlinkID7CountryO9eastTimoryA2CmF");
  SWIFT_INLINE_THUNK bool isEastTimor() const;

  inline const static struct _impl_equatorialGuinea {  // impl struct for case equatorialGuinea
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::equatorialGuinea;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } equatorialGuinea SWIFT_SYMBOL("s:7BlinkID7CountryO16equatorialGuineayA2CmF");
  SWIFT_INLINE_THUNK bool isEquatorialGuinea() const;

  inline const static struct _impl_eritrea {  // impl struct for case eritrea
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::eritrea;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } eritrea SWIFT_SYMBOL("s:7BlinkID7CountryO7eritreayA2CmF");
  SWIFT_INLINE_THUNK bool isEritrea() const;

  inline const static struct _impl_ethiopia {  // impl struct for case ethiopia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ethiopia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } ethiopia SWIFT_SYMBOL("s:7BlinkID7CountryO8ethiopiayA2CmF");
  SWIFT_INLINE_THUNK bool isEthiopia() const;

  inline const static struct _impl_falklandIslands {  // impl struct for case falklandIslands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::falklandIslands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } falklandIslands SWIFT_SYMBOL("s:7BlinkID7CountryO15falklandIslandsyA2CmF");
  SWIFT_INLINE_THUNK bool isFalklandIslands() const;

  inline const static struct _impl_faroeIslands {  // impl struct for case faroeIslands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::faroeIslands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } faroeIslands SWIFT_SYMBOL("s:7BlinkID7CountryO12faroeIslandsyA2CmF");
  SWIFT_INLINE_THUNK bool isFaroeIslands() const;

  inline const static struct _impl_federatedStatesOfMicronesia {  // impl struct for case federatedStatesOfMicronesia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::federatedStatesOfMicronesia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } federatedStatesOfMicronesia SWIFT_SYMBOL("s:7BlinkID7CountryO27federatedStatesOfMicronesiayA2CmF");
  SWIFT_INLINE_THUNK bool isFederatedStatesOfMicronesia() const;

  inline const static struct _impl_fiji {  // impl struct for case fiji
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::fiji;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } fiji SWIFT_SYMBOL("s:7BlinkID7CountryO4fijiyA2CmF");
  SWIFT_INLINE_THUNK bool isFiji() const;

  inline const static struct _impl_frenchGuiana {  // impl struct for case frenchGuiana
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::frenchGuiana;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } frenchGuiana SWIFT_SYMBOL("s:7BlinkID7CountryO12frenchGuianayA2CmF");
  SWIFT_INLINE_THUNK bool isFrenchGuiana() const;

  inline const static struct _impl_frenchPolynesia {  // impl struct for case frenchPolynesia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::frenchPolynesia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } frenchPolynesia SWIFT_SYMBOL("s:7BlinkID7CountryO15frenchPolynesiayA2CmF");
  SWIFT_INLINE_THUNK bool isFrenchPolynesia() const;

  inline const static struct _impl_frenchSouthernTerritories {  // impl struct for case frenchSouthernTerritories
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::frenchSouthernTerritories;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } frenchSouthernTerritories SWIFT_SYMBOL("s:7BlinkID7CountryO25frenchSouthernTerritoriesyA2CmF");
  SWIFT_INLINE_THUNK bool isFrenchSouthernTerritories() const;

  inline const static struct _impl_gabon {  // impl struct for case gabon
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::gabon;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } gabon SWIFT_SYMBOL("s:7BlinkID7CountryO5gabonyA2CmF");
  SWIFT_INLINE_THUNK bool isGabon() const;

  inline const static struct _impl_gambia {  // impl struct for case gambia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::gambia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } gambia SWIFT_SYMBOL("s:7BlinkID7CountryO6gambiayA2CmF");
  SWIFT_INLINE_THUNK bool isGambia() const;

  inline const static struct _impl_gibraltar {  // impl struct for case gibraltar
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::gibraltar;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } gibraltar SWIFT_SYMBOL("s:7BlinkID7CountryO9gibraltaryA2CmF");
  SWIFT_INLINE_THUNK bool isGibraltar() const;

  inline const static struct _impl_greenland {  // impl struct for case greenland
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::greenland;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } greenland SWIFT_SYMBOL("s:7BlinkID7CountryO9greenlandyA2CmF");
  SWIFT_INLINE_THUNK bool isGreenland() const;

  inline const static struct _impl_grenada {  // impl struct for case grenada
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::grenada;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } grenada SWIFT_SYMBOL("s:7BlinkID7CountryO7grenadayA2CmF");
  SWIFT_INLINE_THUNK bool isGrenada() const;

  inline const static struct _impl_guadeloupe {  // impl struct for case guadeloupe
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::guadeloupe;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } guadeloupe SWIFT_SYMBOL("s:7BlinkID7CountryO10guadeloupeyA2CmF");
  SWIFT_INLINE_THUNK bool isGuadeloupe() const;

  inline const static struct _impl_guam {  // impl struct for case guam
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::guam;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } guam SWIFT_SYMBOL("s:7BlinkID7CountryO4guamyA2CmF");
  SWIFT_INLINE_THUNK bool isGuam() const;

  inline const static struct _impl_guinea {  // impl struct for case guinea
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::guinea;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } guinea SWIFT_SYMBOL("s:7BlinkID7CountryO6guineayA2CmF");
  SWIFT_INLINE_THUNK bool isGuinea() const;

  inline const static struct _impl_guineaBissau {  // impl struct for case guineaBissau
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::guineaBissau;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } guineaBissau SWIFT_SYMBOL("s:7BlinkID7CountryO12guineaBissauyA2CmF");
  SWIFT_INLINE_THUNK bool isGuineaBissau() const;

  inline const static struct _impl_guyana {  // impl struct for case guyana
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::guyana;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } guyana SWIFT_SYMBOL("s:7BlinkID7CountryO6guyanayA2CmF");
  SWIFT_INLINE_THUNK bool isGuyana() const;

  inline const static struct _impl_heardIslandAndMcdonaldIslands {  // impl struct for case heardIslandAndMcdonaldIslands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::heardIslandAndMcdonaldIslands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } heardIslandAndMcdonaldIslands SWIFT_SYMBOL("s:7BlinkID7CountryO29heardIslandAndMcdonaldIslandsyA2CmF");
  SWIFT_INLINE_THUNK bool isHeardIslandAndMcdonaldIslands() const;

  inline const static struct _impl_iran {  // impl struct for case iran
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::iran;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } iran SWIFT_SYMBOL("s:7BlinkID7CountryO4iranyA2CmF");
  SWIFT_INLINE_THUNK bool isIran() const;

  inline const static struct _impl_iraq {  // impl struct for case iraq
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::iraq;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } iraq SWIFT_SYMBOL("s:7BlinkID7CountryO4iraqyA2CmF");
  SWIFT_INLINE_THUNK bool isIraq() const;

  inline const static struct _impl_isleOfMan {  // impl struct for case isleOfMan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::isleOfMan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } isleOfMan SWIFT_SYMBOL("s:7BlinkID7CountryO9isleOfManyA2CmF");
  SWIFT_INLINE_THUNK bool isIsleOfMan() const;

  inline const static struct _impl_ivoryCoast {  // impl struct for case ivoryCoast
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ivoryCoast;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } ivoryCoast SWIFT_SYMBOL("s:7BlinkID7CountryO10ivoryCoastyA2CmF");
  SWIFT_INLINE_THUNK bool isIvoryCoast() const;

  inline const static struct _impl_jamaica {  // impl struct for case jamaica
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::jamaica;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } jamaica SWIFT_SYMBOL("s:7BlinkID7CountryO7jamaicayA2CmF");
  SWIFT_INLINE_THUNK bool isJamaica() const;

  inline const static struct _impl_kiribati {  // impl struct for case kiribati
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::kiribati;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } kiribati SWIFT_SYMBOL("s:7BlinkID7CountryO8kiribatiyA2CmF");
  SWIFT_INLINE_THUNK bool isKiribati() const;

  inline const static struct _impl_kyrgyzstan {  // impl struct for case kyrgyzstan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::kyrgyzstan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } kyrgyzstan SWIFT_SYMBOL("s:7BlinkID7CountryO10kyrgyzstanyA2CmF");
  SWIFT_INLINE_THUNK bool isKyrgyzstan() const;

  inline const static struct _impl_laos {  // impl struct for case laos
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::laos;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } laos SWIFT_SYMBOL("s:7BlinkID7CountryO4laosyA2CmF");
  SWIFT_INLINE_THUNK bool isLaos() const;

  inline const static struct _impl_lebanon {  // impl struct for case lebanon
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::lebanon;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } lebanon SWIFT_SYMBOL("s:7BlinkID7CountryO7lebanonyA2CmF");
  SWIFT_INLINE_THUNK bool isLebanon() const;

  inline const static struct _impl_lesotho {  // impl struct for case lesotho
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::lesotho;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } lesotho SWIFT_SYMBOL("s:7BlinkID7CountryO7lesothoyA2CmF");
  SWIFT_INLINE_THUNK bool isLesotho() const;

  inline const static struct _impl_liberia {  // impl struct for case liberia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::liberia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } liberia SWIFT_SYMBOL("s:7BlinkID7CountryO7liberiayA2CmF");
  SWIFT_INLINE_THUNK bool isLiberia() const;

  inline const static struct _impl_libya {  // impl struct for case libya
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::libya;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } libya SWIFT_SYMBOL("s:7BlinkID7CountryO5libyayA2CmF");
  SWIFT_INLINE_THUNK bool isLibya() const;

  inline const static struct _impl_liechtenstein {  // impl struct for case liechtenstein
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::liechtenstein;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } liechtenstein SWIFT_SYMBOL("s:7BlinkID7CountryO13liechtensteinyA2CmF");
  SWIFT_INLINE_THUNK bool isLiechtenstein() const;

  inline const static struct _impl_macau {  // impl struct for case macau
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::macau;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } macau SWIFT_SYMBOL("s:7BlinkID7CountryO5macauyA2CmF");
  SWIFT_INLINE_THUNK bool isMacau() const;

  inline const static struct _impl_madagascar {  // impl struct for case madagascar
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::madagascar;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } madagascar SWIFT_SYMBOL("s:7BlinkID7CountryO10madagascaryA2CmF");
  SWIFT_INLINE_THUNK bool isMadagascar() const;

  inline const static struct _impl_malawi {  // impl struct for case malawi
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::malawi;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } malawi SWIFT_SYMBOL("s:7BlinkID7CountryO6malawiyA2CmF");
  SWIFT_INLINE_THUNK bool isMalawi() const;

  inline const static struct _impl_mali {  // impl struct for case mali
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mali;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } mali SWIFT_SYMBOL("s:7BlinkID7CountryO4maliyA2CmF");
  SWIFT_INLINE_THUNK bool isMali() const;

  inline const static struct _impl_marshallIslands {  // impl struct for case marshallIslands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::marshallIslands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } marshallIslands SWIFT_SYMBOL("s:7BlinkID7CountryO15marshallIslandsyA2CmF");
  SWIFT_INLINE_THUNK bool isMarshallIslands() const;

  inline const static struct _impl_martinique {  // impl struct for case martinique
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::martinique;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } martinique SWIFT_SYMBOL("s:7BlinkID7CountryO10martiniqueyA2CmF");
  SWIFT_INLINE_THUNK bool isMartinique() const;

  inline const static struct _impl_mauritania {  // impl struct for case mauritania
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mauritania;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } mauritania SWIFT_SYMBOL("s:7BlinkID7CountryO10mauritaniayA2CmF");
  SWIFT_INLINE_THUNK bool isMauritania() const;

  inline const static struct _impl_mayotte {  // impl struct for case mayotte
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mayotte;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } mayotte SWIFT_SYMBOL("s:7BlinkID7CountryO7mayotteyA2CmF");
  SWIFT_INLINE_THUNK bool isMayotte() const;

  inline const static struct _impl_moldova {  // impl struct for case moldova
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::moldova;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } moldova SWIFT_SYMBOL("s:7BlinkID7CountryO7moldovayA2CmF");
  SWIFT_INLINE_THUNK bool isMoldova() const;

  inline const static struct _impl_monaco {  // impl struct for case monaco
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::monaco;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } monaco SWIFT_SYMBOL("s:7BlinkID7CountryO6monacoyA2CmF");
  SWIFT_INLINE_THUNK bool isMonaco() const;

  inline const static struct _impl_mongolia {  // impl struct for case mongolia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mongolia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } mongolia SWIFT_SYMBOL("s:7BlinkID7CountryO8mongoliayA2CmF");
  SWIFT_INLINE_THUNK bool isMongolia() const;

  inline const static struct _impl_montserrat {  // impl struct for case montserrat
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::montserrat;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } montserrat SWIFT_SYMBOL("s:7BlinkID7CountryO10montserratyA2CmF");
  SWIFT_INLINE_THUNK bool isMontserrat() const;

  inline const static struct _impl_mozambique {  // impl struct for case mozambique
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mozambique;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } mozambique SWIFT_SYMBOL("s:7BlinkID7CountryO10mozambiqueyA2CmF");
  SWIFT_INLINE_THUNK bool isMozambique() const;

  inline const static struct _impl_myanmar {  // impl struct for case myanmar
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::myanmar;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } myanmar SWIFT_SYMBOL("s:7BlinkID7CountryO7myanmaryA2CmF");
  SWIFT_INLINE_THUNK bool isMyanmar() const;

  inline const static struct _impl_namibia {  // impl struct for case namibia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::namibia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } namibia SWIFT_SYMBOL("s:7BlinkID7CountryO7namibiayA2CmF");
  SWIFT_INLINE_THUNK bool isNamibia() const;

  inline const static struct _impl_nauru {  // impl struct for case nauru
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nauru;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } nauru SWIFT_SYMBOL("s:7BlinkID7CountryO5nauruyA2CmF");
  SWIFT_INLINE_THUNK bool isNauru() const;

  inline const static struct _impl_nepal {  // impl struct for case nepal
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nepal;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } nepal SWIFT_SYMBOL("s:7BlinkID7CountryO5nepalyA2CmF");
  SWIFT_INLINE_THUNK bool isNepal() const;

  inline const static struct _impl_newCaledonia {  // impl struct for case newCaledonia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::newCaledonia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } newCaledonia SWIFT_SYMBOL("s:7BlinkID7CountryO12newCaledoniayA2CmF");
  SWIFT_INLINE_THUNK bool isNewCaledonia() const;

  inline const static struct _impl_niger {  // impl struct for case niger
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::niger;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } niger SWIFT_SYMBOL("s:7BlinkID7CountryO5nigeryA2CmF");
  SWIFT_INLINE_THUNK bool isNiger() const;

  inline const static struct _impl_niue {  // impl struct for case niue
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::niue;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } niue SWIFT_SYMBOL("s:7BlinkID7CountryO4niueyA2CmF");
  SWIFT_INLINE_THUNK bool isNiue() const;

  inline const static struct _impl_norfolkIsland {  // impl struct for case norfolkIsland
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::norfolkIsland;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } norfolkIsland SWIFT_SYMBOL("s:7BlinkID7CountryO13norfolkIslandyA2CmF");
  SWIFT_INLINE_THUNK bool isNorfolkIsland() const;

  inline const static struct _impl_northernCyprus {  // impl struct for case northernCyprus
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::northernCyprus;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } northernCyprus SWIFT_SYMBOL("s:7BlinkID7CountryO14northernCyprusyA2CmF");
  SWIFT_INLINE_THUNK bool isNorthernCyprus() const;

  inline const static struct _impl_northernMarianaIslands {  // impl struct for case northernMarianaIslands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::northernMarianaIslands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } northernMarianaIslands SWIFT_SYMBOL("s:7BlinkID7CountryO22northernMarianaIslandsyA2CmF");
  SWIFT_INLINE_THUNK bool isNorthernMarianaIslands() const;

  inline const static struct _impl_northKorea {  // impl struct for case northKorea
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::northKorea;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } northKorea SWIFT_SYMBOL("s:7BlinkID7CountryO10northKoreayA2CmF");
  SWIFT_INLINE_THUNK bool isNorthKorea() const;

  inline const static struct _impl_northMacedonia {  // impl struct for case northMacedonia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::northMacedonia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } northMacedonia SWIFT_SYMBOL("s:7BlinkID7CountryO14northMacedoniayA2CmF");
  SWIFT_INLINE_THUNK bool isNorthMacedonia() const;

  inline const static struct _impl_palau {  // impl struct for case palau
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::palau;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } palau SWIFT_SYMBOL("s:7BlinkID7CountryO5palauyA2CmF");
  SWIFT_INLINE_THUNK bool isPalau() const;

  inline const static struct _impl_palestine {  // impl struct for case palestine
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::palestine;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } palestine SWIFT_SYMBOL("s:7BlinkID7CountryO9palestineyA2CmF");
  SWIFT_INLINE_THUNK bool isPalestine() const;

  inline const static struct _impl_papuaNewGuinea {  // impl struct for case papuaNewGuinea
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::papuaNewGuinea;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } papuaNewGuinea SWIFT_SYMBOL("s:7BlinkID7CountryO14papuaNewGuineayA2CmF");
  SWIFT_INLINE_THUNK bool isPapuaNewGuinea() const;

  inline const static struct _impl_pitcairn {  // impl struct for case pitcairn
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::pitcairn;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } pitcairn SWIFT_SYMBOL("s:7BlinkID7CountryO8pitcairnyA2CmF");
  SWIFT_INLINE_THUNK bool isPitcairn() const;

  inline const static struct _impl_reunion {  // impl struct for case reunion
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::reunion;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } reunion SWIFT_SYMBOL("s:7BlinkID7CountryO7reunionyA2CmF");
  SWIFT_INLINE_THUNK bool isReunion() const;

  inline const static struct _impl_rwanda {  // impl struct for case rwanda
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::rwanda;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } rwanda SWIFT_SYMBOL("s:7BlinkID7CountryO6rwandayA2CmF");
  SWIFT_INLINE_THUNK bool isRwanda() const;

  inline const static struct _impl_saintBarthelemy {  // impl struct for case saintBarthelemy
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::saintBarthelemy;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } saintBarthelemy SWIFT_SYMBOL("s:7BlinkID7CountryO15saintBarthelemyyA2CmF");
  SWIFT_INLINE_THUNK bool isSaintBarthelemy() const;

  inline const static struct _impl_saintHelenaAscensionAndTristianDaCunha {  // impl struct for case saintHelenaAscensionAndTristianDaCunha
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::saintHelenaAscensionAndTristianDaCunha;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } saintHelenaAscensionAndTristianDaCunha SWIFT_SYMBOL("s:7BlinkID7CountryO38saintHelenaAscensionAndTristianDaCunhayA2CmF");
  SWIFT_INLINE_THUNK bool isSaintHelenaAscensionAndTristianDaCunha() const;

  inline const static struct _impl_saintKittsAndNevis {  // impl struct for case saintKittsAndNevis
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::saintKittsAndNevis;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } saintKittsAndNevis SWIFT_SYMBOL("s:7BlinkID7CountryO18saintKittsAndNevisyA2CmF");
  SWIFT_INLINE_THUNK bool isSaintKittsAndNevis() const;

  inline const static struct _impl_saintLucia {  // impl struct for case saintLucia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::saintLucia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } saintLucia SWIFT_SYMBOL("s:7BlinkID7CountryO10saintLuciayA2CmF");
  SWIFT_INLINE_THUNK bool isSaintLucia() const;

  inline const static struct _impl_saintMartin {  // impl struct for case saintMartin
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::saintMartin;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } saintMartin SWIFT_SYMBOL("s:7BlinkID7CountryO11saintMartinyA2CmF");
  SWIFT_INLINE_THUNK bool isSaintMartin() const;

  inline const static struct _impl_saintPierreAndMiquelon {  // impl struct for case saintPierreAndMiquelon
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::saintPierreAndMiquelon;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } saintPierreAndMiquelon SWIFT_SYMBOL("s:7BlinkID7CountryO22saintPierreAndMiquelonyA2CmF");
  SWIFT_INLINE_THUNK bool isSaintPierreAndMiquelon() const;

  inline const static struct _impl_saintVincentAndTheGrenadines {  // impl struct for case saintVincentAndTheGrenadines
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::saintVincentAndTheGrenadines;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } saintVincentAndTheGrenadines SWIFT_SYMBOL("s:7BlinkID7CountryO28saintVincentAndTheGrenadinesyA2CmF");
  SWIFT_INLINE_THUNK bool isSaintVincentAndTheGrenadines() const;

  inline const static struct _impl_samoa {  // impl struct for case samoa
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::samoa;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } samoa SWIFT_SYMBOL("s:7BlinkID7CountryO5samoayA2CmF");
  SWIFT_INLINE_THUNK bool isSamoa() const;

  inline const static struct _impl_sanMarino {  // impl struct for case sanMarino
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sanMarino;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } sanMarino SWIFT_SYMBOL("s:7BlinkID7CountryO9sanMarinoyA2CmF");
  SWIFT_INLINE_THUNK bool isSanMarino() const;

  inline const static struct _impl_saoTomeAndPrincipe {  // impl struct for case saoTomeAndPrincipe
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::saoTomeAndPrincipe;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } saoTomeAndPrincipe SWIFT_SYMBOL("s:7BlinkID7CountryO18saoTomeAndPrincipeyA2CmF");
  SWIFT_INLINE_THUNK bool isSaoTomeAndPrincipe() const;

  inline const static struct _impl_senegal {  // impl struct for case senegal
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::senegal;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } senegal SWIFT_SYMBOL("s:7BlinkID7CountryO7senegalyA2CmF");
  SWIFT_INLINE_THUNK bool isSenegal() const;

  inline const static struct _impl_seychelles {  // impl struct for case seychelles
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::seychelles;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } seychelles SWIFT_SYMBOL("s:7BlinkID7CountryO10seychellesyA2CmF");
  SWIFT_INLINE_THUNK bool isSeychelles() const;

  inline const static struct _impl_sierraLeone {  // impl struct for case sierraLeone
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sierraLeone;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } sierraLeone SWIFT_SYMBOL("s:7BlinkID7CountryO11sierraLeoneyA2CmF");
  SWIFT_INLINE_THUNK bool isSierraLeone() const;

  inline const static struct _impl_sintMaarten {  // impl struct for case sintMaarten
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sintMaarten;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } sintMaarten SWIFT_SYMBOL("s:7BlinkID7CountryO11sintMaartenyA2CmF");
  SWIFT_INLINE_THUNK bool isSintMaarten() const;

  inline const static struct _impl_solomonIslands {  // impl struct for case solomonIslands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::solomonIslands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } solomonIslands SWIFT_SYMBOL("s:7BlinkID7CountryO14solomonIslandsyA2CmF");
  SWIFT_INLINE_THUNK bool isSolomonIslands() const;

  inline const static struct _impl_somalia {  // impl struct for case somalia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::somalia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } somalia SWIFT_SYMBOL("s:7BlinkID7CountryO7somaliayA2CmF");
  SWIFT_INLINE_THUNK bool isSomalia() const;

  inline const static struct _impl_southGeorgiaAndTheSouthSandwichIslands {  // impl struct for case southGeorgiaAndTheSouthSandwichIslands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::southGeorgiaAndTheSouthSandwichIslands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } southGeorgiaAndTheSouthSandwichIslands SWIFT_SYMBOL("s:7BlinkID7CountryO38southGeorgiaAndTheSouthSandwichIslandsyA2CmF");
  SWIFT_INLINE_THUNK bool isSouthGeorgiaAndTheSouthSandwichIslands() const;

  inline const static struct _impl_southSudan {  // impl struct for case southSudan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::southSudan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } southSudan SWIFT_SYMBOL("s:7BlinkID7CountryO10southSudanyA2CmF");
  SWIFT_INLINE_THUNK bool isSouthSudan() const;

  inline const static struct _impl_sudan {  // impl struct for case sudan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sudan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } sudan SWIFT_SYMBOL("s:7BlinkID7CountryO5sudanyA2CmF");
  SWIFT_INLINE_THUNK bool isSudan() const;

  inline const static struct _impl_suriname {  // impl struct for case suriname
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::suriname;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } suriname SWIFT_SYMBOL("s:7BlinkID7CountryO8surinameyA2CmF");
  SWIFT_INLINE_THUNK bool isSuriname() const;

  inline const static struct _impl_svalbardAndJanMayen {  // impl struct for case svalbardAndJanMayen
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::svalbardAndJanMayen;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } svalbardAndJanMayen SWIFT_SYMBOL("s:7BlinkID7CountryO19svalbardAndJanMayenyA2CmF");
  SWIFT_INLINE_THUNK bool isSvalbardAndJanMayen() const;

  inline const static struct _impl_eswatini {  // impl struct for case eswatini
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::eswatini;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } eswatini SWIFT_SYMBOL("s:7BlinkID7CountryO8eswatiniyA2CmF");
  SWIFT_INLINE_THUNK bool isEswatini() const;

  inline const static struct _impl_syria {  // impl struct for case syria
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::syria;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } syria SWIFT_SYMBOL("s:7BlinkID7CountryO5syriayA2CmF");
  SWIFT_INLINE_THUNK bool isSyria() const;

  inline const static struct _impl_tajikistan {  // impl struct for case tajikistan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tajikistan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } tajikistan SWIFT_SYMBOL("s:7BlinkID7CountryO10tajikistanyA2CmF");
  SWIFT_INLINE_THUNK bool isTajikistan() const;

  inline const static struct _impl_tanzania {  // impl struct for case tanzania
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tanzania;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } tanzania SWIFT_SYMBOL("s:7BlinkID7CountryO8tanzaniayA2CmF");
  SWIFT_INLINE_THUNK bool isTanzania() const;

  inline const static struct _impl_togo {  // impl struct for case togo
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::togo;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } togo SWIFT_SYMBOL("s:7BlinkID7CountryO4togoyA2CmF");
  SWIFT_INLINE_THUNK bool isTogo() const;

  inline const static struct _impl_tokelau {  // impl struct for case tokelau
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tokelau;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } tokelau SWIFT_SYMBOL("s:7BlinkID7CountryO7tokelauyA2CmF");
  SWIFT_INLINE_THUNK bool isTokelau() const;

  inline const static struct _impl_tonga {  // impl struct for case tonga
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tonga;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } tonga SWIFT_SYMBOL("s:7BlinkID7CountryO5tongayA2CmF");
  SWIFT_INLINE_THUNK bool isTonga() const;

  inline const static struct _impl_trinidadAndTobago {  // impl struct for case trinidadAndTobago
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::trinidadAndTobago;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } trinidadAndTobago SWIFT_SYMBOL("s:7BlinkID7CountryO17trinidadAndTobagoyA2CmF");
  SWIFT_INLINE_THUNK bool isTrinidadAndTobago() const;

  inline const static struct _impl_turkmenistan {  // impl struct for case turkmenistan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::turkmenistan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } turkmenistan SWIFT_SYMBOL("s:7BlinkID7CountryO12turkmenistanyA2CmF");
  SWIFT_INLINE_THUNK bool isTurkmenistan() const;

  inline const static struct _impl_turksAndCaicosIslands {  // impl struct for case turksAndCaicosIslands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::turksAndCaicosIslands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } turksAndCaicosIslands SWIFT_SYMBOL("s:7BlinkID7CountryO21turksAndCaicosIslandsyA2CmF");
  SWIFT_INLINE_THUNK bool isTurksAndCaicosIslands() const;

  inline const static struct _impl_tuvalu {  // impl struct for case tuvalu
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tuvalu;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } tuvalu SWIFT_SYMBOL("s:7BlinkID7CountryO6tuvaluyA2CmF");
  SWIFT_INLINE_THUNK bool isTuvalu() const;

  inline const static struct _impl_unitedStatesMinorOutlyingIslands {  // impl struct for case unitedStatesMinorOutlyingIslands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unitedStatesMinorOutlyingIslands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } unitedStatesMinorOutlyingIslands SWIFT_SYMBOL("s:7BlinkID7CountryO32unitedStatesMinorOutlyingIslandsyA2CmF");
  SWIFT_INLINE_THUNK bool isUnitedStatesMinorOutlyingIslands() const;

  inline const static struct _impl_uzbekistan {  // impl struct for case uzbekistan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::uzbekistan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } uzbekistan SWIFT_SYMBOL("s:7BlinkID7CountryO10uzbekistanyA2CmF");
  SWIFT_INLINE_THUNK bool isUzbekistan() const;

  inline const static struct _impl_vanuatu {  // impl struct for case vanuatu
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::vanuatu;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } vanuatu SWIFT_SYMBOL("s:7BlinkID7CountryO7vanuatuyA2CmF");
  SWIFT_INLINE_THUNK bool isVanuatu() const;

  inline const static struct _impl_vaticanCity {  // impl struct for case vaticanCity
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::vaticanCity;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } vaticanCity SWIFT_SYMBOL("s:7BlinkID7CountryO11vaticanCityyA2CmF");
  SWIFT_INLINE_THUNK bool isVaticanCity() const;

  inline const static struct _impl_virginIslandsBritish {  // impl struct for case virginIslandsBritish
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::virginIslandsBritish;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } virginIslandsBritish SWIFT_SYMBOL("s:7BlinkID7CountryO20virginIslandsBritishyA2CmF");
  SWIFT_INLINE_THUNK bool isVirginIslandsBritish() const;

  inline const static struct _impl_virginIslandsUs {  // impl struct for case virginIslandsUs
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::virginIslandsUs;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } virginIslandsUs SWIFT_SYMBOL("s:7BlinkID7CountryO15virginIslandsUsyA2CmF");
  SWIFT_INLINE_THUNK bool isVirginIslandsUs() const;

  inline const static struct _impl_wallisAndFutuna {  // impl struct for case wallisAndFutuna
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::wallisAndFutuna;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } wallisAndFutuna SWIFT_SYMBOL("s:7BlinkID7CountryO15wallisAndFutunayA2CmF");
  SWIFT_INLINE_THUNK bool isWallisAndFutuna() const;

  inline const static struct _impl_westernSahara {  // impl struct for case westernSahara
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::westernSahara;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } westernSahara SWIFT_SYMBOL("s:7BlinkID7CountryO13westernSaharayA2CmF");
  SWIFT_INLINE_THUNK bool isWesternSahara() const;

  inline const static struct _impl_yemen {  // impl struct for case yemen
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::yemen;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } yemen SWIFT_SYMBOL("s:7BlinkID7CountryO5yemenyA2CmF");
  SWIFT_INLINE_THUNK bool isYemen() const;

  inline const static struct _impl_yugoslavia {  // impl struct for case yugoslavia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::yugoslavia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } yugoslavia SWIFT_SYMBOL("s:7BlinkID7CountryO10yugoslaviayA2CmF");
  SWIFT_INLINE_THUNK bool isYugoslavia() const;

  inline const static struct _impl_zambia {  // impl struct for case zambia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::zambia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } zambia SWIFT_SYMBOL("s:7BlinkID7CountryO6zambiayA2CmF");
  SWIFT_INLINE_THUNK bool isZambia() const;

  inline const static struct _impl_zimbabwe {  // impl struct for case zimbabwe
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::zimbabwe;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } zimbabwe SWIFT_SYMBOL("s:7BlinkID7CountryO8zimbabweyA2CmF");
  SWIFT_INLINE_THUNK bool isZimbabwe() const;

  inline const static struct _impl_schengen_area {  // impl struct for case schengen_area
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::schengen_area;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } schengen_area SWIFT_SYMBOL("s:7BlinkID7CountryO13schengen_areayA2CmF");
  SWIFT_INLINE_THUNK bool isSchengen_area() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID7CountryO4noneyA2CmFWC) return cases::none;
    if (tag == _impl::$s7BlinkID7CountryO7albaniayA2CmFWC) return cases::albania;
    if (tag == _impl::$s7BlinkID7CountryO7algeriayA2CmFWC) return cases::algeria;
    if (tag == _impl::$s7BlinkID7CountryO9argentinayA2CmFWC) return cases::argentina;
    if (tag == _impl::$s7BlinkID7CountryO9australiayA2CmFWC) return cases::australia;
    if (tag == _impl::$s7BlinkID7CountryO7austriayA2CmFWC) return cases::austria;
    if (tag == _impl::$s7BlinkID7CountryO10azerbaijanyA2CmFWC) return cases::azerbaijan;
    if (tag == _impl::$s7BlinkID7CountryO7bahrainyA2CmFWC) return cases::bahrain;
    if (tag == _impl::$s7BlinkID7CountryO10bangladeshyA2CmFWC) return cases::bangladesh;
    if (tag == _impl::$s7BlinkID7CountryO7belgiumyA2CmFWC) return cases::belgium;
    if (tag == _impl::$s7BlinkID7CountryO20bosniaAndHerzegovinayA2CmFWC) return cases::bosniaAndHerzegovina;
    if (tag == _impl::$s7BlinkID7CountryO6bruneiyA2CmFWC) return cases::brunei;
    if (tag == _impl::$s7BlinkID7CountryO8bulgariayA2CmFWC) return cases::bulgaria;
    if (tag == _impl::$s7BlinkID7CountryO8cambodiayA2CmFWC) return cases::cambodia;
    if (tag == _impl::$s7BlinkID7CountryO6canadayA2CmFWC) return cases::canada;
    if (tag == _impl::$s7BlinkID7CountryO5chileyA2CmFWC) return cases::chile;
    if (tag == _impl::$s7BlinkID7CountryO8colombiayA2CmFWC) return cases::colombia;
    if (tag == _impl::$s7BlinkID7CountryO9costaRicayA2CmFWC) return cases::costaRica;
    if (tag == _impl::$s7BlinkID7CountryO7croatiayA2CmFWC) return cases::croatia;
    if (tag == _impl::$s7BlinkID7CountryO6cyprusyA2CmFWC) return cases::cyprus;
    if (tag == _impl::$s7BlinkID7CountryO7czechiayA2CmFWC) return cases::czechia;
    if (tag == _impl::$s7BlinkID7CountryO7denmarkyA2CmFWC) return cases::denmark;
    if (tag == _impl::$s7BlinkID7CountryO17dominicanRepublicyA2CmFWC) return cases::dominicanRepublic;
    if (tag == _impl::$s7BlinkID7CountryO5egyptyA2CmFWC) return cases::egypt;
    if (tag == _impl::$s7BlinkID7CountryO7estoniayA2CmFWC) return cases::estonia;
    if (tag == _impl::$s7BlinkID7CountryO7finlandyA2CmFWC) return cases::finland;
    if (tag == _impl::$s7BlinkID7CountryO6franceyA2CmFWC) return cases::france;
    if (tag == _impl::$s7BlinkID7CountryO7georgiayA2CmFWC) return cases::georgia;
    if (tag == _impl::$s7BlinkID7CountryO7germanyyA2CmFWC) return cases::germany;
    if (tag == _impl::$s7BlinkID7CountryO5ghanayA2CmFWC) return cases::ghana;
    if (tag == _impl::$s7BlinkID7CountryO6greeceyA2CmFWC) return cases::greece;
    if (tag == _impl::$s7BlinkID7CountryO9guatemalayA2CmFWC) return cases::guatemala;
    if (tag == _impl::$s7BlinkID7CountryO8hongKongyA2CmFWC) return cases::hongKong;
    if (tag == _impl::$s7BlinkID7CountryO7hungaryyA2CmFWC) return cases::hungary;
    if (tag == _impl::$s7BlinkID7CountryO5indiayA2CmFWC) return cases::india;
    if (tag == _impl::$s7BlinkID7CountryO9indonesiayA2CmFWC) return cases::indonesia;
    if (tag == _impl::$s7BlinkID7CountryO7irelandyA2CmFWC) return cases::ireland;
    if (tag == _impl::$s7BlinkID7CountryO6israelyA2CmFWC) return cases::israel;
    if (tag == _impl::$s7BlinkID7CountryO5italyyA2CmFWC) return cases::italy;
    if (tag == _impl::$s7BlinkID7CountryO6jordanyA2CmFWC) return cases::jordan;
    if (tag == _impl::$s7BlinkID7CountryO10kazakhstanyA2CmFWC) return cases::kazakhstan;
    if (tag == _impl::$s7BlinkID7CountryO5kenyayA2CmFWC) return cases::kenya;
    if (tag == _impl::$s7BlinkID7CountryO6kosovoyA2CmFWC) return cases::kosovo;
    if (tag == _impl::$s7BlinkID7CountryO6kuwaityA2CmFWC) return cases::kuwait;
    if (tag == _impl::$s7BlinkID7CountryO6latviayA2CmFWC) return cases::latvia;
    if (tag == _impl::$s7BlinkID7CountryO9lithuaniayA2CmFWC) return cases::lithuania;
    if (tag == _impl::$s7BlinkID7CountryO8malaysiayA2CmFWC) return cases::malaysia;
    if (tag == _impl::$s7BlinkID7CountryO8maldivesyA2CmFWC) return cases::maldives;
    if (tag == _impl::$s7BlinkID7CountryO5maltayA2CmFWC) return cases::malta;
    if (tag == _impl::$s7BlinkID7CountryO9mauritiusyA2CmFWC) return cases::mauritius;
    if (tag == _impl::$s7BlinkID7CountryO6mexicoyA2CmFWC) return cases::mexico;
    if (tag == _impl::$s7BlinkID7CountryO7moroccoyA2CmFWC) return cases::morocco;
    if (tag == _impl::$s7BlinkID7CountryO11netherlandsyA2CmFWC) return cases::netherlands;
    if (tag == _impl::$s7BlinkID7CountryO10newZealandyA2CmFWC) return cases::newZealand;
    if (tag == _impl::$s7BlinkID7CountryO7nigeriayA2CmFWC) return cases::nigeria;
    if (tag == _impl::$s7BlinkID7CountryO8pakistanyA2CmFWC) return cases::pakistan;
    if (tag == _impl::$s7BlinkID7CountryO6panamayA2CmFWC) return cases::panama;
    if (tag == _impl::$s7BlinkID7CountryO8paraguayyA2CmFWC) return cases::paraguay;
    if (tag == _impl::$s7BlinkID7CountryO11philippinesyA2CmFWC) return cases::philippines;
    if (tag == _impl::$s7BlinkID7CountryO6polandyA2CmFWC) return cases::poland;
    if (tag == _impl::$s7BlinkID7CountryO8portugalyA2CmFWC) return cases::portugal;
    if (tag == _impl::$s7BlinkID7CountryO10puertoRicoyA2CmFWC) return cases::puertoRico;
    if (tag == _impl::$s7BlinkID7CountryO5qataryA2CmFWC) return cases::qatar;
    if (tag == _impl::$s7BlinkID7CountryO7romaniayA2CmFWC) return cases::romania;
    if (tag == _impl::$s7BlinkID7CountryO6russiayA2CmFWC) return cases::russia;
    if (tag == _impl::$s7BlinkID7CountryO11saudiArabiayA2CmFWC) return cases::saudiArabia;
    if (tag == _impl::$s7BlinkID7CountryO6serbiayA2CmFWC) return cases::serbia;
    if (tag == _impl::$s7BlinkID7CountryO9singaporeyA2CmFWC) return cases::singapore;
    if (tag == _impl::$s7BlinkID7CountryO8slovakiayA2CmFWC) return cases::slovakia;
    if (tag == _impl::$s7BlinkID7CountryO8sloveniayA2CmFWC) return cases::slovenia;
    if (tag == _impl::$s7BlinkID7CountryO11southAfricayA2CmFWC) return cases::southAfrica;
    if (tag == _impl::$s7BlinkID7CountryO5spainyA2CmFWC) return cases::spain;
    if (tag == _impl::$s7BlinkID7CountryO6swedenyA2CmFWC) return cases::sweden;
    if (tag == _impl::$s7BlinkID7CountryO11switzerlandyA2CmFWC) return cases::switzerland;
    if (tag == _impl::$s7BlinkID7CountryO6taiwanyA2CmFWC) return cases::taiwan;
    if (tag == _impl::$s7BlinkID7CountryO8thailandyA2CmFWC) return cases::thailand;
    if (tag == _impl::$s7BlinkID7CountryO7tunisiayA2CmFWC) return cases::tunisia;
    if (tag == _impl::$s7BlinkID7CountryO6turkeyyA2CmFWC) return cases::turkey;
    if (tag == _impl::$s7BlinkID7CountryO3uaeyA2CmFWC) return cases::uae;
    if (tag == _impl::$s7BlinkID7CountryO6ugandayA2CmFWC) return cases::uganda;
    if (tag == _impl::$s7BlinkID7CountryO2ukyA2CmFWC) return cases::uk;
    if (tag == _impl::$s7BlinkID7CountryO7ukraineyA2CmFWC) return cases::ukraine;
    if (tag == _impl::$s7BlinkID7CountryO3usayA2CmFWC) return cases::usa;
    if (tag == _impl::$s7BlinkID7CountryO7vietnamyA2CmFWC) return cases::vietnam;
    if (tag == _impl::$s7BlinkID7CountryO6brazilyA2CmFWC) return cases::brazil;
    if (tag == _impl::$s7BlinkID7CountryO6norwayyA2CmFWC) return cases::norway;
    if (tag == _impl::$s7BlinkID7CountryO4omanyA2CmFWC) return cases::oman;
    if (tag == _impl::$s7BlinkID7CountryO7ecuadoryA2CmFWC) return cases::ecuador;
    if (tag == _impl::$s7BlinkID7CountryO10elSalvadoryA2CmFWC) return cases::elSalvador;
    if (tag == _impl::$s7BlinkID7CountryO8sriLankayA2CmFWC) return cases::sriLanka;
    if (tag == _impl::$s7BlinkID7CountryO4peruyA2CmFWC) return cases::peru;
    if (tag == _impl::$s7BlinkID7CountryO7uruguayyA2CmFWC) return cases::uruguay;
    if (tag == _impl::$s7BlinkID7CountryO7bahamasyA2CmFWC) return cases::bahamas;
    if (tag == _impl::$s7BlinkID7CountryO7bermudayA2CmFWC) return cases::bermuda;
    if (tag == _impl::$s7BlinkID7CountryO7boliviayA2CmFWC) return cases::bolivia;
    if (tag == _impl::$s7BlinkID7CountryO5chinayA2CmFWC) return cases::china;
    if (tag == _impl::$s7BlinkID7CountryO13europeanUnionyA2CmFWC) return cases::europeanUnion;
    if (tag == _impl::$s7BlinkID7CountryO5haitiyA2CmFWC) return cases::haiti;
    if (tag == _impl::$s7BlinkID7CountryO8hondurasyA2CmFWC) return cases::honduras;
    if (tag == _impl::$s7BlinkID7CountryO7icelandyA2CmFWC) return cases::iceland;
    if (tag == _impl::$s7BlinkID7CountryO5japanyA2CmFWC) return cases::japan;
    if (tag == _impl::$s7BlinkID7CountryO10luxembourgyA2CmFWC) return cases::luxembourg;
    if (tag == _impl::$s7BlinkID7CountryO10montenegroyA2CmFWC) return cases::montenegro;
    if (tag == _impl::$s7BlinkID7CountryO9nicaraguayA2CmFWC) return cases::nicaragua;
    if (tag == _impl::$s7BlinkID7CountryO10southKoreayA2CmFWC) return cases::southKorea;
    if (tag == _impl::$s7BlinkID7CountryO9venezuelayA2CmFWC) return cases::venezuela;
    if (tag == _impl::$s7BlinkID7CountryO11afghanistanyA2CmFWC) return cases::afghanistan;
    if (tag == _impl::$s7BlinkID7CountryO12alandIslandsyA2CmFWC) return cases::alandIslands;
    if (tag == _impl::$s7BlinkID7CountryO13americanSamoayA2CmFWC) return cases::americanSamoa;
    if (tag == _impl::$s7BlinkID7CountryO7andorrayA2CmFWC) return cases::andorra;
    if (tag == _impl::$s7BlinkID7CountryO6angolayA2CmFWC) return cases::angola;
    if (tag == _impl::$s7BlinkID7CountryO8anguillayA2CmFWC) return cases::anguilla;
    if (tag == _impl::$s7BlinkID7CountryO10antarcticayA2CmFWC) return cases::antarctica;
    if (tag == _impl::$s7BlinkID7CountryO17antiguaAndBarbudayA2CmFWC) return cases::antiguaAndBarbuda;
    if (tag == _impl::$s7BlinkID7CountryO7armeniayA2CmFWC) return cases::armenia;
    if (tag == _impl::$s7BlinkID7CountryO5arubayA2CmFWC) return cases::aruba;
    if (tag == _impl::$s7BlinkID7CountryO19bailiwickOfGuernseyyA2CmFWC) return cases::bailiwickOfGuernsey;
    if (tag == _impl::$s7BlinkID7CountryO17bailiwickOfJerseyyA2CmFWC) return cases::bailiwickOfJersey;
    if (tag == _impl::$s7BlinkID7CountryO8barbadosyA2CmFWC) return cases::barbados;
    if (tag == _impl::$s7BlinkID7CountryO7belarusyA2CmFWC) return cases::belarus;
    if (tag == _impl::$s7BlinkID7CountryO6belizeyA2CmFWC) return cases::belize;
    if (tag == _impl::$s7BlinkID7CountryO5beninyA2CmFWC) return cases::benin;
    if (tag == _impl::$s7BlinkID7CountryO6bhutanyA2CmFWC) return cases::bhutan;
    if (tag == _impl::$s7BlinkID7CountryO28bonaireSaintEustatiusAndSabayA2CmFWC) return cases::bonaireSaintEustatiusAndSaba;
    if (tag == _impl::$s7BlinkID7CountryO8botswanayA2CmFWC) return cases::botswana;
    if (tag == _impl::$s7BlinkID7CountryO12bouvetIslandyA2CmFWC) return cases::bouvetIsland;
    if (tag == _impl::$s7BlinkID7CountryO27britishIndianOceanTerritoryyA2CmFWC) return cases::britishIndianOceanTerritory;
    if (tag == _impl::$s7BlinkID7CountryO11burkinaFasoyA2CmFWC) return cases::burkinaFaso;
    if (tag == _impl::$s7BlinkID7CountryO7burundiyA2CmFWC) return cases::burundi;
    if (tag == _impl::$s7BlinkID7CountryO8cameroonyA2CmFWC) return cases::cameroon;
    if (tag == _impl::$s7BlinkID7CountryO9capeVerdeyA2CmFWC) return cases::capeVerde;
    if (tag == _impl::$s7BlinkID7CountryO20caribbeanNetherlandsyA2CmFWC) return cases::caribbeanNetherlands;
    if (tag == _impl::$s7BlinkID7CountryO13caymanIslandsyA2CmFWC) return cases::caymanIslands;
    if (tag == _impl::$s7BlinkID7CountryO22centralAfricanRepublicyA2CmFWC) return cases::centralAfricanRepublic;
    if (tag == _impl::$s7BlinkID7CountryO4chadyA2CmFWC) return cases::chad;
    if (tag == _impl::$s7BlinkID7CountryO15christmasIslandyA2CmFWC) return cases::christmasIsland;
    if (tag == _impl::$s7BlinkID7CountryO12cocosIslandsyA2CmFWC) return cases::cocosIslands;
    if (tag == _impl::$s7BlinkID7CountryO7comorosyA2CmFWC) return cases::comoros;
    if (tag == _impl::$s7BlinkID7CountryO5congoyA2CmFWC) return cases::congo;
    if (tag == _impl::$s7BlinkID7CountryO11cookIslandsyA2CmFWC) return cases::cookIslands;
    if (tag == _impl::$s7BlinkID7CountryO4cubayA2CmFWC) return cases::cuba;
    if (tag == _impl::$s7BlinkID7CountryO7curacaoyA2CmFWC) return cases::curacao;
    if (tag == _impl::$s7BlinkID7CountryO28democraticRepublicOfTheCongoyA2CmFWC) return cases::democraticRepublicOfTheCongo;
    if (tag == _impl::$s7BlinkID7CountryO8djiboutiyA2CmFWC) return cases::djibouti;
    if (tag == _impl::$s7BlinkID7CountryO8dominicayA2CmFWC) return cases::dominica;
    if (tag == _impl::$s7BlinkID7CountryO9eastTimoryA2CmFWC) return cases::eastTimor;
    if (tag == _impl::$s7BlinkID7CountryO16equatorialGuineayA2CmFWC) return cases::equatorialGuinea;
    if (tag == _impl::$s7BlinkID7CountryO7eritreayA2CmFWC) return cases::eritrea;
    if (tag == _impl::$s7BlinkID7CountryO8ethiopiayA2CmFWC) return cases::ethiopia;
    if (tag == _impl::$s7BlinkID7CountryO15falklandIslandsyA2CmFWC) return cases::falklandIslands;
    if (tag == _impl::$s7BlinkID7CountryO12faroeIslandsyA2CmFWC) return cases::faroeIslands;
    if (tag == _impl::$s7BlinkID7CountryO27federatedStatesOfMicronesiayA2CmFWC) return cases::federatedStatesOfMicronesia;
    if (tag == _impl::$s7BlinkID7CountryO4fijiyA2CmFWC) return cases::fiji;
    if (tag == _impl::$s7BlinkID7CountryO12frenchGuianayA2CmFWC) return cases::frenchGuiana;
    if (tag == _impl::$s7BlinkID7CountryO15frenchPolynesiayA2CmFWC) return cases::frenchPolynesia;
    if (tag == _impl::$s7BlinkID7CountryO25frenchSouthernTerritoriesyA2CmFWC) return cases::frenchSouthernTerritories;
    if (tag == _impl::$s7BlinkID7CountryO5gabonyA2CmFWC) return cases::gabon;
    if (tag == _impl::$s7BlinkID7CountryO6gambiayA2CmFWC) return cases::gambia;
    if (tag == _impl::$s7BlinkID7CountryO9gibraltaryA2CmFWC) return cases::gibraltar;
    if (tag == _impl::$s7BlinkID7CountryO9greenlandyA2CmFWC) return cases::greenland;
    if (tag == _impl::$s7BlinkID7CountryO7grenadayA2CmFWC) return cases::grenada;
    if (tag == _impl::$s7BlinkID7CountryO10guadeloupeyA2CmFWC) return cases::guadeloupe;
    if (tag == _impl::$s7BlinkID7CountryO4guamyA2CmFWC) return cases::guam;
    if (tag == _impl::$s7BlinkID7CountryO6guineayA2CmFWC) return cases::guinea;
    if (tag == _impl::$s7BlinkID7CountryO12guineaBissauyA2CmFWC) return cases::guineaBissau;
    if (tag == _impl::$s7BlinkID7CountryO6guyanayA2CmFWC) return cases::guyana;
    if (tag == _impl::$s7BlinkID7CountryO29heardIslandAndMcdonaldIslandsyA2CmFWC) return cases::heardIslandAndMcdonaldIslands;
    if (tag == _impl::$s7BlinkID7CountryO4iranyA2CmFWC) return cases::iran;
    if (tag == _impl::$s7BlinkID7CountryO4iraqyA2CmFWC) return cases::iraq;
    if (tag == _impl::$s7BlinkID7CountryO9isleOfManyA2CmFWC) return cases::isleOfMan;
    if (tag == _impl::$s7BlinkID7CountryO10ivoryCoastyA2CmFWC) return cases::ivoryCoast;
    if (tag == _impl::$s7BlinkID7CountryO7jamaicayA2CmFWC) return cases::jamaica;
    if (tag == _impl::$s7BlinkID7CountryO8kiribatiyA2CmFWC) return cases::kiribati;
    if (tag == _impl::$s7BlinkID7CountryO10kyrgyzstanyA2CmFWC) return cases::kyrgyzstan;
    if (tag == _impl::$s7BlinkID7CountryO4laosyA2CmFWC) return cases::laos;
    if (tag == _impl::$s7BlinkID7CountryO7lebanonyA2CmFWC) return cases::lebanon;
    if (tag == _impl::$s7BlinkID7CountryO7lesothoyA2CmFWC) return cases::lesotho;
    if (tag == _impl::$s7BlinkID7CountryO7liberiayA2CmFWC) return cases::liberia;
    if (tag == _impl::$s7BlinkID7CountryO5libyayA2CmFWC) return cases::libya;
    if (tag == _impl::$s7BlinkID7CountryO13liechtensteinyA2CmFWC) return cases::liechtenstein;
    if (tag == _impl::$s7BlinkID7CountryO5macauyA2CmFWC) return cases::macau;
    if (tag == _impl::$s7BlinkID7CountryO10madagascaryA2CmFWC) return cases::madagascar;
    if (tag == _impl::$s7BlinkID7CountryO6malawiyA2CmFWC) return cases::malawi;
    if (tag == _impl::$s7BlinkID7CountryO4maliyA2CmFWC) return cases::mali;
    if (tag == _impl::$s7BlinkID7CountryO15marshallIslandsyA2CmFWC) return cases::marshallIslands;
    if (tag == _impl::$s7BlinkID7CountryO10martiniqueyA2CmFWC) return cases::martinique;
    if (tag == _impl::$s7BlinkID7CountryO10mauritaniayA2CmFWC) return cases::mauritania;
    if (tag == _impl::$s7BlinkID7CountryO7mayotteyA2CmFWC) return cases::mayotte;
    if (tag == _impl::$s7BlinkID7CountryO7moldovayA2CmFWC) return cases::moldova;
    if (tag == _impl::$s7BlinkID7CountryO6monacoyA2CmFWC) return cases::monaco;
    if (tag == _impl::$s7BlinkID7CountryO8mongoliayA2CmFWC) return cases::mongolia;
    if (tag == _impl::$s7BlinkID7CountryO10montserratyA2CmFWC) return cases::montserrat;
    if (tag == _impl::$s7BlinkID7CountryO10mozambiqueyA2CmFWC) return cases::mozambique;
    if (tag == _impl::$s7BlinkID7CountryO7myanmaryA2CmFWC) return cases::myanmar;
    if (tag == _impl::$s7BlinkID7CountryO7namibiayA2CmFWC) return cases::namibia;
    if (tag == _impl::$s7BlinkID7CountryO5nauruyA2CmFWC) return cases::nauru;
    if (tag == _impl::$s7BlinkID7CountryO5nepalyA2CmFWC) return cases::nepal;
    if (tag == _impl::$s7BlinkID7CountryO12newCaledoniayA2CmFWC) return cases::newCaledonia;
    if (tag == _impl::$s7BlinkID7CountryO5nigeryA2CmFWC) return cases::niger;
    if (tag == _impl::$s7BlinkID7CountryO4niueyA2CmFWC) return cases::niue;
    if (tag == _impl::$s7BlinkID7CountryO13norfolkIslandyA2CmFWC) return cases::norfolkIsland;
    if (tag == _impl::$s7BlinkID7CountryO14northernCyprusyA2CmFWC) return cases::northernCyprus;
    if (tag == _impl::$s7BlinkID7CountryO22northernMarianaIslandsyA2CmFWC) return cases::northernMarianaIslands;
    if (tag == _impl::$s7BlinkID7CountryO10northKoreayA2CmFWC) return cases::northKorea;
    if (tag == _impl::$s7BlinkID7CountryO14northMacedoniayA2CmFWC) return cases::northMacedonia;
    if (tag == _impl::$s7BlinkID7CountryO5palauyA2CmFWC) return cases::palau;
    if (tag == _impl::$s7BlinkID7CountryO9palestineyA2CmFWC) return cases::palestine;
    if (tag == _impl::$s7BlinkID7CountryO14papuaNewGuineayA2CmFWC) return cases::papuaNewGuinea;
    if (tag == _impl::$s7BlinkID7CountryO8pitcairnyA2CmFWC) return cases::pitcairn;
    if (tag == _impl::$s7BlinkID7CountryO7reunionyA2CmFWC) return cases::reunion;
    if (tag == _impl::$s7BlinkID7CountryO6rwandayA2CmFWC) return cases::rwanda;
    if (tag == _impl::$s7BlinkID7CountryO15saintBarthelemyyA2CmFWC) return cases::saintBarthelemy;
    if (tag == _impl::$s7BlinkID7CountryO38saintHelenaAscensionAndTristianDaCunhayA2CmFWC) return cases::saintHelenaAscensionAndTristianDaCunha;
    if (tag == _impl::$s7BlinkID7CountryO18saintKittsAndNevisyA2CmFWC) return cases::saintKittsAndNevis;
    if (tag == _impl::$s7BlinkID7CountryO10saintLuciayA2CmFWC) return cases::saintLucia;
    if (tag == _impl::$s7BlinkID7CountryO11saintMartinyA2CmFWC) return cases::saintMartin;
    if (tag == _impl::$s7BlinkID7CountryO22saintPierreAndMiquelonyA2CmFWC) return cases::saintPierreAndMiquelon;
    if (tag == _impl::$s7BlinkID7CountryO28saintVincentAndTheGrenadinesyA2CmFWC) return cases::saintVincentAndTheGrenadines;
    if (tag == _impl::$s7BlinkID7CountryO5samoayA2CmFWC) return cases::samoa;
    if (tag == _impl::$s7BlinkID7CountryO9sanMarinoyA2CmFWC) return cases::sanMarino;
    if (tag == _impl::$s7BlinkID7CountryO18saoTomeAndPrincipeyA2CmFWC) return cases::saoTomeAndPrincipe;
    if (tag == _impl::$s7BlinkID7CountryO7senegalyA2CmFWC) return cases::senegal;
    if (tag == _impl::$s7BlinkID7CountryO10seychellesyA2CmFWC) return cases::seychelles;
    if (tag == _impl::$s7BlinkID7CountryO11sierraLeoneyA2CmFWC) return cases::sierraLeone;
    if (tag == _impl::$s7BlinkID7CountryO11sintMaartenyA2CmFWC) return cases::sintMaarten;
    if (tag == _impl::$s7BlinkID7CountryO14solomonIslandsyA2CmFWC) return cases::solomonIslands;
    if (tag == _impl::$s7BlinkID7CountryO7somaliayA2CmFWC) return cases::somalia;
    if (tag == _impl::$s7BlinkID7CountryO38southGeorgiaAndTheSouthSandwichIslandsyA2CmFWC) return cases::southGeorgiaAndTheSouthSandwichIslands;
    if (tag == _impl::$s7BlinkID7CountryO10southSudanyA2CmFWC) return cases::southSudan;
    if (tag == _impl::$s7BlinkID7CountryO5sudanyA2CmFWC) return cases::sudan;
    if (tag == _impl::$s7BlinkID7CountryO8surinameyA2CmFWC) return cases::suriname;
    if (tag == _impl::$s7BlinkID7CountryO19svalbardAndJanMayenyA2CmFWC) return cases::svalbardAndJanMayen;
    if (tag == _impl::$s7BlinkID7CountryO8eswatiniyA2CmFWC) return cases::eswatini;
    if (tag == _impl::$s7BlinkID7CountryO5syriayA2CmFWC) return cases::syria;
    if (tag == _impl::$s7BlinkID7CountryO10tajikistanyA2CmFWC) return cases::tajikistan;
    if (tag == _impl::$s7BlinkID7CountryO8tanzaniayA2CmFWC) return cases::tanzania;
    if (tag == _impl::$s7BlinkID7CountryO4togoyA2CmFWC) return cases::togo;
    if (tag == _impl::$s7BlinkID7CountryO7tokelauyA2CmFWC) return cases::tokelau;
    if (tag == _impl::$s7BlinkID7CountryO5tongayA2CmFWC) return cases::tonga;
    if (tag == _impl::$s7BlinkID7CountryO17trinidadAndTobagoyA2CmFWC) return cases::trinidadAndTobago;
    if (tag == _impl::$s7BlinkID7CountryO12turkmenistanyA2CmFWC) return cases::turkmenistan;
    if (tag == _impl::$s7BlinkID7CountryO21turksAndCaicosIslandsyA2CmFWC) return cases::turksAndCaicosIslands;
    if (tag == _impl::$s7BlinkID7CountryO6tuvaluyA2CmFWC) return cases::tuvalu;
    if (tag == _impl::$s7BlinkID7CountryO32unitedStatesMinorOutlyingIslandsyA2CmFWC) return cases::unitedStatesMinorOutlyingIslands;
    if (tag == _impl::$s7BlinkID7CountryO10uzbekistanyA2CmFWC) return cases::uzbekistan;
    if (tag == _impl::$s7BlinkID7CountryO7vanuatuyA2CmFWC) return cases::vanuatu;
    if (tag == _impl::$s7BlinkID7CountryO11vaticanCityyA2CmFWC) return cases::vaticanCity;
    if (tag == _impl::$s7BlinkID7CountryO20virginIslandsBritishyA2CmFWC) return cases::virginIslandsBritish;
    if (tag == _impl::$s7BlinkID7CountryO15virginIslandsUsyA2CmFWC) return cases::virginIslandsUs;
    if (tag == _impl::$s7BlinkID7CountryO15wallisAndFutunayA2CmFWC) return cases::wallisAndFutuna;
    if (tag == _impl::$s7BlinkID7CountryO13westernSaharayA2CmFWC) return cases::westernSahara;
    if (tag == _impl::$s7BlinkID7CountryO5yemenyA2CmFWC) return cases::yemen;
    if (tag == _impl::$s7BlinkID7CountryO10yugoslaviayA2CmFWC) return cases::yugoslavia;
    if (tag == _impl::$s7BlinkID7CountryO6zambiayA2CmFWC) return cases::zambia;
    if (tag == _impl::$s7BlinkID7CountryO8zimbabweyA2CmFWC) return cases::zimbabwe;
    if (tag == _impl::$s7BlinkID7CountryO13schengen_areayA2CmFWC) return cases::schengen_area;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<Country> init(const swift::String& rawValue) SWIFT_SYMBOL("s:7BlinkID7CountryO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:7BlinkID7CountryO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK Country(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK Country _make() noexcept {
    auto metadata = _impl::$s7BlinkID7CountryOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return Country(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID7CountryOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID7CountryOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID7CountryOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_Country;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID7CountryOD;
  static inline constexpr $s7BlinkID7CountryOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_Country {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(Country &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const Country &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER Country returnNewValue(T callable) {
    auto result = Country::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID7CountryOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::Country> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID7CountryOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::Country> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::Country> = true;
template<>
struct implClassFor<BlinkID::Country> { using type = BlinkID::_impl::_impl_Country; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {


namespace _impl {

class _impl_CroppedImageResult;

// Type metadata accessor for CroppedImageResult
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID18CroppedImageResultVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID18CroppedImageResultV") CroppedImageResult final {
public:
  SWIFT_INLINE_THUNK ~CroppedImageResult() noexcept {
    auto metadata = _impl::$s7BlinkID18CroppedImageResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CroppedImageResult(const CroppedImageResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID18CroppedImageResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CroppedImageResult &operator =(const CroppedImageResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID18CroppedImageResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CroppedImageResult &operator =(CroppedImageResult &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CroppedImageResult(CroppedImageResult &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK UIImage *_Nullable getUiImage() const SWIFT_SYMBOL("s:7BlinkID18CroppedImageResultV02uiD0So7UIImageCSgvp");
private:
  SWIFT_INLINE_THUNK CroppedImageResult(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CroppedImageResult _make() noexcept {
    auto metadata = _impl::$s7BlinkID18CroppedImageResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CroppedImageResult(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CroppedImageResult;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID18CroppedImageResultVD;
  static inline constexpr $s7BlinkID18CroppedImageResultVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CroppedImageResult {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CroppedImageResult &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CroppedImageResult &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CroppedImageResult returnNewValue(T callable) {
    auto result = CroppedImageResult::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID18CroppedImageResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::CroppedImageResult> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID18CroppedImageResultVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::CroppedImageResult> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::CroppedImageResult> = true;
template<>
struct implClassFor<BlinkID::CroppedImageResult> { using type = BlinkID::_impl::_impl_CroppedImageResult; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID20CroppedImageSettingsV") CroppedImageSettings;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::CroppedImageSettings> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_CroppedImageSettings;

// Type metadata accessor for CroppedImageSettings
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID20CroppedImageSettingsVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID20CroppedImageSettingsV") CroppedImageSettings final {
public:
  SWIFT_INLINE_THUNK ~CroppedImageSettings() noexcept {
    auto metadata = _impl::$s7BlinkID20CroppedImageSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CroppedImageSettings(const CroppedImageSettings &other) noexcept {
    auto metadata = _impl::$s7BlinkID20CroppedImageSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CroppedImageSettings &operator =(const CroppedImageSettings &other) noexcept {
    auto metadata = _impl::$s7BlinkID20CroppedImageSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CroppedImageSettings &operator =(CroppedImageSettings &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CroppedImageSettings(CroppedImageSettings &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Int getDotsPerInch() const SWIFT_SYMBOL("s:7BlinkID20CroppedImageSettingsV11dotsPerInchSivp");
  SWIFT_INLINE_THUNK void setDotsPerInch(swift::Int value) SWIFT_SYMBOL("s:7BlinkID20CroppedImageSettingsV11dotsPerInchSivp");
  SWIFT_INLINE_THUNK float getExtensionFactor() const SWIFT_SYMBOL("s:7BlinkID20CroppedImageSettingsV15extensionFactorSfvp");
  SWIFT_INLINE_THUNK void setExtensionFactor(float value) SWIFT_SYMBOL("s:7BlinkID20CroppedImageSettingsV15extensionFactorSfvp");
  SWIFT_INLINE_THUNK bool getReturnDocumentImage() const SWIFT_SYMBOL("s:7BlinkID20CroppedImageSettingsV014returnDocumentD0Sbvp");
  SWIFT_INLINE_THUNK void setReturnDocumentImage(bool value) SWIFT_SYMBOL("s:7BlinkID20CroppedImageSettingsV014returnDocumentD0Sbvp");
  SWIFT_INLINE_THUNK bool getReturnFaceImage() const SWIFT_SYMBOL("s:7BlinkID20CroppedImageSettingsV010returnFaceD0Sbvp");
  SWIFT_INLINE_THUNK void setReturnFaceImage(bool value) SWIFT_SYMBOL("s:7BlinkID20CroppedImageSettingsV010returnFaceD0Sbvp");
  SWIFT_INLINE_THUNK bool getReturnSignatureImage() const SWIFT_SYMBOL("s:7BlinkID20CroppedImageSettingsV015returnSignatureD0Sbvp");
  SWIFT_INLINE_THUNK void setReturnSignatureImage(bool value) SWIFT_SYMBOL("s:7BlinkID20CroppedImageSettingsV015returnSignatureD0Sbvp");
  static SWIFT_INLINE_THUNK CroppedImageSettings init(swift::Int dotsPerInch, float extensionFactor, bool returnDocumentImage, bool returnFaceImage, bool returnSignatureImage) SWIFT_SYMBOL("s:7BlinkID20CroppedImageSettingsV11dotsPerInch15extensionFactor014returnDocumentD00k4FaceD00k9SignatureD0ACSi_SfS3btcfc");
private:
  SWIFT_INLINE_THUNK CroppedImageSettings(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CroppedImageSettings _make() noexcept {
    auto metadata = _impl::$s7BlinkID20CroppedImageSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CroppedImageSettings(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CroppedImageSettings;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID20CroppedImageSettingsVD;
  static inline constexpr $s7BlinkID20CroppedImageSettingsVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CroppedImageSettings {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CroppedImageSettings &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CroppedImageSettings &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CroppedImageSettings returnNewValue(T callable) {
    auto result = CroppedImageSettings::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID20CroppedImageSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::CroppedImageSettings> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID20CroppedImageSettingsVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::CroppedImageSettings> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::CroppedImageSettings> = true;
template<>
struct implClassFor<BlinkID::CroppedImageSettings> { using type = BlinkID::_impl::_impl_CroppedImageSettings; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {


class SWIFT_SYMBOL("s:7BlinkID18DataMatchFieldTypeO") DataMatchFieldType;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::DataMatchFieldType> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
/// Represents the type of the field used in data match.
namespace _impl {

class _impl_DataMatchFieldType;

// Type metadata accessor for DataMatchFieldType
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID18DataMatchFieldTypeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum DataMatchFieldType
extern "C" {
extern unsigned $s7BlinkID18DataMatchFieldTypeO11dateOfBirthyA2CmFWC;
extern unsigned $s7BlinkID18DataMatchFieldTypeO12dateOfExpiryyA2CmFWC;
extern unsigned $s7BlinkID18DataMatchFieldTypeO14documentNumberyA2CmFWC;
extern unsigned $s7BlinkID18DataMatchFieldTypeO24documentAdditionalNumberyA2CmFWC;
extern unsigned $s7BlinkID18DataMatchFieldTypeO32documentOptionalAdditionalNumberyA2CmFWC;
extern unsigned $s7BlinkID18DataMatchFieldTypeO16personalIdNumberyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID18DataMatchFieldTypeO") DataMatchFieldType final {
public:
  SWIFT_INLINE_THUNK ~DataMatchFieldType() noexcept {
    auto metadata = _impl::$s7BlinkID18DataMatchFieldTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DataMatchFieldType(const DataMatchFieldType &other) noexcept {
    auto metadata = _impl::$s7BlinkID18DataMatchFieldTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DataMatchFieldType &operator =(const DataMatchFieldType &other) noexcept {
    auto metadata = _impl::$s7BlinkID18DataMatchFieldTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DataMatchFieldType &operator =(DataMatchFieldType &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DataMatchFieldType(DataMatchFieldType &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    dateOfBirth SWIFT_SYMBOL("s:7BlinkID18DataMatchFieldTypeO11dateOfBirthyA2CmF"),
    dateOfExpiry SWIFT_SYMBOL("s:7BlinkID18DataMatchFieldTypeO12dateOfExpiryyA2CmF"),
    documentNumber SWIFT_SYMBOL("s:7BlinkID18DataMatchFieldTypeO14documentNumberyA2CmF"),
    documentAdditionalNumber SWIFT_SYMBOL("s:7BlinkID18DataMatchFieldTypeO24documentAdditionalNumberyA2CmF"),
    documentOptionalAdditionalNumber SWIFT_SYMBOL("s:7BlinkID18DataMatchFieldTypeO32documentOptionalAdditionalNumberyA2CmF"),
    personalIdNumber SWIFT_SYMBOL("s:7BlinkID18DataMatchFieldTypeO16personalIdNumberyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_dateOfBirth {  // impl struct for case dateOfBirth
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dateOfBirth;
    }
    SWIFT_INLINE_THUNK DataMatchFieldType operator()() const;
  } dateOfBirth SWIFT_SYMBOL("s:7BlinkID18DataMatchFieldTypeO11dateOfBirthyA2CmF");
  SWIFT_INLINE_THUNK bool isDateOfBirth() const;

  inline const static struct _impl_dateOfExpiry {  // impl struct for case dateOfExpiry
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dateOfExpiry;
    }
    SWIFT_INLINE_THUNK DataMatchFieldType operator()() const;
  } dateOfExpiry SWIFT_SYMBOL("s:7BlinkID18DataMatchFieldTypeO12dateOfExpiryyA2CmF");
  SWIFT_INLINE_THUNK bool isDateOfExpiry() const;

  inline const static struct _impl_documentNumber {  // impl struct for case documentNumber
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::documentNumber;
    }
    SWIFT_INLINE_THUNK DataMatchFieldType operator()() const;
  } documentNumber SWIFT_SYMBOL("s:7BlinkID18DataMatchFieldTypeO14documentNumberyA2CmF");
  SWIFT_INLINE_THUNK bool isDocumentNumber() const;

  inline const static struct _impl_documentAdditionalNumber {  // impl struct for case documentAdditionalNumber
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::documentAdditionalNumber;
    }
    SWIFT_INLINE_THUNK DataMatchFieldType operator()() const;
  } documentAdditionalNumber SWIFT_SYMBOL("s:7BlinkID18DataMatchFieldTypeO24documentAdditionalNumberyA2CmF");
  SWIFT_INLINE_THUNK bool isDocumentAdditionalNumber() const;

  inline const static struct _impl_documentOptionalAdditionalNumber {  // impl struct for case documentOptionalAdditionalNumber
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::documentOptionalAdditionalNumber;
    }
    SWIFT_INLINE_THUNK DataMatchFieldType operator()() const;
  } documentOptionalAdditionalNumber SWIFT_SYMBOL("s:7BlinkID18DataMatchFieldTypeO32documentOptionalAdditionalNumberyA2CmF");
  SWIFT_INLINE_THUNK bool isDocumentOptionalAdditionalNumber() const;

  inline const static struct _impl_personalIdNumber {  // impl struct for case personalIdNumber
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::personalIdNumber;
    }
    SWIFT_INLINE_THUNK DataMatchFieldType operator()() const;
  } personalIdNumber SWIFT_SYMBOL("s:7BlinkID18DataMatchFieldTypeO16personalIdNumberyA2CmF");
  SWIFT_INLINE_THUNK bool isPersonalIdNumber() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID18DataMatchFieldTypeO11dateOfBirthyA2CmFWC) return cases::dateOfBirth;
    if (tag == _impl::$s7BlinkID18DataMatchFieldTypeO12dateOfExpiryyA2CmFWC) return cases::dateOfExpiry;
    if (tag == _impl::$s7BlinkID18DataMatchFieldTypeO14documentNumberyA2CmFWC) return cases::documentNumber;
    if (tag == _impl::$s7BlinkID18DataMatchFieldTypeO24documentAdditionalNumberyA2CmFWC) return cases::documentAdditionalNumber;
    if (tag == _impl::$s7BlinkID18DataMatchFieldTypeO32documentOptionalAdditionalNumberyA2CmFWC) return cases::documentOptionalAdditionalNumber;
    if (tag == _impl::$s7BlinkID18DataMatchFieldTypeO16personalIdNumberyA2CmFWC) return cases::personalIdNumber;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:7BlinkID18DataMatchFieldTypeO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK DataMatchFieldType(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DataMatchFieldType _make() noexcept {
    auto metadata = _impl::$s7BlinkID18DataMatchFieldTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DataMatchFieldType(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID18DataMatchFieldTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID18DataMatchFieldTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID18DataMatchFieldTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DataMatchFieldType;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID18DataMatchFieldTypeOD;
  static inline constexpr $s7BlinkID18DataMatchFieldTypeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DataMatchFieldType {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DataMatchFieldType &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DataMatchFieldType &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DataMatchFieldType returnNewValue(T callable) {
    auto result = DataMatchFieldType::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID18DataMatchFieldTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::DataMatchFieldType> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID18DataMatchFieldTypeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::DataMatchFieldType> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::DataMatchFieldType> = true;
template<>
struct implClassFor<BlinkID::DataMatchFieldType> { using type = BlinkID::_impl::_impl_DataMatchFieldType; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID10FieldStateV") FieldState;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::FieldState> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID14DataMatchStateO") DataMatchState;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::DataMatchState> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_DataMatchResult;

// Type metadata accessor for DataMatchResult
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID15DataMatchResultVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID15DataMatchResultV") DataMatchResult final {
public:
  SWIFT_INLINE_THUNK ~DataMatchResult() noexcept {
    auto metadata = _impl::$s7BlinkID15DataMatchResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DataMatchResult(const DataMatchResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID15DataMatchResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DataMatchResult &operator =(const DataMatchResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID15DataMatchResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DataMatchResult &operator =(DataMatchResult &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DataMatchResult(DataMatchResult &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Array<FieldState> getStates() const SWIFT_SYMBOL("s:7BlinkID15DataMatchResultV6statesSayAA10FieldStateVGvp");
  SWIFT_INLINE_THUNK DataMatchState getOverallState() const SWIFT_SYMBOL("s:7BlinkID15DataMatchResultV12overallStateAA0cdG0Ovp");
/// The state of the data match on the specified field.
/// For example if date of expiry is scanned from the front and back side
/// of the document and values do not match, this method will return <code>DataMatchFieldType</code> <code>.failed</code>.
/// Result will be <code>DataMatchFieldType</code> <code>.success</code> only if scanned values for all fields that are
/// compared are the same. If data matching has not been performed, result will be <code>DataMatchFieldType</code> <code>.notPerformed</code>.
///
/// returns:
/// Result of the data matching algorithm for scanned parts/sides of the document.
  SWIFT_INLINE_THUNK DataMatchState getState(const DataMatchFieldType& fieldType) const SWIFT_SYMBOL("s:7BlinkID15DataMatchResultV8getState3forAA0cdG0OAA0cD9FieldTypeO_tF");
private:
  SWIFT_INLINE_THUNK DataMatchResult(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DataMatchResult _make() noexcept {
    auto metadata = _impl::$s7BlinkID15DataMatchResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DataMatchResult(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DataMatchResult;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID15DataMatchResultVD;
  static inline constexpr $s7BlinkID15DataMatchResultVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DataMatchResult {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DataMatchResult &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DataMatchResult &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DataMatchResult returnNewValue(T callable) {
    auto result = DataMatchResult::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID15DataMatchResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::DataMatchResult> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID15DataMatchResultVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::DataMatchResult> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::DataMatchResult> = true;
template<>
struct implClassFor<BlinkID::DataMatchResult> { using type = BlinkID::_impl::_impl_DataMatchResult; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

/// Represents the state of the data match.
namespace _impl {

class _impl_DataMatchState;

// Type metadata accessor for DataMatchState
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID14DataMatchStateOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum DataMatchState
extern "C" {
extern unsigned $s7BlinkID14DataMatchStateO12notPerformedyA2CmFWC;
extern unsigned $s7BlinkID14DataMatchStateO6failedyA2CmFWC;
extern unsigned $s7BlinkID14DataMatchStateO7successyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID14DataMatchStateO") DataMatchState final {
public:
  SWIFT_INLINE_THUNK ~DataMatchState() noexcept {
    auto metadata = _impl::$s7BlinkID14DataMatchStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DataMatchState(const DataMatchState &other) noexcept {
    auto metadata = _impl::$s7BlinkID14DataMatchStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DataMatchState &operator =(const DataMatchState &other) noexcept {
    auto metadata = _impl::$s7BlinkID14DataMatchStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DataMatchState &operator =(DataMatchState &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DataMatchState(DataMatchState &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    notPerformed SWIFT_SYMBOL("s:7BlinkID14DataMatchStateO12notPerformedyA2CmF"),
    failed SWIFT_SYMBOL("s:7BlinkID14DataMatchStateO6failedyA2CmF"),
    success SWIFT_SYMBOL("s:7BlinkID14DataMatchStateO7successyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_notPerformed {  // impl struct for case notPerformed
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::notPerformed;
    }
    SWIFT_INLINE_THUNK DataMatchState operator()() const;
  } notPerformed SWIFT_SYMBOL("s:7BlinkID14DataMatchStateO12notPerformedyA2CmF");
  SWIFT_INLINE_THUNK bool isNotPerformed() const;

  inline const static struct _impl_failed {  // impl struct for case failed
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::failed;
    }
    SWIFT_INLINE_THUNK DataMatchState operator()() const;
  } failed SWIFT_SYMBOL("s:7BlinkID14DataMatchStateO6failedyA2CmF");
  SWIFT_INLINE_THUNK bool isFailed() const;

  inline const static struct _impl_success {  // impl struct for case success
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::success;
    }
    SWIFT_INLINE_THUNK DataMatchState operator()() const;
  } success SWIFT_SYMBOL("s:7BlinkID14DataMatchStateO7successyA2CmF");
  SWIFT_INLINE_THUNK bool isSuccess() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID14DataMatchStateO12notPerformedyA2CmFWC) return cases::notPerformed;
    if (tag == _impl::$s7BlinkID14DataMatchStateO6failedyA2CmFWC) return cases::failed;
    if (tag == _impl::$s7BlinkID14DataMatchStateO7successyA2CmFWC) return cases::success;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:7BlinkID14DataMatchStateO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK DataMatchState(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DataMatchState _make() noexcept {
    auto metadata = _impl::$s7BlinkID14DataMatchStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DataMatchState(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID14DataMatchStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID14DataMatchStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID14DataMatchStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DataMatchState;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID14DataMatchStateOD;
  static inline constexpr $s7BlinkID14DataMatchStateOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DataMatchState {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DataMatchState &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DataMatchState &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DataMatchState returnNewValue(T callable) {
    auto result = DataMatchState::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID14DataMatchStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::DataMatchState> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID14DataMatchStateOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::DataMatchState> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::DataMatchState> = true;
template<>
struct implClassFor<BlinkID::DataMatchState> { using type = BlinkID::_impl::_impl_DataMatchState; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_DateResult;

static_assert(1 <= 3, "unsupported generic requirement list for metadata func");
// Type metadata accessor for DateResult
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID10DateResultVMa(swift::_impl::MetadataRequestTy, void * _Nonnull) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:7BlinkID10DateResultV") DateResult final {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK ~DateResult() noexcept {
    auto metadata = _impl::$s7BlinkID10DateResultVMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DateResult(const DateResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID10DateResultVMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DateResult &operator =(const DateResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID10DateResultVMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DateResult &operator =(DateResult &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DateResult(DateResult &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::Int> getDay() const SWIFT_SYMBOL("s:7BlinkID10DateResultV3daySiSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::Int> getMonth() const SWIFT_SYMBOL("s:7BlinkID10DateResultV5monthSiSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::Int> getYear() const SWIFT_SYMBOL("s:7BlinkID10DateResultV4yearSiSgvp");
  SWIFT_INLINE_THUNK bool getFilledByDomainKnowledge() const SWIFT_SYMBOL("s:7BlinkID10DateResultV23filledByDomainKnowledgeSbvp");
  SWIFT_INLINE_THUNK bool getSuccessfullyParsed() const SWIFT_SYMBOL("s:7BlinkID10DateResultV18successfullyParsedSbvp");
  SWIFT_INLINE_THUNK T_0_0 getOriginalString() const SWIFT_SYMBOL("s:7BlinkID10DateResultV14originalStringxvp");
/// Creates a string representation of date in specific format, defaut format : “%D/%M/%yyyy”
  SWIFT_INLINE_THUNK swift::String toString() const SWIFT_SYMBOL("s:7BlinkID10DateResultV8toStringSSySSRszrlF");
private:
  SWIFT_INLINE_THUNK DateResult(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DateResult _make() noexcept {
    auto metadata = _impl::$s7BlinkID10DateResultVMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DateResult(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DateResult<T_0_0>;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID10DateResultVyxGD;
  static inline constexpr $s7BlinkID10DateResultVyxGD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_DateResult {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DateResult<T_0_0> &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DateResult<T_0_0> &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DateResult<T_0_0> returnNewValue(T callable) {
    auto result = DateResult<T_0_0>::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID10DateResultVMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
struct TypeMetadataTrait<BlinkID::DateResult<T_0_0>> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID10DateResultVMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata())._0;
  }
};
namespace _impl{
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
static inline const constexpr bool isOpaqueLayout<BlinkID::DateResult<T_0_0>> = true;
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

namespace _impl {

class _impl_DependentInfo;

// Type metadata accessor for DependentInfo
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID13DependentInfoVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID13DependentInfoV") DependentInfo final {
public:
  SWIFT_INLINE_THUNK ~DependentInfo() noexcept {
    auto metadata = _impl::$s7BlinkID13DependentInfoVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DependentInfo(const DependentInfo &other) noexcept {
    auto metadata = _impl::$s7BlinkID13DependentInfoVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DependentInfo &operator =(const DependentInfo &other) noexcept {
    auto metadata = _impl::$s7BlinkID13DependentInfoVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DependentInfo &operator =(DependentInfo &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DependentInfo(DependentInfo &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
private:
  SWIFT_INLINE_THUNK DependentInfo(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DependentInfo _make() noexcept {
    auto metadata = _impl::$s7BlinkID13DependentInfoVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DependentInfo(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DependentInfo;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID13DependentInfoVD;
  static inline constexpr $s7BlinkID13DependentInfoVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DependentInfo {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DependentInfo &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DependentInfo &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DependentInfo returnNewValue(T callable) {
    auto result = DependentInfo::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID13DependentInfoVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::DependentInfo> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID13DependentInfoVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::DependentInfo> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::DependentInfo> = true;
template<>
struct implClassFor<BlinkID::DependentInfo> { using type = BlinkID::_impl::_impl_DependentInfo; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID10RectangleFV") RectangleF;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::RectangleF> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_DetailedCroppedImageResult;

// Type metadata accessor for DetailedCroppedImageResult
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID26DetailedCroppedImageResultVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID26DetailedCroppedImageResultV") DetailedCroppedImageResult final {
public:
  SWIFT_INLINE_THUNK ~DetailedCroppedImageResult() noexcept {
    auto metadata = _impl::$s7BlinkID26DetailedCroppedImageResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DetailedCroppedImageResult(const DetailedCroppedImageResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID26DetailedCroppedImageResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DetailedCroppedImageResult &operator =(const DetailedCroppedImageResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID26DetailedCroppedImageResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DetailedCroppedImageResult &operator =(DetailedCroppedImageResult &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DetailedCroppedImageResult(DetailedCroppedImageResult &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Optional<ScanningSide> getSide() const SWIFT_SYMBOL("s:7BlinkID26DetailedCroppedImageResultV4sideAA12ScanningSideOSgvp");
  SWIFT_INLINE_THUNK swift::Optional<RectangleF> getLocation() const SWIFT_SYMBOL("s:7BlinkID26DetailedCroppedImageResultV8locationAA10RectangleFVSgvp");
  SWIFT_INLINE_THUNK UIImage *_Nullable getUiImage() const SWIFT_SYMBOL("s:7BlinkID26DetailedCroppedImageResultV02uiE0So7UIImageCSgvp");
private:
  SWIFT_INLINE_THUNK DetailedCroppedImageResult(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DetailedCroppedImageResult _make() noexcept {
    auto metadata = _impl::$s7BlinkID26DetailedCroppedImageResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DetailedCroppedImageResult(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DetailedCroppedImageResult;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID26DetailedCroppedImageResultVD;
  static inline constexpr $s7BlinkID26DetailedCroppedImageResultVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DetailedCroppedImageResult {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DetailedCroppedImageResult &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DetailedCroppedImageResult &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DetailedCroppedImageResult returnNewValue(T callable) {
    auto result = DetailedCroppedImageResult::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID26DetailedCroppedImageResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::DetailedCroppedImageResult> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID26DetailedCroppedImageResultVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::DetailedCroppedImageResult> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::DetailedCroppedImageResult> = true;
template<>
struct implClassFor<BlinkID::DetailedCroppedImageResult> { using type = BlinkID::_impl::_impl_DetailedCroppedImageResult; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID9FieldTypeO") FieldType;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::FieldType> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID17DetailedFieldTypeV") DetailedFieldType;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::DetailedFieldType> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_DetailedFieldType;

// Type metadata accessor for DetailedFieldType
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID17DetailedFieldTypeVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID17DetailedFieldTypeV") DetailedFieldType final {
public:
  SWIFT_INLINE_THUNK ~DetailedFieldType() noexcept {
    auto metadata = _impl::$s7BlinkID17DetailedFieldTypeVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DetailedFieldType(const DetailedFieldType &other) noexcept {
    auto metadata = _impl::$s7BlinkID17DetailedFieldTypeVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DetailedFieldType &operator =(const DetailedFieldType &other) noexcept {
    auto metadata = _impl::$s7BlinkID17DetailedFieldTypeVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DetailedFieldType &operator =(DetailedFieldType &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DetailedFieldType(DetailedFieldType &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK FieldType getFieldType() const SWIFT_SYMBOL("s:7BlinkID17DetailedFieldTypeV05fieldE0AA0dE0Ovp");
  SWIFT_INLINE_THUNK void setFieldType(const FieldType& value) SWIFT_SYMBOL("s:7BlinkID17DetailedFieldTypeV05fieldE0AA0dE0Ovp");
  SWIFT_INLINE_THUNK AlphabetType getAlphabetType() const SWIFT_SYMBOL("s:7BlinkID17DetailedFieldTypeV08alphabetE0AA08AlphabetE0Ovp");
  SWIFT_INLINE_THUNK void setAlphabetType(const AlphabetType& value) SWIFT_SYMBOL("s:7BlinkID17DetailedFieldTypeV08alphabetE0AA08AlphabetE0Ovp");
  static SWIFT_INLINE_THUNK DetailedFieldType init(const FieldType& fieldType, const AlphabetType& alphabetType) SWIFT_SYMBOL("s:7BlinkID17DetailedFieldTypeV05fieldE008alphabetE0AcA0dE0O_AA08AlphabetE0Otcfc");
private:
  SWIFT_INLINE_THUNK DetailedFieldType(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DetailedFieldType _make() noexcept {
    auto metadata = _impl::$s7BlinkID17DetailedFieldTypeVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DetailedFieldType(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DetailedFieldType;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID17DetailedFieldTypeVD;
  static inline constexpr $s7BlinkID17DetailedFieldTypeVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DetailedFieldType {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DetailedFieldType &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DetailedFieldType &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DetailedFieldType returnNewValue(T callable) {
    auto result = DetailedFieldType::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID17DetailedFieldTypeVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::DetailedFieldType> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID17DetailedFieldTypeVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::DetailedFieldType> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::DetailedFieldType> = true;
template<>
struct implClassFor<BlinkID::DetailedFieldType> { using type = BlinkID::_impl::_impl_DetailedFieldType; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID14DetectionLevelO") DetectionLevel;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::DetectionLevel> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
/// Represents the different levels of detection sensitivity.
/// This enum class is used to configure detection thresholds and enable or
/// disable detection functionality. The levels range from turning detection
/// off completely to setting various levels of sensitivity (low, mid, high).
namespace _impl {

class _impl_DetectionLevel;

// Type metadata accessor for DetectionLevel
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID14DetectionLevelOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum DetectionLevel
extern "C" {
extern unsigned $s7BlinkID14DetectionLevelO3offyA2CmFWC;
extern unsigned $s7BlinkID14DetectionLevelO3lowyA2CmFWC;
extern unsigned $s7BlinkID14DetectionLevelO3midyA2CmFWC;
extern unsigned $s7BlinkID14DetectionLevelO4highyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID14DetectionLevelO") DetectionLevel final {
public:
  SWIFT_INLINE_THUNK ~DetectionLevel() noexcept {
    auto metadata = _impl::$s7BlinkID14DetectionLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DetectionLevel(const DetectionLevel &other) noexcept {
    auto metadata = _impl::$s7BlinkID14DetectionLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DetectionLevel &operator =(const DetectionLevel &other) noexcept {
    auto metadata = _impl::$s7BlinkID14DetectionLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DetectionLevel &operator =(DetectionLevel &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DetectionLevel(DetectionLevel &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    off SWIFT_SYMBOL("s:7BlinkID14DetectionLevelO3offyA2CmF"),
    low SWIFT_SYMBOL("s:7BlinkID14DetectionLevelO3lowyA2CmF"),
    mid SWIFT_SYMBOL("s:7BlinkID14DetectionLevelO3midyA2CmF"),
    high SWIFT_SYMBOL("s:7BlinkID14DetectionLevelO4highyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_off {  // impl struct for case off
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::off;
    }
    SWIFT_INLINE_THUNK DetectionLevel operator()() const;
  } off SWIFT_SYMBOL("s:7BlinkID14DetectionLevelO3offyA2CmF");
  SWIFT_INLINE_THUNK bool isOff() const;

  inline const static struct _impl_low {  // impl struct for case low
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::low;
    }
    SWIFT_INLINE_THUNK DetectionLevel operator()() const;
  } low SWIFT_SYMBOL("s:7BlinkID14DetectionLevelO3lowyA2CmF");
  SWIFT_INLINE_THUNK bool isLow() const;

  inline const static struct _impl_mid {  // impl struct for case mid
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mid;
    }
    SWIFT_INLINE_THUNK DetectionLevel operator()() const;
  } mid SWIFT_SYMBOL("s:7BlinkID14DetectionLevelO3midyA2CmF");
  SWIFT_INLINE_THUNK bool isMid() const;

  inline const static struct _impl_high {  // impl struct for case high
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::high;
    }
    SWIFT_INLINE_THUNK DetectionLevel operator()() const;
  } high SWIFT_SYMBOL("s:7BlinkID14DetectionLevelO4highyA2CmF");
  SWIFT_INLINE_THUNK bool isHigh() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID14DetectionLevelO3offyA2CmFWC) return cases::off;
    if (tag == _impl::$s7BlinkID14DetectionLevelO3lowyA2CmFWC) return cases::low;
    if (tag == _impl::$s7BlinkID14DetectionLevelO3midyA2CmFWC) return cases::mid;
    if (tag == _impl::$s7BlinkID14DetectionLevelO4highyA2CmFWC) return cases::high;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:7BlinkID14DetectionLevelO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK DetectionLevel(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DetectionLevel _make() noexcept {
    auto metadata = _impl::$s7BlinkID14DetectionLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DetectionLevel(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID14DetectionLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID14DetectionLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID14DetectionLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DetectionLevel;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID14DetectionLevelOD;
  static inline constexpr $s7BlinkID14DetectionLevelOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DetectionLevel {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DetectionLevel &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DetectionLevel &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DetectionLevel returnNewValue(T callable) {
    auto result = DetectionLevel::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID14DetectionLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::DetectionLevel> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID14DetectionLevelOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::DetectionLevel> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::DetectionLevel> = true;
template<>
struct implClassFor<BlinkID::DetectionLevel> { using type = BlinkID::_impl::_impl_DetectionLevel; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID15DetectionStatusO") DetectionStatus;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::DetectionStatus> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
/// Defines all possible document detection statuses.
namespace _impl {

class _impl_DetectionStatus;

// Type metadata accessor for DetectionStatus
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID15DetectionStatusOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum DetectionStatus
extern "C" {
extern unsigned $s7BlinkID15DetectionStatusO6failedyA2CmFWC;
extern unsigned $s7BlinkID15DetectionStatusO7successyA2CmFWC;
extern unsigned $s7BlinkID15DetectionStatusO12cameraTooFaryA2CmFWC;
extern unsigned $s7BlinkID15DetectionStatusO14cameraTooCloseyA2CmFWC;
extern unsigned $s7BlinkID15DetectionStatusO19cameraAngleTooSteepyA2CmFWC;
extern unsigned $s7BlinkID15DetectionStatusO28documentTooCloseToCameraEdgeyA2CmFWC;
extern unsigned $s7BlinkID15DetectionStatusO24documentPartiallyVisibleyA2CmFWC;
extern unsigned $s7BlinkID15DetectionStatusO15fallbackSuccessyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID15DetectionStatusO") DetectionStatus final {
public:
  SWIFT_INLINE_THUNK ~DetectionStatus() noexcept {
    auto metadata = _impl::$s7BlinkID15DetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DetectionStatus(const DetectionStatus &other) noexcept {
    auto metadata = _impl::$s7BlinkID15DetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DetectionStatus &operator =(const DetectionStatus &other) noexcept {
    auto metadata = _impl::$s7BlinkID15DetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DetectionStatus &operator =(DetectionStatus &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DetectionStatus(DetectionStatus &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    failed SWIFT_SYMBOL("s:7BlinkID15DetectionStatusO6failedyA2CmF"),
    success SWIFT_SYMBOL("s:7BlinkID15DetectionStatusO7successyA2CmF"),
    cameraTooFar SWIFT_SYMBOL("s:7BlinkID15DetectionStatusO12cameraTooFaryA2CmF"),
    cameraTooClose SWIFT_SYMBOL("s:7BlinkID15DetectionStatusO14cameraTooCloseyA2CmF"),
    cameraAngleTooSteep SWIFT_SYMBOL("s:7BlinkID15DetectionStatusO19cameraAngleTooSteepyA2CmF"),
    documentTooCloseToCameraEdge SWIFT_SYMBOL("s:7BlinkID15DetectionStatusO28documentTooCloseToCameraEdgeyA2CmF"),
    documentPartiallyVisible SWIFT_SYMBOL("s:7BlinkID15DetectionStatusO24documentPartiallyVisibleyA2CmF"),
    fallbackSuccess SWIFT_SYMBOL("s:7BlinkID15DetectionStatusO15fallbackSuccessyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_failed {  // impl struct for case failed
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::failed;
    }
    SWIFT_INLINE_THUNK DetectionStatus operator()() const;
  } failed SWIFT_SYMBOL("s:7BlinkID15DetectionStatusO6failedyA2CmF");
  SWIFT_INLINE_THUNK bool isFailed() const;

  inline const static struct _impl_success {  // impl struct for case success
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::success;
    }
    SWIFT_INLINE_THUNK DetectionStatus operator()() const;
  } success SWIFT_SYMBOL("s:7BlinkID15DetectionStatusO7successyA2CmF");
  SWIFT_INLINE_THUNK bool isSuccess() const;

  inline const static struct _impl_cameraTooFar {  // impl struct for case cameraTooFar
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cameraTooFar;
    }
    SWIFT_INLINE_THUNK DetectionStatus operator()() const;
  } cameraTooFar SWIFT_SYMBOL("s:7BlinkID15DetectionStatusO12cameraTooFaryA2CmF");
  SWIFT_INLINE_THUNK bool isCameraTooFar() const;

  inline const static struct _impl_cameraTooClose {  // impl struct for case cameraTooClose
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cameraTooClose;
    }
    SWIFT_INLINE_THUNK DetectionStatus operator()() const;
  } cameraTooClose SWIFT_SYMBOL("s:7BlinkID15DetectionStatusO14cameraTooCloseyA2CmF");
  SWIFT_INLINE_THUNK bool isCameraTooClose() const;

  inline const static struct _impl_cameraAngleTooSteep {  // impl struct for case cameraAngleTooSteep
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cameraAngleTooSteep;
    }
    SWIFT_INLINE_THUNK DetectionStatus operator()() const;
  } cameraAngleTooSteep SWIFT_SYMBOL("s:7BlinkID15DetectionStatusO19cameraAngleTooSteepyA2CmF");
  SWIFT_INLINE_THUNK bool isCameraAngleTooSteep() const;

  inline const static struct _impl_documentTooCloseToCameraEdge {  // impl struct for case documentTooCloseToCameraEdge
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::documentTooCloseToCameraEdge;
    }
    SWIFT_INLINE_THUNK DetectionStatus operator()() const;
  } documentTooCloseToCameraEdge SWIFT_SYMBOL("s:7BlinkID15DetectionStatusO28documentTooCloseToCameraEdgeyA2CmF");
  SWIFT_INLINE_THUNK bool isDocumentTooCloseToCameraEdge() const;

  inline const static struct _impl_documentPartiallyVisible {  // impl struct for case documentPartiallyVisible
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::documentPartiallyVisible;
    }
    SWIFT_INLINE_THUNK DetectionStatus operator()() const;
  } documentPartiallyVisible SWIFT_SYMBOL("s:7BlinkID15DetectionStatusO24documentPartiallyVisibleyA2CmF");
  SWIFT_INLINE_THUNK bool isDocumentPartiallyVisible() const;

  inline const static struct _impl_fallbackSuccess {  // impl struct for case fallbackSuccess
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::fallbackSuccess;
    }
    SWIFT_INLINE_THUNK DetectionStatus operator()() const;
  } fallbackSuccess SWIFT_SYMBOL("s:7BlinkID15DetectionStatusO15fallbackSuccessyA2CmF");
  SWIFT_INLINE_THUNK bool isFallbackSuccess() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID15DetectionStatusO6failedyA2CmFWC) return cases::failed;
    if (tag == _impl::$s7BlinkID15DetectionStatusO7successyA2CmFWC) return cases::success;
    if (tag == _impl::$s7BlinkID15DetectionStatusO12cameraTooFaryA2CmFWC) return cases::cameraTooFar;
    if (tag == _impl::$s7BlinkID15DetectionStatusO14cameraTooCloseyA2CmFWC) return cases::cameraTooClose;
    if (tag == _impl::$s7BlinkID15DetectionStatusO19cameraAngleTooSteepyA2CmFWC) return cases::cameraAngleTooSteep;
    if (tag == _impl::$s7BlinkID15DetectionStatusO28documentTooCloseToCameraEdgeyA2CmFWC) return cases::documentTooCloseToCameraEdge;
    if (tag == _impl::$s7BlinkID15DetectionStatusO24documentPartiallyVisibleyA2CmFWC) return cases::documentPartiallyVisible;
    if (tag == _impl::$s7BlinkID15DetectionStatusO15fallbackSuccessyA2CmFWC) return cases::fallbackSuccess;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<DetectionStatus> init(const swift::String& rawValue) SWIFT_SYMBOL("s:7BlinkID15DetectionStatusO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:7BlinkID15DetectionStatusO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK DetectionStatus(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DetectionStatus _make() noexcept {
    auto metadata = _impl::$s7BlinkID15DetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DetectionStatus(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID15DetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID15DetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID15DetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DetectionStatus;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID15DetectionStatusOD;
  static inline constexpr $s7BlinkID15DetectionStatusOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DetectionStatus {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DetectionStatus &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DetectionStatus &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DetectionStatus returnNewValue(T callable) {
    auto result = DetectionStatus::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID15DetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::DetectionStatus> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID15DetectionStatusOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::DetectionStatus> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::DetectionStatus> = true;
template<>
struct implClassFor<BlinkID::DetectionStatus> { using type = BlinkID::_impl::_impl_DetectionStatus; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID14DocumentFilterV") DocumentFilter;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::DocumentFilter> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID35DocumentNumberAnonymizationSettingsV") DocumentNumberAnonymizationSettings;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::DocumentNumberAnonymizationSettings> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID29DocumentAnonymizationSettingsV") DocumentAnonymizationSettings;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::DocumentAnonymizationSettings> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_DocumentAnonymizationSettings;

// Type metadata accessor for DocumentAnonymizationSettings
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID29DocumentAnonymizationSettingsVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID29DocumentAnonymizationSettingsV") DocumentAnonymizationSettings final {
public:
  SWIFT_INLINE_THUNK ~DocumentAnonymizationSettings() noexcept {
    auto metadata = _impl::$s7BlinkID29DocumentAnonymizationSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentAnonymizationSettings(const DocumentAnonymizationSettings &other) noexcept {
    auto metadata = _impl::$s7BlinkID29DocumentAnonymizationSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentAnonymizationSettings &operator =(const DocumentAnonymizationSettings &other) noexcept {
    auto metadata = _impl::$s7BlinkID29DocumentAnonymizationSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DocumentAnonymizationSettings &operator =(DocumentAnonymizationSettings &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DocumentAnonymizationSettings(DocumentAnonymizationSettings &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK DocumentFilter getDocumentFilter() const SWIFT_SYMBOL("s:7BlinkID29DocumentAnonymizationSettingsV14documentFilterAA0cG0Vvp");
  SWIFT_INLINE_THUNK void setDocumentFilter(const DocumentFilter& value) SWIFT_SYMBOL("s:7BlinkID29DocumentAnonymizationSettingsV14documentFilterAA0cG0Vvp");
  SWIFT_INLINE_THUNK swift::Array<FieldType> getFields() const SWIFT_SYMBOL("s:7BlinkID29DocumentAnonymizationSettingsV6fieldsSayAA9FieldTypeOGvp");
  SWIFT_INLINE_THUNK void setFields(const swift::Array<FieldType>& value) SWIFT_SYMBOL("s:7BlinkID29DocumentAnonymizationSettingsV6fieldsSayAA9FieldTypeOGvp");
  SWIFT_INLINE_THUNK swift::Optional<DocumentNumberAnonymizationSettings> getDocumentNumberAnonymizationSettings() const SWIFT_SYMBOL("s:7BlinkID29DocumentAnonymizationSettingsV014documentNumberdE0AA0cgdE0VSgvp");
  SWIFT_INLINE_THUNK void setDocumentNumberAnonymizationSettings(const swift::Optional<DocumentNumberAnonymizationSettings>& value) SWIFT_SYMBOL("s:7BlinkID29DocumentAnonymizationSettingsV014documentNumberdE0AA0cgdE0VSgvp");
  static SWIFT_INLINE_THUNK DocumentAnonymizationSettings init(const DocumentFilter& documentFilter, const swift::Array<FieldType>& fields, const swift::Optional<DocumentNumberAnonymizationSettings>& documentNumberAnonymizationSettings) SWIFT_SYMBOL("s:7BlinkID29DocumentAnonymizationSettingsV14documentFilter6fields0f6NumberdE0AcA0cG0V_SayAA9FieldTypeOGAA0cidE0VSgtcfc");
private:
  SWIFT_INLINE_THUNK DocumentAnonymizationSettings(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DocumentAnonymizationSettings _make() noexcept {
    auto metadata = _impl::$s7BlinkID29DocumentAnonymizationSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DocumentAnonymizationSettings(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DocumentAnonymizationSettings;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID29DocumentAnonymizationSettingsVD;
  static inline constexpr $s7BlinkID29DocumentAnonymizationSettingsVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DocumentAnonymizationSettings {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DocumentAnonymizationSettings &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DocumentAnonymizationSettings &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DocumentAnonymizationSettings returnNewValue(T callable) {
    auto result = DocumentAnonymizationSettings::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID29DocumentAnonymizationSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::DocumentAnonymizationSettings> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID29DocumentAnonymizationSettingsVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::DocumentAnonymizationSettings> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::DocumentAnonymizationSettings> = true;
template<>
struct implClassFor<BlinkID::DocumentAnonymizationSettings> { using type = BlinkID::_impl::_impl_DocumentAnonymizationSettings; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID6RegionO") Region;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::Region> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO") DocumentType;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::DocumentType> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_DocumentFilter;

// Type metadata accessor for DocumentFilter
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID14DocumentFilterVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID14DocumentFilterV") DocumentFilter final {
public:
  SWIFT_INLINE_THUNK ~DocumentFilter() noexcept {
    auto metadata = _impl::$s7BlinkID14DocumentFilterVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentFilter(const DocumentFilter &other) noexcept {
    auto metadata = _impl::$s7BlinkID14DocumentFilterVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentFilter &operator =(const DocumentFilter &other) noexcept {
    auto metadata = _impl::$s7BlinkID14DocumentFilterVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DocumentFilter &operator =(DocumentFilter &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DocumentFilter(DocumentFilter &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Optional<Country> getCountry() const SWIFT_SYMBOL("s:7BlinkID14DocumentFilterV7countryAA7CountryOSgvp");
  SWIFT_INLINE_THUNK void setCountry(const swift::Optional<Country>& value) SWIFT_SYMBOL("s:7BlinkID14DocumentFilterV7countryAA7CountryOSgvp");
  SWIFT_INLINE_THUNK swift::Optional<Region> getRegion() const SWIFT_SYMBOL("s:7BlinkID14DocumentFilterV6regionAA6RegionOSgvp");
  SWIFT_INLINE_THUNK void setRegion(const swift::Optional<Region>& value) SWIFT_SYMBOL("s:7BlinkID14DocumentFilterV6regionAA6RegionOSgvp");
  SWIFT_INLINE_THUNK swift::Optional<DocumentType> getDocumentType() const SWIFT_SYMBOL("s:7BlinkID14DocumentFilterV12documentTypeAA0cF0OSgvp");
  SWIFT_INLINE_THUNK void setDocumentType(const swift::Optional<DocumentType>& value) SWIFT_SYMBOL("s:7BlinkID14DocumentFilterV12documentTypeAA0cF0OSgvp");
  static SWIFT_INLINE_THUNK DocumentFilter init(const swift::Optional<Country>& country, const swift::Optional<Region>& region, const swift::Optional<DocumentType>& documentType) SWIFT_SYMBOL("s:7BlinkID14DocumentFilterV7country6region12documentTypeAcA7CountryOSg_AA6RegionOSgAA0cH0OSgtcfc");
private:
  SWIFT_INLINE_THUNK DocumentFilter(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DocumentFilter _make() noexcept {
    auto metadata = _impl::$s7BlinkID14DocumentFilterVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DocumentFilter(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DocumentFilter;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID14DocumentFilterVD;
  static inline constexpr $s7BlinkID14DocumentFilterVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DocumentFilter {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DocumentFilter &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DocumentFilter &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DocumentFilter returnNewValue(T callable) {
    auto result = DocumentFilter::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID14DocumentFilterVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::DocumentFilter> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID14DocumentFilterVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::DocumentFilter> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::DocumentFilter> = true;
template<>
struct implClassFor<BlinkID::DocumentFilter> { using type = BlinkID::_impl::_impl_DocumentFilter; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID24DocumentImageColorStatusO") DocumentImageColorStatus;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::DocumentImageColorStatus> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
/// The color status determined from scanned image.
namespace _impl {

class _impl_DocumentImageColorStatus;

// Type metadata accessor for DocumentImageColorStatus
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID24DocumentImageColorStatusOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum DocumentImageColorStatus
extern "C" {
extern unsigned $s7BlinkID24DocumentImageColorStatusO12notAvailableyA2CmFWC;
extern unsigned $s7BlinkID24DocumentImageColorStatusO13blackAndWhiteyA2CmFWC;
extern unsigned $s7BlinkID24DocumentImageColorStatusO5coloryA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID24DocumentImageColorStatusO") DocumentImageColorStatus final {
public:
  SWIFT_INLINE_THUNK ~DocumentImageColorStatus() noexcept {
    auto metadata = _impl::$s7BlinkID24DocumentImageColorStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentImageColorStatus(const DocumentImageColorStatus &other) noexcept {
    auto metadata = _impl::$s7BlinkID24DocumentImageColorStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentImageColorStatus &operator =(const DocumentImageColorStatus &other) noexcept {
    auto metadata = _impl::$s7BlinkID24DocumentImageColorStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DocumentImageColorStatus &operator =(DocumentImageColorStatus &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DocumentImageColorStatus(DocumentImageColorStatus &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    notAvailable SWIFT_SYMBOL("s:7BlinkID24DocumentImageColorStatusO12notAvailableyA2CmF"),
    blackAndWhite SWIFT_SYMBOL("s:7BlinkID24DocumentImageColorStatusO13blackAndWhiteyA2CmF"),
    color SWIFT_SYMBOL("s:7BlinkID24DocumentImageColorStatusO5coloryA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_notAvailable {  // impl struct for case notAvailable
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::notAvailable;
    }
    SWIFT_INLINE_THUNK DocumentImageColorStatus operator()() const;
  } notAvailable SWIFT_SYMBOL("s:7BlinkID24DocumentImageColorStatusO12notAvailableyA2CmF");
  SWIFT_INLINE_THUNK bool isNotAvailable() const;

  inline const static struct _impl_blackAndWhite {  // impl struct for case blackAndWhite
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::blackAndWhite;
    }
    SWIFT_INLINE_THUNK DocumentImageColorStatus operator()() const;
  } blackAndWhite SWIFT_SYMBOL("s:7BlinkID24DocumentImageColorStatusO13blackAndWhiteyA2CmF");
  SWIFT_INLINE_THUNK bool isBlackAndWhite() const;

  inline const static struct _impl_color {  // impl struct for case color
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::color;
    }
    SWIFT_INLINE_THUNK DocumentImageColorStatus operator()() const;
  } color SWIFT_SYMBOL("s:7BlinkID24DocumentImageColorStatusO5coloryA2CmF");
  SWIFT_INLINE_THUNK bool isColor() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID24DocumentImageColorStatusO12notAvailableyA2CmFWC) return cases::notAvailable;
    if (tag == _impl::$s7BlinkID24DocumentImageColorStatusO13blackAndWhiteyA2CmFWC) return cases::blackAndWhite;
    if (tag == _impl::$s7BlinkID24DocumentImageColorStatusO5coloryA2CmFWC) return cases::color;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<DocumentImageColorStatus> init(swift::Int rawValue) SWIFT_SYMBOL("s:7BlinkID24DocumentImageColorStatusO8rawValueACSgSi_tcfc");
  SWIFT_INLINE_THUNK swift::Int getRawValue() const SWIFT_SYMBOL("s:7BlinkID24DocumentImageColorStatusO8rawValueSivp");
private:
  SWIFT_INLINE_THUNK DocumentImageColorStatus(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DocumentImageColorStatus _make() noexcept {
    auto metadata = _impl::$s7BlinkID24DocumentImageColorStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DocumentImageColorStatus(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID24DocumentImageColorStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID24DocumentImageColorStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID24DocumentImageColorStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DocumentImageColorStatus;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID24DocumentImageColorStatusOD;
  static inline constexpr $s7BlinkID24DocumentImageColorStatusOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DocumentImageColorStatus {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DocumentImageColorStatus &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DocumentImageColorStatus &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DocumentImageColorStatus returnNewValue(T callable) {
    auto result = DocumentImageColorStatus::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID24DocumentImageColorStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::DocumentImageColorStatus> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID24DocumentImageColorStatusOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::DocumentImageColorStatus> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::DocumentImageColorStatus> = true;
template<>
struct implClassFor<BlinkID::DocumentImageColorStatus> { using type = BlinkID::_impl::_impl_DocumentImageColorStatus; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

namespace _impl {

class _impl_DocumentNumberAnonymizationSettings;

// Type metadata accessor for DocumentNumberAnonymizationSettings
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID35DocumentNumberAnonymizationSettingsVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID35DocumentNumberAnonymizationSettingsV") DocumentNumberAnonymizationSettings final {
public:
  SWIFT_INLINE_THUNK ~DocumentNumberAnonymizationSettings() noexcept {
    auto metadata = _impl::$s7BlinkID35DocumentNumberAnonymizationSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentNumberAnonymizationSettings(const DocumentNumberAnonymizationSettings &other) noexcept {
    auto metadata = _impl::$s7BlinkID35DocumentNumberAnonymizationSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentNumberAnonymizationSettings &operator =(const DocumentNumberAnonymizationSettings &other) noexcept {
    auto metadata = _impl::$s7BlinkID35DocumentNumberAnonymizationSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DocumentNumberAnonymizationSettings &operator =(DocumentNumberAnonymizationSettings &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DocumentNumberAnonymizationSettings(DocumentNumberAnonymizationSettings &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Int getPrefixDigitsVisible() const SWIFT_SYMBOL("s:7BlinkID35DocumentNumberAnonymizationSettingsV19prefixDigitsVisibleSivp");
  SWIFT_INLINE_THUNK void setPrefixDigitsVisible(swift::Int value) SWIFT_SYMBOL("s:7BlinkID35DocumentNumberAnonymizationSettingsV19prefixDigitsVisibleSivp");
  SWIFT_INLINE_THUNK swift::Int getSuffixDigitsVisible() const SWIFT_SYMBOL("s:7BlinkID35DocumentNumberAnonymizationSettingsV19suffixDigitsVisibleSivp");
  SWIFT_INLINE_THUNK void setSuffixDigitsVisible(swift::Int value) SWIFT_SYMBOL("s:7BlinkID35DocumentNumberAnonymizationSettingsV19suffixDigitsVisibleSivp");
  static SWIFT_INLINE_THUNK DocumentNumberAnonymizationSettings init(swift::Int prefixDigitsVisible, swift::Int suffixDigitsVisible) SWIFT_SYMBOL("s:7BlinkID35DocumentNumberAnonymizationSettingsV19prefixDigitsVisible06suffixhI0ACSi_Sitcfc");
private:
  SWIFT_INLINE_THUNK DocumentNumberAnonymizationSettings(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DocumentNumberAnonymizationSettings _make() noexcept {
    auto metadata = _impl::$s7BlinkID35DocumentNumberAnonymizationSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DocumentNumberAnonymizationSettings(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DocumentNumberAnonymizationSettings;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID35DocumentNumberAnonymizationSettingsVD;
  static inline constexpr $s7BlinkID35DocumentNumberAnonymizationSettingsVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DocumentNumberAnonymizationSettings {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DocumentNumberAnonymizationSettings &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DocumentNumberAnonymizationSettings &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DocumentNumberAnonymizationSettings returnNewValue(T callable) {
    auto result = DocumentNumberAnonymizationSettings::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID35DocumentNumberAnonymizationSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::DocumentNumberAnonymizationSettings> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID35DocumentNumberAnonymizationSettingsVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::DocumentNumberAnonymizationSettings> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::DocumentNumberAnonymizationSettings> = true;
template<>
struct implClassFor<BlinkID::DocumentNumberAnonymizationSettings> { using type = BlinkID::_impl::_impl_DocumentNumberAnonymizationSettings; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID19DocumentOrientationO") DocumentOrientation;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::DocumentOrientation> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
/// Defines possible card orientations.
namespace _impl {

class _impl_DocumentOrientation;

// Type metadata accessor for DocumentOrientation
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID19DocumentOrientationOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum DocumentOrientation
extern "C" {
extern unsigned $s7BlinkID19DocumentOrientationO10horizontalyA2CmFWC;
extern unsigned $s7BlinkID19DocumentOrientationO8verticalyA2CmFWC;
extern unsigned $s7BlinkID19DocumentOrientationO12notAvailableyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID19DocumentOrientationO") DocumentOrientation final {
public:
  SWIFT_INLINE_THUNK ~DocumentOrientation() noexcept {
    auto metadata = _impl::$s7BlinkID19DocumentOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentOrientation(const DocumentOrientation &other) noexcept {
    auto metadata = _impl::$s7BlinkID19DocumentOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentOrientation &operator =(const DocumentOrientation &other) noexcept {
    auto metadata = _impl::$s7BlinkID19DocumentOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DocumentOrientation &operator =(DocumentOrientation &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DocumentOrientation(DocumentOrientation &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    horizontal SWIFT_SYMBOL("s:7BlinkID19DocumentOrientationO10horizontalyA2CmF"),
    vertical SWIFT_SYMBOL("s:7BlinkID19DocumentOrientationO8verticalyA2CmF"),
    notAvailable SWIFT_SYMBOL("s:7BlinkID19DocumentOrientationO12notAvailableyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_horizontal {  // impl struct for case horizontal
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::horizontal;
    }
    SWIFT_INLINE_THUNK DocumentOrientation operator()() const;
  } horizontal SWIFT_SYMBOL("s:7BlinkID19DocumentOrientationO10horizontalyA2CmF");
  SWIFT_INLINE_THUNK bool isHorizontal() const;

  inline const static struct _impl_vertical {  // impl struct for case vertical
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::vertical;
    }
    SWIFT_INLINE_THUNK DocumentOrientation operator()() const;
  } vertical SWIFT_SYMBOL("s:7BlinkID19DocumentOrientationO8verticalyA2CmF");
  SWIFT_INLINE_THUNK bool isVertical() const;

  inline const static struct _impl_notAvailable {  // impl struct for case notAvailable
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::notAvailable;
    }
    SWIFT_INLINE_THUNK DocumentOrientation operator()() const;
  } notAvailable SWIFT_SYMBOL("s:7BlinkID19DocumentOrientationO12notAvailableyA2CmF");
  SWIFT_INLINE_THUNK bool isNotAvailable() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID19DocumentOrientationO10horizontalyA2CmFWC) return cases::horizontal;
    if (tag == _impl::$s7BlinkID19DocumentOrientationO8verticalyA2CmFWC) return cases::vertical;
    if (tag == _impl::$s7BlinkID19DocumentOrientationO12notAvailableyA2CmFWC) return cases::notAvailable;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<DocumentOrientation> init(swift::Int rawValue) SWIFT_SYMBOL("s:7BlinkID19DocumentOrientationO8rawValueACSgSi_tcfc");
  SWIFT_INLINE_THUNK swift::Int getRawValue() const SWIFT_SYMBOL("s:7BlinkID19DocumentOrientationO8rawValueSivp");
private:
  SWIFT_INLINE_THUNK DocumentOrientation(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DocumentOrientation _make() noexcept {
    auto metadata = _impl::$s7BlinkID19DocumentOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DocumentOrientation(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID19DocumentOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID19DocumentOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID19DocumentOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DocumentOrientation;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID19DocumentOrientationOD;
  static inline constexpr $s7BlinkID19DocumentOrientationOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DocumentOrientation {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DocumentOrientation &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DocumentOrientation &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DocumentOrientation returnNewValue(T callable) {
    auto result = DocumentOrientation::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID19DocumentOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::DocumentOrientation> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID19DocumentOrientationOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::DocumentOrientation> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::DocumentOrientation> = true;
template<>
struct implClassFor<BlinkID::DocumentOrientation> { using type = BlinkID::_impl::_impl_DocumentOrientation; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID16DocumentRotationO") DocumentRotation;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::DocumentRotation> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
/// Represents the rotation of the document.
namespace _impl {

class _impl_DocumentRotation;

// Type metadata accessor for DocumentRotation
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID16DocumentRotationOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum DocumentRotation
extern "C" {
extern unsigned $s7BlinkID16DocumentRotationO12notAvailableyA2CmFWC;
extern unsigned $s7BlinkID16DocumentRotationO4zeroyA2CmFWC;
extern unsigned $s7BlinkID16DocumentRotationO11clockwise90yA2CmFWC;
extern unsigned $s7BlinkID16DocumentRotationO18counterClockwise90yA2CmFWC;
extern unsigned $s7BlinkID16DocumentRotationO10upsideDownyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID16DocumentRotationO") DocumentRotation final {
public:
  SWIFT_INLINE_THUNK ~DocumentRotation() noexcept {
    auto metadata = _impl::$s7BlinkID16DocumentRotationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentRotation(const DocumentRotation &other) noexcept {
    auto metadata = _impl::$s7BlinkID16DocumentRotationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentRotation &operator =(const DocumentRotation &other) noexcept {
    auto metadata = _impl::$s7BlinkID16DocumentRotationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DocumentRotation &operator =(DocumentRotation &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DocumentRotation(DocumentRotation &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    notAvailable SWIFT_SYMBOL("s:7BlinkID16DocumentRotationO12notAvailableyA2CmF"),
    zero SWIFT_SYMBOL("s:7BlinkID16DocumentRotationO4zeroyA2CmF"),
    clockwise90 SWIFT_SYMBOL("s:7BlinkID16DocumentRotationO11clockwise90yA2CmF"),
    counterClockwise90 SWIFT_SYMBOL("s:7BlinkID16DocumentRotationO18counterClockwise90yA2CmF"),
    upsideDown SWIFT_SYMBOL("s:7BlinkID16DocumentRotationO10upsideDownyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_notAvailable {  // impl struct for case notAvailable
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::notAvailable;
    }
    SWIFT_INLINE_THUNK DocumentRotation operator()() const;
  } notAvailable SWIFT_SYMBOL("s:7BlinkID16DocumentRotationO12notAvailableyA2CmF");
  SWIFT_INLINE_THUNK bool isNotAvailable() const;

  inline const static struct _impl_zero {  // impl struct for case zero
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::zero;
    }
    SWIFT_INLINE_THUNK DocumentRotation operator()() const;
  } zero SWIFT_SYMBOL("s:7BlinkID16DocumentRotationO4zeroyA2CmF");
  SWIFT_INLINE_THUNK bool isZero() const;

  inline const static struct _impl_clockwise90 {  // impl struct for case clockwise90
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::clockwise90;
    }
    SWIFT_INLINE_THUNK DocumentRotation operator()() const;
  } clockwise90 SWIFT_SYMBOL("s:7BlinkID16DocumentRotationO11clockwise90yA2CmF");
  SWIFT_INLINE_THUNK bool isClockwise90() const;

  inline const static struct _impl_counterClockwise90 {  // impl struct for case counterClockwise90
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::counterClockwise90;
    }
    SWIFT_INLINE_THUNK DocumentRotation operator()() const;
  } counterClockwise90 SWIFT_SYMBOL("s:7BlinkID16DocumentRotationO18counterClockwise90yA2CmF");
  SWIFT_INLINE_THUNK bool isCounterClockwise90() const;

  inline const static struct _impl_upsideDown {  // impl struct for case upsideDown
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::upsideDown;
    }
    SWIFT_INLINE_THUNK DocumentRotation operator()() const;
  } upsideDown SWIFT_SYMBOL("s:7BlinkID16DocumentRotationO10upsideDownyA2CmF");
  SWIFT_INLINE_THUNK bool isUpsideDown() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID16DocumentRotationO12notAvailableyA2CmFWC) return cases::notAvailable;
    if (tag == _impl::$s7BlinkID16DocumentRotationO4zeroyA2CmFWC) return cases::zero;
    if (tag == _impl::$s7BlinkID16DocumentRotationO11clockwise90yA2CmFWC) return cases::clockwise90;
    if (tag == _impl::$s7BlinkID16DocumentRotationO18counterClockwise90yA2CmFWC) return cases::counterClockwise90;
    if (tag == _impl::$s7BlinkID16DocumentRotationO10upsideDownyA2CmFWC) return cases::upsideDown;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<DocumentRotation> init(swift::Int rawValue) SWIFT_SYMBOL("s:7BlinkID16DocumentRotationO8rawValueACSgSi_tcfc");
  SWIFT_INLINE_THUNK swift::Int getRawValue() const SWIFT_SYMBOL("s:7BlinkID16DocumentRotationO8rawValueSivp");
private:
  SWIFT_INLINE_THUNK DocumentRotation(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DocumentRotation _make() noexcept {
    auto metadata = _impl::$s7BlinkID16DocumentRotationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DocumentRotation(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID16DocumentRotationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID16DocumentRotationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID16DocumentRotationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DocumentRotation;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID16DocumentRotationOD;
  static inline constexpr $s7BlinkID16DocumentRotationOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DocumentRotation {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DocumentRotation &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DocumentRotation &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DocumentRotation returnNewValue(T callable) {
    auto result = DocumentRotation::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID16DocumentRotationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::DocumentRotation> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID16DocumentRotationOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::DocumentRotation> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::DocumentRotation> = true;
template<>
struct implClassFor<BlinkID::DocumentRotation> { using type = BlinkID::_impl::_impl_DocumentRotation; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID13DocumentRulesV") DocumentRules;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::DocumentRules> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_DocumentRules;

// Type metadata accessor for DocumentRules
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID13DocumentRulesVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID13DocumentRulesV") DocumentRules final {
public:
  SWIFT_INLINE_THUNK ~DocumentRules() noexcept {
    auto metadata = _impl::$s7BlinkID13DocumentRulesVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentRules(const DocumentRules &other) noexcept {
    auto metadata = _impl::$s7BlinkID13DocumentRulesVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentRules &operator =(const DocumentRules &other) noexcept {
    auto metadata = _impl::$s7BlinkID13DocumentRulesVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DocumentRules &operator =(DocumentRules &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DocumentRules(DocumentRules &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK DocumentFilter getDocumentFilter() const SWIFT_SYMBOL("s:7BlinkID13DocumentRulesV14documentFilterAA0cF0Vvp");
  SWIFT_INLINE_THUNK void setDocumentFilter(const DocumentFilter& value) SWIFT_SYMBOL("s:7BlinkID13DocumentRulesV14documentFilterAA0cF0Vvp");
  SWIFT_INLINE_THUNK swift::Array<DetailedFieldType> getFields() const SWIFT_SYMBOL("s:7BlinkID13DocumentRulesV6fieldsSayAA17DetailedFieldTypeVGvp");
  SWIFT_INLINE_THUNK void setFields(const swift::Array<DetailedFieldType>& value) SWIFT_SYMBOL("s:7BlinkID13DocumentRulesV6fieldsSayAA17DetailedFieldTypeVGvp");
  static SWIFT_INLINE_THUNK DocumentRules init(const DocumentFilter& documentFilter, const swift::Array<DetailedFieldType>& fields) SWIFT_SYMBOL("s:7BlinkID13DocumentRulesV14documentFilter6fieldsAcA0cF0V_SayAA17DetailedFieldTypeVGtcfc");
private:
  SWIFT_INLINE_THUNK DocumentRules(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DocumentRules _make() noexcept {
    auto metadata = _impl::$s7BlinkID13DocumentRulesVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DocumentRules(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DocumentRules;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID13DocumentRulesVD;
  static inline constexpr $s7BlinkID13DocumentRulesVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DocumentRules {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DocumentRules &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DocumentRules &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DocumentRules returnNewValue(T callable) {
    auto result = DocumentRules::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID13DocumentRulesVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::DocumentRules> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID13DocumentRulesVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::DocumentRules> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::DocumentRules> = true;
template<>
struct implClassFor<BlinkID::DocumentRules> { using type = BlinkID::_impl::_impl_DocumentRules; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

/// Document type.
namespace _impl {

class _impl_DocumentType;

// Type metadata accessor for DocumentType
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID12DocumentTypeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum DocumentType
extern "C" {
extern unsigned $s7BlinkID12DocumentTypeO4noneyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO10consularIdyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO2dlyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO20dlPublicServicesCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO14employmentPassyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO7finCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO2idyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO14multipurposeIdyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO5myKadyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO5myKidyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO4myPRyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO9myTenterayA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO7panCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO14professionalIdyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO18publicServicesCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO15residencePermityA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO10residentIdyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO24temporaryResidencePermityA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO7voterIdyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO10workPermityA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO4iKadyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO10militaryIdyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO5myKasyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO18socialSecurityCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO19healthInsuranceCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO8passportyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO5sPassyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO11addressCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO7alienIdyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO13alienPassportyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO9greenCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO8minorsIdyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO8postalIdyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO14professionalDlyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO5taxIdyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO12weaponPermityA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO4visayA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO18borderCrossingCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO10driverCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO15globalEntryCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO7mypolisyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO9nexusCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO12passportCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO14proofOfAgeCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO9refugeeIdyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO8tribalIdyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO9veteranIdyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO22citizenshipCertificateyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO12myNumberCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO16consularPassportyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO14minorsPassportyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO24minorsPublicServicesCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO20drivingPrivilegeCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO13asylumRequestyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO23driverQualificationCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO13provisionalDlyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO15refugeePassportyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO9specialIdyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO19uniformedServicesIdyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO13immigrantVisayA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO15consularVoterIdyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO8twicCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO15exitEntryPermityA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO26mainlandTravelPermitTaiwanyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO12nbiClearanceyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO19proofOfRegistrationyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO25temporaryProtectionPermityA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO17afghanCitizenCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO3eidyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO4passyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO5sisIdyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO8asicCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO10bidoonCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO26interimHealthInsuranceCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO10nonVoterIdyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO29reciprocalHealthInsuranceCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO19vehicleRegistrationyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO9esaadCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO23registrationCertificateyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO18medicalMarijuanaIdyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO") DocumentType final {
public:
  SWIFT_INLINE_THUNK ~DocumentType() noexcept {
    auto metadata = _impl::$s7BlinkID12DocumentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentType(const DocumentType &other) noexcept {
    auto metadata = _impl::$s7BlinkID12DocumentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentType &operator =(const DocumentType &other) noexcept {
    auto metadata = _impl::$s7BlinkID12DocumentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DocumentType &operator =(DocumentType &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DocumentType(DocumentType &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    none SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO4noneyA2CmF"),
    consularId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO10consularIdyA2CmF"),
    dl SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO2dlyA2CmF"),
    dlPublicServicesCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO20dlPublicServicesCardyA2CmF"),
    employmentPass SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO14employmentPassyA2CmF"),
    finCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO7finCardyA2CmF"),
    id SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO2idyA2CmF"),
    multipurposeId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO14multipurposeIdyA2CmF"),
    myKad SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO5myKadyA2CmF"),
    myKid SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO5myKidyA2CmF"),
    myPR SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO4myPRyA2CmF"),
    myTentera SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO9myTenterayA2CmF"),
    panCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO7panCardyA2CmF"),
    professionalId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO14professionalIdyA2CmF"),
    publicServicesCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO18publicServicesCardyA2CmF"),
    residencePermit SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO15residencePermityA2CmF"),
    residentId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO10residentIdyA2CmF"),
    temporaryResidencePermit SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO24temporaryResidencePermityA2CmF"),
    voterId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO7voterIdyA2CmF"),
    workPermit SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO10workPermityA2CmF"),
    iKad SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO4iKadyA2CmF"),
    militaryId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO10militaryIdyA2CmF"),
    myKas SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO5myKasyA2CmF"),
    socialSecurityCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO18socialSecurityCardyA2CmF"),
    healthInsuranceCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO19healthInsuranceCardyA2CmF"),
    passport SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO8passportyA2CmF"),
    sPass SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO5sPassyA2CmF"),
    addressCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO11addressCardyA2CmF"),
    alienId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO7alienIdyA2CmF"),
    alienPassport SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO13alienPassportyA2CmF"),
    greenCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO9greenCardyA2CmF"),
    minorsId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO8minorsIdyA2CmF"),
    postalId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO8postalIdyA2CmF"),
    professionalDl SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO14professionalDlyA2CmF"),
    taxId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO5taxIdyA2CmF"),
    weaponPermit SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO12weaponPermityA2CmF"),
    visa SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO4visayA2CmF"),
    borderCrossingCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO18borderCrossingCardyA2CmF"),
    driverCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO10driverCardyA2CmF"),
    globalEntryCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO15globalEntryCardyA2CmF"),
    mypolis SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO7mypolisyA2CmF"),
    nexusCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO9nexusCardyA2CmF"),
    passportCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO12passportCardyA2CmF"),
    proofOfAgeCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO14proofOfAgeCardyA2CmF"),
    refugeeId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO9refugeeIdyA2CmF"),
    tribalId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO8tribalIdyA2CmF"),
    veteranId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO9veteranIdyA2CmF"),
    citizenshipCertificate SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO22citizenshipCertificateyA2CmF"),
    myNumberCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO12myNumberCardyA2CmF"),
    consularPassport SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO16consularPassportyA2CmF"),
    minorsPassport SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO14minorsPassportyA2CmF"),
    minorsPublicServicesCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO24minorsPublicServicesCardyA2CmF"),
    drivingPrivilegeCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO20drivingPrivilegeCardyA2CmF"),
    asylumRequest SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO13asylumRequestyA2CmF"),
    driverQualificationCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO23driverQualificationCardyA2CmF"),
    provisionalDl SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO13provisionalDlyA2CmF"),
    refugeePassport SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO15refugeePassportyA2CmF"),
    specialId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO9specialIdyA2CmF"),
    uniformedServicesId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO19uniformedServicesIdyA2CmF"),
    immigrantVisa SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO13immigrantVisayA2CmF"),
    consularVoterId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO15consularVoterIdyA2CmF"),
    twicCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO8twicCardyA2CmF"),
    exitEntryPermit SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO15exitEntryPermityA2CmF"),
    mainlandTravelPermitTaiwan SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO26mainlandTravelPermitTaiwanyA2CmF"),
    nbiClearance SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO12nbiClearanceyA2CmF"),
    proofOfRegistration SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO19proofOfRegistrationyA2CmF"),
    temporaryProtectionPermit SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO25temporaryProtectionPermityA2CmF"),
    afghanCitizenCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO17afghanCitizenCardyA2CmF"),
    eid SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO3eidyA2CmF"),
    pass SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO4passyA2CmF"),
    sisId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO5sisIdyA2CmF"),
    asicCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO8asicCardyA2CmF"),
    bidoonCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO10bidoonCardyA2CmF"),
    interimHealthInsuranceCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO26interimHealthInsuranceCardyA2CmF"),
    nonVoterId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO10nonVoterIdyA2CmF"),
    reciprocalHealthInsuranceCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO29reciprocalHealthInsuranceCardyA2CmF"),
    vehicleRegistration SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO19vehicleRegistrationyA2CmF"),
    esaadCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO9esaadCardyA2CmF"),
    registrationCertificate SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO23registrationCertificateyA2CmF"),
    medicalMarijuanaId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO18medicalMarijuanaIdyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_none {  // impl struct for case none
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::none;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } none SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO4noneyA2CmF");
  SWIFT_INLINE_THUNK bool isNone() const;

  inline const static struct _impl_consularId {  // impl struct for case consularId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::consularId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } consularId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO10consularIdyA2CmF");
  SWIFT_INLINE_THUNK bool isConsularId() const;

  inline const static struct _impl_dl {  // impl struct for case dl
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dl;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } dl SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO2dlyA2CmF");
  SWIFT_INLINE_THUNK bool isDl() const;

  inline const static struct _impl_dlPublicServicesCard {  // impl struct for case dlPublicServicesCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dlPublicServicesCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } dlPublicServicesCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO20dlPublicServicesCardyA2CmF");
  SWIFT_INLINE_THUNK bool isDlPublicServicesCard() const;

  inline const static struct _impl_employmentPass {  // impl struct for case employmentPass
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::employmentPass;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } employmentPass SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO14employmentPassyA2CmF");
  SWIFT_INLINE_THUNK bool isEmploymentPass() const;

  inline const static struct _impl_finCard {  // impl struct for case finCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::finCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } finCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO7finCardyA2CmF");
  SWIFT_INLINE_THUNK bool isFinCard() const;

  inline const static struct _impl_id {  // impl struct for case id
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::id;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } id SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO2idyA2CmF");
  SWIFT_INLINE_THUNK bool isId() const;

  inline const static struct _impl_multipurposeId {  // impl struct for case multipurposeId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::multipurposeId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } multipurposeId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO14multipurposeIdyA2CmF");
  SWIFT_INLINE_THUNK bool isMultipurposeId() const;

  inline const static struct _impl_myKad {  // impl struct for case myKad
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::myKad;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } myKad SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO5myKadyA2CmF");
  SWIFT_INLINE_THUNK bool isMyKad() const;

  inline const static struct _impl_myKid {  // impl struct for case myKid
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::myKid;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } myKid SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO5myKidyA2CmF");
  SWIFT_INLINE_THUNK bool isMyKid() const;

  inline const static struct _impl_myPR {  // impl struct for case myPR
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::myPR;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } myPR SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO4myPRyA2CmF");
  SWIFT_INLINE_THUNK bool isMyPR() const;

  inline const static struct _impl_myTentera {  // impl struct for case myTentera
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::myTentera;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } myTentera SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO9myTenterayA2CmF");
  SWIFT_INLINE_THUNK bool isMyTentera() const;

  inline const static struct _impl_panCard {  // impl struct for case panCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::panCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } panCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO7panCardyA2CmF");
  SWIFT_INLINE_THUNK bool isPanCard() const;

  inline const static struct _impl_professionalId {  // impl struct for case professionalId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::professionalId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } professionalId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO14professionalIdyA2CmF");
  SWIFT_INLINE_THUNK bool isProfessionalId() const;

  inline const static struct _impl_publicServicesCard {  // impl struct for case publicServicesCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::publicServicesCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } publicServicesCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO18publicServicesCardyA2CmF");
  SWIFT_INLINE_THUNK bool isPublicServicesCard() const;

  inline const static struct _impl_residencePermit {  // impl struct for case residencePermit
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::residencePermit;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } residencePermit SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO15residencePermityA2CmF");
  SWIFT_INLINE_THUNK bool isResidencePermit() const;

  inline const static struct _impl_residentId {  // impl struct for case residentId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::residentId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } residentId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO10residentIdyA2CmF");
  SWIFT_INLINE_THUNK bool isResidentId() const;

  inline const static struct _impl_temporaryResidencePermit {  // impl struct for case temporaryResidencePermit
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::temporaryResidencePermit;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } temporaryResidencePermit SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO24temporaryResidencePermityA2CmF");
  SWIFT_INLINE_THUNK bool isTemporaryResidencePermit() const;

  inline const static struct _impl_voterId {  // impl struct for case voterId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::voterId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } voterId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO7voterIdyA2CmF");
  SWIFT_INLINE_THUNK bool isVoterId() const;

  inline const static struct _impl_workPermit {  // impl struct for case workPermit
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::workPermit;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } workPermit SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO10workPermityA2CmF");
  SWIFT_INLINE_THUNK bool isWorkPermit() const;

  inline const static struct _impl_iKad {  // impl struct for case iKad
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::iKad;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } iKad SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO4iKadyA2CmF");
  SWIFT_INLINE_THUNK bool isIKad() const;

  inline const static struct _impl_militaryId {  // impl struct for case militaryId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::militaryId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } militaryId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO10militaryIdyA2CmF");
  SWIFT_INLINE_THUNK bool isMilitaryId() const;

  inline const static struct _impl_myKas {  // impl struct for case myKas
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::myKas;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } myKas SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO5myKasyA2CmF");
  SWIFT_INLINE_THUNK bool isMyKas() const;

  inline const static struct _impl_socialSecurityCard {  // impl struct for case socialSecurityCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::socialSecurityCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } socialSecurityCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO18socialSecurityCardyA2CmF");
  SWIFT_INLINE_THUNK bool isSocialSecurityCard() const;

  inline const static struct _impl_healthInsuranceCard {  // impl struct for case healthInsuranceCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::healthInsuranceCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } healthInsuranceCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO19healthInsuranceCardyA2CmF");
  SWIFT_INLINE_THUNK bool isHealthInsuranceCard() const;

  inline const static struct _impl_passport {  // impl struct for case passport
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::passport;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } passport SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO8passportyA2CmF");
  SWIFT_INLINE_THUNK bool isPassport() const;

  inline const static struct _impl_sPass {  // impl struct for case sPass
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sPass;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } sPass SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO5sPassyA2CmF");
  SWIFT_INLINE_THUNK bool isSPass() const;

  inline const static struct _impl_addressCard {  // impl struct for case addressCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::addressCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } addressCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO11addressCardyA2CmF");
  SWIFT_INLINE_THUNK bool isAddressCard() const;

  inline const static struct _impl_alienId {  // impl struct for case alienId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::alienId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } alienId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO7alienIdyA2CmF");
  SWIFT_INLINE_THUNK bool isAlienId() const;

  inline const static struct _impl_alienPassport {  // impl struct for case alienPassport
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::alienPassport;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } alienPassport SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO13alienPassportyA2CmF");
  SWIFT_INLINE_THUNK bool isAlienPassport() const;

  inline const static struct _impl_greenCard {  // impl struct for case greenCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::greenCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } greenCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO9greenCardyA2CmF");
  SWIFT_INLINE_THUNK bool isGreenCard() const;

  inline const static struct _impl_minorsId {  // impl struct for case minorsId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::minorsId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } minorsId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO8minorsIdyA2CmF");
  SWIFT_INLINE_THUNK bool isMinorsId() const;

  inline const static struct _impl_postalId {  // impl struct for case postalId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::postalId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } postalId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO8postalIdyA2CmF");
  SWIFT_INLINE_THUNK bool isPostalId() const;

  inline const static struct _impl_professionalDl {  // impl struct for case professionalDl
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::professionalDl;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } professionalDl SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO14professionalDlyA2CmF");
  SWIFT_INLINE_THUNK bool isProfessionalDl() const;

  inline const static struct _impl_taxId {  // impl struct for case taxId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::taxId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } taxId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO5taxIdyA2CmF");
  SWIFT_INLINE_THUNK bool isTaxId() const;

  inline const static struct _impl_weaponPermit {  // impl struct for case weaponPermit
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::weaponPermit;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } weaponPermit SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO12weaponPermityA2CmF");
  SWIFT_INLINE_THUNK bool isWeaponPermit() const;

  inline const static struct _impl_visa {  // impl struct for case visa
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::visa;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } visa SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO4visayA2CmF");
  SWIFT_INLINE_THUNK bool isVisa() const;

  inline const static struct _impl_borderCrossingCard {  // impl struct for case borderCrossingCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::borderCrossingCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } borderCrossingCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO18borderCrossingCardyA2CmF");
  SWIFT_INLINE_THUNK bool isBorderCrossingCard() const;

  inline const static struct _impl_driverCard {  // impl struct for case driverCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::driverCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } driverCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO10driverCardyA2CmF");
  SWIFT_INLINE_THUNK bool isDriverCard() const;

  inline const static struct _impl_globalEntryCard {  // impl struct for case globalEntryCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::globalEntryCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } globalEntryCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO15globalEntryCardyA2CmF");
  SWIFT_INLINE_THUNK bool isGlobalEntryCard() const;

  inline const static struct _impl_mypolis {  // impl struct for case mypolis
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mypolis;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } mypolis SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO7mypolisyA2CmF");
  SWIFT_INLINE_THUNK bool isMypolis() const;

  inline const static struct _impl_nexusCard {  // impl struct for case nexusCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nexusCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } nexusCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO9nexusCardyA2CmF");
  SWIFT_INLINE_THUNK bool isNexusCard() const;

  inline const static struct _impl_passportCard {  // impl struct for case passportCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::passportCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } passportCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO12passportCardyA2CmF");
  SWIFT_INLINE_THUNK bool isPassportCard() const;

  inline const static struct _impl_proofOfAgeCard {  // impl struct for case proofOfAgeCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::proofOfAgeCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } proofOfAgeCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO14proofOfAgeCardyA2CmF");
  SWIFT_INLINE_THUNK bool isProofOfAgeCard() const;

  inline const static struct _impl_refugeeId {  // impl struct for case refugeeId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::refugeeId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } refugeeId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO9refugeeIdyA2CmF");
  SWIFT_INLINE_THUNK bool isRefugeeId() const;

  inline const static struct _impl_tribalId {  // impl struct for case tribalId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tribalId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } tribalId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO8tribalIdyA2CmF");
  SWIFT_INLINE_THUNK bool isTribalId() const;

  inline const static struct _impl_veteranId {  // impl struct for case veteranId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::veteranId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } veteranId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO9veteranIdyA2CmF");
  SWIFT_INLINE_THUNK bool isVeteranId() const;

  inline const static struct _impl_citizenshipCertificate {  // impl struct for case citizenshipCertificate
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::citizenshipCertificate;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } citizenshipCertificate SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO22citizenshipCertificateyA2CmF");
  SWIFT_INLINE_THUNK bool isCitizenshipCertificate() const;

  inline const static struct _impl_myNumberCard {  // impl struct for case myNumberCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::myNumberCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } myNumberCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO12myNumberCardyA2CmF");
  SWIFT_INLINE_THUNK bool isMyNumberCard() const;

  inline const static struct _impl_consularPassport {  // impl struct for case consularPassport
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::consularPassport;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } consularPassport SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO16consularPassportyA2CmF");
  SWIFT_INLINE_THUNK bool isConsularPassport() const;

  inline const static struct _impl_minorsPassport {  // impl struct for case minorsPassport
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::minorsPassport;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } minorsPassport SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO14minorsPassportyA2CmF");
  SWIFT_INLINE_THUNK bool isMinorsPassport() const;

  inline const static struct _impl_minorsPublicServicesCard {  // impl struct for case minorsPublicServicesCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::minorsPublicServicesCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } minorsPublicServicesCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO24minorsPublicServicesCardyA2CmF");
  SWIFT_INLINE_THUNK bool isMinorsPublicServicesCard() const;

  inline const static struct _impl_drivingPrivilegeCard {  // impl struct for case drivingPrivilegeCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::drivingPrivilegeCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } drivingPrivilegeCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO20drivingPrivilegeCardyA2CmF");
  SWIFT_INLINE_THUNK bool isDrivingPrivilegeCard() const;

  inline const static struct _impl_asylumRequest {  // impl struct for case asylumRequest
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::asylumRequest;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } asylumRequest SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO13asylumRequestyA2CmF");
  SWIFT_INLINE_THUNK bool isAsylumRequest() const;

  inline const static struct _impl_driverQualificationCard {  // impl struct for case driverQualificationCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::driverQualificationCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } driverQualificationCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO23driverQualificationCardyA2CmF");
  SWIFT_INLINE_THUNK bool isDriverQualificationCard() const;

  inline const static struct _impl_provisionalDl {  // impl struct for case provisionalDl
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::provisionalDl;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } provisionalDl SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO13provisionalDlyA2CmF");
  SWIFT_INLINE_THUNK bool isProvisionalDl() const;

  inline const static struct _impl_refugeePassport {  // impl struct for case refugeePassport
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::refugeePassport;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } refugeePassport SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO15refugeePassportyA2CmF");
  SWIFT_INLINE_THUNK bool isRefugeePassport() const;

  inline const static struct _impl_specialId {  // impl struct for case specialId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::specialId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } specialId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO9specialIdyA2CmF");
  SWIFT_INLINE_THUNK bool isSpecialId() const;

  inline const static struct _impl_uniformedServicesId {  // impl struct for case uniformedServicesId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::uniformedServicesId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } uniformedServicesId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO19uniformedServicesIdyA2CmF");
  SWIFT_INLINE_THUNK bool isUniformedServicesId() const;

  inline const static struct _impl_immigrantVisa {  // impl struct for case immigrantVisa
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::immigrantVisa;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } immigrantVisa SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO13immigrantVisayA2CmF");
  SWIFT_INLINE_THUNK bool isImmigrantVisa() const;

  inline const static struct _impl_consularVoterId {  // impl struct for case consularVoterId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::consularVoterId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } consularVoterId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO15consularVoterIdyA2CmF");
  SWIFT_INLINE_THUNK bool isConsularVoterId() const;

  inline const static struct _impl_twicCard {  // impl struct for case twicCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::twicCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } twicCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO8twicCardyA2CmF");
  SWIFT_INLINE_THUNK bool isTwicCard() const;

  inline const static struct _impl_exitEntryPermit {  // impl struct for case exitEntryPermit
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::exitEntryPermit;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } exitEntryPermit SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO15exitEntryPermityA2CmF");
  SWIFT_INLINE_THUNK bool isExitEntryPermit() const;

  inline const static struct _impl_mainlandTravelPermitTaiwan {  // impl struct for case mainlandTravelPermitTaiwan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mainlandTravelPermitTaiwan;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } mainlandTravelPermitTaiwan SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO26mainlandTravelPermitTaiwanyA2CmF");
  SWIFT_INLINE_THUNK bool isMainlandTravelPermitTaiwan() const;

  inline const static struct _impl_nbiClearance {  // impl struct for case nbiClearance
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nbiClearance;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } nbiClearance SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO12nbiClearanceyA2CmF");
  SWIFT_INLINE_THUNK bool isNbiClearance() const;

  inline const static struct _impl_proofOfRegistration {  // impl struct for case proofOfRegistration
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::proofOfRegistration;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } proofOfRegistration SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO19proofOfRegistrationyA2CmF");
  SWIFT_INLINE_THUNK bool isProofOfRegistration() const;

  inline const static struct _impl_temporaryProtectionPermit {  // impl struct for case temporaryProtectionPermit
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::temporaryProtectionPermit;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } temporaryProtectionPermit SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO25temporaryProtectionPermityA2CmF");
  SWIFT_INLINE_THUNK bool isTemporaryProtectionPermit() const;

  inline const static struct _impl_afghanCitizenCard {  // impl struct for case afghanCitizenCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::afghanCitizenCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } afghanCitizenCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO17afghanCitizenCardyA2CmF");
  SWIFT_INLINE_THUNK bool isAfghanCitizenCard() const;

  inline const static struct _impl_eid {  // impl struct for case eid
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::eid;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } eid SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO3eidyA2CmF");
  SWIFT_INLINE_THUNK bool isEid() const;

  inline const static struct _impl_pass {  // impl struct for case pass
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::pass;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } pass SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO4passyA2CmF");
  SWIFT_INLINE_THUNK bool isPass() const;

  inline const static struct _impl_sisId {  // impl struct for case sisId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sisId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } sisId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO5sisIdyA2CmF");
  SWIFT_INLINE_THUNK bool isSisId() const;

  inline const static struct _impl_asicCard {  // impl struct for case asicCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::asicCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } asicCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO8asicCardyA2CmF");
  SWIFT_INLINE_THUNK bool isAsicCard() const;

  inline const static struct _impl_bidoonCard {  // impl struct for case bidoonCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bidoonCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } bidoonCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO10bidoonCardyA2CmF");
  SWIFT_INLINE_THUNK bool isBidoonCard() const;

  inline const static struct _impl_interimHealthInsuranceCard {  // impl struct for case interimHealthInsuranceCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::interimHealthInsuranceCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } interimHealthInsuranceCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO26interimHealthInsuranceCardyA2CmF");
  SWIFT_INLINE_THUNK bool isInterimHealthInsuranceCard() const;

  inline const static struct _impl_nonVoterId {  // impl struct for case nonVoterId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nonVoterId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } nonVoterId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO10nonVoterIdyA2CmF");
  SWIFT_INLINE_THUNK bool isNonVoterId() const;

  inline const static struct _impl_reciprocalHealthInsuranceCard {  // impl struct for case reciprocalHealthInsuranceCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::reciprocalHealthInsuranceCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } reciprocalHealthInsuranceCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO29reciprocalHealthInsuranceCardyA2CmF");
  SWIFT_INLINE_THUNK bool isReciprocalHealthInsuranceCard() const;

  inline const static struct _impl_vehicleRegistration {  // impl struct for case vehicleRegistration
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::vehicleRegistration;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } vehicleRegistration SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO19vehicleRegistrationyA2CmF");
  SWIFT_INLINE_THUNK bool isVehicleRegistration() const;

  inline const static struct _impl_esaadCard {  // impl struct for case esaadCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::esaadCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } esaadCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO9esaadCardyA2CmF");
  SWIFT_INLINE_THUNK bool isEsaadCard() const;

  inline const static struct _impl_registrationCertificate {  // impl struct for case registrationCertificate
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::registrationCertificate;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } registrationCertificate SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO23registrationCertificateyA2CmF");
  SWIFT_INLINE_THUNK bool isRegistrationCertificate() const;

  inline const static struct _impl_medicalMarijuanaId {  // impl struct for case medicalMarijuanaId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::medicalMarijuanaId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } medicalMarijuanaId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO18medicalMarijuanaIdyA2CmF");
  SWIFT_INLINE_THUNK bool isMedicalMarijuanaId() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID12DocumentTypeO4noneyA2CmFWC) return cases::none;
    if (tag == _impl::$s7BlinkID12DocumentTypeO10consularIdyA2CmFWC) return cases::consularId;
    if (tag == _impl::$s7BlinkID12DocumentTypeO2dlyA2CmFWC) return cases::dl;
    if (tag == _impl::$s7BlinkID12DocumentTypeO20dlPublicServicesCardyA2CmFWC) return cases::dlPublicServicesCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO14employmentPassyA2CmFWC) return cases::employmentPass;
    if (tag == _impl::$s7BlinkID12DocumentTypeO7finCardyA2CmFWC) return cases::finCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO2idyA2CmFWC) return cases::id;
    if (tag == _impl::$s7BlinkID12DocumentTypeO14multipurposeIdyA2CmFWC) return cases::multipurposeId;
    if (tag == _impl::$s7BlinkID12DocumentTypeO5myKadyA2CmFWC) return cases::myKad;
    if (tag == _impl::$s7BlinkID12DocumentTypeO5myKidyA2CmFWC) return cases::myKid;
    if (tag == _impl::$s7BlinkID12DocumentTypeO4myPRyA2CmFWC) return cases::myPR;
    if (tag == _impl::$s7BlinkID12DocumentTypeO9myTenterayA2CmFWC) return cases::myTentera;
    if (tag == _impl::$s7BlinkID12DocumentTypeO7panCardyA2CmFWC) return cases::panCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO14professionalIdyA2CmFWC) return cases::professionalId;
    if (tag == _impl::$s7BlinkID12DocumentTypeO18publicServicesCardyA2CmFWC) return cases::publicServicesCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO15residencePermityA2CmFWC) return cases::residencePermit;
    if (tag == _impl::$s7BlinkID12DocumentTypeO10residentIdyA2CmFWC) return cases::residentId;
    if (tag == _impl::$s7BlinkID12DocumentTypeO24temporaryResidencePermityA2CmFWC) return cases::temporaryResidencePermit;
    if (tag == _impl::$s7BlinkID12DocumentTypeO7voterIdyA2CmFWC) return cases::voterId;
    if (tag == _impl::$s7BlinkID12DocumentTypeO10workPermityA2CmFWC) return cases::workPermit;
    if (tag == _impl::$s7BlinkID12DocumentTypeO4iKadyA2CmFWC) return cases::iKad;
    if (tag == _impl::$s7BlinkID12DocumentTypeO10militaryIdyA2CmFWC) return cases::militaryId;
    if (tag == _impl::$s7BlinkID12DocumentTypeO5myKasyA2CmFWC) return cases::myKas;
    if (tag == _impl::$s7BlinkID12DocumentTypeO18socialSecurityCardyA2CmFWC) return cases::socialSecurityCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO19healthInsuranceCardyA2CmFWC) return cases::healthInsuranceCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO8passportyA2CmFWC) return cases::passport;
    if (tag == _impl::$s7BlinkID12DocumentTypeO5sPassyA2CmFWC) return cases::sPass;
    if (tag == _impl::$s7BlinkID12DocumentTypeO11addressCardyA2CmFWC) return cases::addressCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO7alienIdyA2CmFWC) return cases::alienId;
    if (tag == _impl::$s7BlinkID12DocumentTypeO13alienPassportyA2CmFWC) return cases::alienPassport;
    if (tag == _impl::$s7BlinkID12DocumentTypeO9greenCardyA2CmFWC) return cases::greenCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO8minorsIdyA2CmFWC) return cases::minorsId;
    if (tag == _impl::$s7BlinkID12DocumentTypeO8postalIdyA2CmFWC) return cases::postalId;
    if (tag == _impl::$s7BlinkID12DocumentTypeO14professionalDlyA2CmFWC) return cases::professionalDl;
    if (tag == _impl::$s7BlinkID12DocumentTypeO5taxIdyA2CmFWC) return cases::taxId;
    if (tag == _impl::$s7BlinkID12DocumentTypeO12weaponPermityA2CmFWC) return cases::weaponPermit;
    if (tag == _impl::$s7BlinkID12DocumentTypeO4visayA2CmFWC) return cases::visa;
    if (tag == _impl::$s7BlinkID12DocumentTypeO18borderCrossingCardyA2CmFWC) return cases::borderCrossingCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO10driverCardyA2CmFWC) return cases::driverCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO15globalEntryCardyA2CmFWC) return cases::globalEntryCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO7mypolisyA2CmFWC) return cases::mypolis;
    if (tag == _impl::$s7BlinkID12DocumentTypeO9nexusCardyA2CmFWC) return cases::nexusCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO12passportCardyA2CmFWC) return cases::passportCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO14proofOfAgeCardyA2CmFWC) return cases::proofOfAgeCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO9refugeeIdyA2CmFWC) return cases::refugeeId;
    if (tag == _impl::$s7BlinkID12DocumentTypeO8tribalIdyA2CmFWC) return cases::tribalId;
    if (tag == _impl::$s7BlinkID12DocumentTypeO9veteranIdyA2CmFWC) return cases::veteranId;
    if (tag == _impl::$s7BlinkID12DocumentTypeO22citizenshipCertificateyA2CmFWC) return cases::citizenshipCertificate;
    if (tag == _impl::$s7BlinkID12DocumentTypeO12myNumberCardyA2CmFWC) return cases::myNumberCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO16consularPassportyA2CmFWC) return cases::consularPassport;
    if (tag == _impl::$s7BlinkID12DocumentTypeO14minorsPassportyA2CmFWC) return cases::minorsPassport;
    if (tag == _impl::$s7BlinkID12DocumentTypeO24minorsPublicServicesCardyA2CmFWC) return cases::minorsPublicServicesCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO20drivingPrivilegeCardyA2CmFWC) return cases::drivingPrivilegeCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO13asylumRequestyA2CmFWC) return cases::asylumRequest;
    if (tag == _impl::$s7BlinkID12DocumentTypeO23driverQualificationCardyA2CmFWC) return cases::driverQualificationCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO13provisionalDlyA2CmFWC) return cases::provisionalDl;
    if (tag == _impl::$s7BlinkID12DocumentTypeO15refugeePassportyA2CmFWC) return cases::refugeePassport;
    if (tag == _impl::$s7BlinkID12DocumentTypeO9specialIdyA2CmFWC) return cases::specialId;
    if (tag == _impl::$s7BlinkID12DocumentTypeO19uniformedServicesIdyA2CmFWC) return cases::uniformedServicesId;
    if (tag == _impl::$s7BlinkID12DocumentTypeO13immigrantVisayA2CmFWC) return cases::immigrantVisa;
    if (tag == _impl::$s7BlinkID12DocumentTypeO15consularVoterIdyA2CmFWC) return cases::consularVoterId;
    if (tag == _impl::$s7BlinkID12DocumentTypeO8twicCardyA2CmFWC) return cases::twicCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO15exitEntryPermityA2CmFWC) return cases::exitEntryPermit;
    if (tag == _impl::$s7BlinkID12DocumentTypeO26mainlandTravelPermitTaiwanyA2CmFWC) return cases::mainlandTravelPermitTaiwan;
    if (tag == _impl::$s7BlinkID12DocumentTypeO12nbiClearanceyA2CmFWC) return cases::nbiClearance;
    if (tag == _impl::$s7BlinkID12DocumentTypeO19proofOfRegistrationyA2CmFWC) return cases::proofOfRegistration;
    if (tag == _impl::$s7BlinkID12DocumentTypeO25temporaryProtectionPermityA2CmFWC) return cases::temporaryProtectionPermit;
    if (tag == _impl::$s7BlinkID12DocumentTypeO17afghanCitizenCardyA2CmFWC) return cases::afghanCitizenCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO3eidyA2CmFWC) return cases::eid;
    if (tag == _impl::$s7BlinkID12DocumentTypeO4passyA2CmFWC) return cases::pass;
    if (tag == _impl::$s7BlinkID12DocumentTypeO5sisIdyA2CmFWC) return cases::sisId;
    if (tag == _impl::$s7BlinkID12DocumentTypeO8asicCardyA2CmFWC) return cases::asicCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO10bidoonCardyA2CmFWC) return cases::bidoonCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO26interimHealthInsuranceCardyA2CmFWC) return cases::interimHealthInsuranceCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO10nonVoterIdyA2CmFWC) return cases::nonVoterId;
    if (tag == _impl::$s7BlinkID12DocumentTypeO29reciprocalHealthInsuranceCardyA2CmFWC) return cases::reciprocalHealthInsuranceCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO19vehicleRegistrationyA2CmFWC) return cases::vehicleRegistration;
    if (tag == _impl::$s7BlinkID12DocumentTypeO9esaadCardyA2CmFWC) return cases::esaadCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO23registrationCertificateyA2CmFWC) return cases::registrationCertificate;
    if (tag == _impl::$s7BlinkID12DocumentTypeO18medicalMarijuanaIdyA2CmFWC) return cases::medicalMarijuanaId;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<DocumentType> init(const swift::String& rawValue) SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK DocumentType(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DocumentType _make() noexcept {
    auto metadata = _impl::$s7BlinkID12DocumentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DocumentType(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID12DocumentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID12DocumentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID12DocumentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DocumentType;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID12DocumentTypeOD;
  static inline constexpr $s7BlinkID12DocumentTypeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DocumentType {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DocumentType &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DocumentType &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DocumentType returnNewValue(T callable) {
    auto result = DocumentType::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID12DocumentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::DocumentType> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID12DocumentTypeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::DocumentType> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::DocumentType> = true;
template<>
struct implClassFor<BlinkID::DocumentType> { using type = BlinkID::_impl::_impl_DocumentType; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {


template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:7BlinkID16VehicleClassInfoV") VehicleClassInfo;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
static inline const constexpr bool isUsableInGenericContext<BlinkID::VehicleClassInfo<T_0_0>> = isUsableInGenericContext<T_0_0>;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_DriverLicenseDetailedInfo;

static_assert(1 <= 3, "unsupported generic requirement list for metadata func");
// Type metadata accessor for DriverLicenseDetailedInfo
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID25DriverLicenseDetailedInfoVMa(swift::_impl::MetadataRequestTy, void * _Nonnull) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:7BlinkID25DriverLicenseDetailedInfoV") DriverLicenseDetailedInfo final {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK ~DriverLicenseDetailedInfo() noexcept {
    auto metadata = _impl::$s7BlinkID25DriverLicenseDetailedInfoVMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DriverLicenseDetailedInfo(const DriverLicenseDetailedInfo &other) noexcept {
    auto metadata = _impl::$s7BlinkID25DriverLicenseDetailedInfoVMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DriverLicenseDetailedInfo &operator =(const DriverLicenseDetailedInfo &other) noexcept {
    auto metadata = _impl::$s7BlinkID25DriverLicenseDetailedInfoVMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DriverLicenseDetailedInfo &operator =(DriverLicenseDetailedInfo &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DriverLicenseDetailedInfo(DriverLicenseDetailedInfo &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Optional<T_0_0> getRestrictions() const SWIFT_SYMBOL("s:7BlinkID25DriverLicenseDetailedInfoV12restrictionsxSgvp");
  SWIFT_INLINE_THUNK swift::Optional<T_0_0> getEndorsements() const SWIFT_SYMBOL("s:7BlinkID25DriverLicenseDetailedInfoV12endorsementsxSgvp");
  SWIFT_INLINE_THUNK swift::Optional<T_0_0> getVehicleClass() const SWIFT_SYMBOL("s:7BlinkID25DriverLicenseDetailedInfoV12vehicleClassxSgvp");
  SWIFT_INLINE_THUNK swift::Optional<T_0_0> getConditions() const SWIFT_SYMBOL("s:7BlinkID25DriverLicenseDetailedInfoV10conditionsxSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::Array<VehicleClassInfo<T_0_0>>> getVehicleClassesInfo() const SWIFT_SYMBOL("s:7BlinkID25DriverLicenseDetailedInfoV014vehicleClassesF0SayAA012VehicleClassF0VyxGGSgvp");
private:
  SWIFT_INLINE_THUNK DriverLicenseDetailedInfo(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DriverLicenseDetailedInfo _make() noexcept {
    auto metadata = _impl::$s7BlinkID25DriverLicenseDetailedInfoVMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DriverLicenseDetailedInfo(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DriverLicenseDetailedInfo<T_0_0>;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID25DriverLicenseDetailedInfoVyxGD;
  static inline constexpr $s7BlinkID25DriverLicenseDetailedInfoVyxGD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_DriverLicenseDetailedInfo {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DriverLicenseDetailedInfo<T_0_0> &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DriverLicenseDetailedInfo<T_0_0> &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DriverLicenseDetailedInfo<T_0_0> returnNewValue(T callable) {
    auto result = DriverLicenseDetailedInfo<T_0_0>::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID25DriverLicenseDetailedInfoVMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
struct TypeMetadataTrait<BlinkID::DriverLicenseDetailedInfo<T_0_0>> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID25DriverLicenseDetailedInfoVMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata())._0;
  }
};
namespace _impl{
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
static inline const constexpr bool isOpaqueLayout<BlinkID::DriverLicenseDetailedInfo<T_0_0>> = true;
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

namespace _impl {

class _impl_FieldState;

// Type metadata accessor for FieldState
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID10FieldStateVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID10FieldStateV") FieldState final {
public:
  SWIFT_INLINE_THUNK ~FieldState() noexcept {
    auto metadata = _impl::$s7BlinkID10FieldStateVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK FieldState(const FieldState &other) noexcept {
    auto metadata = _impl::$s7BlinkID10FieldStateVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK FieldState &operator =(const FieldState &other) noexcept {
    auto metadata = _impl::$s7BlinkID10FieldStateVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK FieldState &operator =(FieldState &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER FieldState(FieldState &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK DataMatchFieldType getFieldType() const SWIFT_SYMBOL("s:7BlinkID10FieldStateV9fieldTypeAA09DataMatchcF0Ovp");
  SWIFT_INLINE_THUNK DataMatchState getState() const SWIFT_SYMBOL("s:7BlinkID10FieldStateV5stateAA09DataMatchD0Ovp");
private:
  SWIFT_INLINE_THUNK FieldState(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK FieldState _make() noexcept {
    auto metadata = _impl::$s7BlinkID10FieldStateVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return FieldState(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_FieldState;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID10FieldStateVD;
  static inline constexpr $s7BlinkID10FieldStateVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_FieldState {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(FieldState &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const FieldState &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER FieldState returnNewValue(T callable) {
    auto result = FieldState::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID10FieldStateVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::FieldState> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID10FieldStateVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::FieldState> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::FieldState> = true;
template<>
struct implClassFor<BlinkID::FieldState> { using type = BlinkID::_impl::_impl_FieldState; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

namespace _impl {

class _impl_FieldType;

// Type metadata accessor for FieldType
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID9FieldTypeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum FieldType
extern "C" {
extern unsigned $s7BlinkID9FieldTypeO28additionalAddressInformationyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO25additionalNameInformationyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO36additionalOptionalAddressInformationyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO26additionalPersonalIdNumberyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO7addressyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO18classEffectiveDateyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO15classExpiryDateyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO10conditionsyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO11dateOfBirthyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO12dateOfExpiryyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO11dateOfIssueyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO24documentAdditionalNumberyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO32documentOptionalAdditionalNumberyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO14documentNumberyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO8employeryA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO12endorsementsyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO11fathersNameyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO9firstNameyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO8fullNameyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO16issuingAuthorityyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO8lastNameyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO07licenceD0yA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO13localizedNameyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO13maritalStatusyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO11mothersNameyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO3mrzyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO11nationalityyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO16personalIdNumberyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO12placeOfBirthyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO10professionyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO4raceyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO8religionyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO17residentialStatusyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO12restrictionsyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO3sexyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO12vehicleClassyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO05bloodD0yA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO7sponsoryA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO04visaD0yA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO15documentSubtypeyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO7remarksyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO015residencePermitD0yA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO17manufacturingYearyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO07vehicleD0yA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO20dependentDateOfBirthyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO12dependentSexyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO23dependentDocumentNumberyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO17dependentFullNameyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO19eligibilityCategoryyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO24specificDocumentValidityyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO12vehicleOwneryA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID9FieldTypeO") FieldType final {
public:
  SWIFT_INLINE_THUNK ~FieldType() noexcept {
    auto metadata = _impl::$s7BlinkID9FieldTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK FieldType(const FieldType &other) noexcept {
    auto metadata = _impl::$s7BlinkID9FieldTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK FieldType &operator =(const FieldType &other) noexcept {
    auto metadata = _impl::$s7BlinkID9FieldTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK FieldType &operator =(FieldType &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER FieldType(FieldType &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    additionalAddressInformation SWIFT_SYMBOL("s:7BlinkID9FieldTypeO28additionalAddressInformationyA2CmF"),
    additionalNameInformation SWIFT_SYMBOL("s:7BlinkID9FieldTypeO25additionalNameInformationyA2CmF"),
    additionalOptionalAddressInformation SWIFT_SYMBOL("s:7BlinkID9FieldTypeO36additionalOptionalAddressInformationyA2CmF"),
    additionalPersonalIdNumber SWIFT_SYMBOL("s:7BlinkID9FieldTypeO26additionalPersonalIdNumberyA2CmF"),
    address SWIFT_SYMBOL("s:7BlinkID9FieldTypeO7addressyA2CmF"),
    classEffectiveDate SWIFT_SYMBOL("s:7BlinkID9FieldTypeO18classEffectiveDateyA2CmF"),
    classExpiryDate SWIFT_SYMBOL("s:7BlinkID9FieldTypeO15classExpiryDateyA2CmF"),
    conditions SWIFT_SYMBOL("s:7BlinkID9FieldTypeO10conditionsyA2CmF"),
    dateOfBirth SWIFT_SYMBOL("s:7BlinkID9FieldTypeO11dateOfBirthyA2CmF"),
    dateOfExpiry SWIFT_SYMBOL("s:7BlinkID9FieldTypeO12dateOfExpiryyA2CmF"),
    dateOfIssue SWIFT_SYMBOL("s:7BlinkID9FieldTypeO11dateOfIssueyA2CmF"),
    documentAdditionalNumber SWIFT_SYMBOL("s:7BlinkID9FieldTypeO24documentAdditionalNumberyA2CmF"),
    documentOptionalAdditionalNumber SWIFT_SYMBOL("s:7BlinkID9FieldTypeO32documentOptionalAdditionalNumberyA2CmF"),
    documentNumber SWIFT_SYMBOL("s:7BlinkID9FieldTypeO14documentNumberyA2CmF"),
    employer SWIFT_SYMBOL("s:7BlinkID9FieldTypeO8employeryA2CmF"),
    endorsements SWIFT_SYMBOL("s:7BlinkID9FieldTypeO12endorsementsyA2CmF"),
    fathersName SWIFT_SYMBOL("s:7BlinkID9FieldTypeO11fathersNameyA2CmF"),
    firstName SWIFT_SYMBOL("s:7BlinkID9FieldTypeO9firstNameyA2CmF"),
    fullName SWIFT_SYMBOL("s:7BlinkID9FieldTypeO8fullNameyA2CmF"),
    issuingAuthority SWIFT_SYMBOL("s:7BlinkID9FieldTypeO16issuingAuthorityyA2CmF"),
    lastName SWIFT_SYMBOL("s:7BlinkID9FieldTypeO8lastNameyA2CmF"),
    licenceType SWIFT_SYMBOL("s:7BlinkID9FieldTypeO07licenceD0yA2CmF"),
    localizedName SWIFT_SYMBOL("s:7BlinkID9FieldTypeO13localizedNameyA2CmF"),
    maritalStatus SWIFT_SYMBOL("s:7BlinkID9FieldTypeO13maritalStatusyA2CmF"),
    mothersName SWIFT_SYMBOL("s:7BlinkID9FieldTypeO11mothersNameyA2CmF"),
    mrz SWIFT_SYMBOL("s:7BlinkID9FieldTypeO3mrzyA2CmF"),
    nationality SWIFT_SYMBOL("s:7BlinkID9FieldTypeO11nationalityyA2CmF"),
    personalIdNumber SWIFT_SYMBOL("s:7BlinkID9FieldTypeO16personalIdNumberyA2CmF"),
    placeOfBirth SWIFT_SYMBOL("s:7BlinkID9FieldTypeO12placeOfBirthyA2CmF"),
    profession SWIFT_SYMBOL("s:7BlinkID9FieldTypeO10professionyA2CmF"),
    race SWIFT_SYMBOL("s:7BlinkID9FieldTypeO4raceyA2CmF"),
    religion SWIFT_SYMBOL("s:7BlinkID9FieldTypeO8religionyA2CmF"),
    residentialStatus SWIFT_SYMBOL("s:7BlinkID9FieldTypeO17residentialStatusyA2CmF"),
    restrictions SWIFT_SYMBOL("s:7BlinkID9FieldTypeO12restrictionsyA2CmF"),
    sex SWIFT_SYMBOL("s:7BlinkID9FieldTypeO3sexyA2CmF"),
    vehicleClass SWIFT_SYMBOL("s:7BlinkID9FieldTypeO12vehicleClassyA2CmF"),
    bloodType SWIFT_SYMBOL("s:7BlinkID9FieldTypeO05bloodD0yA2CmF"),
    sponsor SWIFT_SYMBOL("s:7BlinkID9FieldTypeO7sponsoryA2CmF"),
    visaType SWIFT_SYMBOL("s:7BlinkID9FieldTypeO04visaD0yA2CmF"),
    documentSubtype SWIFT_SYMBOL("s:7BlinkID9FieldTypeO15documentSubtypeyA2CmF"),
    remarks SWIFT_SYMBOL("s:7BlinkID9FieldTypeO7remarksyA2CmF"),
    residencePermitType SWIFT_SYMBOL("s:7BlinkID9FieldTypeO015residencePermitD0yA2CmF"),
    manufacturingYear SWIFT_SYMBOL("s:7BlinkID9FieldTypeO17manufacturingYearyA2CmF"),
    vehicleType SWIFT_SYMBOL("s:7BlinkID9FieldTypeO07vehicleD0yA2CmF"),
    dependentDateOfBirth SWIFT_SYMBOL("s:7BlinkID9FieldTypeO20dependentDateOfBirthyA2CmF"),
    dependentSex SWIFT_SYMBOL("s:7BlinkID9FieldTypeO12dependentSexyA2CmF"),
    dependentDocumentNumber SWIFT_SYMBOL("s:7BlinkID9FieldTypeO23dependentDocumentNumberyA2CmF"),
    dependentFullName SWIFT_SYMBOL("s:7BlinkID9FieldTypeO17dependentFullNameyA2CmF"),
    eligibilityCategory SWIFT_SYMBOL("s:7BlinkID9FieldTypeO19eligibilityCategoryyA2CmF"),
    specificDocumentValidity SWIFT_SYMBOL("s:7BlinkID9FieldTypeO24specificDocumentValidityyA2CmF"),
    vehicleOwner SWIFT_SYMBOL("s:7BlinkID9FieldTypeO12vehicleOwneryA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_additionalAddressInformation {  // impl struct for case additionalAddressInformation
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::additionalAddressInformation;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } additionalAddressInformation SWIFT_SYMBOL("s:7BlinkID9FieldTypeO28additionalAddressInformationyA2CmF");
  SWIFT_INLINE_THUNK bool isAdditionalAddressInformation() const;

  inline const static struct _impl_additionalNameInformation {  // impl struct for case additionalNameInformation
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::additionalNameInformation;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } additionalNameInformation SWIFT_SYMBOL("s:7BlinkID9FieldTypeO25additionalNameInformationyA2CmF");
  SWIFT_INLINE_THUNK bool isAdditionalNameInformation() const;

  inline const static struct _impl_additionalOptionalAddressInformation {  // impl struct for case additionalOptionalAddressInformation
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::additionalOptionalAddressInformation;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } additionalOptionalAddressInformation SWIFT_SYMBOL("s:7BlinkID9FieldTypeO36additionalOptionalAddressInformationyA2CmF");
  SWIFT_INLINE_THUNK bool isAdditionalOptionalAddressInformation() const;

  inline const static struct _impl_additionalPersonalIdNumber {  // impl struct for case additionalPersonalIdNumber
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::additionalPersonalIdNumber;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } additionalPersonalIdNumber SWIFT_SYMBOL("s:7BlinkID9FieldTypeO26additionalPersonalIdNumberyA2CmF");
  SWIFT_INLINE_THUNK bool isAdditionalPersonalIdNumber() const;

  inline const static struct _impl_address {  // impl struct for case address
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::address;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } address SWIFT_SYMBOL("s:7BlinkID9FieldTypeO7addressyA2CmF");
  SWIFT_INLINE_THUNK bool isAddress() const;

  inline const static struct _impl_classEffectiveDate {  // impl struct for case classEffectiveDate
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::classEffectiveDate;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } classEffectiveDate SWIFT_SYMBOL("s:7BlinkID9FieldTypeO18classEffectiveDateyA2CmF");
  SWIFT_INLINE_THUNK bool isClassEffectiveDate() const;

  inline const static struct _impl_classExpiryDate {  // impl struct for case classExpiryDate
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::classExpiryDate;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } classExpiryDate SWIFT_SYMBOL("s:7BlinkID9FieldTypeO15classExpiryDateyA2CmF");
  SWIFT_INLINE_THUNK bool isClassExpiryDate() const;

  inline const static struct _impl_conditions {  // impl struct for case conditions
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::conditions;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } conditions SWIFT_SYMBOL("s:7BlinkID9FieldTypeO10conditionsyA2CmF");
  SWIFT_INLINE_THUNK bool isConditions() const;

  inline const static struct _impl_dateOfBirth {  // impl struct for case dateOfBirth
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dateOfBirth;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } dateOfBirth SWIFT_SYMBOL("s:7BlinkID9FieldTypeO11dateOfBirthyA2CmF");
  SWIFT_INLINE_THUNK bool isDateOfBirth() const;

  inline const static struct _impl_dateOfExpiry {  // impl struct for case dateOfExpiry
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dateOfExpiry;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } dateOfExpiry SWIFT_SYMBOL("s:7BlinkID9FieldTypeO12dateOfExpiryyA2CmF");
  SWIFT_INLINE_THUNK bool isDateOfExpiry() const;

  inline const static struct _impl_dateOfIssue {  // impl struct for case dateOfIssue
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dateOfIssue;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } dateOfIssue SWIFT_SYMBOL("s:7BlinkID9FieldTypeO11dateOfIssueyA2CmF");
  SWIFT_INLINE_THUNK bool isDateOfIssue() const;

  inline const static struct _impl_documentAdditionalNumber {  // impl struct for case documentAdditionalNumber
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::documentAdditionalNumber;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } documentAdditionalNumber SWIFT_SYMBOL("s:7BlinkID9FieldTypeO24documentAdditionalNumberyA2CmF");
  SWIFT_INLINE_THUNK bool isDocumentAdditionalNumber() const;

  inline const static struct _impl_documentOptionalAdditionalNumber {  // impl struct for case documentOptionalAdditionalNumber
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::documentOptionalAdditionalNumber;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } documentOptionalAdditionalNumber SWIFT_SYMBOL("s:7BlinkID9FieldTypeO32documentOptionalAdditionalNumberyA2CmF");
  SWIFT_INLINE_THUNK bool isDocumentOptionalAdditionalNumber() const;

  inline const static struct _impl_documentNumber {  // impl struct for case documentNumber
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::documentNumber;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } documentNumber SWIFT_SYMBOL("s:7BlinkID9FieldTypeO14documentNumberyA2CmF");
  SWIFT_INLINE_THUNK bool isDocumentNumber() const;

  inline const static struct _impl_employer {  // impl struct for case employer
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::employer;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } employer SWIFT_SYMBOL("s:7BlinkID9FieldTypeO8employeryA2CmF");
  SWIFT_INLINE_THUNK bool isEmployer() const;

  inline const static struct _impl_endorsements {  // impl struct for case endorsements
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::endorsements;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } endorsements SWIFT_SYMBOL("s:7BlinkID9FieldTypeO12endorsementsyA2CmF");
  SWIFT_INLINE_THUNK bool isEndorsements() const;

  inline const static struct _impl_fathersName {  // impl struct for case fathersName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::fathersName;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } fathersName SWIFT_SYMBOL("s:7BlinkID9FieldTypeO11fathersNameyA2CmF");
  SWIFT_INLINE_THUNK bool isFathersName() const;

  inline const static struct _impl_firstName {  // impl struct for case firstName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::firstName;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } firstName SWIFT_SYMBOL("s:7BlinkID9FieldTypeO9firstNameyA2CmF");
  SWIFT_INLINE_THUNK bool isFirstName() const;

  inline const static struct _impl_fullName {  // impl struct for case fullName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::fullName;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } fullName SWIFT_SYMBOL("s:7BlinkID9FieldTypeO8fullNameyA2CmF");
  SWIFT_INLINE_THUNK bool isFullName() const;

  inline const static struct _impl_issuingAuthority {  // impl struct for case issuingAuthority
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::issuingAuthority;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } issuingAuthority SWIFT_SYMBOL("s:7BlinkID9FieldTypeO16issuingAuthorityyA2CmF");
  SWIFT_INLINE_THUNK bool isIssuingAuthority() const;

  inline const static struct _impl_lastName {  // impl struct for case lastName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::lastName;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } lastName SWIFT_SYMBOL("s:7BlinkID9FieldTypeO8lastNameyA2CmF");
  SWIFT_INLINE_THUNK bool isLastName() const;

  inline const static struct _impl_licenceType {  // impl struct for case licenceType
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::licenceType;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } licenceType SWIFT_SYMBOL("s:7BlinkID9FieldTypeO07licenceD0yA2CmF");
  SWIFT_INLINE_THUNK bool isLicenceType() const;

  inline const static struct _impl_localizedName {  // impl struct for case localizedName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::localizedName;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } localizedName SWIFT_SYMBOL("s:7BlinkID9FieldTypeO13localizedNameyA2CmF");
  SWIFT_INLINE_THUNK bool isLocalizedName() const;

  inline const static struct _impl_maritalStatus {  // impl struct for case maritalStatus
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::maritalStatus;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } maritalStatus SWIFT_SYMBOL("s:7BlinkID9FieldTypeO13maritalStatusyA2CmF");
  SWIFT_INLINE_THUNK bool isMaritalStatus() const;

  inline const static struct _impl_mothersName {  // impl struct for case mothersName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mothersName;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } mothersName SWIFT_SYMBOL("s:7BlinkID9FieldTypeO11mothersNameyA2CmF");
  SWIFT_INLINE_THUNK bool isMothersName() const;

  inline const static struct _impl_mrz {  // impl struct for case mrz
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mrz;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } mrz SWIFT_SYMBOL("s:7BlinkID9FieldTypeO3mrzyA2CmF");
  SWIFT_INLINE_THUNK bool isMrz() const;

  inline const static struct _impl_nationality {  // impl struct for case nationality
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nationality;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } nationality SWIFT_SYMBOL("s:7BlinkID9FieldTypeO11nationalityyA2CmF");
  SWIFT_INLINE_THUNK bool isNationality() const;

  inline const static struct _impl_personalIdNumber {  // impl struct for case personalIdNumber
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::personalIdNumber;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } personalIdNumber SWIFT_SYMBOL("s:7BlinkID9FieldTypeO16personalIdNumberyA2CmF");
  SWIFT_INLINE_THUNK bool isPersonalIdNumber() const;

  inline const static struct _impl_placeOfBirth {  // impl struct for case placeOfBirth
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::placeOfBirth;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } placeOfBirth SWIFT_SYMBOL("s:7BlinkID9FieldTypeO12placeOfBirthyA2CmF");
  SWIFT_INLINE_THUNK bool isPlaceOfBirth() const;

  inline const static struct _impl_profession {  // impl struct for case profession
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::profession;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } profession SWIFT_SYMBOL("s:7BlinkID9FieldTypeO10professionyA2CmF");
  SWIFT_INLINE_THUNK bool isProfession() const;

  inline const static struct _impl_race {  // impl struct for case race
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::race;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } race SWIFT_SYMBOL("s:7BlinkID9FieldTypeO4raceyA2CmF");
  SWIFT_INLINE_THUNK bool isRace() const;

  inline const static struct _impl_religion {  // impl struct for case religion
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::religion;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } religion SWIFT_SYMBOL("s:7BlinkID9FieldTypeO8religionyA2CmF");
  SWIFT_INLINE_THUNK bool isReligion() const;

  inline const static struct _impl_residentialStatus {  // impl struct for case residentialStatus
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::residentialStatus;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } residentialStatus SWIFT_SYMBOL("s:7BlinkID9FieldTypeO17residentialStatusyA2CmF");
  SWIFT_INLINE_THUNK bool isResidentialStatus() const;

  inline const static struct _impl_restrictions {  // impl struct for case restrictions
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::restrictions;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } restrictions SWIFT_SYMBOL("s:7BlinkID9FieldTypeO12restrictionsyA2CmF");
  SWIFT_INLINE_THUNK bool isRestrictions() const;

  inline const static struct _impl_sex {  // impl struct for case sex
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sex;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } sex SWIFT_SYMBOL("s:7BlinkID9FieldTypeO3sexyA2CmF");
  SWIFT_INLINE_THUNK bool isSex() const;

  inline const static struct _impl_vehicleClass {  // impl struct for case vehicleClass
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::vehicleClass;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } vehicleClass SWIFT_SYMBOL("s:7BlinkID9FieldTypeO12vehicleClassyA2CmF");
  SWIFT_INLINE_THUNK bool isVehicleClass() const;

  inline const static struct _impl_bloodType {  // impl struct for case bloodType
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bloodType;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } bloodType SWIFT_SYMBOL("s:7BlinkID9FieldTypeO05bloodD0yA2CmF");
  SWIFT_INLINE_THUNK bool isBloodType() const;

  inline const static struct _impl_sponsor {  // impl struct for case sponsor
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sponsor;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } sponsor SWIFT_SYMBOL("s:7BlinkID9FieldTypeO7sponsoryA2CmF");
  SWIFT_INLINE_THUNK bool isSponsor() const;

  inline const static struct _impl_visaType {  // impl struct for case visaType
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::visaType;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } visaType SWIFT_SYMBOL("s:7BlinkID9FieldTypeO04visaD0yA2CmF");
  SWIFT_INLINE_THUNK bool isVisaType() const;

  inline const static struct _impl_documentSubtype {  // impl struct for case documentSubtype
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::documentSubtype;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } documentSubtype SWIFT_SYMBOL("s:7BlinkID9FieldTypeO15documentSubtypeyA2CmF");
  SWIFT_INLINE_THUNK bool isDocumentSubtype() const;

  inline const static struct _impl_remarks {  // impl struct for case remarks
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::remarks;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } remarks SWIFT_SYMBOL("s:7BlinkID9FieldTypeO7remarksyA2CmF");
  SWIFT_INLINE_THUNK bool isRemarks() const;

  inline const static struct _impl_residencePermitType {  // impl struct for case residencePermitType
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::residencePermitType;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } residencePermitType SWIFT_SYMBOL("s:7BlinkID9FieldTypeO015residencePermitD0yA2CmF");
  SWIFT_INLINE_THUNK bool isResidencePermitType() const;

  inline const static struct _impl_manufacturingYear {  // impl struct for case manufacturingYear
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::manufacturingYear;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } manufacturingYear SWIFT_SYMBOL("s:7BlinkID9FieldTypeO17manufacturingYearyA2CmF");
  SWIFT_INLINE_THUNK bool isManufacturingYear() const;

  inline const static struct _impl_vehicleType {  // impl struct for case vehicleType
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::vehicleType;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } vehicleType SWIFT_SYMBOL("s:7BlinkID9FieldTypeO07vehicleD0yA2CmF");
  SWIFT_INLINE_THUNK bool isVehicleType() const;

  inline const static struct _impl_dependentDateOfBirth {  // impl struct for case dependentDateOfBirth
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dependentDateOfBirth;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } dependentDateOfBirth SWIFT_SYMBOL("s:7BlinkID9FieldTypeO20dependentDateOfBirthyA2CmF");
  SWIFT_INLINE_THUNK bool isDependentDateOfBirth() const;

  inline const static struct _impl_dependentSex {  // impl struct for case dependentSex
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dependentSex;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } dependentSex SWIFT_SYMBOL("s:7BlinkID9FieldTypeO12dependentSexyA2CmF");
  SWIFT_INLINE_THUNK bool isDependentSex() const;

  inline const static struct _impl_dependentDocumentNumber {  // impl struct for case dependentDocumentNumber
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dependentDocumentNumber;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } dependentDocumentNumber SWIFT_SYMBOL("s:7BlinkID9FieldTypeO23dependentDocumentNumberyA2CmF");
  SWIFT_INLINE_THUNK bool isDependentDocumentNumber() const;

  inline const static struct _impl_dependentFullName {  // impl struct for case dependentFullName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dependentFullName;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } dependentFullName SWIFT_SYMBOL("s:7BlinkID9FieldTypeO17dependentFullNameyA2CmF");
  SWIFT_INLINE_THUNK bool isDependentFullName() const;

  inline const static struct _impl_eligibilityCategory {  // impl struct for case eligibilityCategory
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::eligibilityCategory;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } eligibilityCategory SWIFT_SYMBOL("s:7BlinkID9FieldTypeO19eligibilityCategoryyA2CmF");
  SWIFT_INLINE_THUNK bool isEligibilityCategory() const;

  inline const static struct _impl_specificDocumentValidity {  // impl struct for case specificDocumentValidity
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::specificDocumentValidity;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } specificDocumentValidity SWIFT_SYMBOL("s:7BlinkID9FieldTypeO24specificDocumentValidityyA2CmF");
  SWIFT_INLINE_THUNK bool isSpecificDocumentValidity() const;

  inline const static struct _impl_vehicleOwner {  // impl struct for case vehicleOwner
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::vehicleOwner;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } vehicleOwner SWIFT_SYMBOL("s:7BlinkID9FieldTypeO12vehicleOwneryA2CmF");
  SWIFT_INLINE_THUNK bool isVehicleOwner() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID9FieldTypeO28additionalAddressInformationyA2CmFWC) return cases::additionalAddressInformation;
    if (tag == _impl::$s7BlinkID9FieldTypeO25additionalNameInformationyA2CmFWC) return cases::additionalNameInformation;
    if (tag == _impl::$s7BlinkID9FieldTypeO36additionalOptionalAddressInformationyA2CmFWC) return cases::additionalOptionalAddressInformation;
    if (tag == _impl::$s7BlinkID9FieldTypeO26additionalPersonalIdNumberyA2CmFWC) return cases::additionalPersonalIdNumber;
    if (tag == _impl::$s7BlinkID9FieldTypeO7addressyA2CmFWC) return cases::address;
    if (tag == _impl::$s7BlinkID9FieldTypeO18classEffectiveDateyA2CmFWC) return cases::classEffectiveDate;
    if (tag == _impl::$s7BlinkID9FieldTypeO15classExpiryDateyA2CmFWC) return cases::classExpiryDate;
    if (tag == _impl::$s7BlinkID9FieldTypeO10conditionsyA2CmFWC) return cases::conditions;
    if (tag == _impl::$s7BlinkID9FieldTypeO11dateOfBirthyA2CmFWC) return cases::dateOfBirth;
    if (tag == _impl::$s7BlinkID9FieldTypeO12dateOfExpiryyA2CmFWC) return cases::dateOfExpiry;
    if (tag == _impl::$s7BlinkID9FieldTypeO11dateOfIssueyA2CmFWC) return cases::dateOfIssue;
    if (tag == _impl::$s7BlinkID9FieldTypeO24documentAdditionalNumberyA2CmFWC) return cases::documentAdditionalNumber;
    if (tag == _impl::$s7BlinkID9FieldTypeO32documentOptionalAdditionalNumberyA2CmFWC) return cases::documentOptionalAdditionalNumber;
    if (tag == _impl::$s7BlinkID9FieldTypeO14documentNumberyA2CmFWC) return cases::documentNumber;
    if (tag == _impl::$s7BlinkID9FieldTypeO8employeryA2CmFWC) return cases::employer;
    if (tag == _impl::$s7BlinkID9FieldTypeO12endorsementsyA2CmFWC) return cases::endorsements;
    if (tag == _impl::$s7BlinkID9FieldTypeO11fathersNameyA2CmFWC) return cases::fathersName;
    if (tag == _impl::$s7BlinkID9FieldTypeO9firstNameyA2CmFWC) return cases::firstName;
    if (tag == _impl::$s7BlinkID9FieldTypeO8fullNameyA2CmFWC) return cases::fullName;
    if (tag == _impl::$s7BlinkID9FieldTypeO16issuingAuthorityyA2CmFWC) return cases::issuingAuthority;
    if (tag == _impl::$s7BlinkID9FieldTypeO8lastNameyA2CmFWC) return cases::lastName;
    if (tag == _impl::$s7BlinkID9FieldTypeO07licenceD0yA2CmFWC) return cases::licenceType;
    if (tag == _impl::$s7BlinkID9FieldTypeO13localizedNameyA2CmFWC) return cases::localizedName;
    if (tag == _impl::$s7BlinkID9FieldTypeO13maritalStatusyA2CmFWC) return cases::maritalStatus;
    if (tag == _impl::$s7BlinkID9FieldTypeO11mothersNameyA2CmFWC) return cases::mothersName;
    if (tag == _impl::$s7BlinkID9FieldTypeO3mrzyA2CmFWC) return cases::mrz;
    if (tag == _impl::$s7BlinkID9FieldTypeO11nationalityyA2CmFWC) return cases::nationality;
    if (tag == _impl::$s7BlinkID9FieldTypeO16personalIdNumberyA2CmFWC) return cases::personalIdNumber;
    if (tag == _impl::$s7BlinkID9FieldTypeO12placeOfBirthyA2CmFWC) return cases::placeOfBirth;
    if (tag == _impl::$s7BlinkID9FieldTypeO10professionyA2CmFWC) return cases::profession;
    if (tag == _impl::$s7BlinkID9FieldTypeO4raceyA2CmFWC) return cases::race;
    if (tag == _impl::$s7BlinkID9FieldTypeO8religionyA2CmFWC) return cases::religion;
    if (tag == _impl::$s7BlinkID9FieldTypeO17residentialStatusyA2CmFWC) return cases::residentialStatus;
    if (tag == _impl::$s7BlinkID9FieldTypeO12restrictionsyA2CmFWC) return cases::restrictions;
    if (tag == _impl::$s7BlinkID9FieldTypeO3sexyA2CmFWC) return cases::sex;
    if (tag == _impl::$s7BlinkID9FieldTypeO12vehicleClassyA2CmFWC) return cases::vehicleClass;
    if (tag == _impl::$s7BlinkID9FieldTypeO05bloodD0yA2CmFWC) return cases::bloodType;
    if (tag == _impl::$s7BlinkID9FieldTypeO7sponsoryA2CmFWC) return cases::sponsor;
    if (tag == _impl::$s7BlinkID9FieldTypeO04visaD0yA2CmFWC) return cases::visaType;
    if (tag == _impl::$s7BlinkID9FieldTypeO15documentSubtypeyA2CmFWC) return cases::documentSubtype;
    if (tag == _impl::$s7BlinkID9FieldTypeO7remarksyA2CmFWC) return cases::remarks;
    if (tag == _impl::$s7BlinkID9FieldTypeO015residencePermitD0yA2CmFWC) return cases::residencePermitType;
    if (tag == _impl::$s7BlinkID9FieldTypeO17manufacturingYearyA2CmFWC) return cases::manufacturingYear;
    if (tag == _impl::$s7BlinkID9FieldTypeO07vehicleD0yA2CmFWC) return cases::vehicleType;
    if (tag == _impl::$s7BlinkID9FieldTypeO20dependentDateOfBirthyA2CmFWC) return cases::dependentDateOfBirth;
    if (tag == _impl::$s7BlinkID9FieldTypeO12dependentSexyA2CmFWC) return cases::dependentSex;
    if (tag == _impl::$s7BlinkID9FieldTypeO23dependentDocumentNumberyA2CmFWC) return cases::dependentDocumentNumber;
    if (tag == _impl::$s7BlinkID9FieldTypeO17dependentFullNameyA2CmFWC) return cases::dependentFullName;
    if (tag == _impl::$s7BlinkID9FieldTypeO19eligibilityCategoryyA2CmFWC) return cases::eligibilityCategory;
    if (tag == _impl::$s7BlinkID9FieldTypeO24specificDocumentValidityyA2CmFWC) return cases::specificDocumentValidity;
    if (tag == _impl::$s7BlinkID9FieldTypeO12vehicleOwneryA2CmFWC) return cases::vehicleOwner;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<FieldType> init(const swift::String& rawValue) SWIFT_SYMBOL("s:7BlinkID9FieldTypeO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:7BlinkID9FieldTypeO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK FieldType(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK FieldType _make() noexcept {
    auto metadata = _impl::$s7BlinkID9FieldTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return FieldType(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID9FieldTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID9FieldTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID9FieldTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_FieldType;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID9FieldTypeOD;
  static inline constexpr $s7BlinkID9FieldTypeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_FieldType {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(FieldType &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const FieldType &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER FieldType returnNewValue(T callable) {
    auto result = FieldType::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID9FieldTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::FieldType> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID9FieldTypeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::FieldType> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::FieldType> = true;
template<>
struct implClassFor<BlinkID::FieldType> { using type = BlinkID::_impl::_impl_FieldType; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {



class SWIFT_SYMBOL("s:7BlinkID0A5IDSDKV13ProcessResultV") ProcessResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::ProcessResult> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID12SessionErrorO") SessionError;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::SessionError> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID18FrameProcessResultV") FrameProcessResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::FrameProcessResult> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_FrameProcessResult;

// Type metadata accessor for FrameProcessResult
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID18FrameProcessResultVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID18FrameProcessResultV") FrameProcessResult final {
public:
  SWIFT_INLINE_THUNK ~FrameProcessResult() noexcept {
    auto metadata = _impl::$s7BlinkID18FrameProcessResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK FrameProcessResult(const FrameProcessResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID18FrameProcessResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK FrameProcessResult &operator =(const FrameProcessResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID18FrameProcessResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK FrameProcessResult &operator =(FrameProcessResult &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER FrameProcessResult(FrameProcessResult &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Optional<SessionError> getSessionError() const SWIFT_SYMBOL("s:7BlinkID18FrameProcessResultV12sessionErrorAA07SessionG0OSgvp");
private:
  SWIFT_INLINE_THUNK FrameProcessResult(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK FrameProcessResult _make() noexcept {
    auto metadata = _impl::$s7BlinkID18FrameProcessResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return FrameProcessResult(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_FrameProcessResult;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID18FrameProcessResultVD;
  static inline constexpr $s7BlinkID18FrameProcessResultVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_FrameProcessResult {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(FrameProcessResult &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const FrameProcessResult &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER FrameProcessResult returnNewValue(T callable) {
    auto result = FrameProcessResult::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID18FrameProcessResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::FrameProcessResult> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID18FrameProcessResultVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::FrameProcessResult> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::FrameProcessResult> = true;
template<>
struct implClassFor<BlinkID::FrameProcessResult> { using type = BlinkID::_impl::_impl_FrameProcessResult; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID28ImageAnalysisDetectionStatusO") ImageAnalysisDetectionStatus;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::ImageAnalysisDetectionStatus> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
/// Detection status determined from the scanned image.
namespace _impl {

class _impl_ImageAnalysisDetectionStatus;

// Type metadata accessor for ImageAnalysisDetectionStatus
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID28ImageAnalysisDetectionStatusOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum ImageAnalysisDetectionStatus
extern "C" {
extern unsigned $s7BlinkID28ImageAnalysisDetectionStatusO12notAvailableyA2CmFWC;
extern unsigned $s7BlinkID28ImageAnalysisDetectionStatusO11notDetectedyA2CmFWC;
extern unsigned $s7BlinkID28ImageAnalysisDetectionStatusO8detectedyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID28ImageAnalysisDetectionStatusO") ImageAnalysisDetectionStatus final {
public:
  SWIFT_INLINE_THUNK ~ImageAnalysisDetectionStatus() noexcept {
    auto metadata = _impl::$s7BlinkID28ImageAnalysisDetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus(const ImageAnalysisDetectionStatus &other) noexcept {
    auto metadata = _impl::$s7BlinkID28ImageAnalysisDetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus &operator =(const ImageAnalysisDetectionStatus &other) noexcept {
    auto metadata = _impl::$s7BlinkID28ImageAnalysisDetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus &operator =(ImageAnalysisDetectionStatus &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ImageAnalysisDetectionStatus(ImageAnalysisDetectionStatus &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    notAvailable SWIFT_SYMBOL("s:7BlinkID28ImageAnalysisDetectionStatusO12notAvailableyA2CmF"),
    notDetected SWIFT_SYMBOL("s:7BlinkID28ImageAnalysisDetectionStatusO11notDetectedyA2CmF"),
    detected SWIFT_SYMBOL("s:7BlinkID28ImageAnalysisDetectionStatusO8detectedyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_notAvailable {  // impl struct for case notAvailable
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::notAvailable;
    }
    SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus operator()() const;
  } notAvailable SWIFT_SYMBOL("s:7BlinkID28ImageAnalysisDetectionStatusO12notAvailableyA2CmF");
  SWIFT_INLINE_THUNK bool isNotAvailable() const;

  inline const static struct _impl_notDetected {  // impl struct for case notDetected
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::notDetected;
    }
    SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus operator()() const;
  } notDetected SWIFT_SYMBOL("s:7BlinkID28ImageAnalysisDetectionStatusO11notDetectedyA2CmF");
  SWIFT_INLINE_THUNK bool isNotDetected() const;

  inline const static struct _impl_detected {  // impl struct for case detected
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::detected;
    }
    SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus operator()() const;
  } detected SWIFT_SYMBOL("s:7BlinkID28ImageAnalysisDetectionStatusO8detectedyA2CmF");
  SWIFT_INLINE_THUNK bool isDetected() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID28ImageAnalysisDetectionStatusO12notAvailableyA2CmFWC) return cases::notAvailable;
    if (tag == _impl::$s7BlinkID28ImageAnalysisDetectionStatusO11notDetectedyA2CmFWC) return cases::notDetected;
    if (tag == _impl::$s7BlinkID28ImageAnalysisDetectionStatusO8detectedyA2CmFWC) return cases::detected;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<ImageAnalysisDetectionStatus> init(swift::Int rawValue) SWIFT_SYMBOL("s:7BlinkID28ImageAnalysisDetectionStatusO8rawValueACSgSi_tcfc");
  SWIFT_INLINE_THUNK swift::Int getRawValue() const SWIFT_SYMBOL("s:7BlinkID28ImageAnalysisDetectionStatusO8rawValueSivp");
private:
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus _make() noexcept {
    auto metadata = _impl::$s7BlinkID28ImageAnalysisDetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ImageAnalysisDetectionStatus(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID28ImageAnalysisDetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID28ImageAnalysisDetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID28ImageAnalysisDetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ImageAnalysisDetectionStatus;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID28ImageAnalysisDetectionStatusOD;
  static inline constexpr $s7BlinkID28ImageAnalysisDetectionStatusOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ImageAnalysisDetectionStatus {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ImageAnalysisDetectionStatus &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ImageAnalysisDetectionStatus &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ImageAnalysisDetectionStatus returnNewValue(T callable) {
    auto result = ImageAnalysisDetectionStatus::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID28ImageAnalysisDetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::ImageAnalysisDetectionStatus> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID28ImageAnalysisDetectionStatusOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::ImageAnalysisDetectionStatus> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::ImageAnalysisDetectionStatus> = true;
template<>
struct implClassFor<BlinkID::ImageAnalysisDetectionStatus> { using type = BlinkID::_impl::_impl_ImageAnalysisDetectionStatus; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID27ImageAnalysisLightingStatusO") ImageAnalysisLightingStatus;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::ImageAnalysisLightingStatus> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
/// Defines possible lighting statuses.
namespace _impl {

class _impl_ImageAnalysisLightingStatus;

// Type metadata accessor for ImageAnalysisLightingStatus
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID27ImageAnalysisLightingStatusOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum ImageAnalysisLightingStatus
extern "C" {
extern unsigned $s7BlinkID27ImageAnalysisLightingStatusO12notAvailableyA2CmFWC;
extern unsigned $s7BlinkID27ImageAnalysisLightingStatusO9tooBrightyA2CmFWC;
extern unsigned $s7BlinkID27ImageAnalysisLightingStatusO7tooDarkyA2CmFWC;
extern unsigned $s7BlinkID27ImageAnalysisLightingStatusO6normalyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID27ImageAnalysisLightingStatusO") ImageAnalysisLightingStatus final {
public:
  SWIFT_INLINE_THUNK ~ImageAnalysisLightingStatus() noexcept {
    auto metadata = _impl::$s7BlinkID27ImageAnalysisLightingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ImageAnalysisLightingStatus(const ImageAnalysisLightingStatus &other) noexcept {
    auto metadata = _impl::$s7BlinkID27ImageAnalysisLightingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ImageAnalysisLightingStatus &operator =(const ImageAnalysisLightingStatus &other) noexcept {
    auto metadata = _impl::$s7BlinkID27ImageAnalysisLightingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ImageAnalysisLightingStatus &operator =(ImageAnalysisLightingStatus &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ImageAnalysisLightingStatus(ImageAnalysisLightingStatus &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    notAvailable SWIFT_SYMBOL("s:7BlinkID27ImageAnalysisLightingStatusO12notAvailableyA2CmF"),
    tooBright SWIFT_SYMBOL("s:7BlinkID27ImageAnalysisLightingStatusO9tooBrightyA2CmF"),
    tooDark SWIFT_SYMBOL("s:7BlinkID27ImageAnalysisLightingStatusO7tooDarkyA2CmF"),
    normal SWIFT_SYMBOL("s:7BlinkID27ImageAnalysisLightingStatusO6normalyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_notAvailable {  // impl struct for case notAvailable
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::notAvailable;
    }
    SWIFT_INLINE_THUNK ImageAnalysisLightingStatus operator()() const;
  } notAvailable SWIFT_SYMBOL("s:7BlinkID27ImageAnalysisLightingStatusO12notAvailableyA2CmF");
  SWIFT_INLINE_THUNK bool isNotAvailable() const;

  inline const static struct _impl_tooBright {  // impl struct for case tooBright
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tooBright;
    }
    SWIFT_INLINE_THUNK ImageAnalysisLightingStatus operator()() const;
  } tooBright SWIFT_SYMBOL("s:7BlinkID27ImageAnalysisLightingStatusO9tooBrightyA2CmF");
  SWIFT_INLINE_THUNK bool isTooBright() const;

  inline const static struct _impl_tooDark {  // impl struct for case tooDark
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tooDark;
    }
    SWIFT_INLINE_THUNK ImageAnalysisLightingStatus operator()() const;
  } tooDark SWIFT_SYMBOL("s:7BlinkID27ImageAnalysisLightingStatusO7tooDarkyA2CmF");
  SWIFT_INLINE_THUNK bool isTooDark() const;

  inline const static struct _impl_normal {  // impl struct for case normal
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::normal;
    }
    SWIFT_INLINE_THUNK ImageAnalysisLightingStatus operator()() const;
  } normal SWIFT_SYMBOL("s:7BlinkID27ImageAnalysisLightingStatusO6normalyA2CmF");
  SWIFT_INLINE_THUNK bool isNormal() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID27ImageAnalysisLightingStatusO12notAvailableyA2CmFWC) return cases::notAvailable;
    if (tag == _impl::$s7BlinkID27ImageAnalysisLightingStatusO9tooBrightyA2CmFWC) return cases::tooBright;
    if (tag == _impl::$s7BlinkID27ImageAnalysisLightingStatusO7tooDarkyA2CmFWC) return cases::tooDark;
    if (tag == _impl::$s7BlinkID27ImageAnalysisLightingStatusO6normalyA2CmFWC) return cases::normal;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:7BlinkID27ImageAnalysisLightingStatusO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK ImageAnalysisLightingStatus(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ImageAnalysisLightingStatus _make() noexcept {
    auto metadata = _impl::$s7BlinkID27ImageAnalysisLightingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ImageAnalysisLightingStatus(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID27ImageAnalysisLightingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID27ImageAnalysisLightingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID27ImageAnalysisLightingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ImageAnalysisLightingStatus;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID27ImageAnalysisLightingStatusOD;
  static inline constexpr $s7BlinkID27ImageAnalysisLightingStatusOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ImageAnalysisLightingStatus {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ImageAnalysisLightingStatus &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ImageAnalysisLightingStatus &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ImageAnalysisLightingStatus returnNewValue(T callable) {
    auto result = ImageAnalysisLightingStatus::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID27ImageAnalysisLightingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::ImageAnalysisLightingStatus> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID27ImageAnalysisLightingStatusOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::ImageAnalysisLightingStatus> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::ImageAnalysisLightingStatus> = true;
template<>
struct implClassFor<BlinkID::ImageAnalysisLightingStatus> { using type = BlinkID::_impl::_impl_ImageAnalysisLightingStatus; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID19ImageExtractionTypeO") ImageExtractionType;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::ImageExtractionType> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
/// Represents the types of images that can be extracted from the document.
namespace _impl {

class _impl_ImageExtractionType;

// Type metadata accessor for ImageExtractionType
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID19ImageExtractionTypeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum ImageExtractionType
extern "C" {
extern unsigned $s7BlinkID19ImageExtractionTypeO12fullDocumentyA2CmFWC;
extern unsigned $s7BlinkID19ImageExtractionTypeO4faceyA2CmFWC;
extern unsigned $s7BlinkID19ImageExtractionTypeO9signatureyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID19ImageExtractionTypeO") ImageExtractionType final {
public:
  SWIFT_INLINE_THUNK ~ImageExtractionType() noexcept {
    auto metadata = _impl::$s7BlinkID19ImageExtractionTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ImageExtractionType(const ImageExtractionType &other) noexcept {
    auto metadata = _impl::$s7BlinkID19ImageExtractionTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ImageExtractionType &operator =(const ImageExtractionType &other) noexcept {
    auto metadata = _impl::$s7BlinkID19ImageExtractionTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ImageExtractionType &operator =(ImageExtractionType &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ImageExtractionType(ImageExtractionType &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    fullDocument SWIFT_SYMBOL("s:7BlinkID19ImageExtractionTypeO12fullDocumentyA2CmF"),
    face SWIFT_SYMBOL("s:7BlinkID19ImageExtractionTypeO4faceyA2CmF"),
    signature SWIFT_SYMBOL("s:7BlinkID19ImageExtractionTypeO9signatureyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_fullDocument {  // impl struct for case fullDocument
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::fullDocument;
    }
    SWIFT_INLINE_THUNK ImageExtractionType operator()() const;
  } fullDocument SWIFT_SYMBOL("s:7BlinkID19ImageExtractionTypeO12fullDocumentyA2CmF");
  SWIFT_INLINE_THUNK bool isFullDocument() const;

  inline const static struct _impl_face {  // impl struct for case face
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::face;
    }
    SWIFT_INLINE_THUNK ImageExtractionType operator()() const;
  } face SWIFT_SYMBOL("s:7BlinkID19ImageExtractionTypeO4faceyA2CmF");
  SWIFT_INLINE_THUNK bool isFace() const;

  inline const static struct _impl_signature {  // impl struct for case signature
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::signature;
    }
    SWIFT_INLINE_THUNK ImageExtractionType operator()() const;
  } signature SWIFT_SYMBOL("s:7BlinkID19ImageExtractionTypeO9signatureyA2CmF");
  SWIFT_INLINE_THUNK bool isSignature() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID19ImageExtractionTypeO12fullDocumentyA2CmFWC) return cases::fullDocument;
    if (tag == _impl::$s7BlinkID19ImageExtractionTypeO4faceyA2CmFWC) return cases::face;
    if (tag == _impl::$s7BlinkID19ImageExtractionTypeO9signatureyA2CmFWC) return cases::signature;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:7BlinkID19ImageExtractionTypeO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK ImageExtractionType(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ImageExtractionType _make() noexcept {
    auto metadata = _impl::$s7BlinkID19ImageExtractionTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ImageExtractionType(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID19ImageExtractionTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID19ImageExtractionTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID19ImageExtractionTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ImageExtractionType;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID19ImageExtractionTypeOD;
  static inline constexpr $s7BlinkID19ImageExtractionTypeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ImageExtractionType {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ImageExtractionType &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ImageExtractionType &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ImageExtractionType returnNewValue(T callable) {
    auto result = ImageExtractionType::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID19ImageExtractionTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::ImageExtractionType> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID19ImageExtractionTypeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::ImageExtractionType> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::ImageExtractionType> = true;
template<>
struct implClassFor<BlinkID::ImageExtractionType> { using type = BlinkID::_impl::_impl_ImageExtractionType; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID16ImageOrientationO") ImageOrientation;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::ImageOrientation> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
/// Represents the orientation of an image in the document verification process.
/// This enum defines the possible orientations of captured images, including
/// both standard and mirrored orientations.
namespace _impl {

class _impl_ImageOrientation;

// Type metadata accessor for ImageOrientation
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID16ImageOrientationOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum ImageOrientation
extern "C" {
extern unsigned $s7BlinkID16ImageOrientationO2upyA2CmFWC;
extern unsigned $s7BlinkID16ImageOrientationO4downyA2CmFWC;
extern unsigned $s7BlinkID16ImageOrientationO4leftyA2CmFWC;
extern unsigned $s7BlinkID16ImageOrientationO5rightyA2CmFWC;
extern unsigned $s7BlinkID16ImageOrientationO10upMirroredyA2CmFWC;
extern unsigned $s7BlinkID16ImageOrientationO12downMirroredyA2CmFWC;
extern unsigned $s7BlinkID16ImageOrientationO12leftMirroredyA2CmFWC;
extern unsigned $s7BlinkID16ImageOrientationO13rightMirroredyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID16ImageOrientationO") ImageOrientation final {
public:
  SWIFT_INLINE_THUNK ~ImageOrientation() noexcept {
    auto metadata = _impl::$s7BlinkID16ImageOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ImageOrientation(const ImageOrientation &other) noexcept {
    auto metadata = _impl::$s7BlinkID16ImageOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ImageOrientation &operator =(const ImageOrientation &other) noexcept {
    auto metadata = _impl::$s7BlinkID16ImageOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ImageOrientation &operator =(ImageOrientation &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ImageOrientation(ImageOrientation &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    up SWIFT_SYMBOL("s:7BlinkID16ImageOrientationO2upyA2CmF"),
    down SWIFT_SYMBOL("s:7BlinkID16ImageOrientationO4downyA2CmF"),
    left SWIFT_SYMBOL("s:7BlinkID16ImageOrientationO4leftyA2CmF"),
    right SWIFT_SYMBOL("s:7BlinkID16ImageOrientationO5rightyA2CmF"),
    upMirrored SWIFT_SYMBOL("s:7BlinkID16ImageOrientationO10upMirroredyA2CmF"),
    downMirrored SWIFT_SYMBOL("s:7BlinkID16ImageOrientationO12downMirroredyA2CmF"),
    leftMirrored SWIFT_SYMBOL("s:7BlinkID16ImageOrientationO12leftMirroredyA2CmF"),
    rightMirrored SWIFT_SYMBOL("s:7BlinkID16ImageOrientationO13rightMirroredyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_up {  // impl struct for case up
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::up;
    }
    SWIFT_INLINE_THUNK ImageOrientation operator()() const;
  } up SWIFT_SYMBOL("s:7BlinkID16ImageOrientationO2upyA2CmF");
  SWIFT_INLINE_THUNK bool isUp() const;

  inline const static struct _impl_down {  // impl struct for case down
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::down;
    }
    SWIFT_INLINE_THUNK ImageOrientation operator()() const;
  } down SWIFT_SYMBOL("s:7BlinkID16ImageOrientationO4downyA2CmF");
  SWIFT_INLINE_THUNK bool isDown() const;

  inline const static struct _impl_left {  // impl struct for case left
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::left;
    }
    SWIFT_INLINE_THUNK ImageOrientation operator()() const;
  } left SWIFT_SYMBOL("s:7BlinkID16ImageOrientationO4leftyA2CmF");
  SWIFT_INLINE_THUNK bool isLeft() const;

  inline const static struct _impl_right {  // impl struct for case right
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::right;
    }
    SWIFT_INLINE_THUNK ImageOrientation operator()() const;
  } right SWIFT_SYMBOL("s:7BlinkID16ImageOrientationO5rightyA2CmF");
  SWIFT_INLINE_THUNK bool isRight() const;

  inline const static struct _impl_upMirrored {  // impl struct for case upMirrored
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::upMirrored;
    }
    SWIFT_INLINE_THUNK ImageOrientation operator()() const;
  } upMirrored SWIFT_SYMBOL("s:7BlinkID16ImageOrientationO10upMirroredyA2CmF");
  SWIFT_INLINE_THUNK bool isUpMirrored() const;

  inline const static struct _impl_downMirrored {  // impl struct for case downMirrored
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::downMirrored;
    }
    SWIFT_INLINE_THUNK ImageOrientation operator()() const;
  } downMirrored SWIFT_SYMBOL("s:7BlinkID16ImageOrientationO12downMirroredyA2CmF");
  SWIFT_INLINE_THUNK bool isDownMirrored() const;

  inline const static struct _impl_leftMirrored {  // impl struct for case leftMirrored
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::leftMirrored;
    }
    SWIFT_INLINE_THUNK ImageOrientation operator()() const;
  } leftMirrored SWIFT_SYMBOL("s:7BlinkID16ImageOrientationO12leftMirroredyA2CmF");
  SWIFT_INLINE_THUNK bool isLeftMirrored() const;

  inline const static struct _impl_rightMirrored {  // impl struct for case rightMirrored
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::rightMirrored;
    }
    SWIFT_INLINE_THUNK ImageOrientation operator()() const;
  } rightMirrored SWIFT_SYMBOL("s:7BlinkID16ImageOrientationO13rightMirroredyA2CmF");
  SWIFT_INLINE_THUNK bool isRightMirrored() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID16ImageOrientationO2upyA2CmFWC) return cases::up;
    if (tag == _impl::$s7BlinkID16ImageOrientationO4downyA2CmFWC) return cases::down;
    if (tag == _impl::$s7BlinkID16ImageOrientationO4leftyA2CmFWC) return cases::left;
    if (tag == _impl::$s7BlinkID16ImageOrientationO5rightyA2CmFWC) return cases::right;
    if (tag == _impl::$s7BlinkID16ImageOrientationO10upMirroredyA2CmFWC) return cases::upMirrored;
    if (tag == _impl::$s7BlinkID16ImageOrientationO12downMirroredyA2CmFWC) return cases::downMirrored;
    if (tag == _impl::$s7BlinkID16ImageOrientationO12leftMirroredyA2CmFWC) return cases::leftMirrored;
    if (tag == _impl::$s7BlinkID16ImageOrientationO13rightMirroredyA2CmFWC) return cases::rightMirrored;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:7BlinkID16ImageOrientationO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK ImageOrientation(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ImageOrientation _make() noexcept {
    auto metadata = _impl::$s7BlinkID16ImageOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ImageOrientation(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID16ImageOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID16ImageOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID16ImageOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ImageOrientation;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID16ImageOrientationOD;
  static inline constexpr $s7BlinkID16ImageOrientationOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ImageOrientation {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ImageOrientation &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ImageOrientation &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ImageOrientation returnNewValue(T callable) {
    auto result = ImageOrientation::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID16ImageOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::ImageOrientation> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID16ImageOrientationOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::ImageOrientation> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::ImageOrientation> = true;
template<>
struct implClassFor<BlinkID::ImageOrientation> { using type = BlinkID::_impl::_impl_ImageOrientation; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {


/// A class representing an input image for document verification.
/// This class wraps either a UIImage or camera frame and prepares it for
/// processing by the document verification system. It handles proper
/// orientation and region of interest settings.
/// Example usage:
/// \code
/// // Create from UIImage
/// let inputImage1 = InputImage(
///     uiImage: documentImage,
///     regionOfInterest: RegionOfInterest(x: 0, y: 0, width: 1.0, height: 1.0)
/// )
///
/// // Create from camera frame
/// let inputImage2 = InputImage(cameraFrame: cameraFrame)
///
/// \endcode
class SWIFT_SYMBOL("s:7BlinkID10InputImageC") InputImage;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::InputImage> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_InputImage;
// Type metadata accessor for InputImage
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID10InputImageCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID10InputImageC") InputImage final : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
/// Creates an input image from a UIImage.
/// \param uiImage The source UIImage
///
/// \param regionOfInterest Optional region of interest within the image
///
  static SWIFT_INLINE_THUNK InputImage init(UIImage *_Nonnull uiImage, const RegionOfInterest& regionOfInterest) SWIFT_SYMBOL("s:7BlinkID10InputImageC02uiD016regionOfInterestACSo7UIImageC_AA06RegiongH0Vtcfc");
/// Creates an input image from a camera frame.
/// \param cameraFrame The source camera frame containing image data
///
  static SWIFT_INLINE_THUNK InputImage init(const CameraFrame& cameraFrame) SWIFT_SYMBOL("s:7BlinkID10InputImageC11cameraFrameAcA06CameraF0V_tcfc");
protected:
  SWIFT_INLINE_THUNK InputImage(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_InputImage;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID10InputImageCD;
  static inline constexpr $s7BlinkID10InputImageCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_InputImage {
public:
static SWIFT_INLINE_THUNK InputImage makeRetained(void * _Nonnull ptr) noexcept { return InputImage(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::InputImage> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID10InputImageCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<BlinkID::InputImage> { using type = BlinkID::_impl::_impl_InputImage; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO") ProcessingStatus;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::ProcessingStatus> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID13QuadrilateralV") Quadrilateral;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::Quadrilateral> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV") InputImageAnalysisResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::InputImageAnalysisResult> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_InputImageAnalysisResult;

// Type metadata accessor for InputImageAnalysisResult
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID24InputImageAnalysisResultVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV") InputImageAnalysisResult final {
public:
  SWIFT_INLINE_THUNK ~InputImageAnalysisResult() noexcept {
    auto metadata = _impl::$s7BlinkID24InputImageAnalysisResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK InputImageAnalysisResult(const InputImageAnalysisResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID24InputImageAnalysisResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK InputImageAnalysisResult &operator =(const InputImageAnalysisResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID24InputImageAnalysisResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK InputImageAnalysisResult &operator =(InputImageAnalysisResult &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER InputImageAnalysisResult(InputImageAnalysisResult &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK ProcessingStatus getProcessingStatus() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV16processingStatusAA010ProcessingH0Ovp");
  SWIFT_INLINE_THUNK swift::Array<FieldType> getMissingMandatoryFields() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV22missingMandatoryFieldsSayAA9FieldTypeOGvp");
  SWIFT_INLINE_THUNK swift::Array<FieldType> getExtractedFields() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV15extractedFieldsSayAA9FieldTypeOGvp");
  SWIFT_INLINE_THUNK swift::Array<FieldType> getInvalidCharacterFields() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV22invalidCharacterFieldsSayAA9FieldTypeOGvp");
  SWIFT_INLINE_THUNK swift::Array<FieldType> getExtraPresentFields() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV18extraPresentFieldsSayAA9FieldTypeOGvp");
  SWIFT_INLINE_THUNK swift::Array<ImageExtractionType> getImageExtractionFailures() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV23imageExtractionFailuresSayAA0dH4TypeOGvp");
  SWIFT_INLINE_THUNK ScanningSide getScanningSide() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV12scanningSideAA08ScanningH0Ovp");
  SWIFT_INLINE_THUNK DetectionStatus getDocumentDetectionStatus() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV23documentDetectionStatusAA0hI0Ovp");
  SWIFT_INLINE_THUNK swift::Optional<Quadrilateral> getDocumentLocation() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV16documentLocationAA13QuadrilateralVSgvp");
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus getBlurDetectionStatus() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV19blurDetectionStatusAA0dehI0Ovp");
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus getGlareDetectionStatus() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV20glareDetectionStatusAA0dehI0Ovp");
  SWIFT_INLINE_THUNK DocumentImageColorStatus getDocumentColorStatus() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV19documentColorStatusAA08DocumentdhI0Ovp");
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus getDocumentMoireStatus() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV19documentMoireStatusAA0de9DetectionI0Ovp");
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus getFaceDetectionStatus() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV19faceDetectionStatusAA0dehI0Ovp");
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus getMrzDetectionStatus() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV18mrzDetectionStatusAA0dehI0Ovp");
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus getBarcodeDetectionStatus() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV22barcodeDetectionStatusAA0dehI0Ovp");
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus getRealIDDetectionStatus() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV21realIDDetectionStatusAA0de9DetectionI0Ovp");
  SWIFT_INLINE_THUNK ImageAnalysisLightingStatus getDocumentLightingStatus() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV22documentLightingStatusAA0dehI0Ovp");
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus getDocumentHandOcclusionStatus() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV27documentHandOcclusionStatusAA0de9DetectionJ0Ovp");
  SWIFT_INLINE_THUNK DocumentOrientation getDocumentOrientation() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV19documentOrientationAA08DocumentH0Ovp");
  SWIFT_INLINE_THUNK DocumentRotation getDocumentRotation() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV16documentRotationAA08DocumentH0Ovp");
private:
  SWIFT_INLINE_THUNK InputImageAnalysisResult(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK InputImageAnalysisResult _make() noexcept {
    auto metadata = _impl::$s7BlinkID24InputImageAnalysisResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return InputImageAnalysisResult(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_InputImageAnalysisResult;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID24InputImageAnalysisResultVD;
  static inline constexpr $s7BlinkID24InputImageAnalysisResultVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_InputImageAnalysisResult {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(InputImageAnalysisResult &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const InputImageAnalysisResult &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER InputImageAnalysisResult returnNewValue(T callable) {
    auto result = InputImageAnalysisResult::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID24InputImageAnalysisResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::InputImageAnalysisResult> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID24InputImageAnalysisResultVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::InputImageAnalysisResult> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::InputImageAnalysisResult> = true;
template<>
struct implClassFor<BlinkID::InputImageAnalysisResult> { using type = BlinkID::_impl::_impl_InputImageAnalysisResult; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

namespace _impl {

class _impl_InputImageResult;

// Type metadata accessor for InputImageResult
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID16InputImageResultVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID16InputImageResultV") InputImageResult final {
public:
  SWIFT_INLINE_THUNK ~InputImageResult() noexcept {
    auto metadata = _impl::$s7BlinkID16InputImageResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK InputImageResult(const InputImageResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID16InputImageResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK InputImageResult &operator =(const InputImageResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID16InputImageResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK InputImageResult &operator =(InputImageResult &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER InputImageResult(InputImageResult &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK UIImage *_Nullable getUiImage() const SWIFT_SYMBOL("s:7BlinkID16InputImageResultV02uiD0So7UIImageCSgvp");
private:
  SWIFT_INLINE_THUNK InputImageResult(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK InputImageResult _make() noexcept {
    auto metadata = _impl::$s7BlinkID16InputImageResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return InputImageResult(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_InputImageResult;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID16InputImageResultVD;
  static inline constexpr $s7BlinkID16InputImageResultVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_InputImageResult {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(InputImageResult &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const InputImageResult &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER InputImageResult returnNewValue(T callable) {
    auto result = InputImageResult::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID16InputImageResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::InputImageResult> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID16InputImageResultVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::InputImageResult> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::InputImageResult> = true;
template<>
struct implClassFor<BlinkID::InputImageResult> { using type = BlinkID::_impl::_impl_InputImageResult; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

/// Represents the source type of an image.
/// This enum class is used to indicate whether an image was obtained
/// from a video stream or a single-source input such as a standalone photo.
namespace _impl {

class _impl_InputImageSource;

// Type metadata accessor for InputImageSource
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID16InputImageSourceOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum InputImageSource
extern "C" {
extern unsigned $s7BlinkID16InputImageSourceO5videoyA2CmFWC;
extern unsigned $s7BlinkID16InputImageSourceO5photoyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID16InputImageSourceO") InputImageSource final {
public:
  SWIFT_INLINE_THUNK ~InputImageSource() noexcept {
    auto metadata = _impl::$s7BlinkID16InputImageSourceOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK InputImageSource(const InputImageSource &other) noexcept {
    auto metadata = _impl::$s7BlinkID16InputImageSourceOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK InputImageSource &operator =(const InputImageSource &other) noexcept {
    auto metadata = _impl::$s7BlinkID16InputImageSourceOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK InputImageSource &operator =(InputImageSource &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER InputImageSource(InputImageSource &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    video SWIFT_SYMBOL("s:7BlinkID16InputImageSourceO5videoyA2CmF"),
    photo SWIFT_SYMBOL("s:7BlinkID16InputImageSourceO5photoyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_video {  // impl struct for case video
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::video;
    }
    SWIFT_INLINE_THUNK InputImageSource operator()() const;
  } video SWIFT_SYMBOL("s:7BlinkID16InputImageSourceO5videoyA2CmF");
  SWIFT_INLINE_THUNK bool isVideo() const;

  inline const static struct _impl_photo {  // impl struct for case photo
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::photo;
    }
    SWIFT_INLINE_THUNK InputImageSource operator()() const;
  } photo SWIFT_SYMBOL("s:7BlinkID16InputImageSourceO5photoyA2CmF");
  SWIFT_INLINE_THUNK bool isPhoto() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID16InputImageSourceO5videoyA2CmFWC) return cases::video;
    if (tag == _impl::$s7BlinkID16InputImageSourceO5photoyA2CmFWC) return cases::photo;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:7BlinkID16InputImageSourceO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK InputImageSource(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK InputImageSource _make() noexcept {
    auto metadata = _impl::$s7BlinkID16InputImageSourceOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return InputImageSource(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID16InputImageSourceOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID16InputImageSourceOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID16InputImageSourceOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_InputImageSource;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID16InputImageSourceOD;
  static inline constexpr $s7BlinkID16InputImageSourceOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_InputImageSource {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(InputImageSource &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const InputImageSource &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER InputImageSource returnNewValue(T callable) {
    auto result = InputImageSource::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID16InputImageSourceOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::InputImageSource> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID16InputImageSourceOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::InputImageSource> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::InputImageSource> = true;
template<>
struct implClassFor<BlinkID::InputImageSource> { using type = BlinkID::_impl::_impl_InputImageSource; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID22InvalidLicenseKeyErrorV") InvalidLicenseKeyError;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::InvalidLicenseKeyError> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_InvalidLicenseKeyError;

// Type metadata accessor for InvalidLicenseKeyError
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID22InvalidLicenseKeyErrorVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID22InvalidLicenseKeyErrorV") InvalidLicenseKeyError final {
public:
  SWIFT_INLINE_THUNK ~InvalidLicenseKeyError() noexcept {
    auto metadata = _impl::$s7BlinkID22InvalidLicenseKeyErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK InvalidLicenseKeyError(const InvalidLicenseKeyError &other) noexcept {
    auto metadata = _impl::$s7BlinkID22InvalidLicenseKeyErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK InvalidLicenseKeyError &operator =(const InvalidLicenseKeyError &other) noexcept {
    auto metadata = _impl::$s7BlinkID22InvalidLicenseKeyErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK InvalidLicenseKeyError &operator =(InvalidLicenseKeyError &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER InvalidLicenseKeyError(InvalidLicenseKeyError &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getMessage() const SWIFT_SYMBOL("s:7BlinkID22InvalidLicenseKeyErrorV7messageSSvp");
private:
  SWIFT_INLINE_THUNK InvalidLicenseKeyError(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK InvalidLicenseKeyError _make() noexcept {
    auto metadata = _impl::$s7BlinkID22InvalidLicenseKeyErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return InvalidLicenseKeyError(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_InvalidLicenseKeyError;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID22InvalidLicenseKeyErrorVD;
  static inline constexpr $s7BlinkID22InvalidLicenseKeyErrorVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_InvalidLicenseKeyError {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(InvalidLicenseKeyError &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const InvalidLicenseKeyError &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER InvalidLicenseKeyError returnNewValue(T callable) {
    auto result = InvalidLicenseKeyError::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID22InvalidLicenseKeyErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::InvalidLicenseKeyError> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID22InvalidLicenseKeyErrorVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::InvalidLicenseKeyError> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::InvalidLicenseKeyError> = true;
template<>
struct implClassFor<BlinkID::InvalidLicenseKeyError> { using type = BlinkID::_impl::_impl_InvalidLicenseKeyError; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {


class SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO") MRZDocumentType;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::MRZDocumentType> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
/// Represents the document type.
namespace _impl {

class _impl_MRZDocumentType;

// Type metadata accessor for MRZDocumentType
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID15MRZDocumentTypeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum MRZDocumentType
extern "C" {
extern unsigned $s7BlinkID15MRZDocumentTypeO7unknownyA2CmFWC;
extern unsigned $s7BlinkID15MRZDocumentTypeO12identityCardyA2CmFWC;
extern unsigned $s7BlinkID15MRZDocumentTypeO8passportyA2CmFWC;
extern unsigned $s7BlinkID15MRZDocumentTypeO4visayA2CmFWC;
extern unsigned $s7BlinkID15MRZDocumentTypeO9greenCardyA2CmFWC;
extern unsigned $s7BlinkID15MRZDocumentTypeO13mysPassIMM13PyA2CmFWC;
extern unsigned $s7BlinkID15MRZDocumentTypeO13driverLicenseyA2CmFWC;
extern unsigned $s7BlinkID15MRZDocumentTypeO22internalTravelDocumentyA2CmFWC;
extern unsigned $s7BlinkID15MRZDocumentTypeO18borderCrossingCardyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO") MRZDocumentType final {
public:
  SWIFT_INLINE_THUNK ~MRZDocumentType() noexcept {
    auto metadata = _impl::$s7BlinkID15MRZDocumentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK MRZDocumentType(const MRZDocumentType &other) noexcept {
    auto metadata = _impl::$s7BlinkID15MRZDocumentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK MRZDocumentType &operator =(const MRZDocumentType &other) noexcept {
    auto metadata = _impl::$s7BlinkID15MRZDocumentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK MRZDocumentType &operator =(MRZDocumentType &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER MRZDocumentType(MRZDocumentType &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    unknown SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO7unknownyA2CmF"),
    identityCard SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO12identityCardyA2CmF"),
    passport SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO8passportyA2CmF"),
    visa SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO4visayA2CmF"),
    greenCard SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO9greenCardyA2CmF"),
    mysPassIMM13P SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO13mysPassIMM13PyA2CmF"),
    driverLicense SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO13driverLicenseyA2CmF"),
    internalTravelDocument SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO22internalTravelDocumentyA2CmF"),
    borderCrossingCard SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO18borderCrossingCardyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_unknown {  // impl struct for case unknown
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknown;
    }
    SWIFT_INLINE_THUNK MRZDocumentType operator()() const;
  } unknown SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO7unknownyA2CmF");
  SWIFT_INLINE_THUNK bool isUnknown() const;

  inline const static struct _impl_identityCard {  // impl struct for case identityCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::identityCard;
    }
    SWIFT_INLINE_THUNK MRZDocumentType operator()() const;
  } identityCard SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO12identityCardyA2CmF");
  SWIFT_INLINE_THUNK bool isIdentityCard() const;

  inline const static struct _impl_passport {  // impl struct for case passport
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::passport;
    }
    SWIFT_INLINE_THUNK MRZDocumentType operator()() const;
  } passport SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO8passportyA2CmF");
  SWIFT_INLINE_THUNK bool isPassport() const;

  inline const static struct _impl_visa {  // impl struct for case visa
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::visa;
    }
    SWIFT_INLINE_THUNK MRZDocumentType operator()() const;
  } visa SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO4visayA2CmF");
  SWIFT_INLINE_THUNK bool isVisa() const;

  inline const static struct _impl_greenCard {  // impl struct for case greenCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::greenCard;
    }
    SWIFT_INLINE_THUNK MRZDocumentType operator()() const;
  } greenCard SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO9greenCardyA2CmF");
  SWIFT_INLINE_THUNK bool isGreenCard() const;

  inline const static struct _impl_mysPassIMM13P {  // impl struct for case mysPassIMM13P
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mysPassIMM13P;
    }
    SWIFT_INLINE_THUNK MRZDocumentType operator()() const;
  } mysPassIMM13P SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO13mysPassIMM13PyA2CmF");
  SWIFT_INLINE_THUNK bool isMysPassIMM13P() const;

  inline const static struct _impl_driverLicense {  // impl struct for case driverLicense
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::driverLicense;
    }
    SWIFT_INLINE_THUNK MRZDocumentType operator()() const;
  } driverLicense SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO13driverLicenseyA2CmF");
  SWIFT_INLINE_THUNK bool isDriverLicense() const;

  inline const static struct _impl_internalTravelDocument {  // impl struct for case internalTravelDocument
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::internalTravelDocument;
    }
    SWIFT_INLINE_THUNK MRZDocumentType operator()() const;
  } internalTravelDocument SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO22internalTravelDocumentyA2CmF");
  SWIFT_INLINE_THUNK bool isInternalTravelDocument() const;

  inline const static struct _impl_borderCrossingCard {  // impl struct for case borderCrossingCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::borderCrossingCard;
    }
    SWIFT_INLINE_THUNK MRZDocumentType operator()() const;
  } borderCrossingCard SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO18borderCrossingCardyA2CmF");
  SWIFT_INLINE_THUNK bool isBorderCrossingCard() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID15MRZDocumentTypeO7unknownyA2CmFWC) return cases::unknown;
    if (tag == _impl::$s7BlinkID15MRZDocumentTypeO12identityCardyA2CmFWC) return cases::identityCard;
    if (tag == _impl::$s7BlinkID15MRZDocumentTypeO8passportyA2CmFWC) return cases::passport;
    if (tag == _impl::$s7BlinkID15MRZDocumentTypeO4visayA2CmFWC) return cases::visa;
    if (tag == _impl::$s7BlinkID15MRZDocumentTypeO9greenCardyA2CmFWC) return cases::greenCard;
    if (tag == _impl::$s7BlinkID15MRZDocumentTypeO13mysPassIMM13PyA2CmFWC) return cases::mysPassIMM13P;
    if (tag == _impl::$s7BlinkID15MRZDocumentTypeO13driverLicenseyA2CmFWC) return cases::driverLicense;
    if (tag == _impl::$s7BlinkID15MRZDocumentTypeO22internalTravelDocumentyA2CmFWC) return cases::internalTravelDocument;
    if (tag == _impl::$s7BlinkID15MRZDocumentTypeO18borderCrossingCardyA2CmFWC) return cases::borderCrossingCard;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK MRZDocumentType(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK MRZDocumentType _make() noexcept {
    auto metadata = _impl::$s7BlinkID15MRZDocumentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return MRZDocumentType(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID15MRZDocumentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID15MRZDocumentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID15MRZDocumentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_MRZDocumentType;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID15MRZDocumentTypeOD;
  static inline constexpr $s7BlinkID15MRZDocumentTypeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_MRZDocumentType {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(MRZDocumentType &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const MRZDocumentType &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER MRZDocumentType returnNewValue(T callable) {
    auto result = MRZDocumentType::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID15MRZDocumentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::MRZDocumentType> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID15MRZDocumentTypeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::MRZDocumentType> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::MRZDocumentType> = true;
template<>
struct implClassFor<BlinkID::MRZDocumentType> { using type = BlinkID::_impl::_impl_MRZDocumentType; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID9MRZResultV") MRZResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::MRZResult> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_MRZResult;

// Type metadata accessor for MRZResult
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID9MRZResultVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID9MRZResultV") MRZResult final {
public:
  SWIFT_INLINE_THUNK ~MRZResult() noexcept {
    auto metadata = _impl::$s7BlinkID9MRZResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK MRZResult(const MRZResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID9MRZResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK MRZResult &operator =(const MRZResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID9MRZResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK MRZResult &operator =(MRZResult &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER MRZResult(MRZResult &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getRawMRZString() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV12rawMRZStringSSvp");
  SWIFT_INLINE_THUNK swift::String getDocumentCode() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV12documentCodeSSvp");
  SWIFT_INLINE_THUNK swift::String getIssuer() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV6issuerSSvp");
  SWIFT_INLINE_THUNK swift::String getDocumentNumber() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV14documentNumberSSvp");
  SWIFT_INLINE_THUNK swift::String getOpt1() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV4opt1SSvp");
  SWIFT_INLINE_THUNK swift::String getOpt2() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV4opt2SSvp");
  SWIFT_INLINE_THUNK swift::String getGender() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV6genderSSvp");
  SWIFT_INLINE_THUNK swift::String getNationality() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV11nationalitySSvp");
  SWIFT_INLINE_THUNK swift::String getPrimaryID() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV07primaryB0SSvp");
  SWIFT_INLINE_THUNK swift::String getSecondaryID() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV09secondaryB0SSvp");
  SWIFT_INLINE_THUNK swift::String getIssuerName() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV10issuerNameSSvp");
  SWIFT_INLINE_THUNK swift::String getNationalityName() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV15nationalityNameSSvp");
  SWIFT_INLINE_THUNK bool getVerified() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV8verifiedSbvp");
  SWIFT_INLINE_THUNK DateResult<swift::String> getDateOfBirth() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV11dateOfBirthAA10DateResultVySSGvp");
  SWIFT_INLINE_THUNK DateResult<swift::String> getDateOfExpiry() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV12dateOfExpiryAA10DateResultVySSGvp");
  SWIFT_INLINE_THUNK MRZDocumentType getDocumentType() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV12documentTypeAA011MRZDocumentE0Ovp");
  SWIFT_INLINE_THUNK swift::String getSanitizedOpt1() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV13sanitizedOpt1SSvp");
  SWIFT_INLINE_THUNK swift::String getSanitizedOpt2() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV13sanitizedOpt2SSvp");
  SWIFT_INLINE_THUNK swift::String getSanitizedNationality() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV20sanitizedNationalitySSvp");
  SWIFT_INLINE_THUNK swift::String getSanitizedIssuer() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV15sanitizedIssuerSSvp");
  SWIFT_INLINE_THUNK swift::String getSanitizedDocumentCode() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV21sanitizedDocumentCodeSSvp");
  SWIFT_INLINE_THUNK swift::String getSanitizedDocumentNumber() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV23sanitizedDocumentNumberSSvp");
private:
  SWIFT_INLINE_THUNK MRZResult(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK MRZResult _make() noexcept {
    auto metadata = _impl::$s7BlinkID9MRZResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return MRZResult(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_MRZResult;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID9MRZResultVD;
  static inline constexpr $s7BlinkID9MRZResultVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_MRZResult {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(MRZResult &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const MRZResult &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER MRZResult returnNewValue(T callable) {
    auto result = MRZResult::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID9MRZResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::MRZResult> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID9MRZResultVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::MRZResult> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::MRZResult> = true;
template<>
struct implClassFor<BlinkID::MRZResult> { using type = BlinkID::_impl::_impl_MRZResult; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID18MemoryReserveErrorV") MemoryReserveError;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::MemoryReserveError> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_MemoryReserveError;

// Type metadata accessor for MemoryReserveError
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID18MemoryReserveErrorVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID18MemoryReserveErrorV") MemoryReserveError final {
public:
  SWIFT_INLINE_THUNK ~MemoryReserveError() noexcept {
    auto metadata = _impl::$s7BlinkID18MemoryReserveErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK MemoryReserveError(const MemoryReserveError &other) noexcept {
    auto metadata = _impl::$s7BlinkID18MemoryReserveErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK MemoryReserveError &operator =(const MemoryReserveError &other) noexcept {
    auto metadata = _impl::$s7BlinkID18MemoryReserveErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK MemoryReserveError &operator =(MemoryReserveError &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER MemoryReserveError(MemoryReserveError &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Int getMinRequiredMemory() const SWIFT_SYMBOL("s:7BlinkID18MemoryReserveErrorV011minRequiredC0Sivp");
  static SWIFT_INLINE_THUNK MemoryReserveError init(swift::Int minRequiredMemory) SWIFT_SYMBOL("s:7BlinkID18MemoryReserveErrorV011minRequiredC0ACSi_tcfc");
private:
  SWIFT_INLINE_THUNK MemoryReserveError(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK MemoryReserveError _make() noexcept {
    auto metadata = _impl::$s7BlinkID18MemoryReserveErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return MemoryReserveError(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_MemoryReserveError;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID18MemoryReserveErrorVD;
  static inline constexpr $s7BlinkID18MemoryReserveErrorVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_MemoryReserveError {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(MemoryReserveError &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const MemoryReserveError &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER MemoryReserveError returnNewValue(T callable) {
    auto result = MemoryReserveError::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID18MemoryReserveErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::MemoryReserveError> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID18MemoryReserveErrorVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::MemoryReserveError> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::MemoryReserveError> = true;
template<>
struct implClassFor<BlinkID::MemoryReserveError> { using type = BlinkID::_impl::_impl_MemoryReserveError; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID13MissingBundleV") MissingBundle;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::MissingBundle> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_MissingBundle;

// Type metadata accessor for MissingBundle
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID13MissingBundleVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID13MissingBundleV") MissingBundle final {
public:
  SWIFT_INLINE_THUNK ~MissingBundle() noexcept {
    auto metadata = _impl::$s7BlinkID13MissingBundleVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK MissingBundle(const MissingBundle &other) noexcept {
    auto metadata = _impl::$s7BlinkID13MissingBundleVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK MissingBundle &operator =(const MissingBundle &other) noexcept {
    auto metadata = _impl::$s7BlinkID13MissingBundleVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK MissingBundle &operator =(MissingBundle &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER MissingBundle(MissingBundle &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getMessage() const SWIFT_SYMBOL("s:7BlinkID13MissingBundleV7messageSSvp");
private:
  SWIFT_INLINE_THUNK MissingBundle(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK MissingBundle _make() noexcept {
    auto metadata = _impl::$s7BlinkID13MissingBundleVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return MissingBundle(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_MissingBundle;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID13MissingBundleVD;
  static inline constexpr $s7BlinkID13MissingBundleVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_MissingBundle {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(MissingBundle &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const MissingBundle &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER MissingBundle returnNewValue(T callable) {
    auto result = MissingBundle::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID13MissingBundleVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::MissingBundle> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID13MissingBundleVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::MissingBundle> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::MissingBundle> = true;
template<>
struct implClassFor<BlinkID::MissingBundle> { using type = BlinkID::_impl::_impl_MissingBundle; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID16MissingResourcesV") MissingResources;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::MissingResources> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_MissingResources;

// Type metadata accessor for MissingResources
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID16MissingResourcesVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID16MissingResourcesV") MissingResources final {
public:
  SWIFT_INLINE_THUNK ~MissingResources() noexcept {
    auto metadata = _impl::$s7BlinkID16MissingResourcesVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK MissingResources(const MissingResources &other) noexcept {
    auto metadata = _impl::$s7BlinkID16MissingResourcesVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK MissingResources &operator =(const MissingResources &other) noexcept {
    auto metadata = _impl::$s7BlinkID16MissingResourcesVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK MissingResources &operator =(MissingResources &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER MissingResources(MissingResources &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
private:
  SWIFT_INLINE_THUNK MissingResources(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK MissingResources _make() noexcept {
    auto metadata = _impl::$s7BlinkID16MissingResourcesVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return MissingResources(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_MissingResources;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID16MissingResourcesVD;
  static inline constexpr $s7BlinkID16MissingResourcesVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_MissingResources {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(MissingResources &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const MissingResources &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER MissingResources returnNewValue(T callable) {
    auto result = MissingResources::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID16MissingResourcesVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::MissingResources> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID16MissingResourcesVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::MissingResources> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::MissingResources> = true;
template<>
struct implClassFor<BlinkID::MissingResources> { using type = BlinkID::_impl::_impl_MissingResources; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID14ModelLoadErrorO") ModelLoadError;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::ModelLoadError> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
/// Represents specific errors that can occur during model loading.
/// This enum defines the possible failure modes when loading SDK models
/// and resources.
namespace _impl {

class _impl_ModelLoadError;

// Type metadata accessor for ModelLoadError
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID14ModelLoadErrorOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum ModelLoadError
extern "C" {
extern unsigned $s7BlinkID14ModelLoadErrorO11missingFileyA2CmFWC;
extern unsigned $s7BlinkID14ModelLoadErrorO11invalidFileyA2CmFWC;
extern unsigned $s7BlinkID14ModelLoadErrorO14invalidLicenseyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID14ModelLoadErrorO") ModelLoadError final {
public:
  SWIFT_INLINE_THUNK ~ModelLoadError() noexcept {
    auto metadata = _impl::$s7BlinkID14ModelLoadErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ModelLoadError(const ModelLoadError &other) noexcept {
    auto metadata = _impl::$s7BlinkID14ModelLoadErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ModelLoadError &operator =(const ModelLoadError &other) noexcept {
    auto metadata = _impl::$s7BlinkID14ModelLoadErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ModelLoadError &operator =(ModelLoadError &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ModelLoadError(ModelLoadError &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    missingFile SWIFT_SYMBOL("s:7BlinkID14ModelLoadErrorO11missingFileyA2CmF"),
    invalidFile SWIFT_SYMBOL("s:7BlinkID14ModelLoadErrorO11invalidFileyA2CmF"),
    invalidLicense SWIFT_SYMBOL("s:7BlinkID14ModelLoadErrorO14invalidLicenseyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_missingFile {  // impl struct for case missingFile
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::missingFile;
    }
    SWIFT_INLINE_THUNK ModelLoadError operator()() const;
  } missingFile SWIFT_SYMBOL("s:7BlinkID14ModelLoadErrorO11missingFileyA2CmF");
  SWIFT_INLINE_THUNK bool isMissingFile() const;

  inline const static struct _impl_invalidFile {  // impl struct for case invalidFile
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::invalidFile;
    }
    SWIFT_INLINE_THUNK ModelLoadError operator()() const;
  } invalidFile SWIFT_SYMBOL("s:7BlinkID14ModelLoadErrorO11invalidFileyA2CmF");
  SWIFT_INLINE_THUNK bool isInvalidFile() const;

  inline const static struct _impl_invalidLicense {  // impl struct for case invalidLicense
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::invalidLicense;
    }
    SWIFT_INLINE_THUNK ModelLoadError operator()() const;
  } invalidLicense SWIFT_SYMBOL("s:7BlinkID14ModelLoadErrorO14invalidLicenseyA2CmF");
  SWIFT_INLINE_THUNK bool isInvalidLicense() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID14ModelLoadErrorO11missingFileyA2CmFWC) return cases::missingFile;
    if (tag == _impl::$s7BlinkID14ModelLoadErrorO11invalidFileyA2CmFWC) return cases::invalidFile;
    if (tag == _impl::$s7BlinkID14ModelLoadErrorO14invalidLicenseyA2CmFWC) return cases::invalidLicense;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Optional<swift::String> getErrorDescription() const SWIFT_SYMBOL("s:7BlinkID14ModelLoadErrorO16errorDescriptionSSSgvp");
  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:7BlinkID14ModelLoadErrorO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK ModelLoadError(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ModelLoadError _make() noexcept {
    auto metadata = _impl::$s7BlinkID14ModelLoadErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ModelLoadError(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID14ModelLoadErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID14ModelLoadErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID14ModelLoadErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ModelLoadError;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID14ModelLoadErrorOD;
  static inline constexpr $s7BlinkID14ModelLoadErrorOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ModelLoadError {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ModelLoadError &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ModelLoadError &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ModelLoadError returnNewValue(T callable) {
    auto result = ModelLoadError::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID14ModelLoadErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::ModelLoadError> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID14ModelLoadErrorOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::ModelLoadError> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::ModelLoadError> = true;
template<>
struct implClassFor<BlinkID::ModelLoadError> { using type = BlinkID::_impl::_impl_ModelLoadError; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {



class SWIFT_SYMBOL("s:7BlinkID5PointV") Point;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::Point> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_Point;

// Type metadata accessor for Point
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID5PointVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID5PointV") Point final {
public:
  SWIFT_INLINE_THUNK ~Point() noexcept {
    auto metadata = _impl::$s7BlinkID5PointVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK Point(const Point &other) noexcept {
    auto metadata = _impl::$s7BlinkID5PointVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK Point &operator =(const Point &other) noexcept {
    auto metadata = _impl::$s7BlinkID5PointVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK Point &operator =(Point &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER Point(Point &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK int32_t getX() const SWIFT_SYMBOL("s:7BlinkID5PointV1xs5Int32Vvp");
  SWIFT_INLINE_THUNK int32_t getY() const SWIFT_SYMBOL("s:7BlinkID5PointV1ys5Int32Vvp");
private:
  SWIFT_INLINE_THUNK Point(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK Point _make() noexcept {
    auto metadata = _impl::$s7BlinkID5PointVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return Point(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_Point;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID5PointVD;
  static inline constexpr $s7BlinkID5PointVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_Point {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(Point &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const Point &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER Point returnNewValue(T callable) {
    auto result = Point::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID5PointVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::Point> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID5PointVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::Point> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::Point> = true;
template<>
struct implClassFor<BlinkID::Point> { using type = BlinkID::_impl::_impl_Point; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {


/// A global actor that provides isolated execution context for processing operations.
/// The <code>ProcessingActor</code> ensures thread-safe access to shared resources and maintains
/// data consistency across concurrent operations. Execute operations in a sequential, thread-safe manner.
class SWIFT_SYMBOL("s:7BlinkID15ProcessingActorC") ProcessingActor;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::ProcessingActor> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_ProcessingActor;
// Type metadata accessor for ProcessingActor
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID15ProcessingActorCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID15ProcessingActorC") ProcessingActor : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
protected:
  SWIFT_INLINE_THUNK ProcessingActor(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_ProcessingActor;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID15ProcessingActorCD;
  static inline constexpr $s7BlinkID15ProcessingActorCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ProcessingActor {
public:
static SWIFT_INLINE_THUNK ProcessingActor makeRetained(void * _Nonnull ptr) noexcept { return ProcessingActor(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::ProcessingActor> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID15ProcessingActorCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<BlinkID::ProcessingActor> { using type = BlinkID::_impl::_impl_ProcessingActor; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

/// Detailed information about the recognition process.
namespace _impl {

class _impl_ProcessingStatus;

// Type metadata accessor for ProcessingStatus
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID16ProcessingStatusOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum ProcessingStatus
extern "C" {
extern unsigned $s7BlinkID16ProcessingStatusO7successyA2CmFWC;
extern unsigned $s7BlinkID16ProcessingStatusO15detectionFailedyA2CmFWC;
extern unsigned $s7BlinkID16ProcessingStatusO24imagePreprocessingFailedyA2CmFWC;
extern unsigned $s7BlinkID16ProcessingStatusO19stabilityTestFailedyA2CmFWC;
extern unsigned $s7BlinkID16ProcessingStatusO17scanningWrongSideyA2CmFWC;
extern unsigned $s7BlinkID16ProcessingStatusO25fieldIdentificationFailedyA2CmFWC;
extern unsigned $s7BlinkID16ProcessingStatusO21mandatoryFieldMissingyA2CmFWC;
extern unsigned $s7BlinkID16ProcessingStatusO22invalidCharactersFoundyA2CmFWC;
extern unsigned $s7BlinkID16ProcessingStatusO17imageReturnFailedyA2CmFWC;
extern unsigned $s7BlinkID16ProcessingStatusO24barcodeRecognitionFailedyA2CmFWC;
extern unsigned $s7BlinkID16ProcessingStatusO16mrzParsingFailedyA2CmFWC;
extern unsigned $s7BlinkID16ProcessingStatusO16documentFilteredyA2CmFWC;
extern unsigned $s7BlinkID16ProcessingStatusO19unsupportedDocumentyA2CmFWC;
extern unsigned $s7BlinkID16ProcessingStatusO17awaitingOtherSideyA2CmFWC;
extern unsigned $s7BlinkID16ProcessingStatusO10notScannedyA2CmFWC;
extern unsigned $s7BlinkID16ProcessingStatusO22barcodeDetectionFailedyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO") ProcessingStatus final {
public:
  SWIFT_INLINE_THUNK ~ProcessingStatus() noexcept {
    auto metadata = _impl::$s7BlinkID16ProcessingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ProcessingStatus(const ProcessingStatus &other) noexcept {
    auto metadata = _impl::$s7BlinkID16ProcessingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ProcessingStatus &operator =(const ProcessingStatus &other) noexcept {
    auto metadata = _impl::$s7BlinkID16ProcessingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ProcessingStatus &operator =(ProcessingStatus &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ProcessingStatus(ProcessingStatus &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    success SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO7successyA2CmF"),
    detectionFailed SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO15detectionFailedyA2CmF"),
    imagePreprocessingFailed SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO24imagePreprocessingFailedyA2CmF"),
    stabilityTestFailed SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO19stabilityTestFailedyA2CmF"),
    scanningWrongSide SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO17scanningWrongSideyA2CmF"),
    fieldIdentificationFailed SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO25fieldIdentificationFailedyA2CmF"),
    mandatoryFieldMissing SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO21mandatoryFieldMissingyA2CmF"),
    invalidCharactersFound SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO22invalidCharactersFoundyA2CmF"),
    imageReturnFailed SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO17imageReturnFailedyA2CmF"),
    barcodeRecognitionFailed SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO24barcodeRecognitionFailedyA2CmF"),
    mrzParsingFailed SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO16mrzParsingFailedyA2CmF"),
    documentFiltered SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO16documentFilteredyA2CmF"),
    unsupportedDocument SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO19unsupportedDocumentyA2CmF"),
    awaitingOtherSide SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO17awaitingOtherSideyA2CmF"),
    notScanned SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO10notScannedyA2CmF"),
    barcodeDetectionFailed SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO22barcodeDetectionFailedyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_success {  // impl struct for case success
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::success;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } success SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO7successyA2CmF");
  SWIFT_INLINE_THUNK bool isSuccess() const;

  inline const static struct _impl_detectionFailed {  // impl struct for case detectionFailed
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::detectionFailed;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } detectionFailed SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO15detectionFailedyA2CmF");
  SWIFT_INLINE_THUNK bool isDetectionFailed() const;

  inline const static struct _impl_imagePreprocessingFailed {  // impl struct for case imagePreprocessingFailed
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::imagePreprocessingFailed;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } imagePreprocessingFailed SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO24imagePreprocessingFailedyA2CmF");
  SWIFT_INLINE_THUNK bool isImagePreprocessingFailed() const;

  inline const static struct _impl_stabilityTestFailed {  // impl struct for case stabilityTestFailed
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::stabilityTestFailed;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } stabilityTestFailed SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO19stabilityTestFailedyA2CmF");
  SWIFT_INLINE_THUNK bool isStabilityTestFailed() const;

  inline const static struct _impl_scanningWrongSide {  // impl struct for case scanningWrongSide
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::scanningWrongSide;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } scanningWrongSide SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO17scanningWrongSideyA2CmF");
  SWIFT_INLINE_THUNK bool isScanningWrongSide() const;

  inline const static struct _impl_fieldIdentificationFailed {  // impl struct for case fieldIdentificationFailed
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::fieldIdentificationFailed;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } fieldIdentificationFailed SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO25fieldIdentificationFailedyA2CmF");
  SWIFT_INLINE_THUNK bool isFieldIdentificationFailed() const;

  inline const static struct _impl_mandatoryFieldMissing {  // impl struct for case mandatoryFieldMissing
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mandatoryFieldMissing;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } mandatoryFieldMissing SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO21mandatoryFieldMissingyA2CmF");
  SWIFT_INLINE_THUNK bool isMandatoryFieldMissing() const;

  inline const static struct _impl_invalidCharactersFound {  // impl struct for case invalidCharactersFound
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::invalidCharactersFound;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } invalidCharactersFound SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO22invalidCharactersFoundyA2CmF");
  SWIFT_INLINE_THUNK bool isInvalidCharactersFound() const;

  inline const static struct _impl_imageReturnFailed {  // impl struct for case imageReturnFailed
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::imageReturnFailed;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } imageReturnFailed SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO17imageReturnFailedyA2CmF");
  SWIFT_INLINE_THUNK bool isImageReturnFailed() const;

  inline const static struct _impl_barcodeRecognitionFailed {  // impl struct for case barcodeRecognitionFailed
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::barcodeRecognitionFailed;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } barcodeRecognitionFailed SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO24barcodeRecognitionFailedyA2CmF");
  SWIFT_INLINE_THUNK bool isBarcodeRecognitionFailed() const;

  inline const static struct _impl_mrzParsingFailed {  // impl struct for case mrzParsingFailed
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mrzParsingFailed;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } mrzParsingFailed SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO16mrzParsingFailedyA2CmF");
  SWIFT_INLINE_THUNK bool isMrzParsingFailed() const;

  inline const static struct _impl_documentFiltered {  // impl struct for case documentFiltered
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::documentFiltered;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } documentFiltered SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO16documentFilteredyA2CmF");
  SWIFT_INLINE_THUNK bool isDocumentFiltered() const;

  inline const static struct _impl_unsupportedDocument {  // impl struct for case unsupportedDocument
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unsupportedDocument;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } unsupportedDocument SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO19unsupportedDocumentyA2CmF");
  SWIFT_INLINE_THUNK bool isUnsupportedDocument() const;

  inline const static struct _impl_awaitingOtherSide {  // impl struct for case awaitingOtherSide
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::awaitingOtherSide;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } awaitingOtherSide SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO17awaitingOtherSideyA2CmF");
  SWIFT_INLINE_THUNK bool isAwaitingOtherSide() const;

  inline const static struct _impl_notScanned {  // impl struct for case notScanned
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::notScanned;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } notScanned SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO10notScannedyA2CmF");
  SWIFT_INLINE_THUNK bool isNotScanned() const;

  inline const static struct _impl_barcodeDetectionFailed {  // impl struct for case barcodeDetectionFailed
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::barcodeDetectionFailed;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } barcodeDetectionFailed SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO22barcodeDetectionFailedyA2CmF");
  SWIFT_INLINE_THUNK bool isBarcodeDetectionFailed() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID16ProcessingStatusO7successyA2CmFWC) return cases::success;
    if (tag == _impl::$s7BlinkID16ProcessingStatusO15detectionFailedyA2CmFWC) return cases::detectionFailed;
    if (tag == _impl::$s7BlinkID16ProcessingStatusO24imagePreprocessingFailedyA2CmFWC) return cases::imagePreprocessingFailed;
    if (tag == _impl::$s7BlinkID16ProcessingStatusO19stabilityTestFailedyA2CmFWC) return cases::stabilityTestFailed;
    if (tag == _impl::$s7BlinkID16ProcessingStatusO17scanningWrongSideyA2CmFWC) return cases::scanningWrongSide;
    if (tag == _impl::$s7BlinkID16ProcessingStatusO25fieldIdentificationFailedyA2CmFWC) return cases::fieldIdentificationFailed;
    if (tag == _impl::$s7BlinkID16ProcessingStatusO21mandatoryFieldMissingyA2CmFWC) return cases::mandatoryFieldMissing;
    if (tag == _impl::$s7BlinkID16ProcessingStatusO22invalidCharactersFoundyA2CmFWC) return cases::invalidCharactersFound;
    if (tag == _impl::$s7BlinkID16ProcessingStatusO17imageReturnFailedyA2CmFWC) return cases::imageReturnFailed;
    if (tag == _impl::$s7BlinkID16ProcessingStatusO24barcodeRecognitionFailedyA2CmFWC) return cases::barcodeRecognitionFailed;
    if (tag == _impl::$s7BlinkID16ProcessingStatusO16mrzParsingFailedyA2CmFWC) return cases::mrzParsingFailed;
    if (tag == _impl::$s7BlinkID16ProcessingStatusO16documentFilteredyA2CmFWC) return cases::documentFiltered;
    if (tag == _impl::$s7BlinkID16ProcessingStatusO19unsupportedDocumentyA2CmFWC) return cases::unsupportedDocument;
    if (tag == _impl::$s7BlinkID16ProcessingStatusO17awaitingOtherSideyA2CmFWC) return cases::awaitingOtherSide;
    if (tag == _impl::$s7BlinkID16ProcessingStatusO10notScannedyA2CmFWC) return cases::notScanned;
    if (tag == _impl::$s7BlinkID16ProcessingStatusO22barcodeDetectionFailedyA2CmFWC) return cases::barcodeDetectionFailed;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<ProcessingStatus> init(const swift::String& rawValue) SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK ProcessingStatus(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ProcessingStatus _make() noexcept {
    auto metadata = _impl::$s7BlinkID16ProcessingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ProcessingStatus(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID16ProcessingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID16ProcessingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID16ProcessingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ProcessingStatus;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID16ProcessingStatusOD;
  static inline constexpr $s7BlinkID16ProcessingStatusOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ProcessingStatus {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ProcessingStatus &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ProcessingStatus &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ProcessingStatus returnNewValue(T callable) {
    auto result = ProcessingStatus::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID16ProcessingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::ProcessingStatus> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID16ProcessingStatusOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::ProcessingStatus> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::ProcessingStatus> = true;
template<>
struct implClassFor<BlinkID::ProcessingStatus> { using type = BlinkID::_impl::_impl_ProcessingStatus; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

namespace _impl {

class _impl_Quadrilateral;

// Type metadata accessor for Quadrilateral
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID13QuadrilateralVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID13QuadrilateralV") Quadrilateral final {
public:
  SWIFT_INLINE_THUNK ~Quadrilateral() noexcept {
    auto metadata = _impl::$s7BlinkID13QuadrilateralVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK Quadrilateral(const Quadrilateral &other) noexcept {
    auto metadata = _impl::$s7BlinkID13QuadrilateralVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK Quadrilateral &operator =(const Quadrilateral &other) noexcept {
    auto metadata = _impl::$s7BlinkID13QuadrilateralVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK Quadrilateral &operator =(Quadrilateral &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER Quadrilateral(Quadrilateral &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK Point getUpperLeft() const SWIFT_SYMBOL("s:7BlinkID13QuadrilateralV9upperLeftAA5PointVvp");
  SWIFT_INLINE_THUNK Point getUpperRight() const SWIFT_SYMBOL("s:7BlinkID13QuadrilateralV10upperRightAA5PointVvp");
  SWIFT_INLINE_THUNK Point getLowerRight() const SWIFT_SYMBOL("s:7BlinkID13QuadrilateralV10lowerRightAA5PointVvp");
  SWIFT_INLINE_THUNK Point getLowerLeft() const SWIFT_SYMBOL("s:7BlinkID13QuadrilateralV9lowerLeftAA5PointVvp");
private:
  SWIFT_INLINE_THUNK Quadrilateral(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK Quadrilateral _make() noexcept {
    auto metadata = _impl::$s7BlinkID13QuadrilateralVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return Quadrilateral(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_Quadrilateral;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID13QuadrilateralVD;
  static inline constexpr $s7BlinkID13QuadrilateralVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_Quadrilateral {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(Quadrilateral &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const Quadrilateral &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER Quadrilateral returnNewValue(T callable) {
    auto result = Quadrilateral::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID13QuadrilateralVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::Quadrilateral> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID13QuadrilateralVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::Quadrilateral> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::Quadrilateral> = true;
template<>
struct implClassFor<BlinkID::Quadrilateral> { using type = BlinkID::_impl::_impl_Quadrilateral; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

/// RecognitionMode enum defines possible recognition modes by BlinkIDSdk
namespace _impl {

class _impl_RecognitionMode;

// Type metadata accessor for RecognitionMode
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID15RecognitionModeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum RecognitionMode
extern "C" {
extern unsigned $s7BlinkID15RecognitionModeO4noneyA2CmFWC;
extern unsigned $s7BlinkID15RecognitionModeO5mrzIdyA2CmFWC;
extern unsigned $s7BlinkID15RecognitionModeO7mrzVisayA2CmFWC;
extern unsigned $s7BlinkID15RecognitionModeO11mrzPassportyA2CmFWC;
extern unsigned $s7BlinkID15RecognitionModeO7photoIdyA2CmFWC;
extern unsigned $s7BlinkID15RecognitionModeO04fullC0yA2CmFWC;
extern unsigned $s7BlinkID15RecognitionModeO9barcodeIdyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID15RecognitionModeO") RecognitionMode final {
public:
  SWIFT_INLINE_THUNK ~RecognitionMode() noexcept {
    auto metadata = _impl::$s7BlinkID15RecognitionModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK RecognitionMode(const RecognitionMode &other) noexcept {
    auto metadata = _impl::$s7BlinkID15RecognitionModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK RecognitionMode &operator =(const RecognitionMode &other) noexcept {
    auto metadata = _impl::$s7BlinkID15RecognitionModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK RecognitionMode &operator =(RecognitionMode &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER RecognitionMode(RecognitionMode &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    none SWIFT_SYMBOL("s:7BlinkID15RecognitionModeO4noneyA2CmF"),
    mrzId SWIFT_SYMBOL("s:7BlinkID15RecognitionModeO5mrzIdyA2CmF"),
    mrzVisa SWIFT_SYMBOL("s:7BlinkID15RecognitionModeO7mrzVisayA2CmF"),
    mrzPassport SWIFT_SYMBOL("s:7BlinkID15RecognitionModeO11mrzPassportyA2CmF"),
    photoId SWIFT_SYMBOL("s:7BlinkID15RecognitionModeO7photoIdyA2CmF"),
    fullRecognition SWIFT_SYMBOL("s:7BlinkID15RecognitionModeO04fullC0yA2CmF"),
    barcodeId SWIFT_SYMBOL("s:7BlinkID15RecognitionModeO9barcodeIdyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_none {  // impl struct for case none
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::none;
    }
    SWIFT_INLINE_THUNK RecognitionMode operator()() const;
  } none SWIFT_SYMBOL("s:7BlinkID15RecognitionModeO4noneyA2CmF");
  SWIFT_INLINE_THUNK bool isNone() const;

  inline const static struct _impl_mrzId {  // impl struct for case mrzId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mrzId;
    }
    SWIFT_INLINE_THUNK RecognitionMode operator()() const;
  } mrzId SWIFT_SYMBOL("s:7BlinkID15RecognitionModeO5mrzIdyA2CmF");
  SWIFT_INLINE_THUNK bool isMrzId() const;

  inline const static struct _impl_mrzVisa {  // impl struct for case mrzVisa
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mrzVisa;
    }
    SWIFT_INLINE_THUNK RecognitionMode operator()() const;
  } mrzVisa SWIFT_SYMBOL("s:7BlinkID15RecognitionModeO7mrzVisayA2CmF");
  SWIFT_INLINE_THUNK bool isMrzVisa() const;

  inline const static struct _impl_mrzPassport {  // impl struct for case mrzPassport
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mrzPassport;
    }
    SWIFT_INLINE_THUNK RecognitionMode operator()() const;
  } mrzPassport SWIFT_SYMBOL("s:7BlinkID15RecognitionModeO11mrzPassportyA2CmF");
  SWIFT_INLINE_THUNK bool isMrzPassport() const;

  inline const static struct _impl_photoId {  // impl struct for case photoId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::photoId;
    }
    SWIFT_INLINE_THUNK RecognitionMode operator()() const;
  } photoId SWIFT_SYMBOL("s:7BlinkID15RecognitionModeO7photoIdyA2CmF");
  SWIFT_INLINE_THUNK bool isPhotoId() const;

  inline const static struct _impl_fullRecognition {  // impl struct for case fullRecognition
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::fullRecognition;
    }
    SWIFT_INLINE_THUNK RecognitionMode operator()() const;
  } fullRecognition SWIFT_SYMBOL("s:7BlinkID15RecognitionModeO04fullC0yA2CmF");
  SWIFT_INLINE_THUNK bool isFullRecognition() const;

  inline const static struct _impl_barcodeId {  // impl struct for case barcodeId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::barcodeId;
    }
    SWIFT_INLINE_THUNK RecognitionMode operator()() const;
  } barcodeId SWIFT_SYMBOL("s:7BlinkID15RecognitionModeO9barcodeIdyA2CmF");
  SWIFT_INLINE_THUNK bool isBarcodeId() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID15RecognitionModeO4noneyA2CmFWC) return cases::none;
    if (tag == _impl::$s7BlinkID15RecognitionModeO5mrzIdyA2CmFWC) return cases::mrzId;
    if (tag == _impl::$s7BlinkID15RecognitionModeO7mrzVisayA2CmFWC) return cases::mrzVisa;
    if (tag == _impl::$s7BlinkID15RecognitionModeO11mrzPassportyA2CmFWC) return cases::mrzPassport;
    if (tag == _impl::$s7BlinkID15RecognitionModeO7photoIdyA2CmFWC) return cases::photoId;
    if (tag == _impl::$s7BlinkID15RecognitionModeO04fullC0yA2CmFWC) return cases::fullRecognition;
    if (tag == _impl::$s7BlinkID15RecognitionModeO9barcodeIdyA2CmFWC) return cases::barcodeId;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<RecognitionMode> init(const swift::String& rawValue) SWIFT_SYMBOL("s:7BlinkID15RecognitionModeO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:7BlinkID15RecognitionModeO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK RecognitionMode(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK RecognitionMode _make() noexcept {
    auto metadata = _impl::$s7BlinkID15RecognitionModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return RecognitionMode(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID15RecognitionModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID15RecognitionModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID15RecognitionModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_RecognitionMode;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID15RecognitionModeOD;
  static inline constexpr $s7BlinkID15RecognitionModeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_RecognitionMode {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(RecognitionMode &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const RecognitionMode &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER RecognitionMode returnNewValue(T callable) {
    auto result = RecognitionMode::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID15RecognitionModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::RecognitionMode> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID15RecognitionModeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::RecognitionMode> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::RecognitionMode> = true;
template<>
struct implClassFor<BlinkID::RecognitionMode> { using type = BlinkID::_impl::_impl_RecognitionMode; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID21RecognitionModeFilterV") RecognitionModeFilter;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::RecognitionModeFilter> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_RecognitionModeFilter;

// Type metadata accessor for RecognitionModeFilter
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID21RecognitionModeFilterVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID21RecognitionModeFilterV") RecognitionModeFilter final {
public:
  SWIFT_INLINE_THUNK ~RecognitionModeFilter() noexcept {
    auto metadata = _impl::$s7BlinkID21RecognitionModeFilterVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK RecognitionModeFilter(const RecognitionModeFilter &other) noexcept {
    auto metadata = _impl::$s7BlinkID21RecognitionModeFilterVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK RecognitionModeFilter &operator =(const RecognitionModeFilter &other) noexcept {
    auto metadata = _impl::$s7BlinkID21RecognitionModeFilterVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK RecognitionModeFilter &operator =(RecognitionModeFilter &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER RecognitionModeFilter(RecognitionModeFilter &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK bool getEnableMrzId() const SWIFT_SYMBOL("s:7BlinkID21RecognitionModeFilterV11enableMrzIdSbvp");
  SWIFT_INLINE_THUNK void setEnableMrzId(bool value) SWIFT_SYMBOL("s:7BlinkID21RecognitionModeFilterV11enableMrzIdSbvp");
  SWIFT_INLINE_THUNK bool getEnableMrzVisa() const SWIFT_SYMBOL("s:7BlinkID21RecognitionModeFilterV13enableMrzVisaSbvp");
  SWIFT_INLINE_THUNK void setEnableMrzVisa(bool value) SWIFT_SYMBOL("s:7BlinkID21RecognitionModeFilterV13enableMrzVisaSbvp");
  SWIFT_INLINE_THUNK bool getEnableMrzPassport() const SWIFT_SYMBOL("s:7BlinkID21RecognitionModeFilterV17enableMrzPassportSbvp");
  SWIFT_INLINE_THUNK void setEnableMrzPassport(bool value) SWIFT_SYMBOL("s:7BlinkID21RecognitionModeFilterV17enableMrzPassportSbvp");
  SWIFT_INLINE_THUNK bool getEnablePhotoId() const SWIFT_SYMBOL("s:7BlinkID21RecognitionModeFilterV13enablePhotoIdSbvp");
  SWIFT_INLINE_THUNK void setEnablePhotoId(bool value) SWIFT_SYMBOL("s:7BlinkID21RecognitionModeFilterV13enablePhotoIdSbvp");
  SWIFT_INLINE_THUNK bool getEnableBarcodeId() const SWIFT_SYMBOL("s:7BlinkID21RecognitionModeFilterV15enableBarcodeIdSbvp");
  SWIFT_INLINE_THUNK void setEnableBarcodeId(bool value) SWIFT_SYMBOL("s:7BlinkID21RecognitionModeFilterV15enableBarcodeIdSbvp");
  SWIFT_INLINE_THUNK bool getEnableFullDocumentRecognition() const SWIFT_SYMBOL("s:7BlinkID21RecognitionModeFilterV018enableFullDocumentC0Sbvp");
  SWIFT_INLINE_THUNK void setEnableFullDocumentRecognition(bool value) SWIFT_SYMBOL("s:7BlinkID21RecognitionModeFilterV018enableFullDocumentC0Sbvp");
  static SWIFT_INLINE_THUNK RecognitionModeFilter init(bool enableMrzId, bool enableMrzVisa, bool enableMrzPassport, bool enablePhotoId, bool enableBarcodeId, bool enableFullDocumentRecognition) SWIFT_SYMBOL("s:7BlinkID21RecognitionModeFilterV11enableMrzId0fG4Visa0fG8Passport0f5PhotoH00f7BarcodeH00f12FullDocumentC0ACSb_S5btcfc");
private:
  SWIFT_INLINE_THUNK RecognitionModeFilter(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK RecognitionModeFilter _make() noexcept {
    auto metadata = _impl::$s7BlinkID21RecognitionModeFilterVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return RecognitionModeFilter(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_RecognitionModeFilter;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID21RecognitionModeFilterVD;
  static inline constexpr $s7BlinkID21RecognitionModeFilterVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_RecognitionModeFilter {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(RecognitionModeFilter &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const RecognitionModeFilter &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER RecognitionModeFilter returnNewValue(T callable) {
    auto result = RecognitionModeFilter::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID21RecognitionModeFilterVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::RecognitionModeFilter> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID21RecognitionModeFilterVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::RecognitionModeFilter> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::RecognitionModeFilter> = true;
template<>
struct implClassFor<BlinkID::RecognitionModeFilter> { using type = BlinkID::_impl::_impl_RecognitionModeFilter; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

namespace _impl {

class _impl_RectangleF;

// Type metadata accessor for RectangleF
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID10RectangleFVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID10RectangleFV") RectangleF final {
public:
  SWIFT_INLINE_THUNK ~RectangleF() noexcept {
    auto metadata = _impl::$s7BlinkID10RectangleFVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK RectangleF(const RectangleF &other) noexcept {
    auto metadata = _impl::$s7BlinkID10RectangleFVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK RectangleF &operator =(const RectangleF &other) noexcept {
    auto metadata = _impl::$s7BlinkID10RectangleFVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK RectangleF &operator =(RectangleF &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER RectangleF(RectangleF &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
private:
  SWIFT_INLINE_THUNK RectangleF(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK RectangleF _make() noexcept {
    auto metadata = _impl::$s7BlinkID10RectangleFVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return RectangleF(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_RectangleF;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID10RectangleFVD;
  static inline constexpr $s7BlinkID10RectangleFVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_RectangleF {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(RectangleF &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const RectangleF &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER RectangleF returnNewValue(T callable) {
    auto result = RectangleF::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID10RectangleFVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::RectangleF> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID10RectangleFVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::RectangleF> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::RectangleF> = true;
template<>
struct implClassFor<BlinkID::RectangleF> { using type = BlinkID::_impl::_impl_RectangleF; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

/// Document region.
namespace _impl {

class _impl_Region;

// Type metadata accessor for Region
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID6RegionOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum Region
extern "C" {
extern unsigned $s7BlinkID6RegionO4noneyA2CmFWC;
extern unsigned $s7BlinkID6RegionO7alabamayA2CmFWC;
extern unsigned $s7BlinkID6RegionO6alaskayA2CmFWC;
extern unsigned $s7BlinkID6RegionO7albertayA2CmFWC;
extern unsigned $s7BlinkID6RegionO7arizonayA2CmFWC;
extern unsigned $s7BlinkID6RegionO8arkansasyA2CmFWC;
extern unsigned $s7BlinkID6RegionO26australianCapitalTerritoryyA2CmFWC;
extern unsigned $s7BlinkID6RegionO15britishColumbiayA2CmFWC;
extern unsigned $s7BlinkID6RegionO10californiayA2CmFWC;
extern unsigned $s7BlinkID6RegionO8coloradoyA2CmFWC;
extern unsigned $s7BlinkID6RegionO11connecticutyA2CmFWC;
extern unsigned $s7BlinkID6RegionO8delawareyA2CmFWC;
extern unsigned $s7BlinkID6RegionO18districtOfColumbiayA2CmFWC;
extern unsigned $s7BlinkID6RegionO7floridayA2CmFWC;
extern unsigned $s7BlinkID6RegionO7georgiayA2CmFWC;
extern unsigned $s7BlinkID6RegionO6hawaiiyA2CmFWC;
extern unsigned $s7BlinkID6RegionO5idahoyA2CmFWC;
extern unsigned $s7BlinkID6RegionO8illinoisyA2CmFWC;
extern unsigned $s7BlinkID6RegionO7indianayA2CmFWC;
extern unsigned $s7BlinkID6RegionO4iowayA2CmFWC;
extern unsigned $s7BlinkID6RegionO6kansasyA2CmFWC;
extern unsigned $s7BlinkID6RegionO8kentuckyyA2CmFWC;
extern unsigned $s7BlinkID6RegionO9louisianayA2CmFWC;
extern unsigned $s7BlinkID6RegionO5maineyA2CmFWC;
extern unsigned $s7BlinkID6RegionO8manitobayA2CmFWC;
extern unsigned $s7BlinkID6RegionO8marylandyA2CmFWC;
extern unsigned $s7BlinkID6RegionO13massachusettsyA2CmFWC;
extern unsigned $s7BlinkID6RegionO8michiganyA2CmFWC;
extern unsigned $s7BlinkID6RegionO9minnesotayA2CmFWC;
extern unsigned $s7BlinkID6RegionO11mississippiyA2CmFWC;
extern unsigned $s7BlinkID6RegionO8missouriyA2CmFWC;
extern unsigned $s7BlinkID6RegionO7montanayA2CmFWC;
extern unsigned $s7BlinkID6RegionO8nebraskayA2CmFWC;
extern unsigned $s7BlinkID6RegionO6nevadayA2CmFWC;
extern unsigned $s7BlinkID6RegionO12newBrunswickyA2CmFWC;
extern unsigned $s7BlinkID6RegionO12newHampshireyA2CmFWC;
extern unsigned $s7BlinkID6RegionO9newJerseyyA2CmFWC;
extern unsigned $s7BlinkID6RegionO9newMexicoyA2CmFWC;
extern unsigned $s7BlinkID6RegionO13newSouthWalesyA2CmFWC;
extern unsigned $s7BlinkID6RegionO7newYorkyA2CmFWC;
extern unsigned $s7BlinkID6RegionO17northernTerritoryyA2CmFWC;
extern unsigned $s7BlinkID6RegionO13northCarolinayA2CmFWC;
extern unsigned $s7BlinkID6RegionO11northDakotayA2CmFWC;
extern unsigned $s7BlinkID6RegionO10novaScotiayA2CmFWC;
extern unsigned $s7BlinkID6RegionO4ohioyA2CmFWC;
extern unsigned $s7BlinkID6RegionO8oklahomayA2CmFWC;
extern unsigned $s7BlinkID6RegionO7ontarioyA2CmFWC;
extern unsigned $s7BlinkID6RegionO6oregonyA2CmFWC;
extern unsigned $s7BlinkID6RegionO12pennsylvaniayA2CmFWC;
extern unsigned $s7BlinkID6RegionO6quebecyA2CmFWC;
extern unsigned $s7BlinkID6RegionO10queenslandyA2CmFWC;
extern unsigned $s7BlinkID6RegionO11rhodeIslandyA2CmFWC;
extern unsigned $s7BlinkID6RegionO12saskatchewanyA2CmFWC;
extern unsigned $s7BlinkID6RegionO14southAustraliayA2CmFWC;
extern unsigned $s7BlinkID6RegionO13southCarolinayA2CmFWC;
extern unsigned $s7BlinkID6RegionO11southDakotayA2CmFWC;
extern unsigned $s7BlinkID6RegionO8tasmaniayA2CmFWC;
extern unsigned $s7BlinkID6RegionO9tennesseeyA2CmFWC;
extern unsigned $s7BlinkID6RegionO5texasyA2CmFWC;
extern unsigned $s7BlinkID6RegionO4utahyA2CmFWC;
extern unsigned $s7BlinkID6RegionO7vermontyA2CmFWC;
extern unsigned $s7BlinkID6RegionO8victoriayA2CmFWC;
extern unsigned $s7BlinkID6RegionO8virginiayA2CmFWC;
extern unsigned $s7BlinkID6RegionO10washingtonyA2CmFWC;
extern unsigned $s7BlinkID6RegionO16westernAustraliayA2CmFWC;
extern unsigned $s7BlinkID6RegionO12westVirginiayA2CmFWC;
extern unsigned $s7BlinkID6RegionO9wisconsinyA2CmFWC;
extern unsigned $s7BlinkID6RegionO7wyomingyA2CmFWC;
extern unsigned $s7BlinkID6RegionO5yukonyA2CmFWC;
extern unsigned $s7BlinkID6RegionO14ciudadDeMexicoyA2CmFWC;
extern unsigned $s7BlinkID6RegionO7jaliscoyA2CmFWC;
extern unsigned $s7BlinkID6RegionO23newfoundlandAndLabradoryA2CmFWC;
extern unsigned $s7BlinkID6RegionO9nuevoLeonyA2CmFWC;
extern unsigned $s7BlinkID6RegionO14bajaCaliforniayA2CmFWC;
extern unsigned $s7BlinkID6RegionO9chihuahuayA2CmFWC;
extern unsigned $s7BlinkID6RegionO10guanajuatoyA2CmFWC;
extern unsigned $s7BlinkID6RegionO8guerreroyA2CmFWC;
extern unsigned $s7BlinkID6RegionO6mexicoyA2CmFWC;
extern unsigned $s7BlinkID6RegionO9michoacanyA2CmFWC;
extern unsigned $s7BlinkID6RegionO11newYorkCityyA2CmFWC;
extern unsigned $s7BlinkID6RegionO10tamaulipasyA2CmFWC;
extern unsigned $s7BlinkID6RegionO8veracruzyA2CmFWC;
extern unsigned $s7BlinkID6RegionO7chiapasyA2CmFWC;
extern unsigned $s7BlinkID6RegionO8coahuilayA2CmFWC;
extern unsigned $s7BlinkID6RegionO7durangoyA2CmFWC;
extern unsigned $s7BlinkID6RegionO14guerreroCoculayA2CmFWC;
extern unsigned $s7BlinkID6RegionO16guerreroJuchitanyA2CmFWC;
extern unsigned $s7BlinkID6RegionO21guerreroTepecoacuilcoyA2CmFWC;
extern unsigned $s7BlinkID6RegionO16guerreroTlacoapayA2CmFWC;
extern unsigned $s7BlinkID6RegionO7gujaratyA2CmFWC;
extern unsigned $s7BlinkID6RegionO7hidalgoyA2CmFWC;
extern unsigned $s7BlinkID6RegionO9karnatakayA2CmFWC;
extern unsigned $s7BlinkID6RegionO6keralayA2CmFWC;
extern unsigned $s7BlinkID6RegionO17khyberPakhtunkhwayA2CmFWC;
extern unsigned $s7BlinkID6RegionO13madhyaPradeshyA2CmFWC;
extern unsigned $s7BlinkID6RegionO11maharashtrayA2CmFWC;
extern unsigned $s7BlinkID6RegionO7morelosyA2CmFWC;
extern unsigned $s7BlinkID6RegionO7nayarityA2CmFWC;
extern unsigned $s7BlinkID6RegionO6oaxacayA2CmFWC;
extern unsigned $s7BlinkID6RegionO6pueblayA2CmFWC;
extern unsigned $s7BlinkID6RegionO6punjabyA2CmFWC;
extern unsigned $s7BlinkID6RegionO9queretaroyA2CmFWC;
extern unsigned $s7BlinkID6RegionO13sanLuisPotosiyA2CmFWC;
extern unsigned $s7BlinkID6RegionO7sinaloayA2CmFWC;
extern unsigned $s7BlinkID6RegionO6sonorayA2CmFWC;
extern unsigned $s7BlinkID6RegionO7tabascoyA2CmFWC;
extern unsigned $s7BlinkID6RegionO9tamilNaduyA2CmFWC;
extern unsigned $s7BlinkID6RegionO7yucatanyA2CmFWC;
extern unsigned $s7BlinkID6RegionO9zacatecasyA2CmFWC;
extern unsigned $s7BlinkID6RegionO14aguascalientesyA2CmFWC;
extern unsigned $s7BlinkID6RegionO17bajaCaliforniaSuryA2CmFWC;
extern unsigned $s7BlinkID6RegionO8campecheyA2CmFWC;
extern unsigned $s7BlinkID6RegionO6colimayA2CmFWC;
extern unsigned $s7BlinkID6RegionO23quintanaRooBenitoJuarezyA2CmFWC;
extern unsigned $s7BlinkID6RegionO11quintanaRooyA2CmFWC;
extern unsigned $s7BlinkID6RegionO22quintanaRooSolidaridadyA2CmFWC;
extern unsigned $s7BlinkID6RegionO8tlaxcalayA2CmFWC;
extern unsigned $s7BlinkID6RegionO18quintanaRooCozumelyA2CmFWC;
extern unsigned $s7BlinkID6RegionO8saoPaoloyA2CmFWC;
extern unsigned $s7BlinkID6RegionO12rioDeJaneiroyA2CmFWC;
extern unsigned $s7BlinkID6RegionO14rioGrandeDoSulyA2CmFWC;
extern unsigned $s7BlinkID6RegionO20northwestTerritoriesyA2CmFWC;
extern unsigned $s7BlinkID6RegionO7nunavutyA2CmFWC;
extern unsigned $s7BlinkID6RegionO18princeEdwardIslandyA2CmFWC;
extern unsigned $s7BlinkID6RegionO15distritoFederalyA2CmFWC;
extern unsigned $s7BlinkID6RegionO8maranhaoyA2CmFWC;
extern unsigned $s7BlinkID6RegionO10matoGrossoyA2CmFWC;
extern unsigned $s7BlinkID6RegionO11minasGeraisyA2CmFWC;
extern unsigned $s7BlinkID6RegionO4parayA2CmFWC;
extern unsigned $s7BlinkID6RegionO6paranayA2CmFWC;
extern unsigned $s7BlinkID6RegionO10pernambucoyA2CmFWC;
extern unsigned $s7BlinkID6RegionO13santaCatarinayA2CmFWC;
extern unsigned $s7BlinkID6RegionO13andhraPradeshyA2CmFWC;
extern unsigned $s7BlinkID6RegionO5cearayA2CmFWC;
extern unsigned $s7BlinkID6RegionO5goiasyA2CmFWC;
extern unsigned $s7BlinkID6RegionO24guerreroAcapulcoDeJuarezyA2CmFWC;
extern unsigned $s7BlinkID6RegionO7haryanayA2CmFWC;
extern unsigned $s7BlinkID6RegionO7sergipeyA2CmFWC;
extern unsigned $s7BlinkID6RegionO7alagoasyA2CmFWC;
extern unsigned $s7BlinkID6RegionO10bangsamoroyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID6RegionO") Region final {
public:
  SWIFT_INLINE_THUNK ~Region() noexcept {
    auto metadata = _impl::$s7BlinkID6RegionOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK Region(const Region &other) noexcept {
    auto metadata = _impl::$s7BlinkID6RegionOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK Region &operator =(const Region &other) noexcept {
    auto metadata = _impl::$s7BlinkID6RegionOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK Region &operator =(Region &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER Region(Region &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    none SWIFT_SYMBOL("s:7BlinkID6RegionO4noneyA2CmF"),
    alabama SWIFT_SYMBOL("s:7BlinkID6RegionO7alabamayA2CmF"),
    alaska SWIFT_SYMBOL("s:7BlinkID6RegionO6alaskayA2CmF"),
    alberta SWIFT_SYMBOL("s:7BlinkID6RegionO7albertayA2CmF"),
    arizona SWIFT_SYMBOL("s:7BlinkID6RegionO7arizonayA2CmF"),
    arkansas SWIFT_SYMBOL("s:7BlinkID6RegionO8arkansasyA2CmF"),
    australianCapitalTerritory SWIFT_SYMBOL("s:7BlinkID6RegionO26australianCapitalTerritoryyA2CmF"),
    britishColumbia SWIFT_SYMBOL("s:7BlinkID6RegionO15britishColumbiayA2CmF"),
    california SWIFT_SYMBOL("s:7BlinkID6RegionO10californiayA2CmF"),
    colorado SWIFT_SYMBOL("s:7BlinkID6RegionO8coloradoyA2CmF"),
    connecticut SWIFT_SYMBOL("s:7BlinkID6RegionO11connecticutyA2CmF"),
    delaware SWIFT_SYMBOL("s:7BlinkID6RegionO8delawareyA2CmF"),
    districtOfColumbia SWIFT_SYMBOL("s:7BlinkID6RegionO18districtOfColumbiayA2CmF"),
    florida SWIFT_SYMBOL("s:7BlinkID6RegionO7floridayA2CmF"),
    georgia SWIFT_SYMBOL("s:7BlinkID6RegionO7georgiayA2CmF"),
    hawaii SWIFT_SYMBOL("s:7BlinkID6RegionO6hawaiiyA2CmF"),
    idaho SWIFT_SYMBOL("s:7BlinkID6RegionO5idahoyA2CmF"),
    illinois SWIFT_SYMBOL("s:7BlinkID6RegionO8illinoisyA2CmF"),
    indiana SWIFT_SYMBOL("s:7BlinkID6RegionO7indianayA2CmF"),
    iowa SWIFT_SYMBOL("s:7BlinkID6RegionO4iowayA2CmF"),
    kansas SWIFT_SYMBOL("s:7BlinkID6RegionO6kansasyA2CmF"),
    kentucky SWIFT_SYMBOL("s:7BlinkID6RegionO8kentuckyyA2CmF"),
    louisiana SWIFT_SYMBOL("s:7BlinkID6RegionO9louisianayA2CmF"),
    maine SWIFT_SYMBOL("s:7BlinkID6RegionO5maineyA2CmF"),
    manitoba SWIFT_SYMBOL("s:7BlinkID6RegionO8manitobayA2CmF"),
    maryland SWIFT_SYMBOL("s:7BlinkID6RegionO8marylandyA2CmF"),
    massachusetts SWIFT_SYMBOL("s:7BlinkID6RegionO13massachusettsyA2CmF"),
    michigan SWIFT_SYMBOL("s:7BlinkID6RegionO8michiganyA2CmF"),
    minnesota SWIFT_SYMBOL("s:7BlinkID6RegionO9minnesotayA2CmF"),
    mississippi SWIFT_SYMBOL("s:7BlinkID6RegionO11mississippiyA2CmF"),
    missouri SWIFT_SYMBOL("s:7BlinkID6RegionO8missouriyA2CmF"),
    montana SWIFT_SYMBOL("s:7BlinkID6RegionO7montanayA2CmF"),
    nebraska SWIFT_SYMBOL("s:7BlinkID6RegionO8nebraskayA2CmF"),
    nevada SWIFT_SYMBOL("s:7BlinkID6RegionO6nevadayA2CmF"),
    newBrunswick SWIFT_SYMBOL("s:7BlinkID6RegionO12newBrunswickyA2CmF"),
    newHampshire SWIFT_SYMBOL("s:7BlinkID6RegionO12newHampshireyA2CmF"),
    newJersey SWIFT_SYMBOL("s:7BlinkID6RegionO9newJerseyyA2CmF"),
    newMexico SWIFT_SYMBOL("s:7BlinkID6RegionO9newMexicoyA2CmF"),
    newSouthWales SWIFT_SYMBOL("s:7BlinkID6RegionO13newSouthWalesyA2CmF"),
    newYork SWIFT_SYMBOL("s:7BlinkID6RegionO7newYorkyA2CmF"),
    northernTerritory SWIFT_SYMBOL("s:7BlinkID6RegionO17northernTerritoryyA2CmF"),
    northCarolina SWIFT_SYMBOL("s:7BlinkID6RegionO13northCarolinayA2CmF"),
    northDakota SWIFT_SYMBOL("s:7BlinkID6RegionO11northDakotayA2CmF"),
    novaScotia SWIFT_SYMBOL("s:7BlinkID6RegionO10novaScotiayA2CmF"),
    ohio SWIFT_SYMBOL("s:7BlinkID6RegionO4ohioyA2CmF"),
    oklahoma SWIFT_SYMBOL("s:7BlinkID6RegionO8oklahomayA2CmF"),
    ontario SWIFT_SYMBOL("s:7BlinkID6RegionO7ontarioyA2CmF"),
    oregon SWIFT_SYMBOL("s:7BlinkID6RegionO6oregonyA2CmF"),
    pennsylvania SWIFT_SYMBOL("s:7BlinkID6RegionO12pennsylvaniayA2CmF"),
    quebec SWIFT_SYMBOL("s:7BlinkID6RegionO6quebecyA2CmF"),
    queensland SWIFT_SYMBOL("s:7BlinkID6RegionO10queenslandyA2CmF"),
    rhodeIsland SWIFT_SYMBOL("s:7BlinkID6RegionO11rhodeIslandyA2CmF"),
    saskatchewan SWIFT_SYMBOL("s:7BlinkID6RegionO12saskatchewanyA2CmF"),
    southAustralia SWIFT_SYMBOL("s:7BlinkID6RegionO14southAustraliayA2CmF"),
    southCarolina SWIFT_SYMBOL("s:7BlinkID6RegionO13southCarolinayA2CmF"),
    southDakota SWIFT_SYMBOL("s:7BlinkID6RegionO11southDakotayA2CmF"),
    tasmania SWIFT_SYMBOL("s:7BlinkID6RegionO8tasmaniayA2CmF"),
    tennessee SWIFT_SYMBOL("s:7BlinkID6RegionO9tennesseeyA2CmF"),
    texas SWIFT_SYMBOL("s:7BlinkID6RegionO5texasyA2CmF"),
    utah SWIFT_SYMBOL("s:7BlinkID6RegionO4utahyA2CmF"),
    vermont SWIFT_SYMBOL("s:7BlinkID6RegionO7vermontyA2CmF"),
    victoria SWIFT_SYMBOL("s:7BlinkID6RegionO8victoriayA2CmF"),
    virginia SWIFT_SYMBOL("s:7BlinkID6RegionO8virginiayA2CmF"),
    washington SWIFT_SYMBOL("s:7BlinkID6RegionO10washingtonyA2CmF"),
    westernAustralia SWIFT_SYMBOL("s:7BlinkID6RegionO16westernAustraliayA2CmF"),
    westVirginia SWIFT_SYMBOL("s:7BlinkID6RegionO12westVirginiayA2CmF"),
    wisconsin SWIFT_SYMBOL("s:7BlinkID6RegionO9wisconsinyA2CmF"),
    wyoming SWIFT_SYMBOL("s:7BlinkID6RegionO7wyomingyA2CmF"),
    yukon SWIFT_SYMBOL("s:7BlinkID6RegionO5yukonyA2CmF"),
    ciudadDeMexico SWIFT_SYMBOL("s:7BlinkID6RegionO14ciudadDeMexicoyA2CmF"),
    jalisco SWIFT_SYMBOL("s:7BlinkID6RegionO7jaliscoyA2CmF"),
    newfoundlandAndLabrador SWIFT_SYMBOL("s:7BlinkID6RegionO23newfoundlandAndLabradoryA2CmF"),
    nuevoLeon SWIFT_SYMBOL("s:7BlinkID6RegionO9nuevoLeonyA2CmF"),
    bajaCalifornia SWIFT_SYMBOL("s:7BlinkID6RegionO14bajaCaliforniayA2CmF"),
    chihuahua SWIFT_SYMBOL("s:7BlinkID6RegionO9chihuahuayA2CmF"),
    guanajuato SWIFT_SYMBOL("s:7BlinkID6RegionO10guanajuatoyA2CmF"),
    guerrero SWIFT_SYMBOL("s:7BlinkID6RegionO8guerreroyA2CmF"),
    mexico SWIFT_SYMBOL("s:7BlinkID6RegionO6mexicoyA2CmF"),
    michoacan SWIFT_SYMBOL("s:7BlinkID6RegionO9michoacanyA2CmF"),
    newYorkCity SWIFT_SYMBOL("s:7BlinkID6RegionO11newYorkCityyA2CmF"),
    tamaulipas SWIFT_SYMBOL("s:7BlinkID6RegionO10tamaulipasyA2CmF"),
    veracruz SWIFT_SYMBOL("s:7BlinkID6RegionO8veracruzyA2CmF"),
    chiapas SWIFT_SYMBOL("s:7BlinkID6RegionO7chiapasyA2CmF"),
    coahuila SWIFT_SYMBOL("s:7BlinkID6RegionO8coahuilayA2CmF"),
    durango SWIFT_SYMBOL("s:7BlinkID6RegionO7durangoyA2CmF"),
    guerreroCocula SWIFT_SYMBOL("s:7BlinkID6RegionO14guerreroCoculayA2CmF"),
    guerreroJuchitan SWIFT_SYMBOL("s:7BlinkID6RegionO16guerreroJuchitanyA2CmF"),
    guerreroTepecoacuilco SWIFT_SYMBOL("s:7BlinkID6RegionO21guerreroTepecoacuilcoyA2CmF"),
    guerreroTlacoapa SWIFT_SYMBOL("s:7BlinkID6RegionO16guerreroTlacoapayA2CmF"),
    gujarat SWIFT_SYMBOL("s:7BlinkID6RegionO7gujaratyA2CmF"),
    hidalgo SWIFT_SYMBOL("s:7BlinkID6RegionO7hidalgoyA2CmF"),
    karnataka SWIFT_SYMBOL("s:7BlinkID6RegionO9karnatakayA2CmF"),
    kerala SWIFT_SYMBOL("s:7BlinkID6RegionO6keralayA2CmF"),
    khyberPakhtunkhwa SWIFT_SYMBOL("s:7BlinkID6RegionO17khyberPakhtunkhwayA2CmF"),
    madhyaPradesh SWIFT_SYMBOL("s:7BlinkID6RegionO13madhyaPradeshyA2CmF"),
    maharashtra SWIFT_SYMBOL("s:7BlinkID6RegionO11maharashtrayA2CmF"),
    morelos SWIFT_SYMBOL("s:7BlinkID6RegionO7morelosyA2CmF"),
    nayarit SWIFT_SYMBOL("s:7BlinkID6RegionO7nayarityA2CmF"),
    oaxaca SWIFT_SYMBOL("s:7BlinkID6RegionO6oaxacayA2CmF"),
    puebla SWIFT_SYMBOL("s:7BlinkID6RegionO6pueblayA2CmF"),
    punjab SWIFT_SYMBOL("s:7BlinkID6RegionO6punjabyA2CmF"),
    queretaro SWIFT_SYMBOL("s:7BlinkID6RegionO9queretaroyA2CmF"),
    sanLuisPotosi SWIFT_SYMBOL("s:7BlinkID6RegionO13sanLuisPotosiyA2CmF"),
    sinaloa SWIFT_SYMBOL("s:7BlinkID6RegionO7sinaloayA2CmF"),
    sonora SWIFT_SYMBOL("s:7BlinkID6RegionO6sonorayA2CmF"),
    tabasco SWIFT_SYMBOL("s:7BlinkID6RegionO7tabascoyA2CmF"),
    tamilNadu SWIFT_SYMBOL("s:7BlinkID6RegionO9tamilNaduyA2CmF"),
    yucatan SWIFT_SYMBOL("s:7BlinkID6RegionO7yucatanyA2CmF"),
    zacatecas SWIFT_SYMBOL("s:7BlinkID6RegionO9zacatecasyA2CmF"),
    aguascalientes SWIFT_SYMBOL("s:7BlinkID6RegionO14aguascalientesyA2CmF"),
    bajaCaliforniaSur SWIFT_SYMBOL("s:7BlinkID6RegionO17bajaCaliforniaSuryA2CmF"),
    campeche SWIFT_SYMBOL("s:7BlinkID6RegionO8campecheyA2CmF"),
    colima SWIFT_SYMBOL("s:7BlinkID6RegionO6colimayA2CmF"),
    quintanaRooBenitoJuarez SWIFT_SYMBOL("s:7BlinkID6RegionO23quintanaRooBenitoJuarezyA2CmF"),
    quintanaRoo SWIFT_SYMBOL("s:7BlinkID6RegionO11quintanaRooyA2CmF"),
    quintanaRooSolidaridad SWIFT_SYMBOL("s:7BlinkID6RegionO22quintanaRooSolidaridadyA2CmF"),
    tlaxcala SWIFT_SYMBOL("s:7BlinkID6RegionO8tlaxcalayA2CmF"),
    quintanaRooCozumel SWIFT_SYMBOL("s:7BlinkID6RegionO18quintanaRooCozumelyA2CmF"),
    saoPaolo SWIFT_SYMBOL("s:7BlinkID6RegionO8saoPaoloyA2CmF"),
    rioDeJaneiro SWIFT_SYMBOL("s:7BlinkID6RegionO12rioDeJaneiroyA2CmF"),
    rioGrandeDoSul SWIFT_SYMBOL("s:7BlinkID6RegionO14rioGrandeDoSulyA2CmF"),
    northwestTerritories SWIFT_SYMBOL("s:7BlinkID6RegionO20northwestTerritoriesyA2CmF"),
    nunavut SWIFT_SYMBOL("s:7BlinkID6RegionO7nunavutyA2CmF"),
    princeEdwardIsland SWIFT_SYMBOL("s:7BlinkID6RegionO18princeEdwardIslandyA2CmF"),
    distritoFederal SWIFT_SYMBOL("s:7BlinkID6RegionO15distritoFederalyA2CmF"),
    maranhao SWIFT_SYMBOL("s:7BlinkID6RegionO8maranhaoyA2CmF"),
    matoGrosso SWIFT_SYMBOL("s:7BlinkID6RegionO10matoGrossoyA2CmF"),
    minasGerais SWIFT_SYMBOL("s:7BlinkID6RegionO11minasGeraisyA2CmF"),
    para SWIFT_SYMBOL("s:7BlinkID6RegionO4parayA2CmF"),
    parana SWIFT_SYMBOL("s:7BlinkID6RegionO6paranayA2CmF"),
    pernambuco SWIFT_SYMBOL("s:7BlinkID6RegionO10pernambucoyA2CmF"),
    santaCatarina SWIFT_SYMBOL("s:7BlinkID6RegionO13santaCatarinayA2CmF"),
    andhraPradesh SWIFT_SYMBOL("s:7BlinkID6RegionO13andhraPradeshyA2CmF"),
    ceara SWIFT_SYMBOL("s:7BlinkID6RegionO5cearayA2CmF"),
    goias SWIFT_SYMBOL("s:7BlinkID6RegionO5goiasyA2CmF"),
    guerreroAcapulcoDeJuarez SWIFT_SYMBOL("s:7BlinkID6RegionO24guerreroAcapulcoDeJuarezyA2CmF"),
    haryana SWIFT_SYMBOL("s:7BlinkID6RegionO7haryanayA2CmF"),
    sergipe SWIFT_SYMBOL("s:7BlinkID6RegionO7sergipeyA2CmF"),
    alagoas SWIFT_SYMBOL("s:7BlinkID6RegionO7alagoasyA2CmF"),
    bangsamoro SWIFT_SYMBOL("s:7BlinkID6RegionO10bangsamoroyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_none {  // impl struct for case none
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::none;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } none SWIFT_SYMBOL("s:7BlinkID6RegionO4noneyA2CmF");
  SWIFT_INLINE_THUNK bool isNone() const;

  inline const static struct _impl_alabama {  // impl struct for case alabama
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::alabama;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } alabama SWIFT_SYMBOL("s:7BlinkID6RegionO7alabamayA2CmF");
  SWIFT_INLINE_THUNK bool isAlabama() const;

  inline const static struct _impl_alaska {  // impl struct for case alaska
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::alaska;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } alaska SWIFT_SYMBOL("s:7BlinkID6RegionO6alaskayA2CmF");
  SWIFT_INLINE_THUNK bool isAlaska() const;

  inline const static struct _impl_alberta {  // impl struct for case alberta
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::alberta;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } alberta SWIFT_SYMBOL("s:7BlinkID6RegionO7albertayA2CmF");
  SWIFT_INLINE_THUNK bool isAlberta() const;

  inline const static struct _impl_arizona {  // impl struct for case arizona
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::arizona;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } arizona SWIFT_SYMBOL("s:7BlinkID6RegionO7arizonayA2CmF");
  SWIFT_INLINE_THUNK bool isArizona() const;

  inline const static struct _impl_arkansas {  // impl struct for case arkansas
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::arkansas;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } arkansas SWIFT_SYMBOL("s:7BlinkID6RegionO8arkansasyA2CmF");
  SWIFT_INLINE_THUNK bool isArkansas() const;

  inline const static struct _impl_australianCapitalTerritory {  // impl struct for case australianCapitalTerritory
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::australianCapitalTerritory;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } australianCapitalTerritory SWIFT_SYMBOL("s:7BlinkID6RegionO26australianCapitalTerritoryyA2CmF");
  SWIFT_INLINE_THUNK bool isAustralianCapitalTerritory() const;

  inline const static struct _impl_britishColumbia {  // impl struct for case britishColumbia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::britishColumbia;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } britishColumbia SWIFT_SYMBOL("s:7BlinkID6RegionO15britishColumbiayA2CmF");
  SWIFT_INLINE_THUNK bool isBritishColumbia() const;

  inline const static struct _impl_california {  // impl struct for case california
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::california;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } california SWIFT_SYMBOL("s:7BlinkID6RegionO10californiayA2CmF");
  SWIFT_INLINE_THUNK bool isCalifornia() const;

  inline const static struct _impl_colorado {  // impl struct for case colorado
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::colorado;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } colorado SWIFT_SYMBOL("s:7BlinkID6RegionO8coloradoyA2CmF");
  SWIFT_INLINE_THUNK bool isColorado() const;

  inline const static struct _impl_connecticut {  // impl struct for case connecticut
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::connecticut;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } connecticut SWIFT_SYMBOL("s:7BlinkID6RegionO11connecticutyA2CmF");
  SWIFT_INLINE_THUNK bool isConnecticut() const;

  inline const static struct _impl_delaware {  // impl struct for case delaware
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::delaware;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } delaware SWIFT_SYMBOL("s:7BlinkID6RegionO8delawareyA2CmF");
  SWIFT_INLINE_THUNK bool isDelaware() const;

  inline const static struct _impl_districtOfColumbia {  // impl struct for case districtOfColumbia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::districtOfColumbia;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } districtOfColumbia SWIFT_SYMBOL("s:7BlinkID6RegionO18districtOfColumbiayA2CmF");
  SWIFT_INLINE_THUNK bool isDistrictOfColumbia() const;

  inline const static struct _impl_florida {  // impl struct for case florida
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::florida;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } florida SWIFT_SYMBOL("s:7BlinkID6RegionO7floridayA2CmF");
  SWIFT_INLINE_THUNK bool isFlorida() const;

  inline const static struct _impl_georgia {  // impl struct for case georgia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::georgia;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } georgia SWIFT_SYMBOL("s:7BlinkID6RegionO7georgiayA2CmF");
  SWIFT_INLINE_THUNK bool isGeorgia() const;

  inline const static struct _impl_hawaii {  // impl struct for case hawaii
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::hawaii;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } hawaii SWIFT_SYMBOL("s:7BlinkID6RegionO6hawaiiyA2CmF");
  SWIFT_INLINE_THUNK bool isHawaii() const;

  inline const static struct _impl_idaho {  // impl struct for case idaho
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::idaho;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } idaho SWIFT_SYMBOL("s:7BlinkID6RegionO5idahoyA2CmF");
  SWIFT_INLINE_THUNK bool isIdaho() const;

  inline const static struct _impl_illinois {  // impl struct for case illinois
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::illinois;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } illinois SWIFT_SYMBOL("s:7BlinkID6RegionO8illinoisyA2CmF");
  SWIFT_INLINE_THUNK bool isIllinois() const;

  inline const static struct _impl_indiana {  // impl struct for case indiana
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::indiana;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } indiana SWIFT_SYMBOL("s:7BlinkID6RegionO7indianayA2CmF");
  SWIFT_INLINE_THUNK bool isIndiana() const;

  inline const static struct _impl_iowa {  // impl struct for case iowa
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::iowa;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } iowa SWIFT_SYMBOL("s:7BlinkID6RegionO4iowayA2CmF");
  SWIFT_INLINE_THUNK bool isIowa() const;

  inline const static struct _impl_kansas {  // impl struct for case kansas
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::kansas;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } kansas SWIFT_SYMBOL("s:7BlinkID6RegionO6kansasyA2CmF");
  SWIFT_INLINE_THUNK bool isKansas() const;

  inline const static struct _impl_kentucky {  // impl struct for case kentucky
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::kentucky;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } kentucky SWIFT_SYMBOL("s:7BlinkID6RegionO8kentuckyyA2CmF");
  SWIFT_INLINE_THUNK bool isKentucky() const;

  inline const static struct _impl_louisiana {  // impl struct for case louisiana
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::louisiana;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } louisiana SWIFT_SYMBOL("s:7BlinkID6RegionO9louisianayA2CmF");
  SWIFT_INLINE_THUNK bool isLouisiana() const;

  inline const static struct _impl_maine {  // impl struct for case maine
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::maine;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } maine SWIFT_SYMBOL("s:7BlinkID6RegionO5maineyA2CmF");
  SWIFT_INLINE_THUNK bool isMaine() const;

  inline const static struct _impl_manitoba {  // impl struct for case manitoba
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::manitoba;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } manitoba SWIFT_SYMBOL("s:7BlinkID6RegionO8manitobayA2CmF");
  SWIFT_INLINE_THUNK bool isManitoba() const;

  inline const static struct _impl_maryland {  // impl struct for case maryland
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::maryland;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } maryland SWIFT_SYMBOL("s:7BlinkID6RegionO8marylandyA2CmF");
  SWIFT_INLINE_THUNK bool isMaryland() const;

  inline const static struct _impl_massachusetts {  // impl struct for case massachusetts
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::massachusetts;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } massachusetts SWIFT_SYMBOL("s:7BlinkID6RegionO13massachusettsyA2CmF");
  SWIFT_INLINE_THUNK bool isMassachusetts() const;

  inline const static struct _impl_michigan {  // impl struct for case michigan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::michigan;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } michigan SWIFT_SYMBOL("s:7BlinkID6RegionO8michiganyA2CmF");
  SWIFT_INLINE_THUNK bool isMichigan() const;

  inline const static struct _impl_minnesota {  // impl struct for case minnesota
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::minnesota;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } minnesota SWIFT_SYMBOL("s:7BlinkID6RegionO9minnesotayA2CmF");
  SWIFT_INLINE_THUNK bool isMinnesota() const;

  inline const static struct _impl_mississippi {  // impl struct for case mississippi
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mississippi;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } mississippi SWIFT_SYMBOL("s:7BlinkID6RegionO11mississippiyA2CmF");
  SWIFT_INLINE_THUNK bool isMississippi() const;

  inline const static struct _impl_missouri {  // impl struct for case missouri
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::missouri;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } missouri SWIFT_SYMBOL("s:7BlinkID6RegionO8missouriyA2CmF");
  SWIFT_INLINE_THUNK bool isMissouri() const;

  inline const static struct _impl_montana {  // impl struct for case montana
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::montana;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } montana SWIFT_SYMBOL("s:7BlinkID6RegionO7montanayA2CmF");
  SWIFT_INLINE_THUNK bool isMontana() const;

  inline const static struct _impl_nebraska {  // impl struct for case nebraska
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nebraska;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } nebraska SWIFT_SYMBOL("s:7BlinkID6RegionO8nebraskayA2CmF");
  SWIFT_INLINE_THUNK bool isNebraska() const;

  inline const static struct _impl_nevada {  // impl struct for case nevada
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nevada;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } nevada SWIFT_SYMBOL("s:7BlinkID6RegionO6nevadayA2CmF");
  SWIFT_INLINE_THUNK bool isNevada() const;

  inline const static struct _impl_newBrunswick {  // impl struct for case newBrunswick
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::newBrunswick;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } newBrunswick SWIFT_SYMBOL("s:7BlinkID6RegionO12newBrunswickyA2CmF");
  SWIFT_INLINE_THUNK bool isNewBrunswick() const;

  inline const static struct _impl_newHampshire {  // impl struct for case newHampshire
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::newHampshire;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } newHampshire SWIFT_SYMBOL("s:7BlinkID6RegionO12newHampshireyA2CmF");
  SWIFT_INLINE_THUNK bool isNewHampshire() const;

  inline const static struct _impl_newJersey {  // impl struct for case newJersey
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::newJersey;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } newJersey SWIFT_SYMBOL("s:7BlinkID6RegionO9newJerseyyA2CmF");
  SWIFT_INLINE_THUNK bool isNewJersey() const;

  inline const static struct _impl_newMexico {  // impl struct for case newMexico
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::newMexico;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } newMexico SWIFT_SYMBOL("s:7BlinkID6RegionO9newMexicoyA2CmF");
  SWIFT_INLINE_THUNK bool isNewMexico() const;

  inline const static struct _impl_newSouthWales {  // impl struct for case newSouthWales
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::newSouthWales;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } newSouthWales SWIFT_SYMBOL("s:7BlinkID6RegionO13newSouthWalesyA2CmF");
  SWIFT_INLINE_THUNK bool isNewSouthWales() const;

  inline const static struct _impl_newYork {  // impl struct for case newYork
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::newYork;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } newYork SWIFT_SYMBOL("s:7BlinkID6RegionO7newYorkyA2CmF");
  SWIFT_INLINE_THUNK bool isNewYork() const;

  inline const static struct _impl_northernTerritory {  // impl struct for case northernTerritory
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::northernTerritory;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } northernTerritory SWIFT_SYMBOL("s:7BlinkID6RegionO17northernTerritoryyA2CmF");
  SWIFT_INLINE_THUNK bool isNorthernTerritory() const;

  inline const static struct _impl_northCarolina {  // impl struct for case northCarolina
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::northCarolina;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } northCarolina SWIFT_SYMBOL("s:7BlinkID6RegionO13northCarolinayA2CmF");
  SWIFT_INLINE_THUNK bool isNorthCarolina() const;

  inline const static struct _impl_northDakota {  // impl struct for case northDakota
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::northDakota;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } northDakota SWIFT_SYMBOL("s:7BlinkID6RegionO11northDakotayA2CmF");
  SWIFT_INLINE_THUNK bool isNorthDakota() const;

  inline const static struct _impl_novaScotia {  // impl struct for case novaScotia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::novaScotia;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } novaScotia SWIFT_SYMBOL("s:7BlinkID6RegionO10novaScotiayA2CmF");
  SWIFT_INLINE_THUNK bool isNovaScotia() const;

  inline const static struct _impl_ohio {  // impl struct for case ohio
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ohio;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } ohio SWIFT_SYMBOL("s:7BlinkID6RegionO4ohioyA2CmF");
  SWIFT_INLINE_THUNK bool isOhio() const;

  inline const static struct _impl_oklahoma {  // impl struct for case oklahoma
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::oklahoma;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } oklahoma SWIFT_SYMBOL("s:7BlinkID6RegionO8oklahomayA2CmF");
  SWIFT_INLINE_THUNK bool isOklahoma() const;

  inline const static struct _impl_ontario {  // impl struct for case ontario
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ontario;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } ontario SWIFT_SYMBOL("s:7BlinkID6RegionO7ontarioyA2CmF");
  SWIFT_INLINE_THUNK bool isOntario() const;

  inline const static struct _impl_oregon {  // impl struct for case oregon
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::oregon;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } oregon SWIFT_SYMBOL("s:7BlinkID6RegionO6oregonyA2CmF");
  SWIFT_INLINE_THUNK bool isOregon() const;

  inline const static struct _impl_pennsylvania {  // impl struct for case pennsylvania
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::pennsylvania;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } pennsylvania SWIFT_SYMBOL("s:7BlinkID6RegionO12pennsylvaniayA2CmF");
  SWIFT_INLINE_THUNK bool isPennsylvania() const;

  inline const static struct _impl_quebec {  // impl struct for case quebec
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::quebec;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } quebec SWIFT_SYMBOL("s:7BlinkID6RegionO6quebecyA2CmF");
  SWIFT_INLINE_THUNK bool isQuebec() const;

  inline const static struct _impl_queensland {  // impl struct for case queensland
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::queensland;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } queensland SWIFT_SYMBOL("s:7BlinkID6RegionO10queenslandyA2CmF");
  SWIFT_INLINE_THUNK bool isQueensland() const;

  inline const static struct _impl_rhodeIsland {  // impl struct for case rhodeIsland
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::rhodeIsland;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } rhodeIsland SWIFT_SYMBOL("s:7BlinkID6RegionO11rhodeIslandyA2CmF");
  SWIFT_INLINE_THUNK bool isRhodeIsland() const;

  inline const static struct _impl_saskatchewan {  // impl struct for case saskatchewan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::saskatchewan;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } saskatchewan SWIFT_SYMBOL("s:7BlinkID6RegionO12saskatchewanyA2CmF");
  SWIFT_INLINE_THUNK bool isSaskatchewan() const;

  inline const static struct _impl_southAustralia {  // impl struct for case southAustralia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::southAustralia;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } southAustralia SWIFT_SYMBOL("s:7BlinkID6RegionO14southAustraliayA2CmF");
  SWIFT_INLINE_THUNK bool isSouthAustralia() const;

  inline const static struct _impl_southCarolina {  // impl struct for case southCarolina
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::southCarolina;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } southCarolina SWIFT_SYMBOL("s:7BlinkID6RegionO13southCarolinayA2CmF");
  SWIFT_INLINE_THUNK bool isSouthCarolina() const;

  inline const static struct _impl_southDakota {  // impl struct for case southDakota
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::southDakota;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } southDakota SWIFT_SYMBOL("s:7BlinkID6RegionO11southDakotayA2CmF");
  SWIFT_INLINE_THUNK bool isSouthDakota() const;

  inline const static struct _impl_tasmania {  // impl struct for case tasmania
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tasmania;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } tasmania SWIFT_SYMBOL("s:7BlinkID6RegionO8tasmaniayA2CmF");
  SWIFT_INLINE_THUNK bool isTasmania() const;

  inline const static struct _impl_tennessee {  // impl struct for case tennessee
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tennessee;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } tennessee SWIFT_SYMBOL("s:7BlinkID6RegionO9tennesseeyA2CmF");
  SWIFT_INLINE_THUNK bool isTennessee() const;

  inline const static struct _impl_texas {  // impl struct for case texas
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::texas;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } texas SWIFT_SYMBOL("s:7BlinkID6RegionO5texasyA2CmF");
  SWIFT_INLINE_THUNK bool isTexas() const;

  inline const static struct _impl_utah {  // impl struct for case utah
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::utah;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } utah SWIFT_SYMBOL("s:7BlinkID6RegionO4utahyA2CmF");
  SWIFT_INLINE_THUNK bool isUtah() const;

  inline const static struct _impl_vermont {  // impl struct for case vermont
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::vermont;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } vermont SWIFT_SYMBOL("s:7BlinkID6RegionO7vermontyA2CmF");
  SWIFT_INLINE_THUNK bool isVermont() const;

  inline const static struct _impl_victoria {  // impl struct for case victoria
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::victoria;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } victoria SWIFT_SYMBOL("s:7BlinkID6RegionO8victoriayA2CmF");
  SWIFT_INLINE_THUNK bool isVictoria() const;

  inline const static struct _impl_virginia {  // impl struct for case virginia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::virginia;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } virginia SWIFT_SYMBOL("s:7BlinkID6RegionO8virginiayA2CmF");
  SWIFT_INLINE_THUNK bool isVirginia() const;

  inline const static struct _impl_washington {  // impl struct for case washington
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::washington;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } washington SWIFT_SYMBOL("s:7BlinkID6RegionO10washingtonyA2CmF");
  SWIFT_INLINE_THUNK bool isWashington() const;

  inline const static struct _impl_westernAustralia {  // impl struct for case westernAustralia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::westernAustralia;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } westernAustralia SWIFT_SYMBOL("s:7BlinkID6RegionO16westernAustraliayA2CmF");
  SWIFT_INLINE_THUNK bool isWesternAustralia() const;

  inline const static struct _impl_westVirginia {  // impl struct for case westVirginia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::westVirginia;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } westVirginia SWIFT_SYMBOL("s:7BlinkID6RegionO12westVirginiayA2CmF");
  SWIFT_INLINE_THUNK bool isWestVirginia() const;

  inline const static struct _impl_wisconsin {  // impl struct for case wisconsin
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::wisconsin;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } wisconsin SWIFT_SYMBOL("s:7BlinkID6RegionO9wisconsinyA2CmF");
  SWIFT_INLINE_THUNK bool isWisconsin() const;

  inline const static struct _impl_wyoming {  // impl struct for case wyoming
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::wyoming;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } wyoming SWIFT_SYMBOL("s:7BlinkID6RegionO7wyomingyA2CmF");
  SWIFT_INLINE_THUNK bool isWyoming() const;

  inline const static struct _impl_yukon {  // impl struct for case yukon
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::yukon;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } yukon SWIFT_SYMBOL("s:7BlinkID6RegionO5yukonyA2CmF");
  SWIFT_INLINE_THUNK bool isYukon() const;

  inline const static struct _impl_ciudadDeMexico {  // impl struct for case ciudadDeMexico
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ciudadDeMexico;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } ciudadDeMexico SWIFT_SYMBOL("s:7BlinkID6RegionO14ciudadDeMexicoyA2CmF");
  SWIFT_INLINE_THUNK bool isCiudadDeMexico() const;

  inline const static struct _impl_jalisco {  // impl struct for case jalisco
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::jalisco;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } jalisco SWIFT_SYMBOL("s:7BlinkID6RegionO7jaliscoyA2CmF");
  SWIFT_INLINE_THUNK bool isJalisco() const;

  inline const static struct _impl_newfoundlandAndLabrador {  // impl struct for case newfoundlandAndLabrador
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::newfoundlandAndLabrador;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } newfoundlandAndLabrador SWIFT_SYMBOL("s:7BlinkID6RegionO23newfoundlandAndLabradoryA2CmF");
  SWIFT_INLINE_THUNK bool isNewfoundlandAndLabrador() const;

  inline const static struct _impl_nuevoLeon {  // impl struct for case nuevoLeon
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nuevoLeon;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } nuevoLeon SWIFT_SYMBOL("s:7BlinkID6RegionO9nuevoLeonyA2CmF");
  SWIFT_INLINE_THUNK bool isNuevoLeon() const;

  inline const static struct _impl_bajaCalifornia {  // impl struct for case bajaCalifornia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bajaCalifornia;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } bajaCalifornia SWIFT_SYMBOL("s:7BlinkID6RegionO14bajaCaliforniayA2CmF");
  SWIFT_INLINE_THUNK bool isBajaCalifornia() const;

  inline const static struct _impl_chihuahua {  // impl struct for case chihuahua
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::chihuahua;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } chihuahua SWIFT_SYMBOL("s:7BlinkID6RegionO9chihuahuayA2CmF");
  SWIFT_INLINE_THUNK bool isChihuahua() const;

  inline const static struct _impl_guanajuato {  // impl struct for case guanajuato
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::guanajuato;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } guanajuato SWIFT_SYMBOL("s:7BlinkID6RegionO10guanajuatoyA2CmF");
  SWIFT_INLINE_THUNK bool isGuanajuato() const;

  inline const static struct _impl_guerrero {  // impl struct for case guerrero
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::guerrero;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } guerrero SWIFT_SYMBOL("s:7BlinkID6RegionO8guerreroyA2CmF");
  SWIFT_INLINE_THUNK bool isGuerrero() const;

  inline const static struct _impl_mexico {  // impl struct for case mexico
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mexico;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } mexico SWIFT_SYMBOL("s:7BlinkID6RegionO6mexicoyA2CmF");
  SWIFT_INLINE_THUNK bool isMexico() const;

  inline const static struct _impl_michoacan {  // impl struct for case michoacan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::michoacan;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } michoacan SWIFT_SYMBOL("s:7BlinkID6RegionO9michoacanyA2CmF");
  SWIFT_INLINE_THUNK bool isMichoacan() const;

  inline const static struct _impl_newYorkCity {  // impl struct for case newYorkCity
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::newYorkCity;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } newYorkCity SWIFT_SYMBOL("s:7BlinkID6RegionO11newYorkCityyA2CmF");
  SWIFT_INLINE_THUNK bool isNewYorkCity() const;

  inline const static struct _impl_tamaulipas {  // impl struct for case tamaulipas
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tamaulipas;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } tamaulipas SWIFT_SYMBOL("s:7BlinkID6RegionO10tamaulipasyA2CmF");
  SWIFT_INLINE_THUNK bool isTamaulipas() const;

  inline const static struct _impl_veracruz {  // impl struct for case veracruz
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::veracruz;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } veracruz SWIFT_SYMBOL("s:7BlinkID6RegionO8veracruzyA2CmF");
  SWIFT_INLINE_THUNK bool isVeracruz() const;

  inline const static struct _impl_chiapas {  // impl struct for case chiapas
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::chiapas;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } chiapas SWIFT_SYMBOL("s:7BlinkID6RegionO7chiapasyA2CmF");
  SWIFT_INLINE_THUNK bool isChiapas() const;

  inline const static struct _impl_coahuila {  // impl struct for case coahuila
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::coahuila;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } coahuila SWIFT_SYMBOL("s:7BlinkID6RegionO8coahuilayA2CmF");
  SWIFT_INLINE_THUNK bool isCoahuila() const;

  inline const static struct _impl_durango {  // impl struct for case durango
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::durango;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } durango SWIFT_SYMBOL("s:7BlinkID6RegionO7durangoyA2CmF");
  SWIFT_INLINE_THUNK bool isDurango() const;

  inline const static struct _impl_guerreroCocula {  // impl struct for case guerreroCocula
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::guerreroCocula;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } guerreroCocula SWIFT_SYMBOL("s:7BlinkID6RegionO14guerreroCoculayA2CmF");
  SWIFT_INLINE_THUNK bool isGuerreroCocula() const;

  inline const static struct _impl_guerreroJuchitan {  // impl struct for case guerreroJuchitan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::guerreroJuchitan;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } guerreroJuchitan SWIFT_SYMBOL("s:7BlinkID6RegionO16guerreroJuchitanyA2CmF");
  SWIFT_INLINE_THUNK bool isGuerreroJuchitan() const;

  inline const static struct _impl_guerreroTepecoacuilco {  // impl struct for case guerreroTepecoacuilco
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::guerreroTepecoacuilco;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } guerreroTepecoacuilco SWIFT_SYMBOL("s:7BlinkID6RegionO21guerreroTepecoacuilcoyA2CmF");
  SWIFT_INLINE_THUNK bool isGuerreroTepecoacuilco() const;

  inline const static struct _impl_guerreroTlacoapa {  // impl struct for case guerreroTlacoapa
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::guerreroTlacoapa;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } guerreroTlacoapa SWIFT_SYMBOL("s:7BlinkID6RegionO16guerreroTlacoapayA2CmF");
  SWIFT_INLINE_THUNK bool isGuerreroTlacoapa() const;

  inline const static struct _impl_gujarat {  // impl struct for case gujarat
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::gujarat;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } gujarat SWIFT_SYMBOL("s:7BlinkID6RegionO7gujaratyA2CmF");
  SWIFT_INLINE_THUNK bool isGujarat() const;

  inline const static struct _impl_hidalgo {  // impl struct for case hidalgo
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::hidalgo;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } hidalgo SWIFT_SYMBOL("s:7BlinkID6RegionO7hidalgoyA2CmF");
  SWIFT_INLINE_THUNK bool isHidalgo() const;

  inline const static struct _impl_karnataka {  // impl struct for case karnataka
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::karnataka;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } karnataka SWIFT_SYMBOL("s:7BlinkID6RegionO9karnatakayA2CmF");
  SWIFT_INLINE_THUNK bool isKarnataka() const;

  inline const static struct _impl_kerala {  // impl struct for case kerala
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::kerala;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } kerala SWIFT_SYMBOL("s:7BlinkID6RegionO6keralayA2CmF");
  SWIFT_INLINE_THUNK bool isKerala() const;

  inline const static struct _impl_khyberPakhtunkhwa {  // impl struct for case khyberPakhtunkhwa
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::khyberPakhtunkhwa;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } khyberPakhtunkhwa SWIFT_SYMBOL("s:7BlinkID6RegionO17khyberPakhtunkhwayA2CmF");
  SWIFT_INLINE_THUNK bool isKhyberPakhtunkhwa() const;

  inline const static struct _impl_madhyaPradesh {  // impl struct for case madhyaPradesh
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::madhyaPradesh;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } madhyaPradesh SWIFT_SYMBOL("s:7BlinkID6RegionO13madhyaPradeshyA2CmF");
  SWIFT_INLINE_THUNK bool isMadhyaPradesh() const;

  inline const static struct _impl_maharashtra {  // impl struct for case maharashtra
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::maharashtra;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } maharashtra SWIFT_SYMBOL("s:7BlinkID6RegionO11maharashtrayA2CmF");
  SWIFT_INLINE_THUNK bool isMaharashtra() const;

  inline const static struct _impl_morelos {  // impl struct for case morelos
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::morelos;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } morelos SWIFT_SYMBOL("s:7BlinkID6RegionO7morelosyA2CmF");
  SWIFT_INLINE_THUNK bool isMorelos() const;

  inline const static struct _impl_nayarit {  // impl struct for case nayarit
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nayarit;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } nayarit SWIFT_SYMBOL("s:7BlinkID6RegionO7nayarityA2CmF");
  SWIFT_INLINE_THUNK bool isNayarit() const;

  inline const static struct _impl_oaxaca {  // impl struct for case oaxaca
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::oaxaca;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } oaxaca SWIFT_SYMBOL("s:7BlinkID6RegionO6oaxacayA2CmF");
  SWIFT_INLINE_THUNK bool isOaxaca() const;

  inline const static struct _impl_puebla {  // impl struct for case puebla
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::puebla;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } puebla SWIFT_SYMBOL("s:7BlinkID6RegionO6pueblayA2CmF");
  SWIFT_INLINE_THUNK bool isPuebla() const;

  inline const static struct _impl_punjab {  // impl struct for case punjab
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::punjab;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } punjab SWIFT_SYMBOL("s:7BlinkID6RegionO6punjabyA2CmF");
  SWIFT_INLINE_THUNK bool isPunjab() const;

  inline const static struct _impl_queretaro {  // impl struct for case queretaro
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::queretaro;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } queretaro SWIFT_SYMBOL("s:7BlinkID6RegionO9queretaroyA2CmF");
  SWIFT_INLINE_THUNK bool isQueretaro() const;

  inline const static struct _impl_sanLuisPotosi {  // impl struct for case sanLuisPotosi
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sanLuisPotosi;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } sanLuisPotosi SWIFT_SYMBOL("s:7BlinkID6RegionO13sanLuisPotosiyA2CmF");
  SWIFT_INLINE_THUNK bool isSanLuisPotosi() const;

  inline const static struct _impl_sinaloa {  // impl struct for case sinaloa
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sinaloa;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } sinaloa SWIFT_SYMBOL("s:7BlinkID6RegionO7sinaloayA2CmF");
  SWIFT_INLINE_THUNK bool isSinaloa() const;

  inline const static struct _impl_sonora {  // impl struct for case sonora
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sonora;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } sonora SWIFT_SYMBOL("s:7BlinkID6RegionO6sonorayA2CmF");
  SWIFT_INLINE_THUNK bool isSonora() const;

  inline const static struct _impl_tabasco {  // impl struct for case tabasco
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tabasco;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } tabasco SWIFT_SYMBOL("s:7BlinkID6RegionO7tabascoyA2CmF");
  SWIFT_INLINE_THUNK bool isTabasco() const;

  inline const static struct _impl_tamilNadu {  // impl struct for case tamilNadu
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tamilNadu;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } tamilNadu SWIFT_SYMBOL("s:7BlinkID6RegionO9tamilNaduyA2CmF");
  SWIFT_INLINE_THUNK bool isTamilNadu() const;

  inline const static struct _impl_yucatan {  // impl struct for case yucatan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::yucatan;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } yucatan SWIFT_SYMBOL("s:7BlinkID6RegionO7yucatanyA2CmF");
  SWIFT_INLINE_THUNK bool isYucatan() const;

  inline const static struct _impl_zacatecas {  // impl struct for case zacatecas
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::zacatecas;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } zacatecas SWIFT_SYMBOL("s:7BlinkID6RegionO9zacatecasyA2CmF");
  SWIFT_INLINE_THUNK bool isZacatecas() const;

  inline const static struct _impl_aguascalientes {  // impl struct for case aguascalientes
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::aguascalientes;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } aguascalientes SWIFT_SYMBOL("s:7BlinkID6RegionO14aguascalientesyA2CmF");
  SWIFT_INLINE_THUNK bool isAguascalientes() const;

  inline const static struct _impl_bajaCaliforniaSur {  // impl struct for case bajaCaliforniaSur
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bajaCaliforniaSur;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } bajaCaliforniaSur SWIFT_SYMBOL("s:7BlinkID6RegionO17bajaCaliforniaSuryA2CmF");
  SWIFT_INLINE_THUNK bool isBajaCaliforniaSur() const;

  inline const static struct _impl_campeche {  // impl struct for case campeche
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::campeche;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } campeche SWIFT_SYMBOL("s:7BlinkID6RegionO8campecheyA2CmF");
  SWIFT_INLINE_THUNK bool isCampeche() const;

  inline const static struct _impl_colima {  // impl struct for case colima
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::colima;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } colima SWIFT_SYMBOL("s:7BlinkID6RegionO6colimayA2CmF");
  SWIFT_INLINE_THUNK bool isColima() const;

  inline const static struct _impl_quintanaRooBenitoJuarez {  // impl struct for case quintanaRooBenitoJuarez
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::quintanaRooBenitoJuarez;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } quintanaRooBenitoJuarez SWIFT_SYMBOL("s:7BlinkID6RegionO23quintanaRooBenitoJuarezyA2CmF");
  SWIFT_INLINE_THUNK bool isQuintanaRooBenitoJuarez() const;

  inline const static struct _impl_quintanaRoo {  // impl struct for case quintanaRoo
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::quintanaRoo;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } quintanaRoo SWIFT_SYMBOL("s:7BlinkID6RegionO11quintanaRooyA2CmF");
  SWIFT_INLINE_THUNK bool isQuintanaRoo() const;

  inline const static struct _impl_quintanaRooSolidaridad {  // impl struct for case quintanaRooSolidaridad
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::quintanaRooSolidaridad;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } quintanaRooSolidaridad SWIFT_SYMBOL("s:7BlinkID6RegionO22quintanaRooSolidaridadyA2CmF");
  SWIFT_INLINE_THUNK bool isQuintanaRooSolidaridad() const;

  inline const static struct _impl_tlaxcala {  // impl struct for case tlaxcala
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tlaxcala;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } tlaxcala SWIFT_SYMBOL("s:7BlinkID6RegionO8tlaxcalayA2CmF");
  SWIFT_INLINE_THUNK bool isTlaxcala() const;

  inline const static struct _impl_quintanaRooCozumel {  // impl struct for case quintanaRooCozumel
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::quintanaRooCozumel;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } quintanaRooCozumel SWIFT_SYMBOL("s:7BlinkID6RegionO18quintanaRooCozumelyA2CmF");
  SWIFT_INLINE_THUNK bool isQuintanaRooCozumel() const;

  inline const static struct _impl_saoPaolo {  // impl struct for case saoPaolo
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::saoPaolo;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } saoPaolo SWIFT_SYMBOL("s:7BlinkID6RegionO8saoPaoloyA2CmF");
  SWIFT_INLINE_THUNK bool isSaoPaolo() const;

  inline const static struct _impl_rioDeJaneiro {  // impl struct for case rioDeJaneiro
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::rioDeJaneiro;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } rioDeJaneiro SWIFT_SYMBOL("s:7BlinkID6RegionO12rioDeJaneiroyA2CmF");
  SWIFT_INLINE_THUNK bool isRioDeJaneiro() const;

  inline const static struct _impl_rioGrandeDoSul {  // impl struct for case rioGrandeDoSul
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::rioGrandeDoSul;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } rioGrandeDoSul SWIFT_SYMBOL("s:7BlinkID6RegionO14rioGrandeDoSulyA2CmF");
  SWIFT_INLINE_THUNK bool isRioGrandeDoSul() const;

  inline const static struct _impl_northwestTerritories {  // impl struct for case northwestTerritories
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::northwestTerritories;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } northwestTerritories SWIFT_SYMBOL("s:7BlinkID6RegionO20northwestTerritoriesyA2CmF");
  SWIFT_INLINE_THUNK bool isNorthwestTerritories() const;

  inline const static struct _impl_nunavut {  // impl struct for case nunavut
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nunavut;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } nunavut SWIFT_SYMBOL("s:7BlinkID6RegionO7nunavutyA2CmF");
  SWIFT_INLINE_THUNK bool isNunavut() const;

  inline const static struct _impl_princeEdwardIsland {  // impl struct for case princeEdwardIsland
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::princeEdwardIsland;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } princeEdwardIsland SWIFT_SYMBOL("s:7BlinkID6RegionO18princeEdwardIslandyA2CmF");
  SWIFT_INLINE_THUNK bool isPrinceEdwardIsland() const;

  inline const static struct _impl_distritoFederal {  // impl struct for case distritoFederal
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::distritoFederal;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } distritoFederal SWIFT_SYMBOL("s:7BlinkID6RegionO15distritoFederalyA2CmF");
  SWIFT_INLINE_THUNK bool isDistritoFederal() const;

  inline const static struct _impl_maranhao {  // impl struct for case maranhao
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::maranhao;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } maranhao SWIFT_SYMBOL("s:7BlinkID6RegionO8maranhaoyA2CmF");
  SWIFT_INLINE_THUNK bool isMaranhao() const;

  inline const static struct _impl_matoGrosso {  // impl struct for case matoGrosso
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::matoGrosso;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } matoGrosso SWIFT_SYMBOL("s:7BlinkID6RegionO10matoGrossoyA2CmF");
  SWIFT_INLINE_THUNK bool isMatoGrosso() const;

  inline const static struct _impl_minasGerais {  // impl struct for case minasGerais
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::minasGerais;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } minasGerais SWIFT_SYMBOL("s:7BlinkID6RegionO11minasGeraisyA2CmF");
  SWIFT_INLINE_THUNK bool isMinasGerais() const;

  inline const static struct _impl_para {  // impl struct for case para
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::para;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } para SWIFT_SYMBOL("s:7BlinkID6RegionO4parayA2CmF");
  SWIFT_INLINE_THUNK bool isPara() const;

  inline const static struct _impl_parana {  // impl struct for case parana
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::parana;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } parana SWIFT_SYMBOL("s:7BlinkID6RegionO6paranayA2CmF");
  SWIFT_INLINE_THUNK bool isParana() const;

  inline const static struct _impl_pernambuco {  // impl struct for case pernambuco
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::pernambuco;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } pernambuco SWIFT_SYMBOL("s:7BlinkID6RegionO10pernambucoyA2CmF");
  SWIFT_INLINE_THUNK bool isPernambuco() const;

  inline const static struct _impl_santaCatarina {  // impl struct for case santaCatarina
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::santaCatarina;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } santaCatarina SWIFT_SYMBOL("s:7BlinkID6RegionO13santaCatarinayA2CmF");
  SWIFT_INLINE_THUNK bool isSantaCatarina() const;

  inline const static struct _impl_andhraPradesh {  // impl struct for case andhraPradesh
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::andhraPradesh;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } andhraPradesh SWIFT_SYMBOL("s:7BlinkID6RegionO13andhraPradeshyA2CmF");
  SWIFT_INLINE_THUNK bool isAndhraPradesh() const;

  inline const static struct _impl_ceara {  // impl struct for case ceara
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ceara;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } ceara SWIFT_SYMBOL("s:7BlinkID6RegionO5cearayA2CmF");
  SWIFT_INLINE_THUNK bool isCeara() const;

  inline const static struct _impl_goias {  // impl struct for case goias
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::goias;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } goias SWIFT_SYMBOL("s:7BlinkID6RegionO5goiasyA2CmF");
  SWIFT_INLINE_THUNK bool isGoias() const;

  inline const static struct _impl_guerreroAcapulcoDeJuarez {  // impl struct for case guerreroAcapulcoDeJuarez
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::guerreroAcapulcoDeJuarez;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } guerreroAcapulcoDeJuarez SWIFT_SYMBOL("s:7BlinkID6RegionO24guerreroAcapulcoDeJuarezyA2CmF");
  SWIFT_INLINE_THUNK bool isGuerreroAcapulcoDeJuarez() const;

  inline const static struct _impl_haryana {  // impl struct for case haryana
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::haryana;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } haryana SWIFT_SYMBOL("s:7BlinkID6RegionO7haryanayA2CmF");
  SWIFT_INLINE_THUNK bool isHaryana() const;

  inline const static struct _impl_sergipe {  // impl struct for case sergipe
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sergipe;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } sergipe SWIFT_SYMBOL("s:7BlinkID6RegionO7sergipeyA2CmF");
  SWIFT_INLINE_THUNK bool isSergipe() const;

  inline const static struct _impl_alagoas {  // impl struct for case alagoas
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::alagoas;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } alagoas SWIFT_SYMBOL("s:7BlinkID6RegionO7alagoasyA2CmF");
  SWIFT_INLINE_THUNK bool isAlagoas() const;

  inline const static struct _impl_bangsamoro {  // impl struct for case bangsamoro
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bangsamoro;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } bangsamoro SWIFT_SYMBOL("s:7BlinkID6RegionO10bangsamoroyA2CmF");
  SWIFT_INLINE_THUNK bool isBangsamoro() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID6RegionO4noneyA2CmFWC) return cases::none;
    if (tag == _impl::$s7BlinkID6RegionO7alabamayA2CmFWC) return cases::alabama;
    if (tag == _impl::$s7BlinkID6RegionO6alaskayA2CmFWC) return cases::alaska;
    if (tag == _impl::$s7BlinkID6RegionO7albertayA2CmFWC) return cases::alberta;
    if (tag == _impl::$s7BlinkID6RegionO7arizonayA2CmFWC) return cases::arizona;
    if (tag == _impl::$s7BlinkID6RegionO8arkansasyA2CmFWC) return cases::arkansas;
    if (tag == _impl::$s7BlinkID6RegionO26australianCapitalTerritoryyA2CmFWC) return cases::australianCapitalTerritory;
    if (tag == _impl::$s7BlinkID6RegionO15britishColumbiayA2CmFWC) return cases::britishColumbia;
    if (tag == _impl::$s7BlinkID6RegionO10californiayA2CmFWC) return cases::california;
    if (tag == _impl::$s7BlinkID6RegionO8coloradoyA2CmFWC) return cases::colorado;
    if (tag == _impl::$s7BlinkID6RegionO11connecticutyA2CmFWC) return cases::connecticut;
    if (tag == _impl::$s7BlinkID6RegionO8delawareyA2CmFWC) return cases::delaware;
    if (tag == _impl::$s7BlinkID6RegionO18districtOfColumbiayA2CmFWC) return cases::districtOfColumbia;
    if (tag == _impl::$s7BlinkID6RegionO7floridayA2CmFWC) return cases::florida;
    if (tag == _impl::$s7BlinkID6RegionO7georgiayA2CmFWC) return cases::georgia;
    if (tag == _impl::$s7BlinkID6RegionO6hawaiiyA2CmFWC) return cases::hawaii;
    if (tag == _impl::$s7BlinkID6RegionO5idahoyA2CmFWC) return cases::idaho;
    if (tag == _impl::$s7BlinkID6RegionO8illinoisyA2CmFWC) return cases::illinois;
    if (tag == _impl::$s7BlinkID6RegionO7indianayA2CmFWC) return cases::indiana;
    if (tag == _impl::$s7BlinkID6RegionO4iowayA2CmFWC) return cases::iowa;
    if (tag == _impl::$s7BlinkID6RegionO6kansasyA2CmFWC) return cases::kansas;
    if (tag == _impl::$s7BlinkID6RegionO8kentuckyyA2CmFWC) return cases::kentucky;
    if (tag == _impl::$s7BlinkID6RegionO9louisianayA2CmFWC) return cases::louisiana;
    if (tag == _impl::$s7BlinkID6RegionO5maineyA2CmFWC) return cases::maine;
    if (tag == _impl::$s7BlinkID6RegionO8manitobayA2CmFWC) return cases::manitoba;
    if (tag == _impl::$s7BlinkID6RegionO8marylandyA2CmFWC) return cases::maryland;
    if (tag == _impl::$s7BlinkID6RegionO13massachusettsyA2CmFWC) return cases::massachusetts;
    if (tag == _impl::$s7BlinkID6RegionO8michiganyA2CmFWC) return cases::michigan;
    if (tag == _impl::$s7BlinkID6RegionO9minnesotayA2CmFWC) return cases::minnesota;
    if (tag == _impl::$s7BlinkID6RegionO11mississippiyA2CmFWC) return cases::mississippi;
    if (tag == _impl::$s7BlinkID6RegionO8missouriyA2CmFWC) return cases::missouri;
    if (tag == _impl::$s7BlinkID6RegionO7montanayA2CmFWC) return cases::montana;
    if (tag == _impl::$s7BlinkID6RegionO8nebraskayA2CmFWC) return cases::nebraska;
    if (tag == _impl::$s7BlinkID6RegionO6nevadayA2CmFWC) return cases::nevada;
    if (tag == _impl::$s7BlinkID6RegionO12newBrunswickyA2CmFWC) return cases::newBrunswick;
    if (tag == _impl::$s7BlinkID6RegionO12newHampshireyA2CmFWC) return cases::newHampshire;
    if (tag == _impl::$s7BlinkID6RegionO9newJerseyyA2CmFWC) return cases::newJersey;
    if (tag == _impl::$s7BlinkID6RegionO9newMexicoyA2CmFWC) return cases::newMexico;
    if (tag == _impl::$s7BlinkID6RegionO13newSouthWalesyA2CmFWC) return cases::newSouthWales;
    if (tag == _impl::$s7BlinkID6RegionO7newYorkyA2CmFWC) return cases::newYork;
    if (tag == _impl::$s7BlinkID6RegionO17northernTerritoryyA2CmFWC) return cases::northernTerritory;
    if (tag == _impl::$s7BlinkID6RegionO13northCarolinayA2CmFWC) return cases::northCarolina;
    if (tag == _impl::$s7BlinkID6RegionO11northDakotayA2CmFWC) return cases::northDakota;
    if (tag == _impl::$s7BlinkID6RegionO10novaScotiayA2CmFWC) return cases::novaScotia;
    if (tag == _impl::$s7BlinkID6RegionO4ohioyA2CmFWC) return cases::ohio;
    if (tag == _impl::$s7BlinkID6RegionO8oklahomayA2CmFWC) return cases::oklahoma;
    if (tag == _impl::$s7BlinkID6RegionO7ontarioyA2CmFWC) return cases::ontario;
    if (tag == _impl::$s7BlinkID6RegionO6oregonyA2CmFWC) return cases::oregon;
    if (tag == _impl::$s7BlinkID6RegionO12pennsylvaniayA2CmFWC) return cases::pennsylvania;
    if (tag == _impl::$s7BlinkID6RegionO6quebecyA2CmFWC) return cases::quebec;
    if (tag == _impl::$s7BlinkID6RegionO10queenslandyA2CmFWC) return cases::queensland;
    if (tag == _impl::$s7BlinkID6RegionO11rhodeIslandyA2CmFWC) return cases::rhodeIsland;
    if (tag == _impl::$s7BlinkID6RegionO12saskatchewanyA2CmFWC) return cases::saskatchewan;
    if (tag == _impl::$s7BlinkID6RegionO14southAustraliayA2CmFWC) return cases::southAustralia;
    if (tag == _impl::$s7BlinkID6RegionO13southCarolinayA2CmFWC) return cases::southCarolina;
    if (tag == _impl::$s7BlinkID6RegionO11southDakotayA2CmFWC) return cases::southDakota;
    if (tag == _impl::$s7BlinkID6RegionO8tasmaniayA2CmFWC) return cases::tasmania;
    if (tag == _impl::$s7BlinkID6RegionO9tennesseeyA2CmFWC) return cases::tennessee;
    if (tag == _impl::$s7BlinkID6RegionO5texasyA2CmFWC) return cases::texas;
    if (tag == _impl::$s7BlinkID6RegionO4utahyA2CmFWC) return cases::utah;
    if (tag == _impl::$s7BlinkID6RegionO7vermontyA2CmFWC) return cases::vermont;
    if (tag == _impl::$s7BlinkID6RegionO8victoriayA2CmFWC) return cases::victoria;
    if (tag == _impl::$s7BlinkID6RegionO8virginiayA2CmFWC) return cases::virginia;
    if (tag == _impl::$s7BlinkID6RegionO10washingtonyA2CmFWC) return cases::washington;
    if (tag == _impl::$s7BlinkID6RegionO16westernAustraliayA2CmFWC) return cases::westernAustralia;
    if (tag == _impl::$s7BlinkID6RegionO12westVirginiayA2CmFWC) return cases::westVirginia;
    if (tag == _impl::$s7BlinkID6RegionO9wisconsinyA2CmFWC) return cases::wisconsin;
    if (tag == _impl::$s7BlinkID6RegionO7wyomingyA2CmFWC) return cases::wyoming;
    if (tag == _impl::$s7BlinkID6RegionO5yukonyA2CmFWC) return cases::yukon;
    if (tag == _impl::$s7BlinkID6RegionO14ciudadDeMexicoyA2CmFWC) return cases::ciudadDeMexico;
    if (tag == _impl::$s7BlinkID6RegionO7jaliscoyA2CmFWC) return cases::jalisco;
    if (tag == _impl::$s7BlinkID6RegionO23newfoundlandAndLabradoryA2CmFWC) return cases::newfoundlandAndLabrador;
    if (tag == _impl::$s7BlinkID6RegionO9nuevoLeonyA2CmFWC) return cases::nuevoLeon;
    if (tag == _impl::$s7BlinkID6RegionO14bajaCaliforniayA2CmFWC) return cases::bajaCalifornia;
    if (tag == _impl::$s7BlinkID6RegionO9chihuahuayA2CmFWC) return cases::chihuahua;
    if (tag == _impl::$s7BlinkID6RegionO10guanajuatoyA2CmFWC) return cases::guanajuato;
    if (tag == _impl::$s7BlinkID6RegionO8guerreroyA2CmFWC) return cases::guerrero;
    if (tag == _impl::$s7BlinkID6RegionO6mexicoyA2CmFWC) return cases::mexico;
    if (tag == _impl::$s7BlinkID6RegionO9michoacanyA2CmFWC) return cases::michoacan;
    if (tag == _impl::$s7BlinkID6RegionO11newYorkCityyA2CmFWC) return cases::newYorkCity;
    if (tag == _impl::$s7BlinkID6RegionO10tamaulipasyA2CmFWC) return cases::tamaulipas;
    if (tag == _impl::$s7BlinkID6RegionO8veracruzyA2CmFWC) return cases::veracruz;
    if (tag == _impl::$s7BlinkID6RegionO7chiapasyA2CmFWC) return cases::chiapas;
    if (tag == _impl::$s7BlinkID6RegionO8coahuilayA2CmFWC) return cases::coahuila;
    if (tag == _impl::$s7BlinkID6RegionO7durangoyA2CmFWC) return cases::durango;
    if (tag == _impl::$s7BlinkID6RegionO14guerreroCoculayA2CmFWC) return cases::guerreroCocula;
    if (tag == _impl::$s7BlinkID6RegionO16guerreroJuchitanyA2CmFWC) return cases::guerreroJuchitan;
    if (tag == _impl::$s7BlinkID6RegionO21guerreroTepecoacuilcoyA2CmFWC) return cases::guerreroTepecoacuilco;
    if (tag == _impl::$s7BlinkID6RegionO16guerreroTlacoapayA2CmFWC) return cases::guerreroTlacoapa;
    if (tag == _impl::$s7BlinkID6RegionO7gujaratyA2CmFWC) return cases::gujarat;
    if (tag == _impl::$s7BlinkID6RegionO7hidalgoyA2CmFWC) return cases::hidalgo;
    if (tag == _impl::$s7BlinkID6RegionO9karnatakayA2CmFWC) return cases::karnataka;
    if (tag == _impl::$s7BlinkID6RegionO6keralayA2CmFWC) return cases::kerala;
    if (tag == _impl::$s7BlinkID6RegionO17khyberPakhtunkhwayA2CmFWC) return cases::khyberPakhtunkhwa;
    if (tag == _impl::$s7BlinkID6RegionO13madhyaPradeshyA2CmFWC) return cases::madhyaPradesh;
    if (tag == _impl::$s7BlinkID6RegionO11maharashtrayA2CmFWC) return cases::maharashtra;
    if (tag == _impl::$s7BlinkID6RegionO7morelosyA2CmFWC) return cases::morelos;
    if (tag == _impl::$s7BlinkID6RegionO7nayarityA2CmFWC) return cases::nayarit;
    if (tag == _impl::$s7BlinkID6RegionO6oaxacayA2CmFWC) return cases::oaxaca;
    if (tag == _impl::$s7BlinkID6RegionO6pueblayA2CmFWC) return cases::puebla;
    if (tag == _impl::$s7BlinkID6RegionO6punjabyA2CmFWC) return cases::punjab;
    if (tag == _impl::$s7BlinkID6RegionO9queretaroyA2CmFWC) return cases::queretaro;
    if (tag == _impl::$s7BlinkID6RegionO13sanLuisPotosiyA2CmFWC) return cases::sanLuisPotosi;
    if (tag == _impl::$s7BlinkID6RegionO7sinaloayA2CmFWC) return cases::sinaloa;
    if (tag == _impl::$s7BlinkID6RegionO6sonorayA2CmFWC) return cases::sonora;
    if (tag == _impl::$s7BlinkID6RegionO7tabascoyA2CmFWC) return cases::tabasco;
    if (tag == _impl::$s7BlinkID6RegionO9tamilNaduyA2CmFWC) return cases::tamilNadu;
    if (tag == _impl::$s7BlinkID6RegionO7yucatanyA2CmFWC) return cases::yucatan;
    if (tag == _impl::$s7BlinkID6RegionO9zacatecasyA2CmFWC) return cases::zacatecas;
    if (tag == _impl::$s7BlinkID6RegionO14aguascalientesyA2CmFWC) return cases::aguascalientes;
    if (tag == _impl::$s7BlinkID6RegionO17bajaCaliforniaSuryA2CmFWC) return cases::bajaCaliforniaSur;
    if (tag == _impl::$s7BlinkID6RegionO8campecheyA2CmFWC) return cases::campeche;
    if (tag == _impl::$s7BlinkID6RegionO6colimayA2CmFWC) return cases::colima;
    if (tag == _impl::$s7BlinkID6RegionO23quintanaRooBenitoJuarezyA2CmFWC) return cases::quintanaRooBenitoJuarez;
    if (tag == _impl::$s7BlinkID6RegionO11quintanaRooyA2CmFWC) return cases::quintanaRoo;
    if (tag == _impl::$s7BlinkID6RegionO22quintanaRooSolidaridadyA2CmFWC) return cases::quintanaRooSolidaridad;
    if (tag == _impl::$s7BlinkID6RegionO8tlaxcalayA2CmFWC) return cases::tlaxcala;
    if (tag == _impl::$s7BlinkID6RegionO18quintanaRooCozumelyA2CmFWC) return cases::quintanaRooCozumel;
    if (tag == _impl::$s7BlinkID6RegionO8saoPaoloyA2CmFWC) return cases::saoPaolo;
    if (tag == _impl::$s7BlinkID6RegionO12rioDeJaneiroyA2CmFWC) return cases::rioDeJaneiro;
    if (tag == _impl::$s7BlinkID6RegionO14rioGrandeDoSulyA2CmFWC) return cases::rioGrandeDoSul;
    if (tag == _impl::$s7BlinkID6RegionO20northwestTerritoriesyA2CmFWC) return cases::northwestTerritories;
    if (tag == _impl::$s7BlinkID6RegionO7nunavutyA2CmFWC) return cases::nunavut;
    if (tag == _impl::$s7BlinkID6RegionO18princeEdwardIslandyA2CmFWC) return cases::princeEdwardIsland;
    if (tag == _impl::$s7BlinkID6RegionO15distritoFederalyA2CmFWC) return cases::distritoFederal;
    if (tag == _impl::$s7BlinkID6RegionO8maranhaoyA2CmFWC) return cases::maranhao;
    if (tag == _impl::$s7BlinkID6RegionO10matoGrossoyA2CmFWC) return cases::matoGrosso;
    if (tag == _impl::$s7BlinkID6RegionO11minasGeraisyA2CmFWC) return cases::minasGerais;
    if (tag == _impl::$s7BlinkID6RegionO4parayA2CmFWC) return cases::para;
    if (tag == _impl::$s7BlinkID6RegionO6paranayA2CmFWC) return cases::parana;
    if (tag == _impl::$s7BlinkID6RegionO10pernambucoyA2CmFWC) return cases::pernambuco;
    if (tag == _impl::$s7BlinkID6RegionO13santaCatarinayA2CmFWC) return cases::santaCatarina;
    if (tag == _impl::$s7BlinkID6RegionO13andhraPradeshyA2CmFWC) return cases::andhraPradesh;
    if (tag == _impl::$s7BlinkID6RegionO5cearayA2CmFWC) return cases::ceara;
    if (tag == _impl::$s7BlinkID6RegionO5goiasyA2CmFWC) return cases::goias;
    if (tag == _impl::$s7BlinkID6RegionO24guerreroAcapulcoDeJuarezyA2CmFWC) return cases::guerreroAcapulcoDeJuarez;
    if (tag == _impl::$s7BlinkID6RegionO7haryanayA2CmFWC) return cases::haryana;
    if (tag == _impl::$s7BlinkID6RegionO7sergipeyA2CmFWC) return cases::sergipe;
    if (tag == _impl::$s7BlinkID6RegionO7alagoasyA2CmFWC) return cases::alagoas;
    if (tag == _impl::$s7BlinkID6RegionO10bangsamoroyA2CmFWC) return cases::bangsamoro;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<Region> init(const swift::String& rawValue) SWIFT_SYMBOL("s:7BlinkID6RegionO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:7BlinkID6RegionO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK Region(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK Region _make() noexcept {
    auto metadata = _impl::$s7BlinkID6RegionOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return Region(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID6RegionOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID6RegionOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID6RegionOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_Region;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID6RegionOD;
  static inline constexpr $s7BlinkID6RegionOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_Region {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(Region &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const Region &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER Region returnNewValue(T callable) {
    auto result = Region::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID6RegionOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::Region> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID6RegionOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::Region> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::Region> = true;
template<>
struct implClassFor<BlinkID::Region> { using type = BlinkID::_impl::_impl_Region; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {


namespace _impl {

class _impl_RegionOfInterest;

// Type metadata accessor for RegionOfInterest
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID16RegionOfInterestVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID16RegionOfInterestV") RegionOfInterest final {
public:
  SWIFT_INLINE_THUNK ~RegionOfInterest() noexcept {
    auto metadata = _impl::$s7BlinkID16RegionOfInterestVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK RegionOfInterest(const RegionOfInterest &other) noexcept {
    auto metadata = _impl::$s7BlinkID16RegionOfInterestVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK RegionOfInterest &operator =(const RegionOfInterest &other) noexcept {
    auto metadata = _impl::$s7BlinkID16RegionOfInterestVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK RegionOfInterest &operator =(RegionOfInterest &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER RegionOfInterest(RegionOfInterest &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK float getX() const SWIFT_SYMBOL("s:7BlinkID16RegionOfInterestV1xSfvp");
  SWIFT_INLINE_THUNK float getY() const SWIFT_SYMBOL("s:7BlinkID16RegionOfInterestV1ySfvp");
  SWIFT_INLINE_THUNK float getWidth() const SWIFT_SYMBOL("s:7BlinkID16RegionOfInterestV5widthSfvp");
  SWIFT_INLINE_THUNK float getHeight() const SWIFT_SYMBOL("s:7BlinkID16RegionOfInterestV6heightSfvp");
  static SWIFT_INLINE_THUNK RegionOfInterest init(float x, float y, float width, float height) SWIFT_SYMBOL("s:7BlinkID16RegionOfInterestV1x1y5width6heightACSf_S3ftcfc");
private:
  SWIFT_INLINE_THUNK RegionOfInterest(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK RegionOfInterest _make() noexcept {
    auto metadata = _impl::$s7BlinkID16RegionOfInterestVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return RegionOfInterest(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_RegionOfInterest;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID16RegionOfInterestVD;
  static inline constexpr $s7BlinkID16RegionOfInterestVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_RegionOfInterest {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(RegionOfInterest &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const RegionOfInterest &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER RegionOfInterest returnNewValue(T callable) {
    auto result = RegionOfInterest::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID16RegionOfInterestVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::RegionOfInterest> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID16RegionOfInterestVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::RegionOfInterest> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::RegionOfInterest> = true;
template<>
struct implClassFor<BlinkID::RegionOfInterest> { using type = BlinkID::_impl::_impl_RegionOfInterest; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

namespace _impl {

class _impl_RequestTimeout;

// Type metadata accessor for RequestTimeout
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID14RequestTimeoutVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID14RequestTimeoutV") RequestTimeout final {
public:
  SWIFT_INLINE_THUNK ~RequestTimeout() noexcept {
    auto metadata = _impl::$s7BlinkID14RequestTimeoutVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK RequestTimeout(const RequestTimeout &other) noexcept {
    auto metadata = _impl::$s7BlinkID14RequestTimeoutVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK RequestTimeout &operator =(const RequestTimeout &other) noexcept {
    auto metadata = _impl::$s7BlinkID14RequestTimeoutVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK RequestTimeout &operator =(RequestTimeout &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER RequestTimeout(RequestTimeout &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
private:
  SWIFT_INLINE_THUNK RequestTimeout(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK RequestTimeout _make() noexcept {
    auto metadata = _impl::$s7BlinkID14RequestTimeoutVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return RequestTimeout(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_RequestTimeout;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID14RequestTimeoutVD;
  static inline constexpr $s7BlinkID14RequestTimeoutVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_RequestTimeout {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(RequestTimeout &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const RequestTimeout &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER RequestTimeout returnNewValue(T callable) {
    auto result = RequestTimeout::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID14RequestTimeoutVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::RequestTimeout> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID14RequestTimeoutVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::RequestTimeout> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::RequestTimeout> = true;
template<>
struct implClassFor<BlinkID::RequestTimeout> { using type = BlinkID::_impl::_impl_RequestTimeout; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID17ResourceLoadErrorV") ResourceLoadError;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::ResourceLoadError> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_ResourceLoadError;

// Type metadata accessor for ResourceLoadError
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID17ResourceLoadErrorVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID17ResourceLoadErrorV") ResourceLoadError final {
public:
  SWIFT_INLINE_THUNK ~ResourceLoadError() noexcept {
    auto metadata = _impl::$s7BlinkID17ResourceLoadErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ResourceLoadError(const ResourceLoadError &other) noexcept {
    auto metadata = _impl::$s7BlinkID17ResourceLoadErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ResourceLoadError &operator =(const ResourceLoadError &other) noexcept {
    auto metadata = _impl::$s7BlinkID17ResourceLoadErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ResourceLoadError &operator =(ResourceLoadError &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ResourceLoadError(ResourceLoadError &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getName() const SWIFT_SYMBOL("s:7BlinkID17ResourceLoadErrorV4nameSSvp");
  SWIFT_INLINE_THUNK ModelLoadError getError() const SWIFT_SYMBOL("s:7BlinkID17ResourceLoadErrorV5errorAA05ModeldE0Ovp");
private:
  SWIFT_INLINE_THUNK ResourceLoadError(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ResourceLoadError _make() noexcept {
    auto metadata = _impl::$s7BlinkID17ResourceLoadErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ResourceLoadError(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ResourceLoadError;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID17ResourceLoadErrorVD;
  static inline constexpr $s7BlinkID17ResourceLoadErrorVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ResourceLoadError {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ResourceLoadError &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ResourceLoadError &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ResourceLoadError returnNewValue(T callable) {
    auto result = ResourceLoadError::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID17ResourceLoadErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::ResourceLoadError> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID17ResourceLoadErrorVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::ResourceLoadError> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::ResourceLoadError> = true;
template<>
struct implClassFor<BlinkID::ResourceLoadError> { using type = BlinkID::_impl::_impl_ResourceLoadError; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID14ResourcesErrorO") ResourcesError;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::ResourcesError> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
/// Represents various resource-related errors that can occur during SDK initialization.
/// This enum encompasses errors related to asset corruption, resource downloading,
/// and bundle validation.
namespace _impl {

class _impl_ResourcesError;

// Type metadata accessor for ResourcesError
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID14ResourcesErrorOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum ResourcesError
extern "C" {
extern unsigned $s7BlinkID14ResourcesErrorO15corruptedAssetsyACSScACmFWC;
extern unsigned $s7BlinkID14ResourcesErrorO16resourceDownloadyACSScACmFWC;
extern unsigned $s7BlinkID14ResourcesErrorO13invalidBundleyACSScACmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID14ResourcesErrorO") ResourcesError final {
public:
  SWIFT_INLINE_THUNK ~ResourcesError() noexcept {
    auto metadata = _impl::$s7BlinkID14ResourcesErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ResourcesError(const ResourcesError &other) noexcept {
    auto metadata = _impl::$s7BlinkID14ResourcesErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ResourcesError &operator =(const ResourcesError &other) noexcept {
    auto metadata = _impl::$s7BlinkID14ResourcesErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ResourcesError &operator =(ResourcesError &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ResourcesError(ResourcesError &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    corruptedAssets SWIFT_SYMBOL("s:7BlinkID14ResourcesErrorO15corruptedAssetsyACSScACmF"),
    resourceDownload SWIFT_SYMBOL("s:7BlinkID14ResourcesErrorO16resourceDownloadyACSScACmF"),
    invalidBundle SWIFT_SYMBOL("s:7BlinkID14ResourcesErrorO13invalidBundleyACSScACmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_corruptedAssets {  // impl struct for case corruptedAssets
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::corruptedAssets;
    }
    SWIFT_INLINE_THUNK ResourcesError operator()(const swift::String& val) const;
  } corruptedAssets SWIFT_SYMBOL("s:7BlinkID14ResourcesErrorO15corruptedAssetsyACSScACmF");
  SWIFT_INLINE_THUNK bool isCorruptedAssets() const;
  SWIFT_INLINE_THUNK swift::String getCorruptedAssets() const;

  inline const static struct _impl_resourceDownload {  // impl struct for case resourceDownload
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::resourceDownload;
    }
    SWIFT_INLINE_THUNK ResourcesError operator()(const swift::String& val) const;
  } resourceDownload SWIFT_SYMBOL("s:7BlinkID14ResourcesErrorO16resourceDownloadyACSScACmF");
  SWIFT_INLINE_THUNK bool isResourceDownload() const;
  SWIFT_INLINE_THUNK swift::String getResourceDownload() const;

  inline const static struct _impl_invalidBundle {  // impl struct for case invalidBundle
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::invalidBundle;
    }
    SWIFT_INLINE_THUNK ResourcesError operator()(const swift::String& val) const;
  } invalidBundle SWIFT_SYMBOL("s:7BlinkID14ResourcesErrorO13invalidBundleyACSScACmF");
  SWIFT_INLINE_THUNK bool isInvalidBundle() const;
  SWIFT_INLINE_THUNK swift::String getInvalidBundle() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID14ResourcesErrorO15corruptedAssetsyACSScACmFWC) return cases::corruptedAssets;
    if (tag == _impl::$s7BlinkID14ResourcesErrorO16resourceDownloadyACSScACmFWC) return cases::resourceDownload;
    if (tag == _impl::$s7BlinkID14ResourcesErrorO13invalidBundleyACSScACmFWC) return cases::invalidBundle;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Optional<swift::String> getErrorDescription() const SWIFT_SYMBOL("s:7BlinkID14ResourcesErrorO16errorDescriptionSSSgvp");
private:
  SWIFT_INLINE_THUNK ResourcesError(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ResourcesError _make() noexcept {
    auto metadata = _impl::$s7BlinkID14ResourcesErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ResourcesError(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID14ResourcesErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID14ResourcesErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID14ResourcesErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ResourcesError;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID14ResourcesErrorOD;
  static inline constexpr $s7BlinkID14ResourcesErrorOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ResourcesError {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ResourcesError &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ResourcesError &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ResourcesError returnNewValue(T callable) {
    auto result = ResourcesError::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID14ResourcesErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::ResourcesError> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID14ResourcesErrorOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::ResourcesError> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::ResourcesError> = true;
template<>
struct implClassFor<BlinkID::ResourcesError> { using type = BlinkID::_impl::_impl_ResourcesError; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID12SDKInitErrorO") SDKInitError;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::SDKInitError> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
/// Represents high-level SDK initialization errors.
/// This enum encompasses various errors that can occur during SDK initialization,
/// including resource loading and memory allocation failures.
namespace _impl {

class _impl_SDKInitError;

// Type metadata accessor for SDKInitError
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID12SDKInitErrorOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum SDKInitError
extern "C" {
extern unsigned $s7BlinkID12SDKInitErrorO12resourceLoadyAcA08ResourcefD0VcACmFWC;
extern unsigned $s7BlinkID12SDKInitErrorO13memoryReserveyAcA06MemoryfD0VcACmFWC;
extern unsigned $s7BlinkID12SDKInitErrorO07licenseD0yA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID12SDKInitErrorO") SDKInitError final {
public:
  SWIFT_INLINE_THUNK ~SDKInitError() noexcept {
    auto metadata = _impl::$s7BlinkID12SDKInitErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK SDKInitError(const SDKInitError &other) noexcept {
    auto metadata = _impl::$s7BlinkID12SDKInitErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK SDKInitError &operator =(const SDKInitError &other) noexcept {
    auto metadata = _impl::$s7BlinkID12SDKInitErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK SDKInitError &operator =(SDKInitError &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER SDKInitError(SDKInitError &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    resourceLoad SWIFT_SYMBOL("s:7BlinkID12SDKInitErrorO12resourceLoadyAcA08ResourcefD0VcACmF"),
    memoryReserve SWIFT_SYMBOL("s:7BlinkID12SDKInitErrorO13memoryReserveyAcA06MemoryfD0VcACmF"),
    licenseError SWIFT_SYMBOL("s:7BlinkID12SDKInitErrorO07licenseD0yA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_resourceLoad {  // impl struct for case resourceLoad
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::resourceLoad;
    }
    SWIFT_INLINE_THUNK SDKInitError operator()(const ResourceLoadError& val) const;
  } resourceLoad SWIFT_SYMBOL("s:7BlinkID12SDKInitErrorO12resourceLoadyAcA08ResourcefD0VcACmF");
  SWIFT_INLINE_THUNK bool isResourceLoad() const;
  SWIFT_INLINE_THUNK ResourceLoadError getResourceLoad() const;

  inline const static struct _impl_memoryReserve {  // impl struct for case memoryReserve
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::memoryReserve;
    }
    SWIFT_INLINE_THUNK SDKInitError operator()(const MemoryReserveError& val) const;
  } memoryReserve SWIFT_SYMBOL("s:7BlinkID12SDKInitErrorO13memoryReserveyAcA06MemoryfD0VcACmF");
  SWIFT_INLINE_THUNK bool isMemoryReserve() const;
  SWIFT_INLINE_THUNK MemoryReserveError getMemoryReserve() const;

  inline const static struct _impl_licenseError {  // impl struct for case licenseError
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::licenseError;
    }
    SWIFT_INLINE_THUNK SDKInitError operator()() const;
  } licenseError SWIFT_SYMBOL("s:7BlinkID12SDKInitErrorO07licenseD0yA2CmF");
  SWIFT_INLINE_THUNK bool isLicenseError() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID12SDKInitErrorO12resourceLoadyAcA08ResourcefD0VcACmFWC) return cases::resourceLoad;
    if (tag == _impl::$s7BlinkID12SDKInitErrorO13memoryReserveyAcA06MemoryfD0VcACmFWC) return cases::memoryReserve;
    if (tag == _impl::$s7BlinkID12SDKInitErrorO07licenseD0yA2CmFWC) return cases::licenseError;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Optional<swift::String> getErrorDescription() const SWIFT_SYMBOL("s:7BlinkID12SDKInitErrorO16errorDescriptionSSSgvp");
private:
  SWIFT_INLINE_THUNK SDKInitError(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK SDKInitError _make() noexcept {
    auto metadata = _impl::$s7BlinkID12SDKInitErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return SDKInitError(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID12SDKInitErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID12SDKInitErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID12SDKInitErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_SDKInitError;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID12SDKInitErrorOD;
  static inline constexpr $s7BlinkID12SDKInitErrorOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_SDKInitError {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(SDKInitError &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const SDKInitError &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER SDKInitError returnNewValue(T callable) {
    auto result = SDKInitError::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID12SDKInitErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::SDKInitError> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID12SDKInitErrorOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::SDKInitError> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::SDKInitError> = true;
template<>
struct implClassFor<BlinkID::SDKInitError> { using type = BlinkID::_impl::_impl_SDKInitError; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

/// Represents the mode of document scanning.
/// This enum class defines whether the scanning process is limited to a single
/// side of the document or includes multiple sides, automatically identifying how many sides need to be scanned.
namespace _impl {

class _impl_ScanningMode;

// Type metadata accessor for ScanningMode
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID12ScanningModeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum ScanningMode
extern "C" {
extern unsigned $s7BlinkID12ScanningModeO6singleyA2CmFWC;
extern unsigned $s7BlinkID12ScanningModeO9automaticyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID12ScanningModeO") ScanningMode final {
public:
  SWIFT_INLINE_THUNK ~ScanningMode() noexcept {
    auto metadata = _impl::$s7BlinkID12ScanningModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ScanningMode(const ScanningMode &other) noexcept {
    auto metadata = _impl::$s7BlinkID12ScanningModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ScanningMode &operator =(const ScanningMode &other) noexcept {
    auto metadata = _impl::$s7BlinkID12ScanningModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ScanningMode &operator =(ScanningMode &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ScanningMode(ScanningMode &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    single SWIFT_SYMBOL("s:7BlinkID12ScanningModeO6singleyA2CmF"),
    automatic SWIFT_SYMBOL("s:7BlinkID12ScanningModeO9automaticyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_single {  // impl struct for case single
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::single;
    }
    SWIFT_INLINE_THUNK ScanningMode operator()() const;
  } single SWIFT_SYMBOL("s:7BlinkID12ScanningModeO6singleyA2CmF");
  SWIFT_INLINE_THUNK bool isSingle() const;

  inline const static struct _impl_automatic {  // impl struct for case automatic
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::automatic;
    }
    SWIFT_INLINE_THUNK ScanningMode operator()() const;
  } automatic SWIFT_SYMBOL("s:7BlinkID12ScanningModeO9automaticyA2CmF");
  SWIFT_INLINE_THUNK bool isAutomatic() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID12ScanningModeO6singleyA2CmFWC) return cases::single;
    if (tag == _impl::$s7BlinkID12ScanningModeO9automaticyA2CmFWC) return cases::automatic;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:7BlinkID12ScanningModeO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK ScanningMode(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ScanningMode _make() noexcept {
    auto metadata = _impl::$s7BlinkID12ScanningModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ScanningMode(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID12ScanningModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID12ScanningModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID12ScanningModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ScanningMode;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID12ScanningModeOD;
  static inline constexpr $s7BlinkID12ScanningModeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ScanningMode {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ScanningMode &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ScanningMode &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ScanningMode returnNewValue(T callable) {
    auto result = ScanningMode::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID12ScanningModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::ScanningMode> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID12ScanningModeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::ScanningMode> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::ScanningMode> = true;
template<>
struct implClassFor<BlinkID::ScanningMode> { using type = BlinkID::_impl::_impl_ScanningMode; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

namespace _impl {

class _impl_ScanningSettings;

// Type metadata accessor for ScanningSettings
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID16ScanningSettingsVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV") ScanningSettings final {
public:
  SWIFT_INLINE_THUNK ~ScanningSettings() noexcept {
    auto metadata = _impl::$s7BlinkID16ScanningSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ScanningSettings(const ScanningSettings &other) noexcept {
    auto metadata = _impl::$s7BlinkID16ScanningSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ScanningSettings &operator =(const ScanningSettings &other) noexcept {
    auto metadata = _impl::$s7BlinkID16ScanningSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ScanningSettings &operator =(ScanningSettings &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ScanningSettings(ScanningSettings &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK DetectionLevel getBlurDetectionLevel() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV18blurDetectionLevelAA0fG0Ovp");
  SWIFT_INLINE_THUNK void setBlurDetectionLevel(const DetectionLevel& value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV18blurDetectionLevelAA0fG0Ovp");
  SWIFT_INLINE_THUNK bool getSkipImagesWithBlur() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV18skipImagesWithBlurSbvp");
  SWIFT_INLINE_THUNK void setSkipImagesWithBlur(bool value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV18skipImagesWithBlurSbvp");
  SWIFT_INLINE_THUNK DetectionLevel getGlareDetectionLevel() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV19glareDetectionLevelAA0fG0Ovp");
  SWIFT_INLINE_THUNK void setGlareDetectionLevel(const DetectionLevel& value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV19glareDetectionLevelAA0fG0Ovp");
  SWIFT_INLINE_THUNK bool getSkipImagesWithGlare() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV19skipImagesWithGlareSbvp");
  SWIFT_INLINE_THUNK void setSkipImagesWithGlare(bool value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV19skipImagesWithGlareSbvp");
  SWIFT_INLINE_THUNK DetectionLevel getTiltDetectionLevel() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV18tiltDetectionLevelAA0fG0Ovp");
  SWIFT_INLINE_THUNK void setTiltDetectionLevel(const DetectionLevel& value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV18tiltDetectionLevelAA0fG0Ovp");
  SWIFT_INLINE_THUNK bool getSkipImagesWithInadequateLightingConditions() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV42skipImagesWithInadequateLightingConditionsSbvp");
  SWIFT_INLINE_THUNK void setSkipImagesWithInadequateLightingConditions(bool value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV42skipImagesWithInadequateLightingConditionsSbvp");
  SWIFT_INLINE_THUNK bool getSkipImagesOccludedByHand() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV24skipImagesOccludedByHandSbvp");
  SWIFT_INLINE_THUNK void setSkipImagesOccludedByHand(bool value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV24skipImagesOccludedByHandSbvp");
  SWIFT_INLINE_THUNK bool getCombineResultsFromMultipleInputImages() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV37combineResultsFromMultipleInputImagesSbvp");
  SWIFT_INLINE_THUNK void setCombineResultsFromMultipleInputImages(bool value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV37combineResultsFromMultipleInputImagesSbvp");
  SWIFT_INLINE_THUNK bool getEnableBarcodeScanOnly() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV21enableBarcodeScanOnlySbvp");
  SWIFT_INLINE_THUNK void setEnableBarcodeScanOnly(bool value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV21enableBarcodeScanOnlySbvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::Array<DocumentRules>> getCustomDocumentRules() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV19customDocumentRulesSayAA0fG0VGSgvp");
  SWIFT_INLINE_THUNK void setCustomDocumentRules(const swift::Optional<swift::Array<DocumentRules>>& value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV19customDocumentRulesSayAA0fG0VGSgvp");
  SWIFT_INLINE_THUNK AnonymizationMode getAnonymizationMode() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV17anonymizationModeAA013AnonymizationF0Ovp");
  SWIFT_INLINE_THUNK void setAnonymizationMode(const AnonymizationMode& value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV17anonymizationModeAA013AnonymizationF0Ovp");
  SWIFT_INLINE_THUNK swift::Optional<swift::Array<DocumentAnonymizationSettings>> getCustomDocumentAnonymizationSettings() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV027customDocumentAnonymizationD0SayAA0fgD0VGSgvp");
  SWIFT_INLINE_THUNK void setCustomDocumentAnonymizationSettings(const swift::Optional<swift::Array<DocumentAnonymizationSettings>>& value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV027customDocumentAnonymizationD0SayAA0fgD0VGSgvp");
  SWIFT_INLINE_THUNK bool getReturnInputImages() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV17returnInputImagesSbvp");
  SWIFT_INLINE_THUNK void setReturnInputImages(bool value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV17returnInputImagesSbvp");
  SWIFT_INLINE_THUNK bool getScanCroppedDocumentImage() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV24scanCroppedDocumentImageSbvp");
  SWIFT_INLINE_THUNK void setScanCroppedDocumentImage(bool value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV24scanCroppedDocumentImageSbvp");
  SWIFT_INLINE_THUNK RecognitionModeFilter getRecognitionModeFilter() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV21recognitionModeFilterAA011RecognitionfG0Vvp");
  SWIFT_INLINE_THUNK void setRecognitionModeFilter(const RecognitionModeFilter& value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV21recognitionModeFilterAA011RecognitionfG0Vvp");
  SWIFT_INLINE_THUNK bool getEnableCharacterValidation() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV25enableCharacterValidationSbvp");
  SWIFT_INLINE_THUNK void setEnableCharacterValidation(bool value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV25enableCharacterValidationSbvp");
  SWIFT_INLINE_THUNK float getInputImageMargin() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV16inputImageMarginSfvp");
  SWIFT_INLINE_THUNK void setInputImageMargin(float value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV16inputImageMarginSfvp");
  SWIFT_INLINE_THUNK bool getScanUnsupportedBack() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV19scanUnsupportedBackSbvp");
  SWIFT_INLINE_THUNK void setScanUnsupportedBack(bool value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV19scanUnsupportedBackSbvp");
  SWIFT_INLINE_THUNK bool getAllowUncertainFrontSideScan() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV27allowUncertainFrontSideScanSbvp");
  SWIFT_INLINE_THUNK void setAllowUncertainFrontSideScan(bool value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV27allowUncertainFrontSideScanSbvp");
  SWIFT_INLINE_THUNK swift::Int getMaxAllowedMismatchesPerField() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV28maxAllowedMismatchesPerFieldSivp");
  SWIFT_INLINE_THUNK void setMaxAllowedMismatchesPerField(swift::Int value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV28maxAllowedMismatchesPerFieldSivp");
  SWIFT_INLINE_THUNK bool getScanPassportDataPageOnly() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV24scanPassportDataPageOnlySbvp");
  SWIFT_INLINE_THUNK void setScanPassportDataPageOnly(bool value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV24scanPassportDataPageOnlySbvp");
  SWIFT_INLINE_THUNK CroppedImageSettings getCroppedImageSettings() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV012croppedImageD0AA07CroppedfD0Vvp");
  SWIFT_INLINE_THUNK void setCroppedImageSettings(const CroppedImageSettings& value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV012croppedImageD0AA07CroppedfD0Vvp");
  static SWIFT_INLINE_THUNK ScanningSettings init(const DetectionLevel& blurDetectionLevel, bool skipImagesWithBlur, const DetectionLevel& glareDetectionLevel, bool skipImagesWithGlare, const DetectionLevel& tiltDetectionLevel, bool skipImagesWithInadequateLightingConditions, bool skipImagesOccludedByHand, bool combineResultsFromMultipleInputImages, bool enableBarcodeScanOnly, const swift::Optional<swift::Array<DocumentRules>>& customDocumentRules, const AnonymizationMode& anonymizationMode, const swift::Optional<swift::Array<DocumentAnonymizationSettings>>& customDocumentAnonymizationSettings, bool returnInputImages, bool scanCroppedDocumentImage, bool enableCharacterValidation, const RecognitionModeFilter& recognitionModeFilter, float inputImageMargin, bool scanUnsupportedBack, bool allowUncertainFrontSideScan, swift::Int maxAllowedMismatchesPerField, bool scanPassportDataPageOnly, const CroppedImageSettings& croppedImageSettings) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV18blurDetectionLevel18skipImagesWithBlur05glarefG00hiJ5Glare04tiltfG00hiJ28InadequateLightingConditions0hI14OccludedByHand031combineResultsFromMultipleInputI021enableBarcodeScanOnly19customDocumentRules17anonymizationMode027customDocumentAnonymizationD006returnyI024scanCroppedDocumentImage0Z19CharacterValidation21recognitionModeFilter16inputImageMargin19scanUnsupportedBack27allowUncertainFrontSideScan28maxAllowedMismatchesPerField24scanPassportDataPageOnly012croppedImageD0AcA0fG0O_SbA_SbA_S4bSayAA13DocumentRulesVGSgAA17AnonymizationModeOSayAA021DocumentAnonymizationD0VGSgS3bAA21RecognitionModeFilterVSfS2bSiSbAA012CroppedImageD0Vtcfc");
private:
  SWIFT_INLINE_THUNK ScanningSettings(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ScanningSettings _make() noexcept {
    auto metadata = _impl::$s7BlinkID16ScanningSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ScanningSettings(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ScanningSettings;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID16ScanningSettingsVD;
  static inline constexpr $s7BlinkID16ScanningSettingsVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ScanningSettings {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ScanningSettings &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ScanningSettings &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ScanningSettings returnNewValue(T callable) {
    auto result = ScanningSettings::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID16ScanningSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::ScanningSettings> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID16ScanningSettingsVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::ScanningSettings> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::ScanningSettings> = true;
template<>
struct implClassFor<BlinkID::ScanningSettings> { using type = BlinkID::_impl::_impl_ScanningSettings; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

/// Represents the sides of the document that can be scanned.
namespace _impl {

class _impl_ScanningSide;

// Type metadata accessor for ScanningSide
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID12ScanningSideOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum ScanningSide
extern "C" {
extern unsigned $s7BlinkID12ScanningSideO5firstyA2CmFWC;
extern unsigned $s7BlinkID12ScanningSideO6secondyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID12ScanningSideO") ScanningSide final {
public:
  SWIFT_INLINE_THUNK ~ScanningSide() noexcept {
    auto metadata = _impl::$s7BlinkID12ScanningSideOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ScanningSide(const ScanningSide &other) noexcept {
    auto metadata = _impl::$s7BlinkID12ScanningSideOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ScanningSide &operator =(const ScanningSide &other) noexcept {
    auto metadata = _impl::$s7BlinkID12ScanningSideOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ScanningSide &operator =(ScanningSide &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ScanningSide(ScanningSide &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    first SWIFT_SYMBOL("s:7BlinkID12ScanningSideO5firstyA2CmF"),
    second SWIFT_SYMBOL("s:7BlinkID12ScanningSideO6secondyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_first {  // impl struct for case first
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::first;
    }
    SWIFT_INLINE_THUNK ScanningSide operator()() const;
  } first SWIFT_SYMBOL("s:7BlinkID12ScanningSideO5firstyA2CmF");
  SWIFT_INLINE_THUNK bool isFirst() const;

  inline const static struct _impl_second {  // impl struct for case second
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::second;
    }
    SWIFT_INLINE_THUNK ScanningSide operator()() const;
  } second SWIFT_SYMBOL("s:7BlinkID12ScanningSideO6secondyA2CmF");
  SWIFT_INLINE_THUNK bool isSecond() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID12ScanningSideO5firstyA2CmFWC) return cases::first;
    if (tag == _impl::$s7BlinkID12ScanningSideO6secondyA2CmFWC) return cases::second;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<ScanningSide> init(swift::Int rawValue) SWIFT_SYMBOL("s:7BlinkID12ScanningSideO8rawValueACSgSi_tcfc");
  SWIFT_INLINE_THUNK swift::Int getRawValue() const SWIFT_SYMBOL("s:7BlinkID12ScanningSideO8rawValueSivp");
private:
  SWIFT_INLINE_THUNK ScanningSide(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ScanningSide _make() noexcept {
    auto metadata = _impl::$s7BlinkID12ScanningSideOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ScanningSide(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID12ScanningSideOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID12ScanningSideOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID12ScanningSideOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ScanningSide;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID12ScanningSideOD;
  static inline constexpr $s7BlinkID12ScanningSideOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ScanningSide {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ScanningSide &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ScanningSide &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ScanningSide returnNewValue(T callable) {
    auto result = ScanningSide::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID12ScanningSideOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::ScanningSide> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID12ScanningSideOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::ScanningSide> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::ScanningSide> = true;
template<>
struct implClassFor<BlinkID::ScanningSide> { using type = BlinkID::_impl::_impl_ScanningSide; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID14ScanningStatusO") ScanningStatus;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::ScanningStatus> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
/// Represents the different states of a scanning process.
/// Defines the possible statuses that can occur during the
/// scanning operation, specifically for managing the progress of scanning sides
/// and the entire document.
namespace _impl {

class _impl_ScanningStatus;

// Type metadata accessor for ScanningStatus
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID14ScanningStatusOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum ScanningStatus
extern "C" {
extern unsigned $s7BlinkID14ScanningStatusO22scanningSideInProgressyA2CmFWC;
extern unsigned $s7BlinkID14ScanningStatusO25scanningBarcodeInProgressyA2CmFWC;
extern unsigned $s7BlinkID14ScanningStatusO11sideScannedyA2CmFWC;
extern unsigned $s7BlinkID14ScanningStatusO15documentScannedyA2CmFWC;
extern unsigned $s7BlinkID14ScanningStatusO9cancelledyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID14ScanningStatusO") ScanningStatus final {
public:
  SWIFT_INLINE_THUNK ~ScanningStatus() noexcept {
    auto metadata = _impl::$s7BlinkID14ScanningStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ScanningStatus(const ScanningStatus &other) noexcept {
    auto metadata = _impl::$s7BlinkID14ScanningStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ScanningStatus &operator =(const ScanningStatus &other) noexcept {
    auto metadata = _impl::$s7BlinkID14ScanningStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ScanningStatus &operator =(ScanningStatus &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ScanningStatus(ScanningStatus &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    scanningSideInProgress SWIFT_SYMBOL("s:7BlinkID14ScanningStatusO22scanningSideInProgressyA2CmF"),
    scanningBarcodeInProgress SWIFT_SYMBOL("s:7BlinkID14ScanningStatusO25scanningBarcodeInProgressyA2CmF"),
    sideScanned SWIFT_SYMBOL("s:7BlinkID14ScanningStatusO11sideScannedyA2CmF"),
    documentScanned SWIFT_SYMBOL("s:7BlinkID14ScanningStatusO15documentScannedyA2CmF"),
    cancelled SWIFT_SYMBOL("s:7BlinkID14ScanningStatusO9cancelledyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_scanningSideInProgress {  // impl struct for case scanningSideInProgress
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::scanningSideInProgress;
    }
    SWIFT_INLINE_THUNK ScanningStatus operator()() const;
  } scanningSideInProgress SWIFT_SYMBOL("s:7BlinkID14ScanningStatusO22scanningSideInProgressyA2CmF");
  SWIFT_INLINE_THUNK bool isScanningSideInProgress() const;

  inline const static struct _impl_scanningBarcodeInProgress {  // impl struct for case scanningBarcodeInProgress
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::scanningBarcodeInProgress;
    }
    SWIFT_INLINE_THUNK ScanningStatus operator()() const;
  } scanningBarcodeInProgress SWIFT_SYMBOL("s:7BlinkID14ScanningStatusO25scanningBarcodeInProgressyA2CmF");
  SWIFT_INLINE_THUNK bool isScanningBarcodeInProgress() const;

  inline const static struct _impl_sideScanned {  // impl struct for case sideScanned
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sideScanned;
    }
    SWIFT_INLINE_THUNK ScanningStatus operator()() const;
  } sideScanned SWIFT_SYMBOL("s:7BlinkID14ScanningStatusO11sideScannedyA2CmF");
  SWIFT_INLINE_THUNK bool isSideScanned() const;

  inline const static struct _impl_documentScanned {  // impl struct for case documentScanned
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::documentScanned;
    }
    SWIFT_INLINE_THUNK ScanningStatus operator()() const;
  } documentScanned SWIFT_SYMBOL("s:7BlinkID14ScanningStatusO15documentScannedyA2CmF");
  SWIFT_INLINE_THUNK bool isDocumentScanned() const;

  inline const static struct _impl_cancelled {  // impl struct for case cancelled
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cancelled;
    }
    SWIFT_INLINE_THUNK ScanningStatus operator()() const;
  } cancelled SWIFT_SYMBOL("s:7BlinkID14ScanningStatusO9cancelledyA2CmF");
  SWIFT_INLINE_THUNK bool isCancelled() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID14ScanningStatusO22scanningSideInProgressyA2CmFWC) return cases::scanningSideInProgress;
    if (tag == _impl::$s7BlinkID14ScanningStatusO25scanningBarcodeInProgressyA2CmFWC) return cases::scanningBarcodeInProgress;
    if (tag == _impl::$s7BlinkID14ScanningStatusO11sideScannedyA2CmFWC) return cases::sideScanned;
    if (tag == _impl::$s7BlinkID14ScanningStatusO15documentScannedyA2CmFWC) return cases::documentScanned;
    if (tag == _impl::$s7BlinkID14ScanningStatusO9cancelledyA2CmFWC) return cases::cancelled;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:7BlinkID14ScanningStatusO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK ScanningStatus(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ScanningStatus _make() noexcept {
    auto metadata = _impl::$s7BlinkID14ScanningStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ScanningStatus(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID14ScanningStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID14ScanningStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID14ScanningStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ScanningStatus;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID14ScanningStatusOD;
  static inline constexpr $s7BlinkID14ScanningStatusOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ScanningStatus {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ScanningStatus &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ScanningStatus &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ScanningStatus returnNewValue(T callable) {
    auto result = ScanningStatus::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID14ScanningStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::ScanningStatus> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID14ScanningStatusOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::ScanningStatus> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::ScanningStatus> = true;
template<>
struct implClassFor<BlinkID::ScanningStatus> { using type = BlinkID::_impl::_impl_ScanningStatus; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

namespace _impl {

class _impl_SessionError;

// Type metadata accessor for SessionError
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID12SessionErrorOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum SessionError
extern "C" {
extern unsigned $s7BlinkID12SessionErrorO31processCallAfterDocumentScannedyA2CmFWC;
extern unsigned $s7BlinkID12SessionErrorO29resetCallAfterResultRetrievedyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID12SessionErrorO") SessionError final {
public:
  SWIFT_INLINE_THUNK ~SessionError() noexcept {
    auto metadata = _impl::$s7BlinkID12SessionErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK SessionError(const SessionError &other) noexcept {
    auto metadata = _impl::$s7BlinkID12SessionErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK SessionError &operator =(const SessionError &other) noexcept {
    auto metadata = _impl::$s7BlinkID12SessionErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK SessionError &operator =(SessionError &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER SessionError(SessionError &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    processCallAfterDocumentScanned SWIFT_SYMBOL("s:7BlinkID12SessionErrorO31processCallAfterDocumentScannedyA2CmF"),
    resetCallAfterResultRetrieved SWIFT_SYMBOL("s:7BlinkID12SessionErrorO29resetCallAfterResultRetrievedyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_processCallAfterDocumentScanned {  // impl struct for case processCallAfterDocumentScanned
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::processCallAfterDocumentScanned;
    }
    SWIFT_INLINE_THUNK SessionError operator()() const;
  } processCallAfterDocumentScanned SWIFT_SYMBOL("s:7BlinkID12SessionErrorO31processCallAfterDocumentScannedyA2CmF");
  SWIFT_INLINE_THUNK bool isProcessCallAfterDocumentScanned() const;

  inline const static struct _impl_resetCallAfterResultRetrieved {  // impl struct for case resetCallAfterResultRetrieved
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::resetCallAfterResultRetrieved;
    }
    SWIFT_INLINE_THUNK SessionError operator()() const;
  } resetCallAfterResultRetrieved SWIFT_SYMBOL("s:7BlinkID12SessionErrorO29resetCallAfterResultRetrievedyA2CmF");
  SWIFT_INLINE_THUNK bool isResetCallAfterResultRetrieved() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID12SessionErrorO31processCallAfterDocumentScannedyA2CmFWC) return cases::processCallAfterDocumentScanned;
    if (tag == _impl::$s7BlinkID12SessionErrorO29resetCallAfterResultRetrievedyA2CmFWC) return cases::resetCallAfterResultRetrieved;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:7BlinkID12SessionErrorO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK SessionError(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK SessionError _make() noexcept {
    auto metadata = _impl::$s7BlinkID12SessionErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return SessionError(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID12SessionErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID12SessionErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID12SessionErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_SessionError;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID12SessionErrorOD;
  static inline constexpr $s7BlinkID12SessionErrorOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_SessionError {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(SessionError &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const SessionError &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER SessionError returnNewValue(T callable) {
    auto result = SessionError::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID12SessionErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::SessionError> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID12SessionErrorOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::SessionError> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::SessionError> = true;
template<>
struct implClassFor<BlinkID::SessionError> { using type = BlinkID::_impl::_impl_SessionError; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID9VIZResultV") VIZResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::VIZResult> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_SingleSideScanningResult;

// Type metadata accessor for SingleSideScanningResult
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID24SingleSideScanningResultVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID24SingleSideScanningResultV") SingleSideScanningResult final {
public:
  SWIFT_INLINE_THUNK ~SingleSideScanningResult() noexcept {
    auto metadata = _impl::$s7BlinkID24SingleSideScanningResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK SingleSideScanningResult(const SingleSideScanningResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID24SingleSideScanningResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK SingleSideScanningResult &operator =(const SingleSideScanningResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID24SingleSideScanningResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK SingleSideScanningResult &operator =(SingleSideScanningResult &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER SingleSideScanningResult(SingleSideScanningResult &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Optional<VIZResult> getViz() const SWIFT_SYMBOL("s:7BlinkID24SingleSideScanningResultV3vizAA9VIZResultVSgvp");
  SWIFT_INLINE_THUNK void setViz(const swift::Optional<VIZResult>& value) SWIFT_SYMBOL("s:7BlinkID24SingleSideScanningResultV3vizAA9VIZResultVSgvp");
  SWIFT_INLINE_THUNK swift::Optional<MRZResult> getMrz() const SWIFT_SYMBOL("s:7BlinkID24SingleSideScanningResultV3mrzAA9MRZResultVSgvp");
  SWIFT_INLINE_THUNK void setMrz(const swift::Optional<MRZResult>& value) SWIFT_SYMBOL("s:7BlinkID24SingleSideScanningResultV3mrzAA9MRZResultVSgvp");
  SWIFT_INLINE_THUNK swift::Optional<BarcodeResult> getBarcode() const SWIFT_SYMBOL("s:7BlinkID24SingleSideScanningResultV7barcodeAA07BarcodeF0VSgvp");
  SWIFT_INLINE_THUNK void setBarcode(const swift::Optional<BarcodeResult>& value) SWIFT_SYMBOL("s:7BlinkID24SingleSideScanningResultV7barcodeAA07BarcodeF0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<InputImageResult> getInputImage() const SWIFT_SYMBOL("s:7BlinkID24SingleSideScanningResultV10inputImageAA05InputhF0VSgvp");
  SWIFT_INLINE_THUNK void setInputImage(const swift::Optional<InputImageResult>& value) SWIFT_SYMBOL("s:7BlinkID24SingleSideScanningResultV10inputImageAA05InputhF0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<InputImageResult> getBarcodeInputImage() const SWIFT_SYMBOL("s:7BlinkID24SingleSideScanningResultV17barcodeInputImageAA0hiF0VSgvp");
  SWIFT_INLINE_THUNK void setBarcodeInputImage(const swift::Optional<InputImageResult>& value) SWIFT_SYMBOL("s:7BlinkID24SingleSideScanningResultV17barcodeInputImageAA0hiF0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<CroppedImageResult> getDocumentImage() const SWIFT_SYMBOL("s:7BlinkID24SingleSideScanningResultV13documentImageAA07CroppedhF0VSgvp");
  SWIFT_INLINE_THUNK void setDocumentImage(const swift::Optional<CroppedImageResult>& value) SWIFT_SYMBOL("s:7BlinkID24SingleSideScanningResultV13documentImageAA07CroppedhF0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<DetailedCroppedImageResult> getFaceImage() const SWIFT_SYMBOL("s:7BlinkID24SingleSideScanningResultV9faceImageAA015DetailedCroppedhF0VSgvp");
  SWIFT_INLINE_THUNK void setFaceImage(const swift::Optional<DetailedCroppedImageResult>& value) SWIFT_SYMBOL("s:7BlinkID24SingleSideScanningResultV9faceImageAA015DetailedCroppedhF0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<DetailedCroppedImageResult> getSignatureImage() const SWIFT_SYMBOL("s:7BlinkID24SingleSideScanningResultV14signatureImageAA015DetailedCroppedhF0VSgvp");
  SWIFT_INLINE_THUNK void setSignatureImage(const swift::Optional<DetailedCroppedImageResult>& value) SWIFT_SYMBOL("s:7BlinkID24SingleSideScanningResultV14signatureImageAA015DetailedCroppedhF0VSgvp");
private:
  SWIFT_INLINE_THUNK SingleSideScanningResult(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK SingleSideScanningResult _make() noexcept {
    auto metadata = _impl::$s7BlinkID24SingleSideScanningResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return SingleSideScanningResult(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_SingleSideScanningResult;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID24SingleSideScanningResultVD;
  static inline constexpr $s7BlinkID24SingleSideScanningResultVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_SingleSideScanningResult {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(SingleSideScanningResult &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const SingleSideScanningResult &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER SingleSideScanningResult returnNewValue(T callable) {
    auto result = SingleSideScanningResult::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID24SingleSideScanningResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::SingleSideScanningResult> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID24SingleSideScanningResultVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::SingleSideScanningResult> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::SingleSideScanningResult> = true;
template<>
struct implClassFor<BlinkID::SingleSideScanningResult> { using type = BlinkID::_impl::_impl_SingleSideScanningResult; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {



namespace _impl {

class _impl_VIZResult;

// Type metadata accessor for VIZResult
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID9VIZResultVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID9VIZResultV") VIZResult final {
public:
  SWIFT_INLINE_THUNK ~VIZResult() noexcept {
    auto metadata = _impl::$s7BlinkID9VIZResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK VIZResult(const VIZResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID9VIZResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK VIZResult &operator =(const VIZResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID9VIZResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK VIZResult &operator =(VIZResult &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER VIZResult(VIZResult &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK bool getDateOfExpiryPermanent() const SWIFT_SYMBOL("s:7BlinkID9VIZResultV21dateOfExpiryPermanentSbvp");
  SWIFT_INLINE_THUNK swift::Array<DependentInfo> getDependentsInfo() const SWIFT_SYMBOL("s:7BlinkID9VIZResultV14dependentsInfoSayAA09DependentE0VGvp");
private:
  SWIFT_INLINE_THUNK VIZResult(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK VIZResult _make() noexcept {
    auto metadata = _impl::$s7BlinkID9VIZResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return VIZResult(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_VIZResult;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID9VIZResultVD;
  static inline constexpr $s7BlinkID9VIZResultVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_VIZResult {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(VIZResult &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const VIZResult &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER VIZResult returnNewValue(T callable) {
    auto result = VIZResult::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID9VIZResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::VIZResult> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID9VIZResultVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::VIZResult> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::VIZResult> = true;
template<>
struct implClassFor<BlinkID::VIZResult> { using type = BlinkID::_impl::_impl_VIZResult; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_VehicleClassInfo;

static_assert(1 <= 3, "unsupported generic requirement list for metadata func");
// Type metadata accessor for VehicleClassInfo
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID16VehicleClassInfoVMa(swift::_impl::MetadataRequestTy, void * _Nonnull) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:7BlinkID16VehicleClassInfoV") VehicleClassInfo final {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK ~VehicleClassInfo() noexcept {
    auto metadata = _impl::$s7BlinkID16VehicleClassInfoVMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK VehicleClassInfo(const VehicleClassInfo &other) noexcept {
    auto metadata = _impl::$s7BlinkID16VehicleClassInfoVMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK VehicleClassInfo &operator =(const VehicleClassInfo &other) noexcept {
    auto metadata = _impl::$s7BlinkID16VehicleClassInfoVMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK VehicleClassInfo &operator =(VehicleClassInfo &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER VehicleClassInfo(VehicleClassInfo &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Optional<T_0_0> getVehicleClass() const SWIFT_SYMBOL("s:7BlinkID16VehicleClassInfoV07vehicleD0xSgvp");
  SWIFT_INLINE_THUNK swift::Optional<T_0_0> getLicenceType() const SWIFT_SYMBOL("s:7BlinkID16VehicleClassInfoV11licenceTypexSgvp");
  SWIFT_INLINE_THUNK swift::Optional<DateResult<T_0_0>> getEffectiveDate() const SWIFT_SYMBOL("s:7BlinkID16VehicleClassInfoV13effectiveDateAA0G6ResultVyxGSgvp");
  SWIFT_INLINE_THUNK swift::Optional<DateResult<T_0_0>> getExpiryDate() const SWIFT_SYMBOL("s:7BlinkID16VehicleClassInfoV10expiryDateAA0G6ResultVyxGSgvp");
private:
  SWIFT_INLINE_THUNK VehicleClassInfo(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK VehicleClassInfo _make() noexcept {
    auto metadata = _impl::$s7BlinkID16VehicleClassInfoVMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return VehicleClassInfo(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_VehicleClassInfo<T_0_0>;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID16VehicleClassInfoVyxGD;
  static inline constexpr $s7BlinkID16VehicleClassInfoVyxGD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_VehicleClassInfo {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(VehicleClassInfo<T_0_0> &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const VehicleClassInfo<T_0_0> &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER VehicleClassInfo<T_0_0> returnNewValue(T callable) {
    auto result = VehicleClassInfo<T_0_0>::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID16VehicleClassInfoVMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
struct TypeMetadataTrait<BlinkID::VehicleClassInfo<T_0_0>> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID16VehicleClassInfoVMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata())._0;
  }
};
namespace _impl{
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
static inline const constexpr bool isOpaqueLayout<BlinkID::VehicleClassInfo<T_0_0>> = true;
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

  SWIFT_INLINE_THUNK swift::Optional<swift::String> AddressDetailedInfo::getStreet() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_uint64_t_8_16(result, _impl::$s7BlinkID19AddressDetailedInfoV6streetSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> AddressDetailedInfo::getPostalCode() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_uint64_t_8_16(result, _impl::$s7BlinkID19AddressDetailedInfoV10postalCodeSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> AddressDetailedInfo::getCity() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_uint64_t_8_16(result, _impl::$s7BlinkID19AddressDetailedInfoV4citySSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> AddressDetailedInfo::getJurisdiction() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_uint64_t_8_16(result, _impl::$s7BlinkID19AddressDetailedInfoV12jurisdictionSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK AlphabetType AlphabetType::_impl_latin::operator()() const {
    auto result = AlphabetType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12AlphabetTypeO5latinyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool AlphabetType::isLatin() const {
    return *this == AlphabetType::latin;
  }
  SWIFT_INLINE_THUNK AlphabetType AlphabetType::_impl_arabic::operator()() const {
    auto result = AlphabetType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12AlphabetTypeO6arabicyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool AlphabetType::isArabic() const {
    return *this == AlphabetType::arabic;
  }
  SWIFT_INLINE_THUNK AlphabetType AlphabetType::_impl_cyrillic::operator()() const {
    auto result = AlphabetType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12AlphabetTypeO8cyrillicyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool AlphabetType::isCyrillic() const {
    return *this == AlphabetType::cyrillic;
  }
  SWIFT_INLINE_THUNK AlphabetType AlphabetType::_impl_greek::operator()() const {
    auto result = AlphabetType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12AlphabetTypeO5greekyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool AlphabetType::isGreek() const {
    return *this == AlphabetType::greek;
  }
  SWIFT_INLINE_THUNK  bool AlphabetType::isUnknownDefault() const {
    return *this == AlphabetType::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<AlphabetType> AlphabetType::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<AlphabetType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID12AlphabetTypeO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String AlphabetType::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID12AlphabetTypeO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK AnonymizationMode AnonymizationMode::_impl_none::operator()() const {
    auto result = AnonymizationMode::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17AnonymizationModeO4noneyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool AnonymizationMode::isNone() const {
    return *this == AnonymizationMode::none;
  }
  SWIFT_INLINE_THUNK AnonymizationMode AnonymizationMode::_impl_imageOnly::operator()() const {
    auto result = AnonymizationMode::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17AnonymizationModeO9imageOnlyyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool AnonymizationMode::isImageOnly() const {
    return *this == AnonymizationMode::imageOnly;
  }
  SWIFT_INLINE_THUNK AnonymizationMode AnonymizationMode::_impl_resultFieldsOnly::operator()() const {
    auto result = AnonymizationMode::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17AnonymizationModeO16resultFieldsOnlyyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool AnonymizationMode::isResultFieldsOnly() const {
    return *this == AnonymizationMode::resultFieldsOnly;
  }
  SWIFT_INLINE_THUNK AnonymizationMode AnonymizationMode::_impl_fullResult::operator()() const {
    auto result = AnonymizationMode::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17AnonymizationModeO10fullResultyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool AnonymizationMode::isFullResult() const {
    return *this == AnonymizationMode::fullResult;
  }
  SWIFT_INLINE_THUNK  bool AnonymizationMode::isUnknownDefault() const {
    return *this == AnonymizationMode::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::String AnonymizationMode::getId() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID17AnonymizationModeO2idSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<AnonymizationMode> AnonymizationMode::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<AnonymizationMode>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID17AnonymizationModeO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String AnonymizationMode::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID17AnonymizationModeO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeData::getStringData() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID11BarcodeDataV06stringD0SSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK BarcodeType BarcodeData::getBarcodeType() const {
  return _impl::_impl_BarcodeType::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID11BarcodeDataV11barcodeTypeAA0cF0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK bool BarcodeData::getUncertain() const {
  return _impl::$s7BlinkID11BarcodeDataV9uncertainSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_documentType::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO12documentTypeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isDocumentType() const {
    return *this == BarcodeElementKey::documentType;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_standardVersionNumber::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO21standardVersionNumberyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isStandardVersionNumber() const {
    return *this == BarcodeElementKey::standardVersionNumber;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_customerFamilyName::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO18customerFamilyNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isCustomerFamilyName() const {
    return *this == BarcodeElementKey::customerFamilyName;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_customerFirstName::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO17customerFirstNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isCustomerFirstName() const {
    return *this == BarcodeElementKey::customerFirstName;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_customerFullName::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO16customerFullNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isCustomerFullName() const {
    return *this == BarcodeElementKey::customerFullName;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_dateOfBirth::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO11dateOfBirthyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isDateOfBirth() const {
    return *this == BarcodeElementKey::dateOfBirth;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_sex::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO3sexyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isSex() const {
    return *this == BarcodeElementKey::sex;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_eyeColor::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO8eyeColoryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isEyeColor() const {
    return *this == BarcodeElementKey::eyeColor;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_addressStreet::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO13addressStreetyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isAddressStreet() const {
    return *this == BarcodeElementKey::addressStreet;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_addressCity::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO11addressCityyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isAddressCity() const {
    return *this == BarcodeElementKey::addressCity;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_addressJurisdictionCode::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO23addressJurisdictionCodeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isAddressJurisdictionCode() const {
    return *this == BarcodeElementKey::addressJurisdictionCode;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_addressPostalCode::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO17addressPostalCodeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isAddressPostalCode() const {
    return *this == BarcodeElementKey::addressPostalCode;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_fullAddress::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO11fullAddressyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isFullAddress() const {
    return *this == BarcodeElementKey::fullAddress;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_height::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO6heightyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isHeight() const {
    return *this == BarcodeElementKey::height;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_heightIn::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO8heightInyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isHeightIn() const {
    return *this == BarcodeElementKey::heightIn;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_heightCm::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO8heightCmyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isHeightCm() const {
    return *this == BarcodeElementKey::heightCm;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_customerMiddleName::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO18customerMiddleNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isCustomerMiddleName() const {
    return *this == BarcodeElementKey::customerMiddleName;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_hairColor::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO9hairColoryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isHairColor() const {
    return *this == BarcodeElementKey::hairColor;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_nameSuffix::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO10nameSuffixyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isNameSuffix() const {
    return *this == BarcodeElementKey::nameSuffix;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_akaFullName::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO11akaFullNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isAkaFullName() const {
    return *this == BarcodeElementKey::akaFullName;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_akaFamilyName::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO13akaFamilyNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isAkaFamilyName() const {
    return *this == BarcodeElementKey::akaFamilyName;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_akaGivenName::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO12akaGivenNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isAkaGivenName() const {
    return *this == BarcodeElementKey::akaGivenName;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_akaSuffixName::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO13akaSuffixNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isAkaSuffixName() const {
    return *this == BarcodeElementKey::akaSuffixName;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_weightRange::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO11weightRangeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isWeightRange() const {
    return *this == BarcodeElementKey::weightRange;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_weightPounds::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO12weightPoundsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isWeightPounds() const {
    return *this == BarcodeElementKey::weightPounds;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_weightKilograms::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO15weightKilogramsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isWeightKilograms() const {
    return *this == BarcodeElementKey::weightKilograms;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_customerIdNumber::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO16customerIdNumberyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isCustomerIdNumber() const {
    return *this == BarcodeElementKey::customerIdNumber;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_familyNameTruncation::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO20familyNameTruncationyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isFamilyNameTruncation() const {
    return *this == BarcodeElementKey::familyNameTruncation;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_firstNameTruncation::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO19firstNameTruncationyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isFirstNameTruncation() const {
    return *this == BarcodeElementKey::firstNameTruncation;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_middleNameTruncation::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO20middleNameTruncationyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isMiddleNameTruncation() const {
    return *this == BarcodeElementKey::middleNameTruncation;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_placeOfBirth::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO12placeOfBirthyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isPlaceOfBirth() const {
    return *this == BarcodeElementKey::placeOfBirth;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_addressStreet2::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO14addressStreet2yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isAddressStreet2() const {
    return *this == BarcodeElementKey::addressStreet2;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_raceEthnicity::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO13raceEthnicityyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isRaceEthnicity() const {
    return *this == BarcodeElementKey::raceEthnicity;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_namePrefix::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO10namePrefixyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isNamePrefix() const {
    return *this == BarcodeElementKey::namePrefix;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_countryIdentification::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO21countryIdentificationyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isCountryIdentification() const {
    return *this == BarcodeElementKey::countryIdentification;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_residenceStreetAddress::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO22residenceStreetAddressyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isResidenceStreetAddress() const {
    return *this == BarcodeElementKey::residenceStreetAddress;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_residenceStreetAddress2::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO23residenceStreetAddress2yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isResidenceStreetAddress2() const {
    return *this == BarcodeElementKey::residenceStreetAddress2;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_residenceCity::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO13residenceCityyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isResidenceCity() const {
    return *this == BarcodeElementKey::residenceCity;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_residenceJurisdictionCode::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO25residenceJurisdictionCodeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isResidenceJurisdictionCode() const {
    return *this == BarcodeElementKey::residenceJurisdictionCode;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_residencePostalCode::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO19residencePostalCodeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isResidencePostalCode() const {
    return *this == BarcodeElementKey::residencePostalCode;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_residenceFullAddress::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO20residenceFullAddressyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isResidenceFullAddress() const {
    return *this == BarcodeElementKey::residenceFullAddress;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_under18::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO7under18yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isUnder18() const {
    return *this == BarcodeElementKey::under18;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_under19::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO7under19yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isUnder19() const {
    return *this == BarcodeElementKey::under19;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_under21::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO7under21yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isUnder21() const {
    return *this == BarcodeElementKey::under21;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_socialSecurityNumber::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO20socialSecurityNumberyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isSocialSecurityNumber() const {
    return *this == BarcodeElementKey::socialSecurityNumber;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_akaSocialSecurityNumber::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO23akaSocialSecurityNumberyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isAkaSocialSecurityNumber() const {
    return *this == BarcodeElementKey::akaSocialSecurityNumber;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_akaMiddleName::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO13akaMiddleNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isAkaMiddleName() const {
    return *this == BarcodeElementKey::akaMiddleName;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_akaPrefixName::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO13akaPrefixNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isAkaPrefixName() const {
    return *this == BarcodeElementKey::akaPrefixName;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_organDonor::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO10organDonoryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isOrganDonor() const {
    return *this == BarcodeElementKey::organDonor;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_veteran::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO7veteranyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isVeteran() const {
    return *this == BarcodeElementKey::veteran;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_akaDateOfBirth::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO14akaDateOfBirthyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isAkaDateOfBirth() const {
    return *this == BarcodeElementKey::akaDateOfBirth;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_issuerIdentificationNumber::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO26issuerIdentificationNumberyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isIssuerIdentificationNumber() const {
    return *this == BarcodeElementKey::issuerIdentificationNumber;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_documentExpirationDate::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO22documentExpirationDateyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isDocumentExpirationDate() const {
    return *this == BarcodeElementKey::documentExpirationDate;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_jurisdictionVersionNumber::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO25jurisdictionVersionNumberyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isJurisdictionVersionNumber() const {
    return *this == BarcodeElementKey::jurisdictionVersionNumber;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_jurisdictionVehicleClass::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO24jurisdictionVehicleClassyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isJurisdictionVehicleClass() const {
    return *this == BarcodeElementKey::jurisdictionVehicleClass;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_jurisdictionRestrictionCodes::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO28jurisdictionRestrictionCodesyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isJurisdictionRestrictionCodes() const {
    return *this == BarcodeElementKey::jurisdictionRestrictionCodes;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_jurisdictionEndorsementCodes::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO28jurisdictionEndorsementCodesyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isJurisdictionEndorsementCodes() const {
    return *this == BarcodeElementKey::jurisdictionEndorsementCodes;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_documentIssueDate::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO17documentIssueDateyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isDocumentIssueDate() const {
    return *this == BarcodeElementKey::documentIssueDate;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_federalCommercialVehicleCodes::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO29federalCommercialVehicleCodesyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isFederalCommercialVehicleCodes() const {
    return *this == BarcodeElementKey::federalCommercialVehicleCodes;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_issuingJurisdiction::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO19issuingJurisdictionyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isIssuingJurisdiction() const {
    return *this == BarcodeElementKey::issuingJurisdiction;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_standardVehicleClassification::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO29standardVehicleClassificationyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isStandardVehicleClassification() const {
    return *this == BarcodeElementKey::standardVehicleClassification;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_issuingJurisdictionName::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO23issuingJurisdictionNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isIssuingJurisdictionName() const {
    return *this == BarcodeElementKey::issuingJurisdictionName;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_standardEndorsementCode::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO23standardEndorsementCodeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isStandardEndorsementCode() const {
    return *this == BarcodeElementKey::standardEndorsementCode;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_standardRestrictionCode::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO23standardRestrictionCodeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isStandardRestrictionCode() const {
    return *this == BarcodeElementKey::standardRestrictionCode;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_jurisdictionVehicleClassificationDescription::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO44jurisdictionVehicleClassificationDescriptionyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isJurisdictionVehicleClassificationDescription() const {
    return *this == BarcodeElementKey::jurisdictionVehicleClassificationDescription;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_jurisdictionEndorsmentCodeDescription::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO37jurisdictionEndorsmentCodeDescriptionyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isJurisdictionEndorsmentCodeDescription() const {
    return *this == BarcodeElementKey::jurisdictionEndorsmentCodeDescription;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_jurisdictionRestrictionCodeDescription::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO38jurisdictionRestrictionCodeDescriptionyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isJurisdictionRestrictionCodeDescription() const {
    return *this == BarcodeElementKey::jurisdictionRestrictionCodeDescription;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_inventoryControlNumber::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO22inventoryControlNumberyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isInventoryControlNumber() const {
    return *this == BarcodeElementKey::inventoryControlNumber;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_cardRevisionDate::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO16cardRevisionDateyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isCardRevisionDate() const {
    return *this == BarcodeElementKey::cardRevisionDate;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_documentDiscriminator::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO21documentDiscriminatoryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isDocumentDiscriminator() const {
    return *this == BarcodeElementKey::documentDiscriminator;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_limitedDurationDocument::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO23limitedDurationDocumentyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isLimitedDurationDocument() const {
    return *this == BarcodeElementKey::limitedDurationDocument;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_auditInformation::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO16auditInformationyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isAuditInformation() const {
    return *this == BarcodeElementKey::auditInformation;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_complianceType::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO14complianceTypeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isComplianceType() const {
    return *this == BarcodeElementKey::complianceType;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_issueTimestamp::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO14issueTimestampyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isIssueTimestamp() const {
    return *this == BarcodeElementKey::issueTimestamp;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_permitExpirationDate::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO20permitExpirationDateyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isPermitExpirationDate() const {
    return *this == BarcodeElementKey::permitExpirationDate;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_permitIdentifier::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO16permitIdentifieryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isPermitIdentifier() const {
    return *this == BarcodeElementKey::permitIdentifier;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_permitIssueDate::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO15permitIssueDateyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isPermitIssueDate() const {
    return *this == BarcodeElementKey::permitIssueDate;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_numberOfDuplicates::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO18numberOfDuplicatesyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isNumberOfDuplicates() const {
    return *this == BarcodeElementKey::numberOfDuplicates;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_hazmatExpirationDate::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO20hazmatExpirationDateyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isHazmatExpirationDate() const {
    return *this == BarcodeElementKey::hazmatExpirationDate;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_medicalIndicator::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO16medicalIndicatoryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isMedicalIndicator() const {
    return *this == BarcodeElementKey::medicalIndicator;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_nonResident::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO11nonResidentyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isNonResident() const {
    return *this == BarcodeElementKey::nonResident;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_uniqueCustomerId::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO16uniqueCustomerIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isUniqueCustomerId() const {
    return *this == BarcodeElementKey::uniqueCustomerId;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_dataDiscriminator::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO17dataDiscriminatoryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isDataDiscriminator() const {
    return *this == BarcodeElementKey::dataDiscriminator;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_documentExpirationMonth::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO23documentExpirationMonthyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isDocumentExpirationMonth() const {
    return *this == BarcodeElementKey::documentExpirationMonth;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_documentNonexpiring::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO19documentNonexpiringyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isDocumentNonexpiring() const {
    return *this == BarcodeElementKey::documentNonexpiring;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_securityVersion::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO15securityVersionyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isSecurityVersion() const {
    return *this == BarcodeElementKey::securityVersion;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isUnknownDefault() const {
    return *this == BarcodeElementKey::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int BarcodeElementKey::getHashValue() const {
  return _impl::$s7BlinkID17BarcodeElementKeyO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String BarcodeElements::getValue(const BarcodeElementKey& barcodeElementKey) {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID15BarcodeElementsV8getValue3forSSAA0C10ElementKeyO_tF(_impl::_impl_BarcodeElementKey::getOpaquePointer(barcodeElementKey), _getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK BarcodeData BarcodeResult::getBarcodeData() const {
  return _impl::_impl_BarcodeData::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID13BarcodeResultV11barcodeDataAA0cF0Vvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeResult::getFirstName() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID13BarcodeResultV9firstNameSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeResult::getMiddleName() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID13BarcodeResultV10middleNameSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeResult::getLastName() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID13BarcodeResultV8lastNameSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeResult::getFullName() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID13BarcodeResultV8fullNameSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeResult::getAdditionalNameInformation() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID13BarcodeResultV25additionalNameInformationSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeResult::getAddress() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID13BarcodeResultV7addressSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeResult::getPlaceOfBirth() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID13BarcodeResultV12placeOfBirthSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeResult::getNationality() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID13BarcodeResultV11nationalitySSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeResult::getRace() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID13BarcodeResultV4raceSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeResult::getReligion() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID13BarcodeResultV8religionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeResult::getProfession() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID13BarcodeResultV10professionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeResult::getMaritalStatus() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID13BarcodeResultV13maritalStatusSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeResult::getResidentialStatus() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID13BarcodeResultV17residentialStatusSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeResult::getEmployer() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID13BarcodeResultV8employerSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeResult::getSex() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID13BarcodeResultV3sexSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK DateResult<swift::String> BarcodeResult::getDateOfBirth() const {
  return _impl::_impl_DateResult<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID13BarcodeResultV11dateOfBirthAA04DateD0VySSGvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK DateResult<swift::String> BarcodeResult::getDateOfIssue() const {
  return _impl::_impl_DateResult<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID13BarcodeResultV11dateOfIssueAA04DateD0VySSGvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK DateResult<swift::String> BarcodeResult::getDateOfExpiry() const {
  return _impl::_impl_DateResult<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID13BarcodeResultV12dateOfExpiryAA04DateD0VySSGvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeResult::getDocumentNumber() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID13BarcodeResultV14documentNumberSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeResult::getPersonalIdNumber() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID13BarcodeResultV16personalIdNumberSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeResult::getDocumentAdditionalNumber() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID13BarcodeResultV24documentAdditionalNumberSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeResult::getIssuingAuthority() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID13BarcodeResultV16issuingAuthoritySSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK AddressDetailedInfo BarcodeResult::getAddressDetailedInfo() const {
  return _impl::_impl_AddressDetailedInfo::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID13BarcodeResultV19addressDetailedInfoAA07AddressfG0Vvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK DriverLicenseDetailedInfo<swift::String> BarcodeResult::getDriverLicenseDetailedInfo() const {
  return _impl::_impl_DriverLicenseDetailedInfo<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID13BarcodeResultV25driverLicenseDetailedInfoAA06DriverfgH0VySSGvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK BarcodeElements BarcodeResult::getExtendedElements() const {
  return _impl::_impl_BarcodeElements::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID13BarcodeResultV16extendedElementsAA0cF0Vvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK BarcodeType BarcodeType::_impl_none::operator()() const {
    auto result = BarcodeType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID11BarcodeTypeO4noneyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeType::isNone() const {
    return *this == BarcodeType::none;
  }
  SWIFT_INLINE_THUNK BarcodeType BarcodeType::_impl_qrCode::operator()() const {
    auto result = BarcodeType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID11BarcodeTypeO6qrCodeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeType::isQrCode() const {
    return *this == BarcodeType::qrCode;
  }
  SWIFT_INLINE_THUNK BarcodeType BarcodeType::_impl_dataMatrix::operator()() const {
    auto result = BarcodeType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID11BarcodeTypeO10dataMatrixyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeType::isDataMatrix() const {
    return *this == BarcodeType::dataMatrix;
  }
  SWIFT_INLINE_THUNK BarcodeType BarcodeType::_impl_upce::operator()() const {
    auto result = BarcodeType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID11BarcodeTypeO4upceyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeType::isUpce() const {
    return *this == BarcodeType::upce;
  }
  SWIFT_INLINE_THUNK BarcodeType BarcodeType::_impl_upca::operator()() const {
    auto result = BarcodeType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID11BarcodeTypeO4upcayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeType::isUpca() const {
    return *this == BarcodeType::upca;
  }
  SWIFT_INLINE_THUNK BarcodeType BarcodeType::_impl_ean8::operator()() const {
    auto result = BarcodeType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID11BarcodeTypeO4ean8yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeType::isEan8() const {
    return *this == BarcodeType::ean8;
  }
  SWIFT_INLINE_THUNK BarcodeType BarcodeType::_impl_ean13::operator()() const {
    auto result = BarcodeType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID11BarcodeTypeO5ean13yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeType::isEan13() const {
    return *this == BarcodeType::ean13;
  }
  SWIFT_INLINE_THUNK BarcodeType BarcodeType::_impl_code128::operator()() const {
    auto result = BarcodeType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID11BarcodeTypeO7code128yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeType::isCode128() const {
    return *this == BarcodeType::code128;
  }
  SWIFT_INLINE_THUNK BarcodeType BarcodeType::_impl_code39::operator()() const {
    auto result = BarcodeType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID11BarcodeTypeO6code39yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeType::isCode39() const {
    return *this == BarcodeType::code39;
  }
  SWIFT_INLINE_THUNK BarcodeType BarcodeType::_impl_itf::operator()() const {
    auto result = BarcodeType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID11BarcodeTypeO3itfyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeType::isItf() const {
    return *this == BarcodeType::itf;
  }
  SWIFT_INLINE_THUNK BarcodeType BarcodeType::_impl_aztec::operator()() const {
    auto result = BarcodeType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID11BarcodeTypeO5aztecyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeType::isAztec() const {
    return *this == BarcodeType::aztec;
  }
  SWIFT_INLINE_THUNK BarcodeType BarcodeType::_impl_pdf417::operator()() const {
    auto result = BarcodeType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID11BarcodeTypeO6pdf417yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeType::isPdf417() const {
    return *this == BarcodeType::pdf417;
  }
  SWIFT_INLINE_THUNK  bool BarcodeType::isUnknownDefault() const {
    return *this == BarcodeType::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int BarcodeType::getHashValue() const {
  return _impl::$s7BlinkID11BarcodeTypeO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK RecognitionMode BlinkIDScanningResult::getRecognitionMode() const {
  return _impl::_impl_RecognitionMode::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID0A16IDScanningResultV15recognitionModeAA011RecognitionF0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<DataMatchResult> BlinkIDScanningResult::getDataMatchResult() const {
  return swift::_impl::_impl_Optional<DataMatchResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID0A16IDScanningResultV09dataMatchD0AA04DatafD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<bool> BlinkIDScanningResult::getDateOfExpiryPermanent() const {
  return swift::_impl::_impl_Optional<bool>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint8_t_0_1(result, _impl::$s7BlinkID0A16IDScanningResultV21dateOfExpiryPermanentSbSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::Array<DependentInfo>> BlinkIDScanningResult::getDependentsInfo() const {
  return swift::_impl::_impl_Optional<swift::Array<DependentInfo>>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8(result, _impl::$s7BlinkID0A16IDScanningResultV14dependentsInfoSayAA09DependentF0VGSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Array<SingleSideScanningResult> BlinkIDScanningResult::getSubResults() const {
  return swift::_impl::_impl_Array<SingleSideScanningResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_void_ptr_0_8(result, _impl::$s7BlinkID0A16IDScanningResultV10subResultsSayAA018SingleSideScanningD0VGvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<InputImageResult> BlinkIDScanningResult::getInputImage(const ScanningSide& scanningSide) const {
  return swift::_impl::_impl_Optional<InputImageResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID0A16IDScanningResultV13getInputImage12scanningSideAA0fgD0VSgAA08ScanningI0O_tF(result, _impl::_impl_ScanningSide::getOpaquePointer(scanningSide), _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<InputImageResult> BlinkIDScanningResult::getBarcodeInputImage() const {
  return swift::_impl::_impl_Optional<InputImageResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID0A16IDScanningResultV20getBarcodeInputImageAA0ghD0VSgyF(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<CroppedImageResult> BlinkIDScanningResult::getDocumentImage(const ScanningSide& scanningSide) const {
  return swift::_impl::_impl_Optional<CroppedImageResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID0A16IDScanningResultV16getDocumentImage12scanningSideAA07CroppedgD0VSgAA08ScanningI0O_tF(result, _impl::_impl_ScanningSide::getOpaquePointer(scanningSide), _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<DetailedCroppedImageResult> BlinkIDScanningResult::getFaceImage() const {
  return swift::_impl::_impl_Optional<DetailedCroppedImageResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID0A16IDScanningResultV12getFaceImageAA015DetailedCroppedgD0VSgyF(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<DetailedCroppedImageResult> BlinkIDScanningResult::getSignatureImage() const {
  return swift::_impl::_impl_Optional<DetailedCroppedImageResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID0A16IDScanningResultV17getSignatureImageAA015DetailedCroppedgD0VSgyF(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::String BlinkIDSdkSettings::getLicenseKey() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID0A13IDSdkSettingsV10licenseKeySSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDSdkSettings::setLicenseKey(const swift::String& value) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_value[sizeof(swift::String)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::String(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID0A13IDSdkSettingsV10licenseKeySSvs(_impl::swift_interop_passDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> BlinkIDSdkSettings::getLicensee() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_uint64_t_8_16(result, _impl::$s7BlinkID0A13IDSdkSettingsV8licenseeSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDSdkSettings::setLicensee(const swift::Optional<swift::String>& value) {
  alignas(alignof(swift::Optional<swift::String>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<swift::String>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<swift::String>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<swift::String>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID0A13IDSdkSettingsV8licenseeSSSgvs(_impl::swift_interop_passDirect_BlinkID_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(consumedParamCopy_value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool BlinkIDSdkSettings::getHelloLogEnabled() const {
  return _impl::$s7BlinkID0A13IDSdkSettingsV15helloLogEnabledSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void BlinkIDSdkSettings::setHelloLogEnabled(bool value) {
  _impl::$s7BlinkID0A13IDSdkSettingsV15helloLogEnabledSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool BlinkIDSdkSettings::getDownloadResources() const {
  return _impl::$s7BlinkID0A13IDSdkSettingsV17downloadResourcesSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void BlinkIDSdkSettings::setDownloadResources(bool value) {
  _impl::$s7BlinkID0A13IDSdkSettingsV17downloadResourcesSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String BlinkIDSdkSettings::getResourceDownloadUrl() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID0A13IDSdkSettingsV19resourceDownloadUrlSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDSdkSettings::setResourceDownloadUrl(const swift::String& value) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_value[sizeof(swift::String)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::String(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID0A13IDSdkSettingsV19resourceDownloadUrlSSvs(_impl::swift_interop_passDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String BlinkIDSdkSettings::getResourceLocalFolder() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID0A13IDSdkSettingsV19resourceLocalFolderSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDSdkSettings::setResourceLocalFolder(const swift::String& value) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_value[sizeof(swift::String)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::String(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID0A13IDSdkSettingsV19resourceLocalFolderSSvs(_impl::swift_interop_passDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK RequestTimeout BlinkIDSdkSettings::getResourceRequestTimeout() const {
  return _impl::_impl_RequestTimeout::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID0A13IDSdkSettingsV22resourceRequestTimeoutAA0fG0Vvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDSdkSettings::setResourceRequestTimeout(const RequestTimeout& value) {
  alignas(alignof(RequestTimeout)) char copyBuffer_consumedParamCopy_value[sizeof(RequestTimeout)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) RequestTimeout(value));
  swift::_impl::ConsumedValueStorageDestroyer<RequestTimeout> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID0A13IDSdkSettingsV22resourceRequestTimeoutAA0fG0Vvs(_impl::_impl_RequestTimeout::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void BlinkIDSession::cancelActiveProcessing() {
  _impl::$s7BlinkID0A9IDSessionC22cancelActiveProcessingyyF(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK void BlinkIDSession::resumeActiveProcessing() {
  _impl::$s7BlinkID0A9IDSessionC22resumeActiveProcessingyyF(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK InputImageSource BlinkIDSessionSettings::getInputImageSource() const {
  return _impl::_impl_InputImageSource::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID0A17IDSessionSettingsV16inputImageSourceAA05InputfG0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDSessionSettings::setInputImageSource(const InputImageSource& value) {
  alignas(alignof(InputImageSource)) char copyBuffer_consumedParamCopy_value[sizeof(InputImageSource)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) InputImageSource(value));
  swift::_impl::ConsumedValueStorageDestroyer<InputImageSource> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID0A17IDSessionSettingsV16inputImageSourceAA05InputfG0Ovs(_impl::_impl_InputImageSource::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK ScanningMode BlinkIDSessionSettings::getScanningMode() const {
  return _impl::_impl_ScanningMode::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID0A17IDSessionSettingsV12scanningModeAA08ScanningF0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDSessionSettings::setScanningMode(const ScanningMode& value) {
  alignas(alignof(ScanningMode)) char copyBuffer_consumedParamCopy_value[sizeof(ScanningMode)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) ScanningMode(value));
  swift::_impl::ConsumedValueStorageDestroyer<ScanningMode> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID0A17IDSessionSettingsV12scanningModeAA08ScanningF0Ovs(_impl::_impl_ScanningMode::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK ScanningSettings BlinkIDSessionSettings::getScanningSettings() const {
  return _impl::_impl_ScanningSettings::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID0A17IDSessionSettingsV08scanningD0AA08ScanningD0Vvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDSessionSettings::setScanningSettings(const ScanningSettings& value) {
  alignas(alignof(ScanningSettings)) char copyBuffer_consumedParamCopy_value[sizeof(ScanningSettings)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) ScanningSettings(value));
  swift::_impl::ConsumedValueStorageDestroyer<ScanningSettings> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID0A17IDSessionSettingsV08scanningD0AA08ScanningD0Vvs(_impl::_impl_ScanningSettings::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK double BlinkIDSessionSettings::getStepTimeoutDuration() const {
  return _impl::$s7BlinkID0A17IDSessionSettingsV19stepTimeoutDurationSdvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void BlinkIDSessionSettings::setStepTimeoutDuration(double value) {
  _impl::$s7BlinkID0A17IDSessionSettingsV19stepTimeoutDurationSdvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK BlinkIDSessionSettings BlinkIDSessionSettings::init(const InputImageSource& inputImageSource, const ScanningMode& scanningMode, const ScanningSettings& scanningSettings, double stepTimeoutDuration) {
  alignas(alignof(InputImageSource)) char copyBuffer_consumedParamCopy_inputImageSource[sizeof(InputImageSource)];
  auto &consumedParamCopy_inputImageSource = *(new(copyBuffer_consumedParamCopy_inputImageSource) InputImageSource(inputImageSource));
  swift::_impl::ConsumedValueStorageDestroyer<InputImageSource> storageGuard_consumedParamCopy_inputImageSource(consumedParamCopy_inputImageSource);
  alignas(alignof(ScanningMode)) char copyBuffer_consumedParamCopy_scanningMode[sizeof(ScanningMode)];
  auto &consumedParamCopy_scanningMode = *(new(copyBuffer_consumedParamCopy_scanningMode) ScanningMode(scanningMode));
  swift::_impl::ConsumedValueStorageDestroyer<ScanningMode> storageGuard_consumedParamCopy_scanningMode(consumedParamCopy_scanningMode);
  alignas(alignof(ScanningSettings)) char copyBuffer_consumedParamCopy_scanningSettings[sizeof(ScanningSettings)];
  auto &consumedParamCopy_scanningSettings = *(new(copyBuffer_consumedParamCopy_scanningSettings) ScanningSettings(scanningSettings));
  swift::_impl::ConsumedValueStorageDestroyer<ScanningSettings> storageGuard_consumedParamCopy_scanningSettings(consumedParamCopy_scanningSettings);
  return _impl::_impl_BlinkIDSessionSettings::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID0A17IDSessionSettingsV16inputImageSource12scanningMode0hD019stepTimeoutDurationAcA05InputfG0O_AA08ScanningI0OAA0nD0VSdtcfC(result, _impl::_impl_InputImageSource::getOpaquePointer(consumedParamCopy_inputImageSource), _impl::_impl_ScanningMode::getOpaquePointer(consumedParamCopy_scanningMode), _impl::_impl_ScanningSettings::getOpaquePointer(consumedParamCopy_scanningSettings), stepTimeoutDuration);
  });
  }
  SWIFT_INLINE_THUNK MBSampleBufferWrapper *_Nonnull CameraFrame::getBuffer() const {
return (__bridge_transfer MBSampleBufferWrapper *)(__bridge void *)_impl::$s7BlinkID11CameraFrameV6bufferSo21MBSampleBufferWrapperCvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK RegionOfInterest CameraFrame::getRoi() const {
  return _impl::_impl_RegionOfInterest::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID11CameraFrameV3roiAA16RegionOfInterestVvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK CameraFrameVideoOrientation CameraFrame::getOrientation() const {
  return _impl::_impl_CameraFrameVideoOrientation::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID11CameraFrameV11orientationAA0cD16VideoOrientationOvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK CameraFrame CameraFrame::init(MBSampleBufferWrapper *_Nonnull buffer, const RegionOfInterest& roi, const CameraFrameVideoOrientation& orientation) {
  alignas(alignof(MBSampleBufferWrapper *_Nonnull)) char copyBuffer_consumedParamCopy_buffer[sizeof(MBSampleBufferWrapper *_Nonnull)];
  auto &consumedParamCopy_buffer = *(new(copyBuffer_consumedParamCopy_buffer) MBSampleBufferWrapper *_Nonnull(buffer));
  swift::_impl::ConsumedValueStorageDestroyer<MBSampleBufferWrapper *_Nonnull> storageGuard_consumedParamCopy_buffer(consumedParamCopy_buffer);
  alignas(alignof(RegionOfInterest)) char copyBuffer_consumedParamCopy_roi[sizeof(RegionOfInterest)];
  auto &consumedParamCopy_roi = *(new(copyBuffer_consumedParamCopy_roi) RegionOfInterest(roi));
  swift::_impl::ConsumedValueStorageDestroyer<RegionOfInterest> storageGuard_consumedParamCopy_roi(consumedParamCopy_roi);
  alignas(alignof(CameraFrameVideoOrientation)) char copyBuffer_consumedParamCopy_orientation[sizeof(CameraFrameVideoOrientation)];
  auto &consumedParamCopy_orientation = *(new(copyBuffer_consumedParamCopy_orientation) CameraFrameVideoOrientation(orientation));
  swift::_impl::ConsumedValueStorageDestroyer<CameraFrameVideoOrientation> storageGuard_consumedParamCopy_orientation(consumedParamCopy_orientation);
  return _impl::_impl_CameraFrame::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID11CameraFrameV6buffer3roi11orientationACSo21MBSampleBufferWrapperC_AA16RegionOfInterestVAA0cD16VideoOrientationOtcfC(result, consumedParamCopy_buffer, _impl::_impl_RegionOfInterest::getOpaquePointer(consumedParamCopy_roi), _impl::_impl_CameraFrameVideoOrientation::getOpaquePointer(consumedParamCopy_orientation));
  });
  }
  SWIFT_INLINE_THUNK swift::Int CameraFrame::getWidth() const {
  return _impl::$s7BlinkID11CameraFrameV5widthSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Int CameraFrame::getHeight() const {
  return _impl::$s7BlinkID11CameraFrameV6heightSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK CameraFrameVideoOrientation CameraFrameVideoOrientation::_impl_portrait::operator()() const {
    auto result = CameraFrameVideoOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID27CameraFrameVideoOrientationO8portraityA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CameraFrameVideoOrientation::isPortrait() const {
    return *this == CameraFrameVideoOrientation::portrait;
  }
  SWIFT_INLINE_THUNK CameraFrameVideoOrientation CameraFrameVideoOrientation::_impl_portraitUpsideDown::operator()() const {
    auto result = CameraFrameVideoOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID27CameraFrameVideoOrientationO18portraitUpsideDownyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CameraFrameVideoOrientation::isPortraitUpsideDown() const {
    return *this == CameraFrameVideoOrientation::portraitUpsideDown;
  }
  SWIFT_INLINE_THUNK CameraFrameVideoOrientation CameraFrameVideoOrientation::_impl_landscapeRight::operator()() const {
    auto result = CameraFrameVideoOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID27CameraFrameVideoOrientationO14landscapeRightyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CameraFrameVideoOrientation::isLandscapeRight() const {
    return *this == CameraFrameVideoOrientation::landscapeRight;
  }
  SWIFT_INLINE_THUNK CameraFrameVideoOrientation CameraFrameVideoOrientation::_impl_landscapeLeft::operator()() const {
    auto result = CameraFrameVideoOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID27CameraFrameVideoOrientationO13landscapeLeftyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CameraFrameVideoOrientation::isLandscapeLeft() const {
    return *this == CameraFrameVideoOrientation::landscapeLeft;
  }
  SWIFT_INLINE_THUNK  bool CameraFrameVideoOrientation::isUnknownDefault() const {
    return *this == CameraFrameVideoOrientation::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int CameraFrameVideoOrientation::getHashValue() const {
  return _impl::$s7BlinkID27CameraFrameVideoOrientationO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK Country Country::_impl_none::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO4noneyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNone() const {
    return *this == Country::none;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_albania::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7albaniayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAlbania() const {
    return *this == Country::albania;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_algeria::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7algeriayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAlgeria() const {
    return *this == Country::algeria;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_argentina::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO9argentinayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isArgentina() const {
    return *this == Country::argentina;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_australia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO9australiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAustralia() const {
    return *this == Country::australia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_austria::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7austriayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAustria() const {
    return *this == Country::austria;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_azerbaijan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10azerbaijanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAzerbaijan() const {
    return *this == Country::azerbaijan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_bahrain::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7bahrainyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBahrain() const {
    return *this == Country::bahrain;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_bangladesh::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10bangladeshyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBangladesh() const {
    return *this == Country::bangladesh;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_belgium::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7belgiumyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBelgium() const {
    return *this == Country::belgium;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_bosniaAndHerzegovina::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO20bosniaAndHerzegovinayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBosniaAndHerzegovina() const {
    return *this == Country::bosniaAndHerzegovina;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_brunei::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6bruneiyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBrunei() const {
    return *this == Country::brunei;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_bulgaria::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8bulgariayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBulgaria() const {
    return *this == Country::bulgaria;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_cambodia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8cambodiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCambodia() const {
    return *this == Country::cambodia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_canada::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6canadayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCanada() const {
    return *this == Country::canada;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_chile::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5chileyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isChile() const {
    return *this == Country::chile;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_colombia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8colombiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isColombia() const {
    return *this == Country::colombia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_costaRica::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO9costaRicayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCostaRica() const {
    return *this == Country::costaRica;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_croatia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7croatiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCroatia() const {
    return *this == Country::croatia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_cyprus::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6cyprusyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCyprus() const {
    return *this == Country::cyprus;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_czechia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7czechiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCzechia() const {
    return *this == Country::czechia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_denmark::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7denmarkyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isDenmark() const {
    return *this == Country::denmark;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_dominicanRepublic::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO17dominicanRepublicyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isDominicanRepublic() const {
    return *this == Country::dominicanRepublic;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_egypt::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5egyptyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isEgypt() const {
    return *this == Country::egypt;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_estonia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7estoniayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isEstonia() const {
    return *this == Country::estonia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_finland::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7finlandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isFinland() const {
    return *this == Country::finland;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_france::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6franceyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isFrance() const {
    return *this == Country::france;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_georgia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7georgiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGeorgia() const {
    return *this == Country::georgia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_germany::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7germanyyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGermany() const {
    return *this == Country::germany;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_ghana::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5ghanayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGhana() const {
    return *this == Country::ghana;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_greece::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6greeceyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGreece() const {
    return *this == Country::greece;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_guatemala::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO9guatemalayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGuatemala() const {
    return *this == Country::guatemala;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_hongKong::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8hongKongyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isHongKong() const {
    return *this == Country::hongKong;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_hungary::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7hungaryyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isHungary() const {
    return *this == Country::hungary;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_india::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5indiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isIndia() const {
    return *this == Country::india;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_indonesia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO9indonesiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isIndonesia() const {
    return *this == Country::indonesia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_ireland::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7irelandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isIreland() const {
    return *this == Country::ireland;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_israel::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6israelyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isIsrael() const {
    return *this == Country::israel;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_italy::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5italyyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isItaly() const {
    return *this == Country::italy;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_jordan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6jordanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isJordan() const {
    return *this == Country::jordan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_kazakhstan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10kazakhstanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isKazakhstan() const {
    return *this == Country::kazakhstan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_kenya::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5kenyayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isKenya() const {
    return *this == Country::kenya;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_kosovo::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6kosovoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isKosovo() const {
    return *this == Country::kosovo;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_kuwait::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6kuwaityA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isKuwait() const {
    return *this == Country::kuwait;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_latvia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6latviayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isLatvia() const {
    return *this == Country::latvia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_lithuania::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO9lithuaniayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isLithuania() const {
    return *this == Country::lithuania;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_malaysia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8malaysiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMalaysia() const {
    return *this == Country::malaysia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_maldives::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8maldivesyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMaldives() const {
    return *this == Country::maldives;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_malta::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5maltayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMalta() const {
    return *this == Country::malta;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_mauritius::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO9mauritiusyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMauritius() const {
    return *this == Country::mauritius;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_mexico::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6mexicoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMexico() const {
    return *this == Country::mexico;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_morocco::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7moroccoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMorocco() const {
    return *this == Country::morocco;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_netherlands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO11netherlandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNetherlands() const {
    return *this == Country::netherlands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_newZealand::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10newZealandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNewZealand() const {
    return *this == Country::newZealand;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_nigeria::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7nigeriayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNigeria() const {
    return *this == Country::nigeria;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_pakistan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8pakistanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isPakistan() const {
    return *this == Country::pakistan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_panama::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6panamayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isPanama() const {
    return *this == Country::panama;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_paraguay::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8paraguayyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isParaguay() const {
    return *this == Country::paraguay;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_philippines::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO11philippinesyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isPhilippines() const {
    return *this == Country::philippines;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_poland::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6polandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isPoland() const {
    return *this == Country::poland;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_portugal::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8portugalyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isPortugal() const {
    return *this == Country::portugal;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_puertoRico::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10puertoRicoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isPuertoRico() const {
    return *this == Country::puertoRico;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_qatar::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5qataryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isQatar() const {
    return *this == Country::qatar;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_romania::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7romaniayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isRomania() const {
    return *this == Country::romania;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_russia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6russiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isRussia() const {
    return *this == Country::russia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_saudiArabia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO11saudiArabiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSaudiArabia() const {
    return *this == Country::saudiArabia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_serbia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6serbiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSerbia() const {
    return *this == Country::serbia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_singapore::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO9singaporeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSingapore() const {
    return *this == Country::singapore;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_slovakia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8slovakiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSlovakia() const {
    return *this == Country::slovakia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_slovenia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8sloveniayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSlovenia() const {
    return *this == Country::slovenia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_southAfrica::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO11southAfricayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSouthAfrica() const {
    return *this == Country::southAfrica;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_spain::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5spainyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSpain() const {
    return *this == Country::spain;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_sweden::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6swedenyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSweden() const {
    return *this == Country::sweden;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_switzerland::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO11switzerlandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSwitzerland() const {
    return *this == Country::switzerland;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_taiwan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6taiwanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isTaiwan() const {
    return *this == Country::taiwan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_thailand::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8thailandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isThailand() const {
    return *this == Country::thailand;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_tunisia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7tunisiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isTunisia() const {
    return *this == Country::tunisia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_turkey::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6turkeyyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isTurkey() const {
    return *this == Country::turkey;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_uae::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO3uaeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isUae() const {
    return *this == Country::uae;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_uganda::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6ugandayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isUganda() const {
    return *this == Country::uganda;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_uk::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO2ukyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isUk() const {
    return *this == Country::uk;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_ukraine::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7ukraineyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isUkraine() const {
    return *this == Country::ukraine;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_usa::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO3usayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isUsa() const {
    return *this == Country::usa;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_vietnam::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7vietnamyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isVietnam() const {
    return *this == Country::vietnam;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_brazil::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6brazilyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBrazil() const {
    return *this == Country::brazil;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_norway::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6norwayyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNorway() const {
    return *this == Country::norway;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_oman::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO4omanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isOman() const {
    return *this == Country::oman;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_ecuador::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7ecuadoryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isEcuador() const {
    return *this == Country::ecuador;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_elSalvador::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10elSalvadoryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isElSalvador() const {
    return *this == Country::elSalvador;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_sriLanka::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8sriLankayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSriLanka() const {
    return *this == Country::sriLanka;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_peru::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO4peruyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isPeru() const {
    return *this == Country::peru;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_uruguay::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7uruguayyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isUruguay() const {
    return *this == Country::uruguay;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_bahamas::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7bahamasyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBahamas() const {
    return *this == Country::bahamas;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_bermuda::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7bermudayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBermuda() const {
    return *this == Country::bermuda;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_bolivia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7boliviayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBolivia() const {
    return *this == Country::bolivia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_china::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5chinayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isChina() const {
    return *this == Country::china;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_europeanUnion::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO13europeanUnionyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isEuropeanUnion() const {
    return *this == Country::europeanUnion;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_haiti::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5haitiyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isHaiti() const {
    return *this == Country::haiti;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_honduras::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8hondurasyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isHonduras() const {
    return *this == Country::honduras;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_iceland::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7icelandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isIceland() const {
    return *this == Country::iceland;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_japan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5japanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isJapan() const {
    return *this == Country::japan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_luxembourg::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10luxembourgyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isLuxembourg() const {
    return *this == Country::luxembourg;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_montenegro::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10montenegroyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMontenegro() const {
    return *this == Country::montenegro;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_nicaragua::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO9nicaraguayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNicaragua() const {
    return *this == Country::nicaragua;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_southKorea::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10southKoreayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSouthKorea() const {
    return *this == Country::southKorea;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_venezuela::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO9venezuelayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isVenezuela() const {
    return *this == Country::venezuela;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_afghanistan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO11afghanistanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAfghanistan() const {
    return *this == Country::afghanistan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_alandIslands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO12alandIslandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAlandIslands() const {
    return *this == Country::alandIslands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_americanSamoa::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO13americanSamoayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAmericanSamoa() const {
    return *this == Country::americanSamoa;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_andorra::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7andorrayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAndorra() const {
    return *this == Country::andorra;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_angola::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6angolayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAngola() const {
    return *this == Country::angola;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_anguilla::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8anguillayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAnguilla() const {
    return *this == Country::anguilla;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_antarctica::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10antarcticayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAntarctica() const {
    return *this == Country::antarctica;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_antiguaAndBarbuda::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO17antiguaAndBarbudayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAntiguaAndBarbuda() const {
    return *this == Country::antiguaAndBarbuda;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_armenia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7armeniayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isArmenia() const {
    return *this == Country::armenia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_aruba::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5arubayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAruba() const {
    return *this == Country::aruba;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_bailiwickOfGuernsey::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO19bailiwickOfGuernseyyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBailiwickOfGuernsey() const {
    return *this == Country::bailiwickOfGuernsey;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_bailiwickOfJersey::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO17bailiwickOfJerseyyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBailiwickOfJersey() const {
    return *this == Country::bailiwickOfJersey;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_barbados::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8barbadosyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBarbados() const {
    return *this == Country::barbados;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_belarus::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7belarusyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBelarus() const {
    return *this == Country::belarus;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_belize::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6belizeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBelize() const {
    return *this == Country::belize;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_benin::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5beninyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBenin() const {
    return *this == Country::benin;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_bhutan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6bhutanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBhutan() const {
    return *this == Country::bhutan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_bonaireSaintEustatiusAndSaba::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO28bonaireSaintEustatiusAndSabayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBonaireSaintEustatiusAndSaba() const {
    return *this == Country::bonaireSaintEustatiusAndSaba;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_botswana::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8botswanayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBotswana() const {
    return *this == Country::botswana;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_bouvetIsland::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO12bouvetIslandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBouvetIsland() const {
    return *this == Country::bouvetIsland;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_britishIndianOceanTerritory::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO27britishIndianOceanTerritoryyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBritishIndianOceanTerritory() const {
    return *this == Country::britishIndianOceanTerritory;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_burkinaFaso::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO11burkinaFasoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBurkinaFaso() const {
    return *this == Country::burkinaFaso;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_burundi::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7burundiyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBurundi() const {
    return *this == Country::burundi;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_cameroon::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8cameroonyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCameroon() const {
    return *this == Country::cameroon;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_capeVerde::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO9capeVerdeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCapeVerde() const {
    return *this == Country::capeVerde;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_caribbeanNetherlands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO20caribbeanNetherlandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCaribbeanNetherlands() const {
    return *this == Country::caribbeanNetherlands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_caymanIslands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO13caymanIslandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCaymanIslands() const {
    return *this == Country::caymanIslands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_centralAfricanRepublic::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO22centralAfricanRepublicyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCentralAfricanRepublic() const {
    return *this == Country::centralAfricanRepublic;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_chad::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO4chadyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isChad() const {
    return *this == Country::chad;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_christmasIsland::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO15christmasIslandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isChristmasIsland() const {
    return *this == Country::christmasIsland;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_cocosIslands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO12cocosIslandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCocosIslands() const {
    return *this == Country::cocosIslands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_comoros::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7comorosyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isComoros() const {
    return *this == Country::comoros;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_congo::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5congoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCongo() const {
    return *this == Country::congo;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_cookIslands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO11cookIslandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCookIslands() const {
    return *this == Country::cookIslands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_cuba::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO4cubayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCuba() const {
    return *this == Country::cuba;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_curacao::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7curacaoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCuracao() const {
    return *this == Country::curacao;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_democraticRepublicOfTheCongo::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO28democraticRepublicOfTheCongoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isDemocraticRepublicOfTheCongo() const {
    return *this == Country::democraticRepublicOfTheCongo;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_djibouti::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8djiboutiyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isDjibouti() const {
    return *this == Country::djibouti;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_dominica::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8dominicayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isDominica() const {
    return *this == Country::dominica;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_eastTimor::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO9eastTimoryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isEastTimor() const {
    return *this == Country::eastTimor;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_equatorialGuinea::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO16equatorialGuineayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isEquatorialGuinea() const {
    return *this == Country::equatorialGuinea;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_eritrea::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7eritreayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isEritrea() const {
    return *this == Country::eritrea;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_ethiopia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8ethiopiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isEthiopia() const {
    return *this == Country::ethiopia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_falklandIslands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO15falklandIslandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isFalklandIslands() const {
    return *this == Country::falklandIslands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_faroeIslands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO12faroeIslandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isFaroeIslands() const {
    return *this == Country::faroeIslands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_federatedStatesOfMicronesia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO27federatedStatesOfMicronesiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isFederatedStatesOfMicronesia() const {
    return *this == Country::federatedStatesOfMicronesia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_fiji::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO4fijiyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isFiji() const {
    return *this == Country::fiji;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_frenchGuiana::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO12frenchGuianayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isFrenchGuiana() const {
    return *this == Country::frenchGuiana;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_frenchPolynesia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO15frenchPolynesiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isFrenchPolynesia() const {
    return *this == Country::frenchPolynesia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_frenchSouthernTerritories::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO25frenchSouthernTerritoriesyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isFrenchSouthernTerritories() const {
    return *this == Country::frenchSouthernTerritories;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_gabon::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5gabonyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGabon() const {
    return *this == Country::gabon;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_gambia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6gambiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGambia() const {
    return *this == Country::gambia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_gibraltar::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO9gibraltaryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGibraltar() const {
    return *this == Country::gibraltar;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_greenland::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO9greenlandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGreenland() const {
    return *this == Country::greenland;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_grenada::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7grenadayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGrenada() const {
    return *this == Country::grenada;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_guadeloupe::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10guadeloupeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGuadeloupe() const {
    return *this == Country::guadeloupe;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_guam::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO4guamyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGuam() const {
    return *this == Country::guam;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_guinea::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6guineayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGuinea() const {
    return *this == Country::guinea;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_guineaBissau::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO12guineaBissauyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGuineaBissau() const {
    return *this == Country::guineaBissau;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_guyana::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6guyanayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGuyana() const {
    return *this == Country::guyana;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_heardIslandAndMcdonaldIslands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO29heardIslandAndMcdonaldIslandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isHeardIslandAndMcdonaldIslands() const {
    return *this == Country::heardIslandAndMcdonaldIslands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_iran::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO4iranyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isIran() const {
    return *this == Country::iran;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_iraq::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO4iraqyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isIraq() const {
    return *this == Country::iraq;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_isleOfMan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO9isleOfManyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isIsleOfMan() const {
    return *this == Country::isleOfMan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_ivoryCoast::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10ivoryCoastyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isIvoryCoast() const {
    return *this == Country::ivoryCoast;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_jamaica::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7jamaicayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isJamaica() const {
    return *this == Country::jamaica;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_kiribati::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8kiribatiyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isKiribati() const {
    return *this == Country::kiribati;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_kyrgyzstan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10kyrgyzstanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isKyrgyzstan() const {
    return *this == Country::kyrgyzstan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_laos::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO4laosyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isLaos() const {
    return *this == Country::laos;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_lebanon::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7lebanonyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isLebanon() const {
    return *this == Country::lebanon;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_lesotho::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7lesothoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isLesotho() const {
    return *this == Country::lesotho;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_liberia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7liberiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isLiberia() const {
    return *this == Country::liberia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_libya::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5libyayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isLibya() const {
    return *this == Country::libya;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_liechtenstein::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO13liechtensteinyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isLiechtenstein() const {
    return *this == Country::liechtenstein;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_macau::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5macauyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMacau() const {
    return *this == Country::macau;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_madagascar::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10madagascaryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMadagascar() const {
    return *this == Country::madagascar;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_malawi::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6malawiyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMalawi() const {
    return *this == Country::malawi;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_mali::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO4maliyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMali() const {
    return *this == Country::mali;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_marshallIslands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO15marshallIslandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMarshallIslands() const {
    return *this == Country::marshallIslands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_martinique::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10martiniqueyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMartinique() const {
    return *this == Country::martinique;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_mauritania::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10mauritaniayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMauritania() const {
    return *this == Country::mauritania;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_mayotte::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7mayotteyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMayotte() const {
    return *this == Country::mayotte;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_moldova::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7moldovayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMoldova() const {
    return *this == Country::moldova;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_monaco::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6monacoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMonaco() const {
    return *this == Country::monaco;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_mongolia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8mongoliayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMongolia() const {
    return *this == Country::mongolia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_montserrat::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10montserratyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMontserrat() const {
    return *this == Country::montserrat;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_mozambique::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10mozambiqueyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMozambique() const {
    return *this == Country::mozambique;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_myanmar::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7myanmaryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMyanmar() const {
    return *this == Country::myanmar;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_namibia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7namibiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNamibia() const {
    return *this == Country::namibia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_nauru::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5nauruyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNauru() const {
    return *this == Country::nauru;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_nepal::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5nepalyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNepal() const {
    return *this == Country::nepal;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_newCaledonia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO12newCaledoniayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNewCaledonia() const {
    return *this == Country::newCaledonia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_niger::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5nigeryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNiger() const {
    return *this == Country::niger;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_niue::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO4niueyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNiue() const {
    return *this == Country::niue;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_norfolkIsland::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO13norfolkIslandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNorfolkIsland() const {
    return *this == Country::norfolkIsland;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_northernCyprus::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO14northernCyprusyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNorthernCyprus() const {
    return *this == Country::northernCyprus;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_northernMarianaIslands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO22northernMarianaIslandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNorthernMarianaIslands() const {
    return *this == Country::northernMarianaIslands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_northKorea::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10northKoreayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNorthKorea() const {
    return *this == Country::northKorea;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_northMacedonia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO14northMacedoniayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNorthMacedonia() const {
    return *this == Country::northMacedonia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_palau::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5palauyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isPalau() const {
    return *this == Country::palau;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_palestine::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO9palestineyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isPalestine() const {
    return *this == Country::palestine;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_papuaNewGuinea::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO14papuaNewGuineayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isPapuaNewGuinea() const {
    return *this == Country::papuaNewGuinea;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_pitcairn::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8pitcairnyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isPitcairn() const {
    return *this == Country::pitcairn;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_reunion::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7reunionyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isReunion() const {
    return *this == Country::reunion;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_rwanda::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6rwandayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isRwanda() const {
    return *this == Country::rwanda;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_saintBarthelemy::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO15saintBarthelemyyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSaintBarthelemy() const {
    return *this == Country::saintBarthelemy;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_saintHelenaAscensionAndTristianDaCunha::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO38saintHelenaAscensionAndTristianDaCunhayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSaintHelenaAscensionAndTristianDaCunha() const {
    return *this == Country::saintHelenaAscensionAndTristianDaCunha;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_saintKittsAndNevis::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO18saintKittsAndNevisyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSaintKittsAndNevis() const {
    return *this == Country::saintKittsAndNevis;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_saintLucia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10saintLuciayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSaintLucia() const {
    return *this == Country::saintLucia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_saintMartin::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO11saintMartinyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSaintMartin() const {
    return *this == Country::saintMartin;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_saintPierreAndMiquelon::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO22saintPierreAndMiquelonyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSaintPierreAndMiquelon() const {
    return *this == Country::saintPierreAndMiquelon;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_saintVincentAndTheGrenadines::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO28saintVincentAndTheGrenadinesyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSaintVincentAndTheGrenadines() const {
    return *this == Country::saintVincentAndTheGrenadines;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_samoa::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5samoayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSamoa() const {
    return *this == Country::samoa;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_sanMarino::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO9sanMarinoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSanMarino() const {
    return *this == Country::sanMarino;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_saoTomeAndPrincipe::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO18saoTomeAndPrincipeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSaoTomeAndPrincipe() const {
    return *this == Country::saoTomeAndPrincipe;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_senegal::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7senegalyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSenegal() const {
    return *this == Country::senegal;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_seychelles::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10seychellesyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSeychelles() const {
    return *this == Country::seychelles;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_sierraLeone::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO11sierraLeoneyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSierraLeone() const {
    return *this == Country::sierraLeone;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_sintMaarten::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO11sintMaartenyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSintMaarten() const {
    return *this == Country::sintMaarten;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_solomonIslands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO14solomonIslandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSolomonIslands() const {
    return *this == Country::solomonIslands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_somalia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7somaliayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSomalia() const {
    return *this == Country::somalia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_southGeorgiaAndTheSouthSandwichIslands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO38southGeorgiaAndTheSouthSandwichIslandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSouthGeorgiaAndTheSouthSandwichIslands() const {
    return *this == Country::southGeorgiaAndTheSouthSandwichIslands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_southSudan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10southSudanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSouthSudan() const {
    return *this == Country::southSudan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_sudan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5sudanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSudan() const {
    return *this == Country::sudan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_suriname::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8surinameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSuriname() const {
    return *this == Country::suriname;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_svalbardAndJanMayen::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO19svalbardAndJanMayenyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSvalbardAndJanMayen() const {
    return *this == Country::svalbardAndJanMayen;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_eswatini::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8eswatiniyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isEswatini() const {
    return *this == Country::eswatini;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_syria::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5syriayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSyria() const {
    return *this == Country::syria;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_tajikistan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10tajikistanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isTajikistan() const {
    return *this == Country::tajikistan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_tanzania::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8tanzaniayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isTanzania() const {
    return *this == Country::tanzania;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_togo::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO4togoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isTogo() const {
    return *this == Country::togo;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_tokelau::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7tokelauyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isTokelau() const {
    return *this == Country::tokelau;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_tonga::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5tongayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isTonga() const {
    return *this == Country::tonga;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_trinidadAndTobago::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO17trinidadAndTobagoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isTrinidadAndTobago() const {
    return *this == Country::trinidadAndTobago;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_turkmenistan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO12turkmenistanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isTurkmenistan() const {
    return *this == Country::turkmenistan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_turksAndCaicosIslands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO21turksAndCaicosIslandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isTurksAndCaicosIslands() const {
    return *this == Country::turksAndCaicosIslands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_tuvalu::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6tuvaluyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isTuvalu() const {
    return *this == Country::tuvalu;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_unitedStatesMinorOutlyingIslands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO32unitedStatesMinorOutlyingIslandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isUnitedStatesMinorOutlyingIslands() const {
    return *this == Country::unitedStatesMinorOutlyingIslands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_uzbekistan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10uzbekistanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isUzbekistan() const {
    return *this == Country::uzbekistan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_vanuatu::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7vanuatuyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isVanuatu() const {
    return *this == Country::vanuatu;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_vaticanCity::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO11vaticanCityyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isVaticanCity() const {
    return *this == Country::vaticanCity;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_virginIslandsBritish::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO20virginIslandsBritishyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isVirginIslandsBritish() const {
    return *this == Country::virginIslandsBritish;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_virginIslandsUs::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO15virginIslandsUsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isVirginIslandsUs() const {
    return *this == Country::virginIslandsUs;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_wallisAndFutuna::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO15wallisAndFutunayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isWallisAndFutuna() const {
    return *this == Country::wallisAndFutuna;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_westernSahara::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO13westernSaharayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isWesternSahara() const {
    return *this == Country::westernSahara;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_yemen::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5yemenyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isYemen() const {
    return *this == Country::yemen;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_yugoslavia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10yugoslaviayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isYugoslavia() const {
    return *this == Country::yugoslavia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_zambia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6zambiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isZambia() const {
    return *this == Country::zambia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_zimbabwe::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8zimbabweyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isZimbabwe() const {
    return *this == Country::zimbabwe;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_schengen_area::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO13schengen_areayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSchengen_area() const {
    return *this == Country::schengen_area;
  }
  SWIFT_INLINE_THUNK  bool Country::isUnknownDefault() const {
    return *this == Country::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<Country> Country::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<Country>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID7CountryO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String Country::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID7CountryO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK UIImage *_Nullable CroppedImageResult::getUiImage() const {
return (__bridge_transfer UIImage *)(__bridge void *)_impl::$s7BlinkID18CroppedImageResultV02uiD0So7UIImageCSgvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Int CroppedImageSettings::getDotsPerInch() const {
  return _impl::$s7BlinkID20CroppedImageSettingsV11dotsPerInchSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void CroppedImageSettings::setDotsPerInch(swift::Int value) {
  _impl::$s7BlinkID20CroppedImageSettingsV11dotsPerInchSivs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK float CroppedImageSettings::getExtensionFactor() const {
  return _impl::$s7BlinkID20CroppedImageSettingsV15extensionFactorSfvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void CroppedImageSettings::setExtensionFactor(float value) {
  _impl::$s7BlinkID20CroppedImageSettingsV15extensionFactorSfvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool CroppedImageSettings::getReturnDocumentImage() const {
  return _impl::$s7BlinkID20CroppedImageSettingsV014returnDocumentD0Sbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void CroppedImageSettings::setReturnDocumentImage(bool value) {
  _impl::$s7BlinkID20CroppedImageSettingsV014returnDocumentD0Sbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool CroppedImageSettings::getReturnFaceImage() const {
  return _impl::$s7BlinkID20CroppedImageSettingsV010returnFaceD0Sbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void CroppedImageSettings::setReturnFaceImage(bool value) {
  _impl::$s7BlinkID20CroppedImageSettingsV010returnFaceD0Sbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool CroppedImageSettings::getReturnSignatureImage() const {
  return _impl::$s7BlinkID20CroppedImageSettingsV015returnSignatureD0Sbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void CroppedImageSettings::setReturnSignatureImage(bool value) {
  _impl::$s7BlinkID20CroppedImageSettingsV015returnSignatureD0Sbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK CroppedImageSettings CroppedImageSettings::init(swift::Int dotsPerInch, float extensionFactor, bool returnDocumentImage, bool returnFaceImage, bool returnSignatureImage) {
  return _impl::_impl_CroppedImageSettings::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID20CroppedImageSettingsV11dotsPerInch15extensionFactor014returnDocumentD00k4FaceD00k9SignatureD0ACSi_SfS3btcfC(result, dotsPerInch, extensionFactor, returnDocumentImage, returnFaceImage, returnSignatureImage);
  });
  }
  SWIFT_INLINE_THUNK DataMatchFieldType DataMatchFieldType::_impl_dateOfBirth::operator()() const {
    auto result = DataMatchFieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID18DataMatchFieldTypeO11dateOfBirthyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DataMatchFieldType::isDateOfBirth() const {
    return *this == DataMatchFieldType::dateOfBirth;
  }
  SWIFT_INLINE_THUNK DataMatchFieldType DataMatchFieldType::_impl_dateOfExpiry::operator()() const {
    auto result = DataMatchFieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID18DataMatchFieldTypeO12dateOfExpiryyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DataMatchFieldType::isDateOfExpiry() const {
    return *this == DataMatchFieldType::dateOfExpiry;
  }
  SWIFT_INLINE_THUNK DataMatchFieldType DataMatchFieldType::_impl_documentNumber::operator()() const {
    auto result = DataMatchFieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID18DataMatchFieldTypeO14documentNumberyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DataMatchFieldType::isDocumentNumber() const {
    return *this == DataMatchFieldType::documentNumber;
  }
  SWIFT_INLINE_THUNK DataMatchFieldType DataMatchFieldType::_impl_documentAdditionalNumber::operator()() const {
    auto result = DataMatchFieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID18DataMatchFieldTypeO24documentAdditionalNumberyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DataMatchFieldType::isDocumentAdditionalNumber() const {
    return *this == DataMatchFieldType::documentAdditionalNumber;
  }
  SWIFT_INLINE_THUNK DataMatchFieldType DataMatchFieldType::_impl_documentOptionalAdditionalNumber::operator()() const {
    auto result = DataMatchFieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID18DataMatchFieldTypeO32documentOptionalAdditionalNumberyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DataMatchFieldType::isDocumentOptionalAdditionalNumber() const {
    return *this == DataMatchFieldType::documentOptionalAdditionalNumber;
  }
  SWIFT_INLINE_THUNK DataMatchFieldType DataMatchFieldType::_impl_personalIdNumber::operator()() const {
    auto result = DataMatchFieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID18DataMatchFieldTypeO16personalIdNumberyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DataMatchFieldType::isPersonalIdNumber() const {
    return *this == DataMatchFieldType::personalIdNumber;
  }
  SWIFT_INLINE_THUNK  bool DataMatchFieldType::isUnknownDefault() const {
    return *this == DataMatchFieldType::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int DataMatchFieldType::getHashValue() const {
  return _impl::$s7BlinkID18DataMatchFieldTypeO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Array<FieldState> DataMatchResult::getStates() const {
  return swift::_impl::_impl_Array<FieldState>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_void_ptr_0_8(result, _impl::$s7BlinkID15DataMatchResultV6statesSayAA10FieldStateVGvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK DataMatchState DataMatchResult::getOverallState() const {
  return _impl::_impl_DataMatchState::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID15DataMatchResultV12overallStateAA0cdG0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK DataMatchState DataMatchResult::getState(const DataMatchFieldType& fieldType) const {
  return _impl::_impl_DataMatchState::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID15DataMatchResultV8getState3forAA0cdG0OAA0cD9FieldTypeO_tF(result, _impl::_impl_DataMatchFieldType::getOpaquePointer(fieldType), _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK DataMatchState DataMatchState::_impl_notPerformed::operator()() const {
    auto result = DataMatchState::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID14DataMatchStateO12notPerformedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DataMatchState::isNotPerformed() const {
    return *this == DataMatchState::notPerformed;
  }
  SWIFT_INLINE_THUNK DataMatchState DataMatchState::_impl_failed::operator()() const {
    auto result = DataMatchState::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID14DataMatchStateO6failedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DataMatchState::isFailed() const {
    return *this == DataMatchState::failed;
  }
  SWIFT_INLINE_THUNK DataMatchState DataMatchState::_impl_success::operator()() const {
    auto result = DataMatchState::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID14DataMatchStateO7successyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DataMatchState::isSuccess() const {
    return *this == DataMatchState::success;
  }
  SWIFT_INLINE_THUNK  bool DataMatchState::isUnknownDefault() const {
    return *this == DataMatchState::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int DataMatchState::getHashValue() const {
  return _impl::$s7BlinkID14DataMatchStateO9hashValueSivg(_getOpaquePointer());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Optional<swift::Int> DateResult<T_0_0>::getDay() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return swift::_impl::_impl_Optional<swift::Int>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_uint8_t_8_9(result, _impl::$s7BlinkID10DateResultV3daySiSgvg(swift::TypeMetadataTrait<DateResult<T_0_0>>::getTypeMetadata(), _getOpaquePointer()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Optional<swift::Int> DateResult<T_0_0>::getMonth() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return swift::_impl::_impl_Optional<swift::Int>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_uint8_t_8_9(result, _impl::$s7BlinkID10DateResultV5monthSiSgvg(swift::TypeMetadataTrait<DateResult<T_0_0>>::getTypeMetadata(), _getOpaquePointer()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Optional<swift::Int> DateResult<T_0_0>::getYear() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return swift::_impl::_impl_Optional<swift::Int>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_uint8_t_8_9(result, _impl::$s7BlinkID10DateResultV4yearSiSgvg(swift::TypeMetadataTrait<DateResult<T_0_0>>::getTypeMetadata(), _getOpaquePointer()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK bool DateResult<T_0_0>::getFilledByDomainKnowledge() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$s7BlinkID10DateResultV23filledByDomainKnowledgeSbvg(swift::TypeMetadataTrait<DateResult<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK bool DateResult<T_0_0>::getSuccessfullyParsed() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$s7BlinkID10DateResultV18successfullyParsedSbvg(swift::TypeMetadataTrait<DateResult<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK T_0_0 DateResult<T_0_0>::getOriginalString() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
  if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
  void *returnValue;
  _impl::$s7BlinkID10DateResultV14originalStringxvg(reinterpret_cast<void *>(&returnValue), swift::TypeMetadataTrait<DateResult<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  return ::swift::_impl::implClassFor<T_0_0>::type::makeRetained(returnValue);
  } else if constexpr (::swift::_impl::isValueType<T_0_0>) {
  return ::swift::_impl::implClassFor<T_0_0>::type::returnNewValue([&](void * _Nonnull returnValue) SWIFT_INLINE_THUNK_ATTRIBUTES {
_impl::$s7BlinkID10DateResultV14originalStringxvg(returnValue, swift::TypeMetadataTrait<DateResult<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  } else if constexpr (::swift::_impl::isSwiftBridgedCxxRecord<T_0_0>) {
alignas(alignof(T_0_0)) char storage[sizeof(T_0_0)];
auto * _Nonnull storageObjectPtr = reinterpret_cast<T_0_0 *>(storage);
_impl::$s7BlinkID10DateResultV14originalStringxvg(storage, swift::TypeMetadataTrait<DateResult<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
T_0_0 result(static_cast<T_0_0 &&>(*storageObjectPtr));
storageObjectPtr->~T_0_0();
return result;
  } else {
  T_0_0 returnValue;
_impl::$s7BlinkID10DateResultV14originalStringxvg(reinterpret_cast<void *>(&returnValue), swift::TypeMetadataTrait<DateResult<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  return returnValue;
  }
#pragma clang diagnostic pop
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::String DateResult<T_0_0>::toString() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID10DateResultV8toStringSSySSRszrlF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<ScanningSide> DetailedCroppedImageResult::getSide() const {
  return swift::_impl::_impl_Optional<ScanningSide>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID26DetailedCroppedImageResultV4sideAA12ScanningSideOSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<RectangleF> DetailedCroppedImageResult::getLocation() const {
  return swift::_impl::_impl_Optional<RectangleF>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID26DetailedCroppedImageResultV8locationAA10RectangleFVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK UIImage *_Nullable DetailedCroppedImageResult::getUiImage() const {
return (__bridge_transfer UIImage *)(__bridge void *)_impl::$s7BlinkID26DetailedCroppedImageResultV02uiE0So7UIImageCSgvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK FieldType DetailedFieldType::getFieldType() const {
  return _impl::_impl_FieldType::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID17DetailedFieldTypeV05fieldE0AA0dE0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void DetailedFieldType::setFieldType(const FieldType& value) {
  alignas(alignof(FieldType)) char copyBuffer_consumedParamCopy_value[sizeof(FieldType)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) FieldType(value));
  swift::_impl::ConsumedValueStorageDestroyer<FieldType> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID17DetailedFieldTypeV05fieldE0AA0dE0Ovs(_impl::_impl_FieldType::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK AlphabetType DetailedFieldType::getAlphabetType() const {
  return _impl::_impl_AlphabetType::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID17DetailedFieldTypeV08alphabetE0AA08AlphabetE0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void DetailedFieldType::setAlphabetType(const AlphabetType& value) {
  alignas(alignof(AlphabetType)) char copyBuffer_consumedParamCopy_value[sizeof(AlphabetType)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) AlphabetType(value));
  swift::_impl::ConsumedValueStorageDestroyer<AlphabetType> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID17DetailedFieldTypeV08alphabetE0AA08AlphabetE0Ovs(_impl::_impl_AlphabetType::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK DetailedFieldType DetailedFieldType::init(const FieldType& fieldType, const AlphabetType& alphabetType) {
  alignas(alignof(FieldType)) char copyBuffer_consumedParamCopy_fieldType[sizeof(FieldType)];
  auto &consumedParamCopy_fieldType = *(new(copyBuffer_consumedParamCopy_fieldType) FieldType(fieldType));
  swift::_impl::ConsumedValueStorageDestroyer<FieldType> storageGuard_consumedParamCopy_fieldType(consumedParamCopy_fieldType);
  alignas(alignof(AlphabetType)) char copyBuffer_consumedParamCopy_alphabetType[sizeof(AlphabetType)];
  auto &consumedParamCopy_alphabetType = *(new(copyBuffer_consumedParamCopy_alphabetType) AlphabetType(alphabetType));
  swift::_impl::ConsumedValueStorageDestroyer<AlphabetType> storageGuard_consumedParamCopy_alphabetType(consumedParamCopy_alphabetType);
  return _impl::_impl_DetailedFieldType::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID17DetailedFieldTypeV05fieldE008alphabetE0AcA0dE0O_AA08AlphabetE0OtcfC(result, _impl::_impl_FieldType::getOpaquePointer(consumedParamCopy_fieldType), _impl::_impl_AlphabetType::getOpaquePointer(consumedParamCopy_alphabetType));
  });
  }
  SWIFT_INLINE_THUNK DetectionLevel DetectionLevel::_impl_off::operator()() const {
    auto result = DetectionLevel::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID14DetectionLevelO3offyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DetectionLevel::isOff() const {
    return *this == DetectionLevel::off;
  }
  SWIFT_INLINE_THUNK DetectionLevel DetectionLevel::_impl_low::operator()() const {
    auto result = DetectionLevel::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID14DetectionLevelO3lowyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DetectionLevel::isLow() const {
    return *this == DetectionLevel::low;
  }
  SWIFT_INLINE_THUNK DetectionLevel DetectionLevel::_impl_mid::operator()() const {
    auto result = DetectionLevel::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID14DetectionLevelO3midyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DetectionLevel::isMid() const {
    return *this == DetectionLevel::mid;
  }
  SWIFT_INLINE_THUNK DetectionLevel DetectionLevel::_impl_high::operator()() const {
    auto result = DetectionLevel::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID14DetectionLevelO4highyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DetectionLevel::isHigh() const {
    return *this == DetectionLevel::high;
  }
  SWIFT_INLINE_THUNK  bool DetectionLevel::isUnknownDefault() const {
    return *this == DetectionLevel::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int DetectionLevel::getHashValue() const {
  return _impl::$s7BlinkID14DetectionLevelO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK DetectionStatus DetectionStatus::_impl_failed::operator()() const {
    auto result = DetectionStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15DetectionStatusO6failedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DetectionStatus::isFailed() const {
    return *this == DetectionStatus::failed;
  }
  SWIFT_INLINE_THUNK DetectionStatus DetectionStatus::_impl_success::operator()() const {
    auto result = DetectionStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15DetectionStatusO7successyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DetectionStatus::isSuccess() const {
    return *this == DetectionStatus::success;
  }
  SWIFT_INLINE_THUNK DetectionStatus DetectionStatus::_impl_cameraTooFar::operator()() const {
    auto result = DetectionStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15DetectionStatusO12cameraTooFaryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DetectionStatus::isCameraTooFar() const {
    return *this == DetectionStatus::cameraTooFar;
  }
  SWIFT_INLINE_THUNK DetectionStatus DetectionStatus::_impl_cameraTooClose::operator()() const {
    auto result = DetectionStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15DetectionStatusO14cameraTooCloseyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DetectionStatus::isCameraTooClose() const {
    return *this == DetectionStatus::cameraTooClose;
  }
  SWIFT_INLINE_THUNK DetectionStatus DetectionStatus::_impl_cameraAngleTooSteep::operator()() const {
    auto result = DetectionStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15DetectionStatusO19cameraAngleTooSteepyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DetectionStatus::isCameraAngleTooSteep() const {
    return *this == DetectionStatus::cameraAngleTooSteep;
  }
  SWIFT_INLINE_THUNK DetectionStatus DetectionStatus::_impl_documentTooCloseToCameraEdge::operator()() const {
    auto result = DetectionStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15DetectionStatusO28documentTooCloseToCameraEdgeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DetectionStatus::isDocumentTooCloseToCameraEdge() const {
    return *this == DetectionStatus::documentTooCloseToCameraEdge;
  }
  SWIFT_INLINE_THUNK DetectionStatus DetectionStatus::_impl_documentPartiallyVisible::operator()() const {
    auto result = DetectionStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15DetectionStatusO24documentPartiallyVisibleyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DetectionStatus::isDocumentPartiallyVisible() const {
    return *this == DetectionStatus::documentPartiallyVisible;
  }
  SWIFT_INLINE_THUNK DetectionStatus DetectionStatus::_impl_fallbackSuccess::operator()() const {
    auto result = DetectionStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15DetectionStatusO15fallbackSuccessyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DetectionStatus::isFallbackSuccess() const {
    return *this == DetectionStatus::fallbackSuccess;
  }
  SWIFT_INLINE_THUNK  bool DetectionStatus::isUnknownDefault() const {
    return *this == DetectionStatus::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<DetectionStatus> DetectionStatus::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<DetectionStatus>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID15DetectionStatusO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String DetectionStatus::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID15DetectionStatusO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK DocumentFilter DocumentAnonymizationSettings::getDocumentFilter() const {
  return _impl::_impl_DocumentFilter::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID29DocumentAnonymizationSettingsV14documentFilterAA0cG0Vvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void DocumentAnonymizationSettings::setDocumentFilter(const DocumentFilter& value) {
  alignas(alignof(DocumentFilter)) char copyBuffer_consumedParamCopy_value[sizeof(DocumentFilter)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) DocumentFilter(value));
  swift::_impl::ConsumedValueStorageDestroyer<DocumentFilter> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID29DocumentAnonymizationSettingsV14documentFilterAA0cG0Vvs(_impl::_impl_DocumentFilter::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Array<FieldType> DocumentAnonymizationSettings::getFields() const {
  return swift::_impl::_impl_Array<FieldType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_void_ptr_0_8(result, _impl::$s7BlinkID29DocumentAnonymizationSettingsV6fieldsSayAA9FieldTypeOGvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void DocumentAnonymizationSettings::setFields(const swift::Array<FieldType>& value) {
  alignas(alignof(swift::Array<FieldType>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Array<FieldType>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Array<FieldType>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Array<FieldType>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID29DocumentAnonymizationSettingsV6fieldsSayAA9FieldTypeOGvs(_impl::swift_interop_passDirect_BlinkID_void_ptr_0_8(swift::_impl::_impl_Array<FieldType>::getOpaquePointer(consumedParamCopy_value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<DocumentNumberAnonymizationSettings> DocumentAnonymizationSettings::getDocumentNumberAnonymizationSettings() const {
  return swift::_impl::_impl_Optional<DocumentNumberAnonymizationSettings>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID29DocumentAnonymizationSettingsV014documentNumberdE0AA0cgdE0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void DocumentAnonymizationSettings::setDocumentNumberAnonymizationSettings(const swift::Optional<DocumentNumberAnonymizationSettings>& value) {
  alignas(alignof(swift::Optional<DocumentNumberAnonymizationSettings>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<DocumentNumberAnonymizationSettings>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<DocumentNumberAnonymizationSettings>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<DocumentNumberAnonymizationSettings>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID29DocumentAnonymizationSettingsV014documentNumberdE0AA0cgdE0VSgvs(swift::_impl::_impl_Optional<DocumentNumberAnonymizationSettings>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK DocumentAnonymizationSettings DocumentAnonymizationSettings::init(const DocumentFilter& documentFilter, const swift::Array<FieldType>& fields, const swift::Optional<DocumentNumberAnonymizationSettings>& documentNumberAnonymizationSettings) {
  alignas(alignof(DocumentFilter)) char copyBuffer_consumedParamCopy_documentFilter[sizeof(DocumentFilter)];
  auto &consumedParamCopy_documentFilter = *(new(copyBuffer_consumedParamCopy_documentFilter) DocumentFilter(documentFilter));
  swift::_impl::ConsumedValueStorageDestroyer<DocumentFilter> storageGuard_consumedParamCopy_documentFilter(consumedParamCopy_documentFilter);
  alignas(alignof(swift::Array<FieldType>)) char copyBuffer_consumedParamCopy_fields[sizeof(swift::Array<FieldType>)];
  auto &consumedParamCopy_fields = *(new(copyBuffer_consumedParamCopy_fields) swift::Array<FieldType>(fields));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Array<FieldType>> storageGuard_consumedParamCopy_fields(consumedParamCopy_fields);
  alignas(alignof(swift::Optional<DocumentNumberAnonymizationSettings>)) char copyBuffer_consumedParamCopy_documentNumberAnonymizationSettings[sizeof(swift::Optional<DocumentNumberAnonymizationSettings>)];
  auto &consumedParamCopy_documentNumberAnonymizationSettings = *(new(copyBuffer_consumedParamCopy_documentNumberAnonymizationSettings) swift::Optional<DocumentNumberAnonymizationSettings>(documentNumberAnonymizationSettings));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<DocumentNumberAnonymizationSettings>> storageGuard_consumedParamCopy_documentNumberAnonymizationSettings(consumedParamCopy_documentNumberAnonymizationSettings);
  return _impl::_impl_DocumentAnonymizationSettings::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID29DocumentAnonymizationSettingsV14documentFilter6fields0f6NumberdE0AcA0cG0V_SayAA9FieldTypeOGAA0cidE0VSgtcfC(result, _impl::_impl_DocumentFilter::getOpaquePointer(consumedParamCopy_documentFilter), _impl::swift_interop_passDirect_BlinkID_void_ptr_0_8(swift::_impl::_impl_Array<FieldType>::getOpaquePointer(consumedParamCopy_fields)), swift::_impl::_impl_Optional<DocumentNumberAnonymizationSettings>::getOpaquePointer(consumedParamCopy_documentNumberAnonymizationSettings));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<Country> DocumentFilter::getCountry() const {
  return swift::_impl::_impl_Optional<Country>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID14DocumentFilterV7countryAA7CountryOSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void DocumentFilter::setCountry(const swift::Optional<Country>& value) {
  alignas(alignof(swift::Optional<Country>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<Country>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<Country>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<Country>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID14DocumentFilterV7countryAA7CountryOSgvs(swift::_impl::_impl_Optional<Country>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<Region> DocumentFilter::getRegion() const {
  return swift::_impl::_impl_Optional<Region>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID14DocumentFilterV6regionAA6RegionOSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void DocumentFilter::setRegion(const swift::Optional<Region>& value) {
  alignas(alignof(swift::Optional<Region>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<Region>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<Region>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<Region>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID14DocumentFilterV6regionAA6RegionOSgvs(swift::_impl::_impl_Optional<Region>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<DocumentType> DocumentFilter::getDocumentType() const {
  return swift::_impl::_impl_Optional<DocumentType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID14DocumentFilterV12documentTypeAA0cF0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void DocumentFilter::setDocumentType(const swift::Optional<DocumentType>& value) {
  alignas(alignof(swift::Optional<DocumentType>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<DocumentType>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<DocumentType>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<DocumentType>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID14DocumentFilterV12documentTypeAA0cF0OSgvs(swift::_impl::_impl_Optional<DocumentType>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK DocumentFilter DocumentFilter::init(const swift::Optional<Country>& country, const swift::Optional<Region>& region, const swift::Optional<DocumentType>& documentType) {
  alignas(alignof(swift::Optional<Country>)) char copyBuffer_consumedParamCopy_country[sizeof(swift::Optional<Country>)];
  auto &consumedParamCopy_country = *(new(copyBuffer_consumedParamCopy_country) swift::Optional<Country>(country));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<Country>> storageGuard_consumedParamCopy_country(consumedParamCopy_country);
  alignas(alignof(swift::Optional<Region>)) char copyBuffer_consumedParamCopy_region[sizeof(swift::Optional<Region>)];
  auto &consumedParamCopy_region = *(new(copyBuffer_consumedParamCopy_region) swift::Optional<Region>(region));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<Region>> storageGuard_consumedParamCopy_region(consumedParamCopy_region);
  alignas(alignof(swift::Optional<DocumentType>)) char copyBuffer_consumedParamCopy_documentType[sizeof(swift::Optional<DocumentType>)];
  auto &consumedParamCopy_documentType = *(new(copyBuffer_consumedParamCopy_documentType) swift::Optional<DocumentType>(documentType));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<DocumentType>> storageGuard_consumedParamCopy_documentType(consumedParamCopy_documentType);
  return _impl::_impl_DocumentFilter::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID14DocumentFilterV7country6region12documentTypeAcA7CountryOSg_AA6RegionOSgAA0cH0OSgtcfC(result, swift::_impl::_impl_Optional<Country>::getOpaquePointer(consumedParamCopy_country), swift::_impl::_impl_Optional<Region>::getOpaquePointer(consumedParamCopy_region), swift::_impl::_impl_Optional<DocumentType>::getOpaquePointer(consumedParamCopy_documentType));
  });
  }
  SWIFT_INLINE_THUNK DocumentImageColorStatus DocumentImageColorStatus::_impl_notAvailable::operator()() const {
    auto result = DocumentImageColorStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID24DocumentImageColorStatusO12notAvailableyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentImageColorStatus::isNotAvailable() const {
    return *this == DocumentImageColorStatus::notAvailable;
  }
  SWIFT_INLINE_THUNK DocumentImageColorStatus DocumentImageColorStatus::_impl_blackAndWhite::operator()() const {
    auto result = DocumentImageColorStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID24DocumentImageColorStatusO13blackAndWhiteyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentImageColorStatus::isBlackAndWhite() const {
    return *this == DocumentImageColorStatus::blackAndWhite;
  }
  SWIFT_INLINE_THUNK DocumentImageColorStatus DocumentImageColorStatus::_impl_color::operator()() const {
    auto result = DocumentImageColorStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID24DocumentImageColorStatusO5coloryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentImageColorStatus::isColor() const {
    return *this == DocumentImageColorStatus::color;
  }
  SWIFT_INLINE_THUNK  bool DocumentImageColorStatus::isUnknownDefault() const {
    return *this == DocumentImageColorStatus::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<DocumentImageColorStatus> DocumentImageColorStatus::init(swift::Int rawValue) {
  return swift::_impl::_impl_Optional<DocumentImageColorStatus>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24DocumentImageColorStatusO8rawValueACSgSi_tcfC(result, rawValue);
  });
  }
  SWIFT_INLINE_THUNK swift::Int DocumentImageColorStatus::getRawValue() const {
  return _impl::$s7BlinkID24DocumentImageColorStatusO8rawValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Int DocumentNumberAnonymizationSettings::getPrefixDigitsVisible() const {
  return _impl::$s7BlinkID35DocumentNumberAnonymizationSettingsV19prefixDigitsVisibleSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void DocumentNumberAnonymizationSettings::setPrefixDigitsVisible(swift::Int value) {
  _impl::$s7BlinkID35DocumentNumberAnonymizationSettingsV19prefixDigitsVisibleSivs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Int DocumentNumberAnonymizationSettings::getSuffixDigitsVisible() const {
  return _impl::$s7BlinkID35DocumentNumberAnonymizationSettingsV19suffixDigitsVisibleSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void DocumentNumberAnonymizationSettings::setSuffixDigitsVisible(swift::Int value) {
  _impl::$s7BlinkID35DocumentNumberAnonymizationSettingsV19suffixDigitsVisibleSivs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK DocumentNumberAnonymizationSettings DocumentNumberAnonymizationSettings::init(swift::Int prefixDigitsVisible, swift::Int suffixDigitsVisible) {
  return _impl::_impl_DocumentNumberAnonymizationSettings::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID35DocumentNumberAnonymizationSettingsV19prefixDigitsVisible06suffixhI0ACSi_SitcfC(result, prefixDigitsVisible, suffixDigitsVisible);
  });
  }
  SWIFT_INLINE_THUNK DocumentOrientation DocumentOrientation::_impl_horizontal::operator()() const {
    auto result = DocumentOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID19DocumentOrientationO10horizontalyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentOrientation::isHorizontal() const {
    return *this == DocumentOrientation::horizontal;
  }
  SWIFT_INLINE_THUNK DocumentOrientation DocumentOrientation::_impl_vertical::operator()() const {
    auto result = DocumentOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID19DocumentOrientationO8verticalyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentOrientation::isVertical() const {
    return *this == DocumentOrientation::vertical;
  }
  SWIFT_INLINE_THUNK DocumentOrientation DocumentOrientation::_impl_notAvailable::operator()() const {
    auto result = DocumentOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID19DocumentOrientationO12notAvailableyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentOrientation::isNotAvailable() const {
    return *this == DocumentOrientation::notAvailable;
  }
  SWIFT_INLINE_THUNK  bool DocumentOrientation::isUnknownDefault() const {
    return *this == DocumentOrientation::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<DocumentOrientation> DocumentOrientation::init(swift::Int rawValue) {
  return swift::_impl::_impl_Optional<DocumentOrientation>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID19DocumentOrientationO8rawValueACSgSi_tcfC(result, rawValue);
  });
  }
  SWIFT_INLINE_THUNK swift::Int DocumentOrientation::getRawValue() const {
  return _impl::$s7BlinkID19DocumentOrientationO8rawValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK DocumentRotation DocumentRotation::_impl_notAvailable::operator()() const {
    auto result = DocumentRotation::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16DocumentRotationO12notAvailableyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentRotation::isNotAvailable() const {
    return *this == DocumentRotation::notAvailable;
  }
  SWIFT_INLINE_THUNK DocumentRotation DocumentRotation::_impl_zero::operator()() const {
    auto result = DocumentRotation::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16DocumentRotationO4zeroyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentRotation::isZero() const {
    return *this == DocumentRotation::zero;
  }
  SWIFT_INLINE_THUNK DocumentRotation DocumentRotation::_impl_clockwise90::operator()() const {
    auto result = DocumentRotation::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16DocumentRotationO11clockwise90yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentRotation::isClockwise90() const {
    return *this == DocumentRotation::clockwise90;
  }
  SWIFT_INLINE_THUNK DocumentRotation DocumentRotation::_impl_counterClockwise90::operator()() const {
    auto result = DocumentRotation::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16DocumentRotationO18counterClockwise90yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentRotation::isCounterClockwise90() const {
    return *this == DocumentRotation::counterClockwise90;
  }
  SWIFT_INLINE_THUNK DocumentRotation DocumentRotation::_impl_upsideDown::operator()() const {
    auto result = DocumentRotation::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16DocumentRotationO10upsideDownyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentRotation::isUpsideDown() const {
    return *this == DocumentRotation::upsideDown;
  }
  SWIFT_INLINE_THUNK  bool DocumentRotation::isUnknownDefault() const {
    return *this == DocumentRotation::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<DocumentRotation> DocumentRotation::init(swift::Int rawValue) {
  return swift::_impl::_impl_Optional<DocumentRotation>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID16DocumentRotationO8rawValueACSgSi_tcfC(result, rawValue);
  });
  }
  SWIFT_INLINE_THUNK swift::Int DocumentRotation::getRawValue() const {
  return _impl::$s7BlinkID16DocumentRotationO8rawValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK DocumentFilter DocumentRules::getDocumentFilter() const {
  return _impl::_impl_DocumentFilter::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID13DocumentRulesV14documentFilterAA0cF0Vvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void DocumentRules::setDocumentFilter(const DocumentFilter& value) {
  alignas(alignof(DocumentFilter)) char copyBuffer_consumedParamCopy_value[sizeof(DocumentFilter)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) DocumentFilter(value));
  swift::_impl::ConsumedValueStorageDestroyer<DocumentFilter> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID13DocumentRulesV14documentFilterAA0cF0Vvs(_impl::_impl_DocumentFilter::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Array<DetailedFieldType> DocumentRules::getFields() const {
  return swift::_impl::_impl_Array<DetailedFieldType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_void_ptr_0_8(result, _impl::$s7BlinkID13DocumentRulesV6fieldsSayAA17DetailedFieldTypeVGvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void DocumentRules::setFields(const swift::Array<DetailedFieldType>& value) {
  alignas(alignof(swift::Array<DetailedFieldType>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Array<DetailedFieldType>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Array<DetailedFieldType>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Array<DetailedFieldType>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID13DocumentRulesV6fieldsSayAA17DetailedFieldTypeVGvs(_impl::swift_interop_passDirect_BlinkID_void_ptr_0_8(swift::_impl::_impl_Array<DetailedFieldType>::getOpaquePointer(consumedParamCopy_value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK DocumentRules DocumentRules::init(const DocumentFilter& documentFilter, const swift::Array<DetailedFieldType>& fields) {
  alignas(alignof(DocumentFilter)) char copyBuffer_consumedParamCopy_documentFilter[sizeof(DocumentFilter)];
  auto &consumedParamCopy_documentFilter = *(new(copyBuffer_consumedParamCopy_documentFilter) DocumentFilter(documentFilter));
  swift::_impl::ConsumedValueStorageDestroyer<DocumentFilter> storageGuard_consumedParamCopy_documentFilter(consumedParamCopy_documentFilter);
  alignas(alignof(swift::Array<DetailedFieldType>)) char copyBuffer_consumedParamCopy_fields[sizeof(swift::Array<DetailedFieldType>)];
  auto &consumedParamCopy_fields = *(new(copyBuffer_consumedParamCopy_fields) swift::Array<DetailedFieldType>(fields));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Array<DetailedFieldType>> storageGuard_consumedParamCopy_fields(consumedParamCopy_fields);
  return _impl::_impl_DocumentRules::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID13DocumentRulesV14documentFilter6fieldsAcA0cF0V_SayAA17DetailedFieldTypeVGtcfC(result, _impl::_impl_DocumentFilter::getOpaquePointer(consumedParamCopy_documentFilter), _impl::swift_interop_passDirect_BlinkID_void_ptr_0_8(swift::_impl::_impl_Array<DetailedFieldType>::getOpaquePointer(consumedParamCopy_fields)));
  });
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_none::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO4noneyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isNone() const {
    return *this == DocumentType::none;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_consularId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO10consularIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isConsularId() const {
    return *this == DocumentType::consularId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_dl::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO2dlyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isDl() const {
    return *this == DocumentType::dl;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_dlPublicServicesCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO20dlPublicServicesCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isDlPublicServicesCard() const {
    return *this == DocumentType::dlPublicServicesCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_employmentPass::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO14employmentPassyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isEmploymentPass() const {
    return *this == DocumentType::employmentPass;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_finCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO7finCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isFinCard() const {
    return *this == DocumentType::finCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_id::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO2idyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isId() const {
    return *this == DocumentType::id;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_multipurposeId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO14multipurposeIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMultipurposeId() const {
    return *this == DocumentType::multipurposeId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_myKad::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO5myKadyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMyKad() const {
    return *this == DocumentType::myKad;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_myKid::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO5myKidyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMyKid() const {
    return *this == DocumentType::myKid;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_myPR::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO4myPRyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMyPR() const {
    return *this == DocumentType::myPR;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_myTentera::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO9myTenterayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMyTentera() const {
    return *this == DocumentType::myTentera;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_panCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO7panCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isPanCard() const {
    return *this == DocumentType::panCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_professionalId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO14professionalIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isProfessionalId() const {
    return *this == DocumentType::professionalId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_publicServicesCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO18publicServicesCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isPublicServicesCard() const {
    return *this == DocumentType::publicServicesCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_residencePermit::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO15residencePermityA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isResidencePermit() const {
    return *this == DocumentType::residencePermit;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_residentId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO10residentIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isResidentId() const {
    return *this == DocumentType::residentId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_temporaryResidencePermit::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO24temporaryResidencePermityA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isTemporaryResidencePermit() const {
    return *this == DocumentType::temporaryResidencePermit;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_voterId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO7voterIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isVoterId() const {
    return *this == DocumentType::voterId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_workPermit::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO10workPermityA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isWorkPermit() const {
    return *this == DocumentType::workPermit;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_iKad::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO4iKadyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isIKad() const {
    return *this == DocumentType::iKad;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_militaryId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO10militaryIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMilitaryId() const {
    return *this == DocumentType::militaryId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_myKas::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO5myKasyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMyKas() const {
    return *this == DocumentType::myKas;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_socialSecurityCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO18socialSecurityCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isSocialSecurityCard() const {
    return *this == DocumentType::socialSecurityCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_healthInsuranceCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO19healthInsuranceCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isHealthInsuranceCard() const {
    return *this == DocumentType::healthInsuranceCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_passport::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO8passportyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isPassport() const {
    return *this == DocumentType::passport;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_sPass::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO5sPassyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isSPass() const {
    return *this == DocumentType::sPass;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_addressCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO11addressCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isAddressCard() const {
    return *this == DocumentType::addressCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_alienId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO7alienIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isAlienId() const {
    return *this == DocumentType::alienId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_alienPassport::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO13alienPassportyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isAlienPassport() const {
    return *this == DocumentType::alienPassport;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_greenCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO9greenCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isGreenCard() const {
    return *this == DocumentType::greenCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_minorsId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO8minorsIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMinorsId() const {
    return *this == DocumentType::minorsId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_postalId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO8postalIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isPostalId() const {
    return *this == DocumentType::postalId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_professionalDl::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO14professionalDlyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isProfessionalDl() const {
    return *this == DocumentType::professionalDl;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_taxId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO5taxIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isTaxId() const {
    return *this == DocumentType::taxId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_weaponPermit::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO12weaponPermityA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isWeaponPermit() const {
    return *this == DocumentType::weaponPermit;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_visa::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO4visayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isVisa() const {
    return *this == DocumentType::visa;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_borderCrossingCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO18borderCrossingCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isBorderCrossingCard() const {
    return *this == DocumentType::borderCrossingCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_driverCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO10driverCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isDriverCard() const {
    return *this == DocumentType::driverCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_globalEntryCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO15globalEntryCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isGlobalEntryCard() const {
    return *this == DocumentType::globalEntryCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_mypolis::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO7mypolisyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMypolis() const {
    return *this == DocumentType::mypolis;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_nexusCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO9nexusCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isNexusCard() const {
    return *this == DocumentType::nexusCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_passportCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO12passportCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isPassportCard() const {
    return *this == DocumentType::passportCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_proofOfAgeCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO14proofOfAgeCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isProofOfAgeCard() const {
    return *this == DocumentType::proofOfAgeCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_refugeeId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO9refugeeIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isRefugeeId() const {
    return *this == DocumentType::refugeeId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_tribalId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO8tribalIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isTribalId() const {
    return *this == DocumentType::tribalId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_veteranId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO9veteranIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isVeteranId() const {
    return *this == DocumentType::veteranId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_citizenshipCertificate::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO22citizenshipCertificateyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isCitizenshipCertificate() const {
    return *this == DocumentType::citizenshipCertificate;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_myNumberCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO12myNumberCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMyNumberCard() const {
    return *this == DocumentType::myNumberCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_consularPassport::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO16consularPassportyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isConsularPassport() const {
    return *this == DocumentType::consularPassport;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_minorsPassport::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO14minorsPassportyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMinorsPassport() const {
    return *this == DocumentType::minorsPassport;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_minorsPublicServicesCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO24minorsPublicServicesCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMinorsPublicServicesCard() const {
    return *this == DocumentType::minorsPublicServicesCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_drivingPrivilegeCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO20drivingPrivilegeCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isDrivingPrivilegeCard() const {
    return *this == DocumentType::drivingPrivilegeCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_asylumRequest::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO13asylumRequestyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isAsylumRequest() const {
    return *this == DocumentType::asylumRequest;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_driverQualificationCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO23driverQualificationCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isDriverQualificationCard() const {
    return *this == DocumentType::driverQualificationCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_provisionalDl::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO13provisionalDlyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isProvisionalDl() const {
    return *this == DocumentType::provisionalDl;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_refugeePassport::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO15refugeePassportyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isRefugeePassport() const {
    return *this == DocumentType::refugeePassport;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_specialId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO9specialIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isSpecialId() const {
    return *this == DocumentType::specialId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_uniformedServicesId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO19uniformedServicesIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isUniformedServicesId() const {
    return *this == DocumentType::uniformedServicesId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_immigrantVisa::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO13immigrantVisayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isImmigrantVisa() const {
    return *this == DocumentType::immigrantVisa;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_consularVoterId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO15consularVoterIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isConsularVoterId() const {
    return *this == DocumentType::consularVoterId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_twicCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO8twicCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isTwicCard() const {
    return *this == DocumentType::twicCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_exitEntryPermit::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO15exitEntryPermityA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isExitEntryPermit() const {
    return *this == DocumentType::exitEntryPermit;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_mainlandTravelPermitTaiwan::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO26mainlandTravelPermitTaiwanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMainlandTravelPermitTaiwan() const {
    return *this == DocumentType::mainlandTravelPermitTaiwan;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_nbiClearance::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO12nbiClearanceyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isNbiClearance() const {
    return *this == DocumentType::nbiClearance;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_proofOfRegistration::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO19proofOfRegistrationyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isProofOfRegistration() const {
    return *this == DocumentType::proofOfRegistration;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_temporaryProtectionPermit::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO25temporaryProtectionPermityA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isTemporaryProtectionPermit() const {
    return *this == DocumentType::temporaryProtectionPermit;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_afghanCitizenCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO17afghanCitizenCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isAfghanCitizenCard() const {
    return *this == DocumentType::afghanCitizenCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_eid::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO3eidyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isEid() const {
    return *this == DocumentType::eid;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_pass::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO4passyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isPass() const {
    return *this == DocumentType::pass;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_sisId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO5sisIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isSisId() const {
    return *this == DocumentType::sisId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_asicCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO8asicCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isAsicCard() const {
    return *this == DocumentType::asicCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_bidoonCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO10bidoonCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isBidoonCard() const {
    return *this == DocumentType::bidoonCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_interimHealthInsuranceCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO26interimHealthInsuranceCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isInterimHealthInsuranceCard() const {
    return *this == DocumentType::interimHealthInsuranceCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_nonVoterId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO10nonVoterIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isNonVoterId() const {
    return *this == DocumentType::nonVoterId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_reciprocalHealthInsuranceCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO29reciprocalHealthInsuranceCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isReciprocalHealthInsuranceCard() const {
    return *this == DocumentType::reciprocalHealthInsuranceCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_vehicleRegistration::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO19vehicleRegistrationyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isVehicleRegistration() const {
    return *this == DocumentType::vehicleRegistration;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_esaadCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO9esaadCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isEsaadCard() const {
    return *this == DocumentType::esaadCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_registrationCertificate::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO23registrationCertificateyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isRegistrationCertificate() const {
    return *this == DocumentType::registrationCertificate;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_medicalMarijuanaId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO18medicalMarijuanaIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMedicalMarijuanaId() const {
    return *this == DocumentType::medicalMarijuanaId;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isUnknownDefault() const {
    return *this == DocumentType::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<DocumentType> DocumentType::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<DocumentType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID12DocumentTypeO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String DocumentType::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID12DocumentTypeO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Optional<T_0_0> DriverLicenseDetailedInfo<T_0_0>::getRestrictions() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return swift::_impl::_impl_Optional<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID25DriverLicenseDetailedInfoV12restrictionsxSgvg(result, swift::TypeMetadataTrait<DriverLicenseDetailedInfo<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Optional<T_0_0> DriverLicenseDetailedInfo<T_0_0>::getEndorsements() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return swift::_impl::_impl_Optional<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID25DriverLicenseDetailedInfoV12endorsementsxSgvg(result, swift::TypeMetadataTrait<DriverLicenseDetailedInfo<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Optional<T_0_0> DriverLicenseDetailedInfo<T_0_0>::getVehicleClass() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return swift::_impl::_impl_Optional<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID25DriverLicenseDetailedInfoV12vehicleClassxSgvg(result, swift::TypeMetadataTrait<DriverLicenseDetailedInfo<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Optional<T_0_0> DriverLicenseDetailedInfo<T_0_0>::getConditions() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return swift::_impl::_impl_Optional<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID25DriverLicenseDetailedInfoV10conditionsxSgvg(result, swift::TypeMetadataTrait<DriverLicenseDetailedInfo<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Optional<swift::Array<VehicleClassInfo<T_0_0>>> DriverLicenseDetailedInfo<T_0_0>::getVehicleClassesInfo() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return swift::_impl::_impl_Optional<swift::Array<VehicleClassInfo<T_0_0>>>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8(result, _impl::$s7BlinkID25DriverLicenseDetailedInfoV014vehicleClassesF0SayAA012VehicleClassF0VyxGGSgvg(swift::TypeMetadataTrait<DriverLicenseDetailedInfo<T_0_0>>::getTypeMetadata(), _getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK DataMatchFieldType FieldState::getFieldType() const {
  return _impl::_impl_DataMatchFieldType::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID10FieldStateV9fieldTypeAA09DataMatchcF0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK DataMatchState FieldState::getState() const {
  return _impl::_impl_DataMatchState::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID10FieldStateV5stateAA09DataMatchD0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_additionalAddressInformation::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO28additionalAddressInformationyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isAdditionalAddressInformation() const {
    return *this == FieldType::additionalAddressInformation;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_additionalNameInformation::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO25additionalNameInformationyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isAdditionalNameInformation() const {
    return *this == FieldType::additionalNameInformation;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_additionalOptionalAddressInformation::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO36additionalOptionalAddressInformationyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isAdditionalOptionalAddressInformation() const {
    return *this == FieldType::additionalOptionalAddressInformation;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_additionalPersonalIdNumber::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO26additionalPersonalIdNumberyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isAdditionalPersonalIdNumber() const {
    return *this == FieldType::additionalPersonalIdNumber;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_address::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO7addressyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isAddress() const {
    return *this == FieldType::address;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_classEffectiveDate::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO18classEffectiveDateyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isClassEffectiveDate() const {
    return *this == FieldType::classEffectiveDate;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_classExpiryDate::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO15classExpiryDateyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isClassExpiryDate() const {
    return *this == FieldType::classExpiryDate;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_conditions::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO10conditionsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isConditions() const {
    return *this == FieldType::conditions;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_dateOfBirth::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO11dateOfBirthyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isDateOfBirth() const {
    return *this == FieldType::dateOfBirth;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_dateOfExpiry::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO12dateOfExpiryyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isDateOfExpiry() const {
    return *this == FieldType::dateOfExpiry;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_dateOfIssue::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO11dateOfIssueyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isDateOfIssue() const {
    return *this == FieldType::dateOfIssue;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_documentAdditionalNumber::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO24documentAdditionalNumberyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isDocumentAdditionalNumber() const {
    return *this == FieldType::documentAdditionalNumber;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_documentOptionalAdditionalNumber::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO32documentOptionalAdditionalNumberyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isDocumentOptionalAdditionalNumber() const {
    return *this == FieldType::documentOptionalAdditionalNumber;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_documentNumber::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO14documentNumberyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isDocumentNumber() const {
    return *this == FieldType::documentNumber;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_employer::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO8employeryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isEmployer() const {
    return *this == FieldType::employer;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_endorsements::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO12endorsementsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isEndorsements() const {
    return *this == FieldType::endorsements;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_fathersName::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO11fathersNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isFathersName() const {
    return *this == FieldType::fathersName;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_firstName::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO9firstNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isFirstName() const {
    return *this == FieldType::firstName;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_fullName::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO8fullNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isFullName() const {
    return *this == FieldType::fullName;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_issuingAuthority::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO16issuingAuthorityyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isIssuingAuthority() const {
    return *this == FieldType::issuingAuthority;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_lastName::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO8lastNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isLastName() const {
    return *this == FieldType::lastName;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_licenceType::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO07licenceD0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isLicenceType() const {
    return *this == FieldType::licenceType;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_localizedName::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO13localizedNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isLocalizedName() const {
    return *this == FieldType::localizedName;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_maritalStatus::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO13maritalStatusyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isMaritalStatus() const {
    return *this == FieldType::maritalStatus;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_mothersName::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO11mothersNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isMothersName() const {
    return *this == FieldType::mothersName;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_mrz::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO3mrzyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isMrz() const {
    return *this == FieldType::mrz;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_nationality::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO11nationalityyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isNationality() const {
    return *this == FieldType::nationality;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_personalIdNumber::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO16personalIdNumberyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isPersonalIdNumber() const {
    return *this == FieldType::personalIdNumber;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_placeOfBirth::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO12placeOfBirthyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isPlaceOfBirth() const {
    return *this == FieldType::placeOfBirth;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_profession::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO10professionyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isProfession() const {
    return *this == FieldType::profession;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_race::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO4raceyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isRace() const {
    return *this == FieldType::race;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_religion::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO8religionyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isReligion() const {
    return *this == FieldType::religion;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_residentialStatus::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO17residentialStatusyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isResidentialStatus() const {
    return *this == FieldType::residentialStatus;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_restrictions::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO12restrictionsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isRestrictions() const {
    return *this == FieldType::restrictions;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_sex::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO3sexyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isSex() const {
    return *this == FieldType::sex;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_vehicleClass::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO12vehicleClassyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isVehicleClass() const {
    return *this == FieldType::vehicleClass;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_bloodType::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO05bloodD0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isBloodType() const {
    return *this == FieldType::bloodType;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_sponsor::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO7sponsoryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isSponsor() const {
    return *this == FieldType::sponsor;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_visaType::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO04visaD0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isVisaType() const {
    return *this == FieldType::visaType;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_documentSubtype::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO15documentSubtypeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isDocumentSubtype() const {
    return *this == FieldType::documentSubtype;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_remarks::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO7remarksyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isRemarks() const {
    return *this == FieldType::remarks;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_residencePermitType::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO015residencePermitD0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isResidencePermitType() const {
    return *this == FieldType::residencePermitType;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_manufacturingYear::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO17manufacturingYearyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isManufacturingYear() const {
    return *this == FieldType::manufacturingYear;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_vehicleType::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO07vehicleD0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isVehicleType() const {
    return *this == FieldType::vehicleType;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_dependentDateOfBirth::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO20dependentDateOfBirthyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isDependentDateOfBirth() const {
    return *this == FieldType::dependentDateOfBirth;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_dependentSex::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO12dependentSexyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isDependentSex() const {
    return *this == FieldType::dependentSex;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_dependentDocumentNumber::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO23dependentDocumentNumberyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isDependentDocumentNumber() const {
    return *this == FieldType::dependentDocumentNumber;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_dependentFullName::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO17dependentFullNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isDependentFullName() const {
    return *this == FieldType::dependentFullName;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_eligibilityCategory::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO19eligibilityCategoryyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isEligibilityCategory() const {
    return *this == FieldType::eligibilityCategory;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_specificDocumentValidity::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO24specificDocumentValidityyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isSpecificDocumentValidity() const {
    return *this == FieldType::specificDocumentValidity;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_vehicleOwner::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO12vehicleOwneryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isVehicleOwner() const {
    return *this == FieldType::vehicleOwner;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isUnknownDefault() const {
    return *this == FieldType::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<FieldType> FieldType::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<FieldType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID9FieldTypeO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String FieldType::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID9FieldTypeO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<SessionError> FrameProcessResult::getSessionError() const {
  return swift::_impl::_impl_Optional<SessionError>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID18FrameProcessResultV12sessionErrorAA07SessionG0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus ImageAnalysisDetectionStatus::_impl_notAvailable::operator()() const {
    auto result = ImageAnalysisDetectionStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID28ImageAnalysisDetectionStatusO12notAvailableyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageAnalysisDetectionStatus::isNotAvailable() const {
    return *this == ImageAnalysisDetectionStatus::notAvailable;
  }
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus ImageAnalysisDetectionStatus::_impl_notDetected::operator()() const {
    auto result = ImageAnalysisDetectionStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID28ImageAnalysisDetectionStatusO11notDetectedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageAnalysisDetectionStatus::isNotDetected() const {
    return *this == ImageAnalysisDetectionStatus::notDetected;
  }
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus ImageAnalysisDetectionStatus::_impl_detected::operator()() const {
    auto result = ImageAnalysisDetectionStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID28ImageAnalysisDetectionStatusO8detectedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageAnalysisDetectionStatus::isDetected() const {
    return *this == ImageAnalysisDetectionStatus::detected;
  }
  SWIFT_INLINE_THUNK  bool ImageAnalysisDetectionStatus::isUnknownDefault() const {
    return *this == ImageAnalysisDetectionStatus::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<ImageAnalysisDetectionStatus> ImageAnalysisDetectionStatus::init(swift::Int rawValue) {
  return swift::_impl::_impl_Optional<ImageAnalysisDetectionStatus>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID28ImageAnalysisDetectionStatusO8rawValueACSgSi_tcfC(result, rawValue);
  });
  }
  SWIFT_INLINE_THUNK swift::Int ImageAnalysisDetectionStatus::getRawValue() const {
  return _impl::$s7BlinkID28ImageAnalysisDetectionStatusO8rawValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK ImageAnalysisLightingStatus ImageAnalysisLightingStatus::_impl_notAvailable::operator()() const {
    auto result = ImageAnalysisLightingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID27ImageAnalysisLightingStatusO12notAvailableyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageAnalysisLightingStatus::isNotAvailable() const {
    return *this == ImageAnalysisLightingStatus::notAvailable;
  }
  SWIFT_INLINE_THUNK ImageAnalysisLightingStatus ImageAnalysisLightingStatus::_impl_tooBright::operator()() const {
    auto result = ImageAnalysisLightingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID27ImageAnalysisLightingStatusO9tooBrightyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageAnalysisLightingStatus::isTooBright() const {
    return *this == ImageAnalysisLightingStatus::tooBright;
  }
  SWIFT_INLINE_THUNK ImageAnalysisLightingStatus ImageAnalysisLightingStatus::_impl_tooDark::operator()() const {
    auto result = ImageAnalysisLightingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID27ImageAnalysisLightingStatusO7tooDarkyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageAnalysisLightingStatus::isTooDark() const {
    return *this == ImageAnalysisLightingStatus::tooDark;
  }
  SWIFT_INLINE_THUNK ImageAnalysisLightingStatus ImageAnalysisLightingStatus::_impl_normal::operator()() const {
    auto result = ImageAnalysisLightingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID27ImageAnalysisLightingStatusO6normalyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageAnalysisLightingStatus::isNormal() const {
    return *this == ImageAnalysisLightingStatus::normal;
  }
  SWIFT_INLINE_THUNK  bool ImageAnalysisLightingStatus::isUnknownDefault() const {
    return *this == ImageAnalysisLightingStatus::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int ImageAnalysisLightingStatus::getHashValue() const {
  return _impl::$s7BlinkID27ImageAnalysisLightingStatusO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK ImageExtractionType ImageExtractionType::_impl_fullDocument::operator()() const {
    auto result = ImageExtractionType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID19ImageExtractionTypeO12fullDocumentyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageExtractionType::isFullDocument() const {
    return *this == ImageExtractionType::fullDocument;
  }
  SWIFT_INLINE_THUNK ImageExtractionType ImageExtractionType::_impl_face::operator()() const {
    auto result = ImageExtractionType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID19ImageExtractionTypeO4faceyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageExtractionType::isFace() const {
    return *this == ImageExtractionType::face;
  }
  SWIFT_INLINE_THUNK ImageExtractionType ImageExtractionType::_impl_signature::operator()() const {
    auto result = ImageExtractionType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID19ImageExtractionTypeO9signatureyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageExtractionType::isSignature() const {
    return *this == ImageExtractionType::signature;
  }
  SWIFT_INLINE_THUNK  bool ImageExtractionType::isUnknownDefault() const {
    return *this == ImageExtractionType::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int ImageExtractionType::getHashValue() const {
  return _impl::$s7BlinkID19ImageExtractionTypeO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK ImageOrientation ImageOrientation::_impl_up::operator()() const {
    auto result = ImageOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ImageOrientationO2upyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageOrientation::isUp() const {
    return *this == ImageOrientation::up;
  }
  SWIFT_INLINE_THUNK ImageOrientation ImageOrientation::_impl_down::operator()() const {
    auto result = ImageOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ImageOrientationO4downyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageOrientation::isDown() const {
    return *this == ImageOrientation::down;
  }
  SWIFT_INLINE_THUNK ImageOrientation ImageOrientation::_impl_left::operator()() const {
    auto result = ImageOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ImageOrientationO4leftyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageOrientation::isLeft() const {
    return *this == ImageOrientation::left;
  }
  SWIFT_INLINE_THUNK ImageOrientation ImageOrientation::_impl_right::operator()() const {
    auto result = ImageOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ImageOrientationO5rightyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageOrientation::isRight() const {
    return *this == ImageOrientation::right;
  }
  SWIFT_INLINE_THUNK ImageOrientation ImageOrientation::_impl_upMirrored::operator()() const {
    auto result = ImageOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ImageOrientationO10upMirroredyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageOrientation::isUpMirrored() const {
    return *this == ImageOrientation::upMirrored;
  }
  SWIFT_INLINE_THUNK ImageOrientation ImageOrientation::_impl_downMirrored::operator()() const {
    auto result = ImageOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ImageOrientationO12downMirroredyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageOrientation::isDownMirrored() const {
    return *this == ImageOrientation::downMirrored;
  }
  SWIFT_INLINE_THUNK ImageOrientation ImageOrientation::_impl_leftMirrored::operator()() const {
    auto result = ImageOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ImageOrientationO12leftMirroredyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageOrientation::isLeftMirrored() const {
    return *this == ImageOrientation::leftMirrored;
  }
  SWIFT_INLINE_THUNK ImageOrientation ImageOrientation::_impl_rightMirrored::operator()() const {
    auto result = ImageOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ImageOrientationO13rightMirroredyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageOrientation::isRightMirrored() const {
    return *this == ImageOrientation::rightMirrored;
  }
  SWIFT_INLINE_THUNK  bool ImageOrientation::isUnknownDefault() const {
    return *this == ImageOrientation::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int ImageOrientation::getHashValue() const {
  return _impl::$s7BlinkID16ImageOrientationO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK InputImage InputImage::init(UIImage *_Nonnull uiImage, const RegionOfInterest& regionOfInterest) {
  alignas(alignof(UIImage *_Nonnull)) char copyBuffer_consumedParamCopy_uiImage[sizeof(UIImage *_Nonnull)];
  auto &consumedParamCopy_uiImage = *(new(copyBuffer_consumedParamCopy_uiImage) UIImage *_Nonnull(uiImage));
  swift::_impl::ConsumedValueStorageDestroyer<UIImage *_Nonnull> storageGuard_consumedParamCopy_uiImage(consumedParamCopy_uiImage);
  alignas(alignof(RegionOfInterest)) char copyBuffer_consumedParamCopy_regionOfInterest[sizeof(RegionOfInterest)];
  auto &consumedParamCopy_regionOfInterest = *(new(copyBuffer_consumedParamCopy_regionOfInterest) RegionOfInterest(regionOfInterest));
  swift::_impl::ConsumedValueStorageDestroyer<RegionOfInterest> storageGuard_consumedParamCopy_regionOfInterest(consumedParamCopy_regionOfInterest);
  return _impl::_impl_InputImage::makeRetained(_impl::$s7BlinkID10InputImageC02uiD016regionOfInterestACSo7UIImageC_AA06RegiongH0VtcfC(consumedParamCopy_uiImage, _impl::_impl_RegionOfInterest::getOpaquePointer(consumedParamCopy_regionOfInterest), swift::TypeMetadataTrait<InputImage>::getTypeMetadata()));
  }
  SWIFT_INLINE_THUNK InputImage InputImage::init(const CameraFrame& cameraFrame) {
  alignas(alignof(CameraFrame)) char copyBuffer_consumedParamCopy_cameraFrame[sizeof(CameraFrame)];
  auto &consumedParamCopy_cameraFrame = *(new(copyBuffer_consumedParamCopy_cameraFrame) CameraFrame(cameraFrame));
  swift::_impl::ConsumedValueStorageDestroyer<CameraFrame> storageGuard_consumedParamCopy_cameraFrame(consumedParamCopy_cameraFrame);
  return _impl::_impl_InputImage::makeRetained(_impl::$s7BlinkID10InputImageC11cameraFrameAcA06CameraF0V_tcfC(_impl::_impl_CameraFrame::getOpaquePointer(consumedParamCopy_cameraFrame), swift::TypeMetadataTrait<InputImage>::getTypeMetadata()));
  }
  SWIFT_INLINE_THUNK ProcessingStatus InputImageAnalysisResult::getProcessingStatus() const {
  return _impl::_impl_ProcessingStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24InputImageAnalysisResultV16processingStatusAA010ProcessingH0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Array<FieldType> InputImageAnalysisResult::getMissingMandatoryFields() const {
  return swift::_impl::_impl_Array<FieldType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_void_ptr_0_8(result, _impl::$s7BlinkID24InputImageAnalysisResultV22missingMandatoryFieldsSayAA9FieldTypeOGvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Array<FieldType> InputImageAnalysisResult::getExtractedFields() const {
  return swift::_impl::_impl_Array<FieldType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_void_ptr_0_8(result, _impl::$s7BlinkID24InputImageAnalysisResultV15extractedFieldsSayAA9FieldTypeOGvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Array<FieldType> InputImageAnalysisResult::getInvalidCharacterFields() const {
  return swift::_impl::_impl_Array<FieldType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_void_ptr_0_8(result, _impl::$s7BlinkID24InputImageAnalysisResultV22invalidCharacterFieldsSayAA9FieldTypeOGvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Array<FieldType> InputImageAnalysisResult::getExtraPresentFields() const {
  return swift::_impl::_impl_Array<FieldType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_void_ptr_0_8(result, _impl::$s7BlinkID24InputImageAnalysisResultV18extraPresentFieldsSayAA9FieldTypeOGvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Array<ImageExtractionType> InputImageAnalysisResult::getImageExtractionFailures() const {
  return swift::_impl::_impl_Array<ImageExtractionType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_void_ptr_0_8(result, _impl::$s7BlinkID24InputImageAnalysisResultV23imageExtractionFailuresSayAA0dH4TypeOGvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK ScanningSide InputImageAnalysisResult::getScanningSide() const {
  return _impl::_impl_ScanningSide::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24InputImageAnalysisResultV12scanningSideAA08ScanningH0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK DetectionStatus InputImageAnalysisResult::getDocumentDetectionStatus() const {
  return _impl::_impl_DetectionStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24InputImageAnalysisResultV23documentDetectionStatusAA0hI0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<Quadrilateral> InputImageAnalysisResult::getDocumentLocation() const {
  return swift::_impl::_impl_Optional<Quadrilateral>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24InputImageAnalysisResultV16documentLocationAA13QuadrilateralVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus InputImageAnalysisResult::getBlurDetectionStatus() const {
  return _impl::_impl_ImageAnalysisDetectionStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24InputImageAnalysisResultV19blurDetectionStatusAA0dehI0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus InputImageAnalysisResult::getGlareDetectionStatus() const {
  return _impl::_impl_ImageAnalysisDetectionStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24InputImageAnalysisResultV20glareDetectionStatusAA0dehI0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK DocumentImageColorStatus InputImageAnalysisResult::getDocumentColorStatus() const {
  return _impl::_impl_DocumentImageColorStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24InputImageAnalysisResultV19documentColorStatusAA08DocumentdhI0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus InputImageAnalysisResult::getDocumentMoireStatus() const {
  return _impl::_impl_ImageAnalysisDetectionStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24InputImageAnalysisResultV19documentMoireStatusAA0de9DetectionI0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus InputImageAnalysisResult::getFaceDetectionStatus() const {
  return _impl::_impl_ImageAnalysisDetectionStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24InputImageAnalysisResultV19faceDetectionStatusAA0dehI0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus InputImageAnalysisResult::getMrzDetectionStatus() const {
  return _impl::_impl_ImageAnalysisDetectionStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24InputImageAnalysisResultV18mrzDetectionStatusAA0dehI0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus InputImageAnalysisResult::getBarcodeDetectionStatus() const {
  return _impl::_impl_ImageAnalysisDetectionStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24InputImageAnalysisResultV22barcodeDetectionStatusAA0dehI0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus InputImageAnalysisResult::getRealIDDetectionStatus() const {
  return _impl::_impl_ImageAnalysisDetectionStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24InputImageAnalysisResultV21realIDDetectionStatusAA0de9DetectionI0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK ImageAnalysisLightingStatus InputImageAnalysisResult::getDocumentLightingStatus() const {
  return _impl::_impl_ImageAnalysisLightingStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24InputImageAnalysisResultV22documentLightingStatusAA0dehI0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus InputImageAnalysisResult::getDocumentHandOcclusionStatus() const {
  return _impl::_impl_ImageAnalysisDetectionStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24InputImageAnalysisResultV27documentHandOcclusionStatusAA0de9DetectionJ0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK DocumentOrientation InputImageAnalysisResult::getDocumentOrientation() const {
  return _impl::_impl_DocumentOrientation::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24InputImageAnalysisResultV19documentOrientationAA08DocumentH0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK DocumentRotation InputImageAnalysisResult::getDocumentRotation() const {
  return _impl::_impl_DocumentRotation::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24InputImageAnalysisResultV16documentRotationAA08DocumentH0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK UIImage *_Nullable InputImageResult::getUiImage() const {
return (__bridge_transfer UIImage *)(__bridge void *)_impl::$s7BlinkID16InputImageResultV02uiD0So7UIImageCSgvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK InputImageSource InputImageSource::_impl_video::operator()() const {
    auto result = InputImageSource::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16InputImageSourceO5videoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool InputImageSource::isVideo() const {
    return *this == InputImageSource::video;
  }
  SWIFT_INLINE_THUNK InputImageSource InputImageSource::_impl_photo::operator()() const {
    auto result = InputImageSource::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16InputImageSourceO5photoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool InputImageSource::isPhoto() const {
    return *this == InputImageSource::photo;
  }
  SWIFT_INLINE_THUNK  bool InputImageSource::isUnknownDefault() const {
    return *this == InputImageSource::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int InputImageSource::getHashValue() const {
  return _impl::$s7BlinkID16InputImageSourceO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String InvalidLicenseKeyError::getMessage() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID22InvalidLicenseKeyErrorV7messageSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK MRZDocumentType MRZDocumentType::_impl_unknown::operator()() const {
    auto result = MRZDocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15MRZDocumentTypeO7unknownyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool MRZDocumentType::isUnknown() const {
    return *this == MRZDocumentType::unknown;
  }
  SWIFT_INLINE_THUNK MRZDocumentType MRZDocumentType::_impl_identityCard::operator()() const {
    auto result = MRZDocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15MRZDocumentTypeO12identityCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool MRZDocumentType::isIdentityCard() const {
    return *this == MRZDocumentType::identityCard;
  }
  SWIFT_INLINE_THUNK MRZDocumentType MRZDocumentType::_impl_passport::operator()() const {
    auto result = MRZDocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15MRZDocumentTypeO8passportyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool MRZDocumentType::isPassport() const {
    return *this == MRZDocumentType::passport;
  }
  SWIFT_INLINE_THUNK MRZDocumentType MRZDocumentType::_impl_visa::operator()() const {
    auto result = MRZDocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15MRZDocumentTypeO4visayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool MRZDocumentType::isVisa() const {
    return *this == MRZDocumentType::visa;
  }
  SWIFT_INLINE_THUNK MRZDocumentType MRZDocumentType::_impl_greenCard::operator()() const {
    auto result = MRZDocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15MRZDocumentTypeO9greenCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool MRZDocumentType::isGreenCard() const {
    return *this == MRZDocumentType::greenCard;
  }
  SWIFT_INLINE_THUNK MRZDocumentType MRZDocumentType::_impl_mysPassIMM13P::operator()() const {
    auto result = MRZDocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15MRZDocumentTypeO13mysPassIMM13PyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool MRZDocumentType::isMysPassIMM13P() const {
    return *this == MRZDocumentType::mysPassIMM13P;
  }
  SWIFT_INLINE_THUNK MRZDocumentType MRZDocumentType::_impl_driverLicense::operator()() const {
    auto result = MRZDocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15MRZDocumentTypeO13driverLicenseyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool MRZDocumentType::isDriverLicense() const {
    return *this == MRZDocumentType::driverLicense;
  }
  SWIFT_INLINE_THUNK MRZDocumentType MRZDocumentType::_impl_internalTravelDocument::operator()() const {
    auto result = MRZDocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15MRZDocumentTypeO22internalTravelDocumentyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool MRZDocumentType::isInternalTravelDocument() const {
    return *this == MRZDocumentType::internalTravelDocument;
  }
  SWIFT_INLINE_THUNK MRZDocumentType MRZDocumentType::_impl_borderCrossingCard::operator()() const {
    auto result = MRZDocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15MRZDocumentTypeO18borderCrossingCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool MRZDocumentType::isBorderCrossingCard() const {
    return *this == MRZDocumentType::borderCrossingCard;
  }
  SWIFT_INLINE_THUNK  bool MRZDocumentType::isUnknownDefault() const {
    return *this == MRZDocumentType::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int MRZDocumentType::getHashValue() const {
  return _impl::$s7BlinkID15MRZDocumentTypeO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String MRZResult::getRawMRZString() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID9MRZResultV12rawMRZStringSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String MRZResult::getDocumentCode() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID9MRZResultV12documentCodeSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String MRZResult::getIssuer() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID9MRZResultV6issuerSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String MRZResult::getDocumentNumber() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID9MRZResultV14documentNumberSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String MRZResult::getOpt1() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID9MRZResultV4opt1SSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String MRZResult::getOpt2() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID9MRZResultV4opt2SSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String MRZResult::getGender() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID9MRZResultV6genderSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String MRZResult::getNationality() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID9MRZResultV11nationalitySSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String MRZResult::getPrimaryID() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID9MRZResultV07primaryB0SSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String MRZResult::getSecondaryID() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID9MRZResultV09secondaryB0SSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String MRZResult::getIssuerName() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID9MRZResultV10issuerNameSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String MRZResult::getNationalityName() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID9MRZResultV15nationalityNameSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK bool MRZResult::getVerified() const {
  return _impl::$s7BlinkID9MRZResultV8verifiedSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK DateResult<swift::String> MRZResult::getDateOfBirth() const {
  return _impl::_impl_DateResult<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID9MRZResultV11dateOfBirthAA10DateResultVySSGvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK DateResult<swift::String> MRZResult::getDateOfExpiry() const {
  return _impl::_impl_DateResult<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID9MRZResultV12dateOfExpiryAA10DateResultVySSGvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK MRZDocumentType MRZResult::getDocumentType() const {
  return _impl::_impl_MRZDocumentType::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID9MRZResultV12documentTypeAA011MRZDocumentE0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::String MRZResult::getSanitizedOpt1() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID9MRZResultV13sanitizedOpt1SSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String MRZResult::getSanitizedOpt2() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID9MRZResultV13sanitizedOpt2SSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String MRZResult::getSanitizedNationality() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID9MRZResultV20sanitizedNationalitySSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String MRZResult::getSanitizedIssuer() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID9MRZResultV15sanitizedIssuerSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String MRZResult::getSanitizedDocumentCode() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID9MRZResultV21sanitizedDocumentCodeSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String MRZResult::getSanitizedDocumentNumber() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID9MRZResultV23sanitizedDocumentNumberSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Int MemoryReserveError::getMinRequiredMemory() const {
  return _impl::$s7BlinkID18MemoryReserveErrorV011minRequiredC0Sivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK MemoryReserveError MemoryReserveError::init(swift::Int minRequiredMemory) {
  return _impl::_impl_MemoryReserveError::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID18MemoryReserveErrorV011minRequiredC0ACSi_tcfC(result, minRequiredMemory);
  });
  }
  SWIFT_INLINE_THUNK swift::String MissingBundle::getMessage() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID13MissingBundleV7messageSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK ModelLoadError ModelLoadError::_impl_missingFile::operator()() const {
    auto result = ModelLoadError::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID14ModelLoadErrorO11missingFileyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ModelLoadError::isMissingFile() const {
    return *this == ModelLoadError::missingFile;
  }
  SWIFT_INLINE_THUNK ModelLoadError ModelLoadError::_impl_invalidFile::operator()() const {
    auto result = ModelLoadError::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID14ModelLoadErrorO11invalidFileyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ModelLoadError::isInvalidFile() const {
    return *this == ModelLoadError::invalidFile;
  }
  SWIFT_INLINE_THUNK ModelLoadError ModelLoadError::_impl_invalidLicense::operator()() const {
    auto result = ModelLoadError::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID14ModelLoadErrorO14invalidLicenseyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ModelLoadError::isInvalidLicense() const {
    return *this == ModelLoadError::invalidLicense;
  }
  SWIFT_INLINE_THUNK  bool ModelLoadError::isUnknownDefault() const {
    return *this == ModelLoadError::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> ModelLoadError::getErrorDescription() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_uint64_t_8_16(result, _impl::$s7BlinkID14ModelLoadErrorO16errorDescriptionSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Int ModelLoadError::getHashValue() const {
  return _impl::$s7BlinkID14ModelLoadErrorO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK int32_t Point::getX() const {
  return _impl::$s7BlinkID5PointV1xs5Int32Vvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK int32_t Point::getY() const {
  return _impl::$s7BlinkID5PointV1ys5Int32Vvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_success::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ProcessingStatusO7successyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isSuccess() const {
    return *this == ProcessingStatus::success;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_detectionFailed::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ProcessingStatusO15detectionFailedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isDetectionFailed() const {
    return *this == ProcessingStatus::detectionFailed;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_imagePreprocessingFailed::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ProcessingStatusO24imagePreprocessingFailedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isImagePreprocessingFailed() const {
    return *this == ProcessingStatus::imagePreprocessingFailed;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_stabilityTestFailed::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ProcessingStatusO19stabilityTestFailedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isStabilityTestFailed() const {
    return *this == ProcessingStatus::stabilityTestFailed;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_scanningWrongSide::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ProcessingStatusO17scanningWrongSideyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isScanningWrongSide() const {
    return *this == ProcessingStatus::scanningWrongSide;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_fieldIdentificationFailed::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ProcessingStatusO25fieldIdentificationFailedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isFieldIdentificationFailed() const {
    return *this == ProcessingStatus::fieldIdentificationFailed;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_mandatoryFieldMissing::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ProcessingStatusO21mandatoryFieldMissingyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isMandatoryFieldMissing() const {
    return *this == ProcessingStatus::mandatoryFieldMissing;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_invalidCharactersFound::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ProcessingStatusO22invalidCharactersFoundyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isInvalidCharactersFound() const {
    return *this == ProcessingStatus::invalidCharactersFound;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_imageReturnFailed::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ProcessingStatusO17imageReturnFailedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isImageReturnFailed() const {
    return *this == ProcessingStatus::imageReturnFailed;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_barcodeRecognitionFailed::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ProcessingStatusO24barcodeRecognitionFailedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isBarcodeRecognitionFailed() const {
    return *this == ProcessingStatus::barcodeRecognitionFailed;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_mrzParsingFailed::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ProcessingStatusO16mrzParsingFailedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isMrzParsingFailed() const {
    return *this == ProcessingStatus::mrzParsingFailed;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_documentFiltered::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ProcessingStatusO16documentFilteredyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isDocumentFiltered() const {
    return *this == ProcessingStatus::documentFiltered;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_unsupportedDocument::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ProcessingStatusO19unsupportedDocumentyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isUnsupportedDocument() const {
    return *this == ProcessingStatus::unsupportedDocument;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_awaitingOtherSide::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ProcessingStatusO17awaitingOtherSideyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isAwaitingOtherSide() const {
    return *this == ProcessingStatus::awaitingOtherSide;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_notScanned::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ProcessingStatusO10notScannedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isNotScanned() const {
    return *this == ProcessingStatus::notScanned;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_barcodeDetectionFailed::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ProcessingStatusO22barcodeDetectionFailedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isBarcodeDetectionFailed() const {
    return *this == ProcessingStatus::barcodeDetectionFailed;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isUnknownDefault() const {
    return *this == ProcessingStatus::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<ProcessingStatus> ProcessingStatus::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<ProcessingStatus>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID16ProcessingStatusO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String ProcessingStatus::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID16ProcessingStatusO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK Point Quadrilateral::getUpperLeft() const {
  return _impl::_impl_Point::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID13QuadrilateralV9upperLeftAA5PointVvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK Point Quadrilateral::getUpperRight() const {
  return _impl::_impl_Point::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID13QuadrilateralV10upperRightAA5PointVvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK Point Quadrilateral::getLowerRight() const {
  return _impl::_impl_Point::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID13QuadrilateralV10lowerRightAA5PointVvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK Point Quadrilateral::getLowerLeft() const {
  return _impl::_impl_Point::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID13QuadrilateralV9lowerLeftAA5PointVvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK RecognitionMode RecognitionMode::_impl_none::operator()() const {
    auto result = RecognitionMode::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15RecognitionModeO4noneyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool RecognitionMode::isNone() const {
    return *this == RecognitionMode::none;
  }
  SWIFT_INLINE_THUNK RecognitionMode RecognitionMode::_impl_mrzId::operator()() const {
    auto result = RecognitionMode::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15RecognitionModeO5mrzIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool RecognitionMode::isMrzId() const {
    return *this == RecognitionMode::mrzId;
  }
  SWIFT_INLINE_THUNK RecognitionMode RecognitionMode::_impl_mrzVisa::operator()() const {
    auto result = RecognitionMode::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15RecognitionModeO7mrzVisayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool RecognitionMode::isMrzVisa() const {
    return *this == RecognitionMode::mrzVisa;
  }
  SWIFT_INLINE_THUNK RecognitionMode RecognitionMode::_impl_mrzPassport::operator()() const {
    auto result = RecognitionMode::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15RecognitionModeO11mrzPassportyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool RecognitionMode::isMrzPassport() const {
    return *this == RecognitionMode::mrzPassport;
  }
  SWIFT_INLINE_THUNK RecognitionMode RecognitionMode::_impl_photoId::operator()() const {
    auto result = RecognitionMode::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15RecognitionModeO7photoIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool RecognitionMode::isPhotoId() const {
    return *this == RecognitionMode::photoId;
  }
  SWIFT_INLINE_THUNK RecognitionMode RecognitionMode::_impl_fullRecognition::operator()() const {
    auto result = RecognitionMode::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15RecognitionModeO04fullC0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool RecognitionMode::isFullRecognition() const {
    return *this == RecognitionMode::fullRecognition;
  }
  SWIFT_INLINE_THUNK RecognitionMode RecognitionMode::_impl_barcodeId::operator()() const {
    auto result = RecognitionMode::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15RecognitionModeO9barcodeIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool RecognitionMode::isBarcodeId() const {
    return *this == RecognitionMode::barcodeId;
  }
  SWIFT_INLINE_THUNK  bool RecognitionMode::isUnknownDefault() const {
    return *this == RecognitionMode::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<RecognitionMode> RecognitionMode::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<RecognitionMode>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID15RecognitionModeO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String RecognitionMode::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID15RecognitionModeO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK bool RecognitionModeFilter::getEnableMrzId() const {
  return _impl::$s7BlinkID21RecognitionModeFilterV11enableMrzIdSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void RecognitionModeFilter::setEnableMrzId(bool value) {
  _impl::$s7BlinkID21RecognitionModeFilterV11enableMrzIdSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool RecognitionModeFilter::getEnableMrzVisa() const {
  return _impl::$s7BlinkID21RecognitionModeFilterV13enableMrzVisaSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void RecognitionModeFilter::setEnableMrzVisa(bool value) {
  _impl::$s7BlinkID21RecognitionModeFilterV13enableMrzVisaSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool RecognitionModeFilter::getEnableMrzPassport() const {
  return _impl::$s7BlinkID21RecognitionModeFilterV17enableMrzPassportSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void RecognitionModeFilter::setEnableMrzPassport(bool value) {
  _impl::$s7BlinkID21RecognitionModeFilterV17enableMrzPassportSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool RecognitionModeFilter::getEnablePhotoId() const {
  return _impl::$s7BlinkID21RecognitionModeFilterV13enablePhotoIdSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void RecognitionModeFilter::setEnablePhotoId(bool value) {
  _impl::$s7BlinkID21RecognitionModeFilterV13enablePhotoIdSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool RecognitionModeFilter::getEnableBarcodeId() const {
  return _impl::$s7BlinkID21RecognitionModeFilterV15enableBarcodeIdSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void RecognitionModeFilter::setEnableBarcodeId(bool value) {
  _impl::$s7BlinkID21RecognitionModeFilterV15enableBarcodeIdSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool RecognitionModeFilter::getEnableFullDocumentRecognition() const {
  return _impl::$s7BlinkID21RecognitionModeFilterV018enableFullDocumentC0Sbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void RecognitionModeFilter::setEnableFullDocumentRecognition(bool value) {
  _impl::$s7BlinkID21RecognitionModeFilterV018enableFullDocumentC0Sbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK RecognitionModeFilter RecognitionModeFilter::init(bool enableMrzId, bool enableMrzVisa, bool enableMrzPassport, bool enablePhotoId, bool enableBarcodeId, bool enableFullDocumentRecognition) {
  return _impl::_impl_RecognitionModeFilter::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID21RecognitionModeFilterV11enableMrzId0fG4Visa0fG8Passport0f5PhotoH00f7BarcodeH00f12FullDocumentC0ACSb_S5btcfC(result, enableMrzId, enableMrzVisa, enableMrzPassport, enablePhotoId, enableBarcodeId, enableFullDocumentRecognition);
  });
  }
  SWIFT_INLINE_THUNK Region Region::_impl_none::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO4noneyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNone() const {
    return *this == Region::none;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_alabama::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7alabamayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isAlabama() const {
    return *this == Region::alabama;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_alaska::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO6alaskayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isAlaska() const {
    return *this == Region::alaska;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_alberta::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7albertayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isAlberta() const {
    return *this == Region::alberta;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_arizona::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7arizonayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isArizona() const {
    return *this == Region::arizona;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_arkansas::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8arkansasyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isArkansas() const {
    return *this == Region::arkansas;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_australianCapitalTerritory::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO26australianCapitalTerritoryyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isAustralianCapitalTerritory() const {
    return *this == Region::australianCapitalTerritory;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_britishColumbia::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO15britishColumbiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isBritishColumbia() const {
    return *this == Region::britishColumbia;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_california::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO10californiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isCalifornia() const {
    return *this == Region::california;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_colorado::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8coloradoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isColorado() const {
    return *this == Region::colorado;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_connecticut::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO11connecticutyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isConnecticut() const {
    return *this == Region::connecticut;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_delaware::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8delawareyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isDelaware() const {
    return *this == Region::delaware;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_districtOfColumbia::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO18districtOfColumbiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isDistrictOfColumbia() const {
    return *this == Region::districtOfColumbia;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_florida::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7floridayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isFlorida() const {
    return *this == Region::florida;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_georgia::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7georgiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isGeorgia() const {
    return *this == Region::georgia;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_hawaii::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO6hawaiiyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isHawaii() const {
    return *this == Region::hawaii;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_idaho::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO5idahoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isIdaho() const {
    return *this == Region::idaho;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_illinois::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8illinoisyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isIllinois() const {
    return *this == Region::illinois;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_indiana::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7indianayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isIndiana() const {
    return *this == Region::indiana;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_iowa::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO4iowayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isIowa() const {
    return *this == Region::iowa;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_kansas::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO6kansasyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isKansas() const {
    return *this == Region::kansas;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_kentucky::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8kentuckyyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isKentucky() const {
    return *this == Region::kentucky;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_louisiana::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO9louisianayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isLouisiana() const {
    return *this == Region::louisiana;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_maine::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO5maineyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMaine() const {
    return *this == Region::maine;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_manitoba::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8manitobayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isManitoba() const {
    return *this == Region::manitoba;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_maryland::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8marylandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMaryland() const {
    return *this == Region::maryland;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_massachusetts::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO13massachusettsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMassachusetts() const {
    return *this == Region::massachusetts;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_michigan::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8michiganyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMichigan() const {
    return *this == Region::michigan;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_minnesota::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO9minnesotayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMinnesota() const {
    return *this == Region::minnesota;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_mississippi::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO11mississippiyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMississippi() const {
    return *this == Region::mississippi;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_missouri::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8missouriyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMissouri() const {
    return *this == Region::missouri;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_montana::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7montanayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMontana() const {
    return *this == Region::montana;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_nebraska::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8nebraskayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNebraska() const {
    return *this == Region::nebraska;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_nevada::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO6nevadayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNevada() const {
    return *this == Region::nevada;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_newBrunswick::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO12newBrunswickyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNewBrunswick() const {
    return *this == Region::newBrunswick;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_newHampshire::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO12newHampshireyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNewHampshire() const {
    return *this == Region::newHampshire;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_newJersey::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO9newJerseyyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNewJersey() const {
    return *this == Region::newJersey;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_newMexico::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO9newMexicoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNewMexico() const {
    return *this == Region::newMexico;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_newSouthWales::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO13newSouthWalesyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNewSouthWales() const {
    return *this == Region::newSouthWales;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_newYork::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7newYorkyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNewYork() const {
    return *this == Region::newYork;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_northernTerritory::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO17northernTerritoryyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNorthernTerritory() const {
    return *this == Region::northernTerritory;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_northCarolina::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO13northCarolinayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNorthCarolina() const {
    return *this == Region::northCarolina;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_northDakota::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO11northDakotayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNorthDakota() const {
    return *this == Region::northDakota;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_novaScotia::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO10novaScotiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNovaScotia() const {
    return *this == Region::novaScotia;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_ohio::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO4ohioyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isOhio() const {
    return *this == Region::ohio;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_oklahoma::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8oklahomayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isOklahoma() const {
    return *this == Region::oklahoma;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_ontario::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7ontarioyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isOntario() const {
    return *this == Region::ontario;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_oregon::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO6oregonyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isOregon() const {
    return *this == Region::oregon;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_pennsylvania::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO12pennsylvaniayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isPennsylvania() const {
    return *this == Region::pennsylvania;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_quebec::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO6quebecyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isQuebec() const {
    return *this == Region::quebec;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_queensland::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO10queenslandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isQueensland() const {
    return *this == Region::queensland;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_rhodeIsland::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO11rhodeIslandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isRhodeIsland() const {
    return *this == Region::rhodeIsland;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_saskatchewan::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO12saskatchewanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isSaskatchewan() const {
    return *this == Region::saskatchewan;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_southAustralia::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO14southAustraliayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isSouthAustralia() const {
    return *this == Region::southAustralia;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_southCarolina::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO13southCarolinayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isSouthCarolina() const {
    return *this == Region::southCarolina;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_southDakota::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO11southDakotayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isSouthDakota() const {
    return *this == Region::southDakota;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_tasmania::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8tasmaniayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isTasmania() const {
    return *this == Region::tasmania;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_tennessee::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO9tennesseeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isTennessee() const {
    return *this == Region::tennessee;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_texas::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO5texasyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isTexas() const {
    return *this == Region::texas;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_utah::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO4utahyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isUtah() const {
    return *this == Region::utah;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_vermont::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7vermontyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isVermont() const {
    return *this == Region::vermont;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_victoria::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8victoriayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isVictoria() const {
    return *this == Region::victoria;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_virginia::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8virginiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isVirginia() const {
    return *this == Region::virginia;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_washington::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO10washingtonyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isWashington() const {
    return *this == Region::washington;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_westernAustralia::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO16westernAustraliayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isWesternAustralia() const {
    return *this == Region::westernAustralia;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_westVirginia::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO12westVirginiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isWestVirginia() const {
    return *this == Region::westVirginia;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_wisconsin::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO9wisconsinyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isWisconsin() const {
    return *this == Region::wisconsin;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_wyoming::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7wyomingyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isWyoming() const {
    return *this == Region::wyoming;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_yukon::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO5yukonyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isYukon() const {
    return *this == Region::yukon;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_ciudadDeMexico::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO14ciudadDeMexicoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isCiudadDeMexico() const {
    return *this == Region::ciudadDeMexico;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_jalisco::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7jaliscoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isJalisco() const {
    return *this == Region::jalisco;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_newfoundlandAndLabrador::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO23newfoundlandAndLabradoryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNewfoundlandAndLabrador() const {
    return *this == Region::newfoundlandAndLabrador;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_nuevoLeon::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO9nuevoLeonyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNuevoLeon() const {
    return *this == Region::nuevoLeon;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_bajaCalifornia::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO14bajaCaliforniayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isBajaCalifornia() const {
    return *this == Region::bajaCalifornia;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_chihuahua::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO9chihuahuayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isChihuahua() const {
    return *this == Region::chihuahua;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_guanajuato::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO10guanajuatoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isGuanajuato() const {
    return *this == Region::guanajuato;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_guerrero::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8guerreroyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isGuerrero() const {
    return *this == Region::guerrero;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_mexico::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO6mexicoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMexico() const {
    return *this == Region::mexico;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_michoacan::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO9michoacanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMichoacan() const {
    return *this == Region::michoacan;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_newYorkCity::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO11newYorkCityyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNewYorkCity() const {
    return *this == Region::newYorkCity;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_tamaulipas::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO10tamaulipasyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isTamaulipas() const {
    return *this == Region::tamaulipas;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_veracruz::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8veracruzyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isVeracruz() const {
    return *this == Region::veracruz;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_chiapas::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7chiapasyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isChiapas() const {
    return *this == Region::chiapas;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_coahuila::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8coahuilayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isCoahuila() const {
    return *this == Region::coahuila;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_durango::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7durangoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isDurango() const {
    return *this == Region::durango;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_guerreroCocula::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO14guerreroCoculayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isGuerreroCocula() const {
    return *this == Region::guerreroCocula;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_guerreroJuchitan::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO16guerreroJuchitanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isGuerreroJuchitan() const {
    return *this == Region::guerreroJuchitan;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_guerreroTepecoacuilco::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO21guerreroTepecoacuilcoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isGuerreroTepecoacuilco() const {
    return *this == Region::guerreroTepecoacuilco;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_guerreroTlacoapa::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO16guerreroTlacoapayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isGuerreroTlacoapa() const {
    return *this == Region::guerreroTlacoapa;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_gujarat::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7gujaratyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isGujarat() const {
    return *this == Region::gujarat;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_hidalgo::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7hidalgoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isHidalgo() const {
    return *this == Region::hidalgo;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_karnataka::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO9karnatakayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isKarnataka() const {
    return *this == Region::karnataka;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_kerala::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO6keralayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isKerala() const {
    return *this == Region::kerala;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_khyberPakhtunkhwa::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO17khyberPakhtunkhwayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isKhyberPakhtunkhwa() const {
    return *this == Region::khyberPakhtunkhwa;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_madhyaPradesh::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO13madhyaPradeshyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMadhyaPradesh() const {
    return *this == Region::madhyaPradesh;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_maharashtra::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO11maharashtrayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMaharashtra() const {
    return *this == Region::maharashtra;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_morelos::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7morelosyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMorelos() const {
    return *this == Region::morelos;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_nayarit::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7nayarityA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNayarit() const {
    return *this == Region::nayarit;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_oaxaca::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO6oaxacayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isOaxaca() const {
    return *this == Region::oaxaca;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_puebla::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO6pueblayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isPuebla() const {
    return *this == Region::puebla;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_punjab::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO6punjabyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isPunjab() const {
    return *this == Region::punjab;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_queretaro::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO9queretaroyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isQueretaro() const {
    return *this == Region::queretaro;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_sanLuisPotosi::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO13sanLuisPotosiyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isSanLuisPotosi() const {
    return *this == Region::sanLuisPotosi;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_sinaloa::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7sinaloayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isSinaloa() const {
    return *this == Region::sinaloa;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_sonora::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO6sonorayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isSonora() const {
    return *this == Region::sonora;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_tabasco::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7tabascoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isTabasco() const {
    return *this == Region::tabasco;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_tamilNadu::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO9tamilNaduyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isTamilNadu() const {
    return *this == Region::tamilNadu;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_yucatan::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7yucatanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isYucatan() const {
    return *this == Region::yucatan;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_zacatecas::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO9zacatecasyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isZacatecas() const {
    return *this == Region::zacatecas;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_aguascalientes::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO14aguascalientesyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isAguascalientes() const {
    return *this == Region::aguascalientes;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_bajaCaliforniaSur::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO17bajaCaliforniaSuryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isBajaCaliforniaSur() const {
    return *this == Region::bajaCaliforniaSur;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_campeche::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8campecheyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isCampeche() const {
    return *this == Region::campeche;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_colima::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO6colimayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isColima() const {
    return *this == Region::colima;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_quintanaRooBenitoJuarez::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO23quintanaRooBenitoJuarezyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isQuintanaRooBenitoJuarez() const {
    return *this == Region::quintanaRooBenitoJuarez;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_quintanaRoo::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO11quintanaRooyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isQuintanaRoo() const {
    return *this == Region::quintanaRoo;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_quintanaRooSolidaridad::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO22quintanaRooSolidaridadyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isQuintanaRooSolidaridad() const {
    return *this == Region::quintanaRooSolidaridad;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_tlaxcala::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8tlaxcalayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isTlaxcala() const {
    return *this == Region::tlaxcala;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_quintanaRooCozumel::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO18quintanaRooCozumelyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isQuintanaRooCozumel() const {
    return *this == Region::quintanaRooCozumel;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_saoPaolo::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8saoPaoloyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isSaoPaolo() const {
    return *this == Region::saoPaolo;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_rioDeJaneiro::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO12rioDeJaneiroyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isRioDeJaneiro() const {
    return *this == Region::rioDeJaneiro;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_rioGrandeDoSul::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO14rioGrandeDoSulyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isRioGrandeDoSul() const {
    return *this == Region::rioGrandeDoSul;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_northwestTerritories::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO20northwestTerritoriesyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNorthwestTerritories() const {
    return *this == Region::northwestTerritories;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_nunavut::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7nunavutyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNunavut() const {
    return *this == Region::nunavut;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_princeEdwardIsland::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO18princeEdwardIslandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isPrinceEdwardIsland() const {
    return *this == Region::princeEdwardIsland;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_distritoFederal::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO15distritoFederalyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isDistritoFederal() const {
    return *this == Region::distritoFederal;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_maranhao::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8maranhaoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMaranhao() const {
    return *this == Region::maranhao;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_matoGrosso::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO10matoGrossoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMatoGrosso() const {
    return *this == Region::matoGrosso;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_minasGerais::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO11minasGeraisyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMinasGerais() const {
    return *this == Region::minasGerais;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_para::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO4parayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isPara() const {
    return *this == Region::para;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_parana::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO6paranayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isParana() const {
    return *this == Region::parana;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_pernambuco::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO10pernambucoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isPernambuco() const {
    return *this == Region::pernambuco;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_santaCatarina::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO13santaCatarinayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isSantaCatarina() const {
    return *this == Region::santaCatarina;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_andhraPradesh::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO13andhraPradeshyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isAndhraPradesh() const {
    return *this == Region::andhraPradesh;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_ceara::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO5cearayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isCeara() const {
    return *this == Region::ceara;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_goias::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO5goiasyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isGoias() const {
    return *this == Region::goias;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_guerreroAcapulcoDeJuarez::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO24guerreroAcapulcoDeJuarezyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isGuerreroAcapulcoDeJuarez() const {
    return *this == Region::guerreroAcapulcoDeJuarez;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_haryana::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7haryanayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isHaryana() const {
    return *this == Region::haryana;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_sergipe::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7sergipeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isSergipe() const {
    return *this == Region::sergipe;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_alagoas::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7alagoasyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isAlagoas() const {
    return *this == Region::alagoas;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_bangsamoro::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO10bangsamoroyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isBangsamoro() const {
    return *this == Region::bangsamoro;
  }
  SWIFT_INLINE_THUNK  bool Region::isUnknownDefault() const {
    return *this == Region::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<Region> Region::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<Region>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID6RegionO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String Region::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID6RegionO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK float RegionOfInterest::getX() const {
  return _impl::$s7BlinkID16RegionOfInterestV1xSfvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK float RegionOfInterest::getY() const {
  return _impl::$s7BlinkID16RegionOfInterestV1ySfvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK float RegionOfInterest::getWidth() const {
  return _impl::$s7BlinkID16RegionOfInterestV5widthSfvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK float RegionOfInterest::getHeight() const {
  return _impl::$s7BlinkID16RegionOfInterestV6heightSfvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK RegionOfInterest RegionOfInterest::init(float x, float y, float width, float height) {
  return _impl::_impl_RegionOfInterest::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID16RegionOfInterestV1x1y5width6heightACSf_S3ftcfC(result, x, y, width, height);
  });
  }
  SWIFT_INLINE_THUNK swift::String ResourceLoadError::getName() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID17ResourceLoadErrorV4nameSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK ModelLoadError ResourceLoadError::getError() const {
  return _impl::_impl_ModelLoadError::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID17ResourceLoadErrorV5errorAA05ModeldE0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK ResourcesError ResourcesError::_impl_corruptedAssets::operator()(const swift::String& val) const {
    auto result = ResourcesError::_make();
    alignas(swift::String) unsigned char buffer[sizeof(swift::String)];
    auto *valCopy = new(buffer) swift::String(val);
    swift::_impl::implClassFor<swift::String>::type::initializeWithTake(result._getOpaquePointer(), swift::_impl::implClassFor<swift::String>::type::getOpaquePointer(*valCopy));
    result._destructiveInjectEnumTag(_impl::$s7BlinkID14ResourcesErrorO15corruptedAssetsyACSScACmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ResourcesError::isCorruptedAssets() const {
    return *this == ResourcesError::corruptedAssets;
  }
  SWIFT_INLINE_THUNK swift::String ResourcesError::getCorruptedAssets() const {
    if (!isCorruptedAssets()) abort();
    alignas(ResourcesError) unsigned char buffer[sizeof(ResourcesError)];
    auto *thisCopy = new(buffer) ResourcesError(*this);
    char * _Nonnull payloadFromDestruction = thisCopy->_destructiveProjectEnumData();
    return swift::_impl::implClassFor<swift::String>::type::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
      swift::_impl::implClassFor<swift::String>::type::initializeWithTake(result, payloadFromDestruction);
    });
  }
  SWIFT_INLINE_THUNK ResourcesError ResourcesError::_impl_resourceDownload::operator()(const swift::String& val) const {
    auto result = ResourcesError::_make();
    alignas(swift::String) unsigned char buffer[sizeof(swift::String)];
    auto *valCopy = new(buffer) swift::String(val);
    swift::_impl::implClassFor<swift::String>::type::initializeWithTake(result._getOpaquePointer(), swift::_impl::implClassFor<swift::String>::type::getOpaquePointer(*valCopy));
    result._destructiveInjectEnumTag(_impl::$s7BlinkID14ResourcesErrorO16resourceDownloadyACSScACmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ResourcesError::isResourceDownload() const {
    return *this == ResourcesError::resourceDownload;
  }
  SWIFT_INLINE_THUNK swift::String ResourcesError::getResourceDownload() const {
    if (!isResourceDownload()) abort();
    alignas(ResourcesError) unsigned char buffer[sizeof(ResourcesError)];
    auto *thisCopy = new(buffer) ResourcesError(*this);
    char * _Nonnull payloadFromDestruction = thisCopy->_destructiveProjectEnumData();
    return swift::_impl::implClassFor<swift::String>::type::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
      swift::_impl::implClassFor<swift::String>::type::initializeWithTake(result, payloadFromDestruction);
    });
  }
  SWIFT_INLINE_THUNK ResourcesError ResourcesError::_impl_invalidBundle::operator()(const swift::String& val) const {
    auto result = ResourcesError::_make();
    alignas(swift::String) unsigned char buffer[sizeof(swift::String)];
    auto *valCopy = new(buffer) swift::String(val);
    swift::_impl::implClassFor<swift::String>::type::initializeWithTake(result._getOpaquePointer(), swift::_impl::implClassFor<swift::String>::type::getOpaquePointer(*valCopy));
    result._destructiveInjectEnumTag(_impl::$s7BlinkID14ResourcesErrorO13invalidBundleyACSScACmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ResourcesError::isInvalidBundle() const {
    return *this == ResourcesError::invalidBundle;
  }
  SWIFT_INLINE_THUNK swift::String ResourcesError::getInvalidBundle() const {
    if (!isInvalidBundle()) abort();
    alignas(ResourcesError) unsigned char buffer[sizeof(ResourcesError)];
    auto *thisCopy = new(buffer) ResourcesError(*this);
    char * _Nonnull payloadFromDestruction = thisCopy->_destructiveProjectEnumData();
    return swift::_impl::implClassFor<swift::String>::type::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
      swift::_impl::implClassFor<swift::String>::type::initializeWithTake(result, payloadFromDestruction);
    });
  }
  SWIFT_INLINE_THUNK  bool ResourcesError::isUnknownDefault() const {
    return *this == ResourcesError::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> ResourcesError::getErrorDescription() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_uint64_t_8_16(result, _impl::$s7BlinkID14ResourcesErrorO16errorDescriptionSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK SDKInitError SDKInitError::_impl_resourceLoad::operator()(const ResourceLoadError& val) const {
    auto result = SDKInitError::_make();
    alignas(ResourceLoadError) unsigned char buffer[sizeof(ResourceLoadError)];
    auto *valCopy = new(buffer) ResourceLoadError(val);
    swift::_impl::implClassFor<ResourceLoadError>::type::initializeWithTake(result._getOpaquePointer(), swift::_impl::implClassFor<ResourceLoadError>::type::getOpaquePointer(*valCopy));
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12SDKInitErrorO12resourceLoadyAcA08ResourcefD0VcACmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool SDKInitError::isResourceLoad() const {
    return *this == SDKInitError::resourceLoad;
  }
  SWIFT_INLINE_THUNK ResourceLoadError SDKInitError::getResourceLoad() const {
    if (!isResourceLoad()) abort();
    alignas(SDKInitError) unsigned char buffer[sizeof(SDKInitError)];
    auto *thisCopy = new(buffer) SDKInitError(*this);
    char * _Nonnull payloadFromDestruction = thisCopy->_destructiveProjectEnumData();
    return swift::_impl::implClassFor<ResourceLoadError>::type::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
      swift::_impl::implClassFor<ResourceLoadError>::type::initializeWithTake(result, payloadFromDestruction);
    });
  }
  SWIFT_INLINE_THUNK SDKInitError SDKInitError::_impl_memoryReserve::operator()(const MemoryReserveError& val) const {
    auto result = SDKInitError::_make();
    alignas(MemoryReserveError) unsigned char buffer[sizeof(MemoryReserveError)];
    auto *valCopy = new(buffer) MemoryReserveError(val);
    swift::_impl::implClassFor<MemoryReserveError>::type::initializeWithTake(result._getOpaquePointer(), swift::_impl::implClassFor<MemoryReserveError>::type::getOpaquePointer(*valCopy));
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12SDKInitErrorO13memoryReserveyAcA06MemoryfD0VcACmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool SDKInitError::isMemoryReserve() const {
    return *this == SDKInitError::memoryReserve;
  }
  SWIFT_INLINE_THUNK MemoryReserveError SDKInitError::getMemoryReserve() const {
    if (!isMemoryReserve()) abort();
    alignas(SDKInitError) unsigned char buffer[sizeof(SDKInitError)];
    auto *thisCopy = new(buffer) SDKInitError(*this);
    char * _Nonnull payloadFromDestruction = thisCopy->_destructiveProjectEnumData();
    return swift::_impl::implClassFor<MemoryReserveError>::type::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
      swift::_impl::implClassFor<MemoryReserveError>::type::initializeWithTake(result, payloadFromDestruction);
    });
  }
  SWIFT_INLINE_THUNK SDKInitError SDKInitError::_impl_licenseError::operator()() const {
    auto result = SDKInitError::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12SDKInitErrorO07licenseD0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool SDKInitError::isLicenseError() const {
    return *this == SDKInitError::licenseError;
  }
  SWIFT_INLINE_THUNK  bool SDKInitError::isUnknownDefault() const {
    return *this == SDKInitError::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> SDKInitError::getErrorDescription() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_uint64_t_8_16(result, _impl::$s7BlinkID12SDKInitErrorO16errorDescriptionSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK ScanningMode ScanningMode::_impl_single::operator()() const {
    auto result = ScanningMode::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12ScanningModeO6singleyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ScanningMode::isSingle() const {
    return *this == ScanningMode::single;
  }
  SWIFT_INLINE_THUNK ScanningMode ScanningMode::_impl_automatic::operator()() const {
    auto result = ScanningMode::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12ScanningModeO9automaticyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ScanningMode::isAutomatic() const {
    return *this == ScanningMode::automatic;
  }
  SWIFT_INLINE_THUNK  bool ScanningMode::isUnknownDefault() const {
    return *this == ScanningMode::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int ScanningMode::getHashValue() const {
  return _impl::$s7BlinkID12ScanningModeO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK DetectionLevel ScanningSettings::getBlurDetectionLevel() const {
  return _impl::_impl_DetectionLevel::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID16ScanningSettingsV18blurDetectionLevelAA0fG0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setBlurDetectionLevel(const DetectionLevel& value) {
  alignas(alignof(DetectionLevel)) char copyBuffer_consumedParamCopy_value[sizeof(DetectionLevel)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) DetectionLevel(value));
  swift::_impl::ConsumedValueStorageDestroyer<DetectionLevel> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID16ScanningSettingsV18blurDetectionLevelAA0fG0Ovs(_impl::_impl_DetectionLevel::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool ScanningSettings::getSkipImagesWithBlur() const {
  return _impl::$s7BlinkID16ScanningSettingsV18skipImagesWithBlurSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setSkipImagesWithBlur(bool value) {
  _impl::$s7BlinkID16ScanningSettingsV18skipImagesWithBlurSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK DetectionLevel ScanningSettings::getGlareDetectionLevel() const {
  return _impl::_impl_DetectionLevel::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID16ScanningSettingsV19glareDetectionLevelAA0fG0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setGlareDetectionLevel(const DetectionLevel& value) {
  alignas(alignof(DetectionLevel)) char copyBuffer_consumedParamCopy_value[sizeof(DetectionLevel)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) DetectionLevel(value));
  swift::_impl::ConsumedValueStorageDestroyer<DetectionLevel> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID16ScanningSettingsV19glareDetectionLevelAA0fG0Ovs(_impl::_impl_DetectionLevel::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool ScanningSettings::getSkipImagesWithGlare() const {
  return _impl::$s7BlinkID16ScanningSettingsV19skipImagesWithGlareSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setSkipImagesWithGlare(bool value) {
  _impl::$s7BlinkID16ScanningSettingsV19skipImagesWithGlareSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK DetectionLevel ScanningSettings::getTiltDetectionLevel() const {
  return _impl::_impl_DetectionLevel::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID16ScanningSettingsV18tiltDetectionLevelAA0fG0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setTiltDetectionLevel(const DetectionLevel& value) {
  alignas(alignof(DetectionLevel)) char copyBuffer_consumedParamCopy_value[sizeof(DetectionLevel)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) DetectionLevel(value));
  swift::_impl::ConsumedValueStorageDestroyer<DetectionLevel> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID16ScanningSettingsV18tiltDetectionLevelAA0fG0Ovs(_impl::_impl_DetectionLevel::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool ScanningSettings::getSkipImagesWithInadequateLightingConditions() const {
  return _impl::$s7BlinkID16ScanningSettingsV42skipImagesWithInadequateLightingConditionsSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setSkipImagesWithInadequateLightingConditions(bool value) {
  _impl::$s7BlinkID16ScanningSettingsV42skipImagesWithInadequateLightingConditionsSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool ScanningSettings::getSkipImagesOccludedByHand() const {
  return _impl::$s7BlinkID16ScanningSettingsV24skipImagesOccludedByHandSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setSkipImagesOccludedByHand(bool value) {
  _impl::$s7BlinkID16ScanningSettingsV24skipImagesOccludedByHandSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool ScanningSettings::getCombineResultsFromMultipleInputImages() const {
  return _impl::$s7BlinkID16ScanningSettingsV37combineResultsFromMultipleInputImagesSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setCombineResultsFromMultipleInputImages(bool value) {
  _impl::$s7BlinkID16ScanningSettingsV37combineResultsFromMultipleInputImagesSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool ScanningSettings::getEnableBarcodeScanOnly() const {
  return _impl::$s7BlinkID16ScanningSettingsV21enableBarcodeScanOnlySbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setEnableBarcodeScanOnly(bool value) {
  _impl::$s7BlinkID16ScanningSettingsV21enableBarcodeScanOnlySbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::Array<DocumentRules>> ScanningSettings::getCustomDocumentRules() const {
  return swift::_impl::_impl_Optional<swift::Array<DocumentRules>>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8(result, _impl::$s7BlinkID16ScanningSettingsV19customDocumentRulesSayAA0fG0VGSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setCustomDocumentRules(const swift::Optional<swift::Array<DocumentRules>>& value) {
  alignas(alignof(swift::Optional<swift::Array<DocumentRules>>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<swift::Array<DocumentRules>>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<swift::Array<DocumentRules>>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<swift::Array<DocumentRules>>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID16ScanningSettingsV19customDocumentRulesSayAA0fG0VGSgvs(_impl::swift_interop_passDirect_BlinkID_uint64_t_0_8(swift::_impl::_impl_Optional<swift::Array<DocumentRules>>::getOpaquePointer(consumedParamCopy_value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK AnonymizationMode ScanningSettings::getAnonymizationMode() const {
  return _impl::_impl_AnonymizationMode::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID16ScanningSettingsV17anonymizationModeAA013AnonymizationF0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setAnonymizationMode(const AnonymizationMode& value) {
  alignas(alignof(AnonymizationMode)) char copyBuffer_consumedParamCopy_value[sizeof(AnonymizationMode)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) AnonymizationMode(value));
  swift::_impl::ConsumedValueStorageDestroyer<AnonymizationMode> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID16ScanningSettingsV17anonymizationModeAA013AnonymizationF0Ovs(_impl::_impl_AnonymizationMode::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::Array<DocumentAnonymizationSettings>> ScanningSettings::getCustomDocumentAnonymizationSettings() const {
  return swift::_impl::_impl_Optional<swift::Array<DocumentAnonymizationSettings>>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8(result, _impl::$s7BlinkID16ScanningSettingsV027customDocumentAnonymizationD0SayAA0fgD0VGSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setCustomDocumentAnonymizationSettings(const swift::Optional<swift::Array<DocumentAnonymizationSettings>>& value) {
  alignas(alignof(swift::Optional<swift::Array<DocumentAnonymizationSettings>>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<swift::Array<DocumentAnonymizationSettings>>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<swift::Array<DocumentAnonymizationSettings>>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<swift::Array<DocumentAnonymizationSettings>>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID16ScanningSettingsV027customDocumentAnonymizationD0SayAA0fgD0VGSgvs(_impl::swift_interop_passDirect_BlinkID_uint64_t_0_8(swift::_impl::_impl_Optional<swift::Array<DocumentAnonymizationSettings>>::getOpaquePointer(consumedParamCopy_value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool ScanningSettings::getReturnInputImages() const {
  return _impl::$s7BlinkID16ScanningSettingsV17returnInputImagesSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setReturnInputImages(bool value) {
  _impl::$s7BlinkID16ScanningSettingsV17returnInputImagesSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool ScanningSettings::getScanCroppedDocumentImage() const {
  return _impl::$s7BlinkID16ScanningSettingsV24scanCroppedDocumentImageSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setScanCroppedDocumentImage(bool value) {
  _impl::$s7BlinkID16ScanningSettingsV24scanCroppedDocumentImageSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK RecognitionModeFilter ScanningSettings::getRecognitionModeFilter() const {
  return _impl::_impl_RecognitionModeFilter::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID16ScanningSettingsV21recognitionModeFilterAA011RecognitionfG0Vvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setRecognitionModeFilter(const RecognitionModeFilter& value) {
  alignas(alignof(RecognitionModeFilter)) char copyBuffer_consumedParamCopy_value[sizeof(RecognitionModeFilter)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) RecognitionModeFilter(value));
  swift::_impl::ConsumedValueStorageDestroyer<RecognitionModeFilter> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID16ScanningSettingsV21recognitionModeFilterAA011RecognitionfG0Vvs(_impl::_impl_RecognitionModeFilter::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool ScanningSettings::getEnableCharacterValidation() const {
  return _impl::$s7BlinkID16ScanningSettingsV25enableCharacterValidationSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setEnableCharacterValidation(bool value) {
  _impl::$s7BlinkID16ScanningSettingsV25enableCharacterValidationSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK float ScanningSettings::getInputImageMargin() const {
  return _impl::$s7BlinkID16ScanningSettingsV16inputImageMarginSfvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setInputImageMargin(float value) {
  _impl::$s7BlinkID16ScanningSettingsV16inputImageMarginSfvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool ScanningSettings::getScanUnsupportedBack() const {
  return _impl::$s7BlinkID16ScanningSettingsV19scanUnsupportedBackSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setScanUnsupportedBack(bool value) {
  _impl::$s7BlinkID16ScanningSettingsV19scanUnsupportedBackSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool ScanningSettings::getAllowUncertainFrontSideScan() const {
  return _impl::$s7BlinkID16ScanningSettingsV27allowUncertainFrontSideScanSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setAllowUncertainFrontSideScan(bool value) {
  _impl::$s7BlinkID16ScanningSettingsV27allowUncertainFrontSideScanSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Int ScanningSettings::getMaxAllowedMismatchesPerField() const {
  return _impl::$s7BlinkID16ScanningSettingsV28maxAllowedMismatchesPerFieldSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setMaxAllowedMismatchesPerField(swift::Int value) {
  _impl::$s7BlinkID16ScanningSettingsV28maxAllowedMismatchesPerFieldSivs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool ScanningSettings::getScanPassportDataPageOnly() const {
  return _impl::$s7BlinkID16ScanningSettingsV24scanPassportDataPageOnlySbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setScanPassportDataPageOnly(bool value) {
  _impl::$s7BlinkID16ScanningSettingsV24scanPassportDataPageOnlySbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK CroppedImageSettings ScanningSettings::getCroppedImageSettings() const {
  return _impl::_impl_CroppedImageSettings::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID16ScanningSettingsV012croppedImageD0AA07CroppedfD0Vvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setCroppedImageSettings(const CroppedImageSettings& value) {
  alignas(alignof(CroppedImageSettings)) char copyBuffer_consumedParamCopy_value[sizeof(CroppedImageSettings)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) CroppedImageSettings(value));
  swift::_impl::ConsumedValueStorageDestroyer<CroppedImageSettings> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID16ScanningSettingsV012croppedImageD0AA07CroppedfD0Vvs(_impl::_impl_CroppedImageSettings::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK ScanningSettings ScanningSettings::init(const DetectionLevel& blurDetectionLevel, bool skipImagesWithBlur, const DetectionLevel& glareDetectionLevel, bool skipImagesWithGlare, const DetectionLevel& tiltDetectionLevel, bool skipImagesWithInadequateLightingConditions, bool skipImagesOccludedByHand, bool combineResultsFromMultipleInputImages, bool enableBarcodeScanOnly, const swift::Optional<swift::Array<DocumentRules>>& customDocumentRules, const AnonymizationMode& anonymizationMode, const swift::Optional<swift::Array<DocumentAnonymizationSettings>>& customDocumentAnonymizationSettings, bool returnInputImages, bool scanCroppedDocumentImage, bool enableCharacterValidation, const RecognitionModeFilter& recognitionModeFilter, float inputImageMargin, bool scanUnsupportedBack, bool allowUncertainFrontSideScan, swift::Int maxAllowedMismatchesPerField, bool scanPassportDataPageOnly, const CroppedImageSettings& croppedImageSettings) {
  alignas(alignof(DetectionLevel)) char copyBuffer_consumedParamCopy_blurDetectionLevel[sizeof(DetectionLevel)];
  auto &consumedParamCopy_blurDetectionLevel = *(new(copyBuffer_consumedParamCopy_blurDetectionLevel) DetectionLevel(blurDetectionLevel));
  swift::_impl::ConsumedValueStorageDestroyer<DetectionLevel> storageGuard_consumedParamCopy_blurDetectionLevel(consumedParamCopy_blurDetectionLevel);
  alignas(alignof(DetectionLevel)) char copyBuffer_consumedParamCopy_glareDetectionLevel[sizeof(DetectionLevel)];
  auto &consumedParamCopy_glareDetectionLevel = *(new(copyBuffer_consumedParamCopy_glareDetectionLevel) DetectionLevel(glareDetectionLevel));
  swift::_impl::ConsumedValueStorageDestroyer<DetectionLevel> storageGuard_consumedParamCopy_glareDetectionLevel(consumedParamCopy_glareDetectionLevel);
  alignas(alignof(DetectionLevel)) char copyBuffer_consumedParamCopy_tiltDetectionLevel[sizeof(DetectionLevel)];
  auto &consumedParamCopy_tiltDetectionLevel = *(new(copyBuffer_consumedParamCopy_tiltDetectionLevel) DetectionLevel(tiltDetectionLevel));
  swift::_impl::ConsumedValueStorageDestroyer<DetectionLevel> storageGuard_consumedParamCopy_tiltDetectionLevel(consumedParamCopy_tiltDetectionLevel);
  alignas(alignof(swift::Optional<swift::Array<DocumentRules>>)) char copyBuffer_consumedParamCopy_customDocumentRules[sizeof(swift::Optional<swift::Array<DocumentRules>>)];
  auto &consumedParamCopy_customDocumentRules = *(new(copyBuffer_consumedParamCopy_customDocumentRules) swift::Optional<swift::Array<DocumentRules>>(customDocumentRules));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<swift::Array<DocumentRules>>> storageGuard_consumedParamCopy_customDocumentRules(consumedParamCopy_customDocumentRules);
  alignas(alignof(AnonymizationMode)) char copyBuffer_consumedParamCopy_anonymizationMode[sizeof(AnonymizationMode)];
  auto &consumedParamCopy_anonymizationMode = *(new(copyBuffer_consumedParamCopy_anonymizationMode) AnonymizationMode(anonymizationMode));
  swift::_impl::ConsumedValueStorageDestroyer<AnonymizationMode> storageGuard_consumedParamCopy_anonymizationMode(consumedParamCopy_anonymizationMode);
  alignas(alignof(swift::Optional<swift::Array<DocumentAnonymizationSettings>>)) char copyBuffer_consumedParamCopy_customDocumentAnonymizationSettings[sizeof(swift::Optional<swift::Array<DocumentAnonymizationSettings>>)];
  auto &consumedParamCopy_customDocumentAnonymizationSettings = *(new(copyBuffer_consumedParamCopy_customDocumentAnonymizationSettings) swift::Optional<swift::Array<DocumentAnonymizationSettings>>(customDocumentAnonymizationSettings));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<swift::Array<DocumentAnonymizationSettings>>> storageGuard_consumedParamCopy_customDocumentAnonymizationSettings(consumedParamCopy_customDocumentAnonymizationSettings);
  alignas(alignof(RecognitionModeFilter)) char copyBuffer_consumedParamCopy_recognitionModeFilter[sizeof(RecognitionModeFilter)];
  auto &consumedParamCopy_recognitionModeFilter = *(new(copyBuffer_consumedParamCopy_recognitionModeFilter) RecognitionModeFilter(recognitionModeFilter));
  swift::_impl::ConsumedValueStorageDestroyer<RecognitionModeFilter> storageGuard_consumedParamCopy_recognitionModeFilter(consumedParamCopy_recognitionModeFilter);
  alignas(alignof(CroppedImageSettings)) char copyBuffer_consumedParamCopy_croppedImageSettings[sizeof(CroppedImageSettings)];
  auto &consumedParamCopy_croppedImageSettings = *(new(copyBuffer_consumedParamCopy_croppedImageSettings) CroppedImageSettings(croppedImageSettings));
  swift::_impl::ConsumedValueStorageDestroyer<CroppedImageSettings> storageGuard_consumedParamCopy_croppedImageSettings(consumedParamCopy_croppedImageSettings);
  return _impl::_impl_ScanningSettings::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID16ScanningSettingsV18blurDetectionLevel18skipImagesWithBlur05glarefG00hiJ5Glare04tiltfG00hiJ28InadequateLightingConditions0hI14OccludedByHand031combineResultsFromMultipleInputI021enableBarcodeScanOnly19customDocumentRules17anonymizationMode027customDocumentAnonymizationD006returnyI024scanCroppedDocumentImage0Z19CharacterValidation21recognitionModeFilter16inputImageMargin19scanUnsupportedBack27allowUncertainFrontSideScan28maxAllowedMismatchesPerField24scanPassportDataPageOnly012croppedImageD0AcA0fG0O_SbA_SbA_S4bSayAA13DocumentRulesVGSgAA17AnonymizationModeOSayAA021DocumentAnonymizationD0VGSgS3bAA21RecognitionModeFilterVSfS2bSiSbAA012CroppedImageD0VtcfC(result, _impl::_impl_DetectionLevel::getOpaquePointer(consumedParamCopy_blurDetectionLevel), skipImagesWithBlur, _impl::_impl_DetectionLevel::getOpaquePointer(consumedParamCopy_glareDetectionLevel), skipImagesWithGlare, _impl::_impl_DetectionLevel::getOpaquePointer(consumedParamCopy_tiltDetectionLevel), skipImagesWithInadequateLightingConditions, skipImagesOccludedByHand, combineResultsFromMultipleInputImages, enableBarcodeScanOnly, _impl::swift_interop_passDirect_BlinkID_uint64_t_0_8(swift::_impl::_impl_Optional<swift::Array<DocumentRules>>::getOpaquePointer(consumedParamCopy_customDocumentRules)), _impl::_impl_AnonymizationMode::getOpaquePointer(consumedParamCopy_anonymizationMode), _impl::swift_interop_passDirect_BlinkID_uint64_t_0_8(swift::_impl::_impl_Optional<swift::Array<DocumentAnonymizationSettings>>::getOpaquePointer(consumedParamCopy_customDocumentAnonymizationSettings)), returnInputImages, scanCroppedDocumentImage, enableCharacterValidation, _impl::_impl_RecognitionModeFilter::getOpaquePointer(consumedParamCopy_recognitionModeFilter), inputImageMargin, scanUnsupportedBack, allowUncertainFrontSideScan, maxAllowedMismatchesPerField, scanPassportDataPageOnly, _impl::_impl_CroppedImageSettings::getOpaquePointer(consumedParamCopy_croppedImageSettings));
  });
  }
  SWIFT_INLINE_THUNK ScanningSide ScanningSide::_impl_first::operator()() const {
    auto result = ScanningSide::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12ScanningSideO5firstyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ScanningSide::isFirst() const {
    return *this == ScanningSide::first;
  }
  SWIFT_INLINE_THUNK ScanningSide ScanningSide::_impl_second::operator()() const {
    auto result = ScanningSide::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12ScanningSideO6secondyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ScanningSide::isSecond() const {
    return *this == ScanningSide::second;
  }
  SWIFT_INLINE_THUNK  bool ScanningSide::isUnknownDefault() const {
    return *this == ScanningSide::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<ScanningSide> ScanningSide::init(swift::Int rawValue) {
  return swift::_impl::_impl_Optional<ScanningSide>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID12ScanningSideO8rawValueACSgSi_tcfC(result, rawValue);
  });
  }
  SWIFT_INLINE_THUNK swift::Int ScanningSide::getRawValue() const {
  return _impl::$s7BlinkID12ScanningSideO8rawValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK ScanningStatus ScanningStatus::_impl_scanningSideInProgress::operator()() const {
    auto result = ScanningStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID14ScanningStatusO22scanningSideInProgressyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ScanningStatus::isScanningSideInProgress() const {
    return *this == ScanningStatus::scanningSideInProgress;
  }
  SWIFT_INLINE_THUNK ScanningStatus ScanningStatus::_impl_scanningBarcodeInProgress::operator()() const {
    auto result = ScanningStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID14ScanningStatusO25scanningBarcodeInProgressyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ScanningStatus::isScanningBarcodeInProgress() const {
    return *this == ScanningStatus::scanningBarcodeInProgress;
  }
  SWIFT_INLINE_THUNK ScanningStatus ScanningStatus::_impl_sideScanned::operator()() const {
    auto result = ScanningStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID14ScanningStatusO11sideScannedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ScanningStatus::isSideScanned() const {
    return *this == ScanningStatus::sideScanned;
  }
  SWIFT_INLINE_THUNK ScanningStatus ScanningStatus::_impl_documentScanned::operator()() const {
    auto result = ScanningStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID14ScanningStatusO15documentScannedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ScanningStatus::isDocumentScanned() const {
    return *this == ScanningStatus::documentScanned;
  }
  SWIFT_INLINE_THUNK ScanningStatus ScanningStatus::_impl_cancelled::operator()() const {
    auto result = ScanningStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID14ScanningStatusO9cancelledyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ScanningStatus::isCancelled() const {
    return *this == ScanningStatus::cancelled;
  }
  SWIFT_INLINE_THUNK  bool ScanningStatus::isUnknownDefault() const {
    return *this == ScanningStatus::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int ScanningStatus::getHashValue() const {
  return _impl::$s7BlinkID14ScanningStatusO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK SessionError SessionError::_impl_processCallAfterDocumentScanned::operator()() const {
    auto result = SessionError::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12SessionErrorO31processCallAfterDocumentScannedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool SessionError::isProcessCallAfterDocumentScanned() const {
    return *this == SessionError::processCallAfterDocumentScanned;
  }
  SWIFT_INLINE_THUNK SessionError SessionError::_impl_resetCallAfterResultRetrieved::operator()() const {
    auto result = SessionError::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12SessionErrorO29resetCallAfterResultRetrievedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool SessionError::isResetCallAfterResultRetrieved() const {
    return *this == SessionError::resetCallAfterResultRetrieved;
  }
  SWIFT_INLINE_THUNK  bool SessionError::isUnknownDefault() const {
    return *this == SessionError::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int SessionError::getHashValue() const {
  return _impl::$s7BlinkID12SessionErrorO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<VIZResult> SingleSideScanningResult::getViz() const {
  return swift::_impl::_impl_Optional<VIZResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24SingleSideScanningResultV3vizAA9VIZResultVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void SingleSideScanningResult::setViz(const swift::Optional<VIZResult>& value) {
  alignas(alignof(swift::Optional<VIZResult>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<VIZResult>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<VIZResult>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<VIZResult>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID24SingleSideScanningResultV3vizAA9VIZResultVSgvs(swift::_impl::_impl_Optional<VIZResult>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<MRZResult> SingleSideScanningResult::getMrz() const {
  return swift::_impl::_impl_Optional<MRZResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24SingleSideScanningResultV3mrzAA9MRZResultVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void SingleSideScanningResult::setMrz(const swift::Optional<MRZResult>& value) {
  alignas(alignof(swift::Optional<MRZResult>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<MRZResult>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<MRZResult>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MRZResult>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID24SingleSideScanningResultV3mrzAA9MRZResultVSgvs(swift::_impl::_impl_Optional<MRZResult>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<BarcodeResult> SingleSideScanningResult::getBarcode() const {
  return swift::_impl::_impl_Optional<BarcodeResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24SingleSideScanningResultV7barcodeAA07BarcodeF0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void SingleSideScanningResult::setBarcode(const swift::Optional<BarcodeResult>& value) {
  alignas(alignof(swift::Optional<BarcodeResult>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<BarcodeResult>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<BarcodeResult>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<BarcodeResult>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID24SingleSideScanningResultV7barcodeAA07BarcodeF0VSgvs(swift::_impl::_impl_Optional<BarcodeResult>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<InputImageResult> SingleSideScanningResult::getInputImage() const {
  return swift::_impl::_impl_Optional<InputImageResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24SingleSideScanningResultV10inputImageAA05InputhF0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void SingleSideScanningResult::setInputImage(const swift::Optional<InputImageResult>& value) {
  alignas(alignof(swift::Optional<InputImageResult>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<InputImageResult>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<InputImageResult>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<InputImageResult>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID24SingleSideScanningResultV10inputImageAA05InputhF0VSgvs(swift::_impl::_impl_Optional<InputImageResult>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<InputImageResult> SingleSideScanningResult::getBarcodeInputImage() const {
  return swift::_impl::_impl_Optional<InputImageResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24SingleSideScanningResultV17barcodeInputImageAA0hiF0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void SingleSideScanningResult::setBarcodeInputImage(const swift::Optional<InputImageResult>& value) {
  alignas(alignof(swift::Optional<InputImageResult>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<InputImageResult>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<InputImageResult>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<InputImageResult>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID24SingleSideScanningResultV17barcodeInputImageAA0hiF0VSgvs(swift::_impl::_impl_Optional<InputImageResult>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<CroppedImageResult> SingleSideScanningResult::getDocumentImage() const {
  return swift::_impl::_impl_Optional<CroppedImageResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24SingleSideScanningResultV13documentImageAA07CroppedhF0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void SingleSideScanningResult::setDocumentImage(const swift::Optional<CroppedImageResult>& value) {
  alignas(alignof(swift::Optional<CroppedImageResult>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<CroppedImageResult>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<CroppedImageResult>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<CroppedImageResult>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID24SingleSideScanningResultV13documentImageAA07CroppedhF0VSgvs(swift::_impl::_impl_Optional<CroppedImageResult>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<DetailedCroppedImageResult> SingleSideScanningResult::getFaceImage() const {
  return swift::_impl::_impl_Optional<DetailedCroppedImageResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24SingleSideScanningResultV9faceImageAA015DetailedCroppedhF0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void SingleSideScanningResult::setFaceImage(const swift::Optional<DetailedCroppedImageResult>& value) {
  alignas(alignof(swift::Optional<DetailedCroppedImageResult>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<DetailedCroppedImageResult>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<DetailedCroppedImageResult>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<DetailedCroppedImageResult>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID24SingleSideScanningResultV9faceImageAA015DetailedCroppedhF0VSgvs(swift::_impl::_impl_Optional<DetailedCroppedImageResult>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<DetailedCroppedImageResult> SingleSideScanningResult::getSignatureImage() const {
  return swift::_impl::_impl_Optional<DetailedCroppedImageResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24SingleSideScanningResultV14signatureImageAA015DetailedCroppedhF0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void SingleSideScanningResult::setSignatureImage(const swift::Optional<DetailedCroppedImageResult>& value) {
  alignas(alignof(swift::Optional<DetailedCroppedImageResult>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<DetailedCroppedImageResult>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<DetailedCroppedImageResult>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<DetailedCroppedImageResult>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID24SingleSideScanningResultV14signatureImageAA015DetailedCroppedhF0VSgvs(swift::_impl::_impl_Optional<DetailedCroppedImageResult>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool VIZResult::getDateOfExpiryPermanent() const {
  return _impl::$s7BlinkID9VIZResultV21dateOfExpiryPermanentSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Array<DependentInfo> VIZResult::getDependentsInfo() const {
  return swift::_impl::_impl_Array<DependentInfo>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_void_ptr_0_8(result, _impl::$s7BlinkID9VIZResultV14dependentsInfoSayAA09DependentE0VGvg(_getOpaquePointer()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Optional<T_0_0> VehicleClassInfo<T_0_0>::getVehicleClass() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return swift::_impl::_impl_Optional<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID16VehicleClassInfoV07vehicleD0xSgvg(result, swift::TypeMetadataTrait<VehicleClassInfo<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Optional<T_0_0> VehicleClassInfo<T_0_0>::getLicenceType() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return swift::_impl::_impl_Optional<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID16VehicleClassInfoV11licenceTypexSgvg(result, swift::TypeMetadataTrait<VehicleClassInfo<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Optional<DateResult<T_0_0>> VehicleClassInfo<T_0_0>::getEffectiveDate() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return swift::_impl::_impl_Optional<DateResult<T_0_0>>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID16VehicleClassInfoV13effectiveDateAA0G6ResultVyxGSgvg(result, swift::TypeMetadataTrait<VehicleClassInfo<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Optional<DateResult<T_0_0>> VehicleClassInfo<T_0_0>::getExpiryDate() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return swift::_impl::_impl_Optional<DateResult<T_0_0>>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID16VehicleClassInfoV10expiryDateAA0G6ResultVyxGSgvg(result, swift::TypeMetadataTrait<VehicleClassInfo<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  }

// Unavailable in C++: Swift type alias 'DPI'.

class InputImageResultProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'InputImageResultProtocol' can not yet be represented in C++");

class ResourceDownloaderError { } SWIFT_UNAVAILABLE_MSG("enum 'ResourceDownloaderError' can not be represented in C++ as one of its cases has an associated value with type that can't be represented in C++");

class SdkSettings { } SWIFT_UNAVAILABLE_MSG("protocol 'SdkSettings' can not yet be represented in C++");

} // namespace BlinkID

#undef SWIFT_SYMBOL
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 6.0 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
#ifndef BLINKID_SWIFT_H
#define BLINKID_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="BlinkID",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)


#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
// Allow user to find the header using additional include paths
#if __has_include(<swiftToCxx/_SwiftCxxInteroperability.h>)
#include <swiftToCxx/_SwiftCxxInteroperability.h>
// Look for the C++ interop support header relative to clang's resource dir:
//  '<toolchain>/usr/lib/clang/<version>/include/../../../swift/swiftToCxx'.
#elif __has_include(<../../../swift/swiftToCxx/_SwiftCxxInteroperability.h>)
#include <../../../swift/swiftToCxx/_SwiftCxxInteroperability.h>
#elif __has_include(<../../../../../lib/swift/swiftToCxx/_SwiftCxxInteroperability.h>)
//  '<toolchain>/usr/local/lib/clang/<version>/include/../../../../../lib/swift/swiftToCxx'.
#include <../../../../../lib/swift/swiftToCxx/_SwiftCxxInteroperability.h>
#endif
#pragma clang diagnostic pop
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
#endif

#ifndef SWIFT_SWIFT_H
#define SWIFT_SWIFT_H
#ifdef SWIFT_SYMBOL
#undef SWIFT_SYMBOL
#endif
#define SWIFT_SYMBOL(usrValue) SWIFT_SYMBOL_MODULE_USR("swift", usrValue)
#ifndef SWIFT_CXX_INTEROP_HIDE_STL_OVERLAY
#include <string>
#endif
#include <new>
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"
#ifndef SWIFT_PRINTED_CORE
#define SWIFT_PRINTED_CORE
namespace swift SWIFT_PRIVATE_ATTR {

namespace _impl {

#ifdef __cplusplus
extern "C" {
#endif

// Swift type metadata response type.
struct MetadataResponseTy {
  void * _Null_unspecified _0;
  uint64_t _1;
};
// Swift type metadata request type.
typedef uint64_t MetadataRequestTy;

#if __cplusplus > 201402L
#  define SWIFT_NOEXCEPT_FUNCTION_PTR noexcept
#else
#  define SWIFT_NOEXCEPT_FUNCTION_PTR
#endif

using ValueWitnessInitializeBufferWithCopyOfBufferTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(55882))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessDestroyTy = void(* __ptrauth_swift_value_witness_function_pointer(1272))(void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessInitializeWithCopyTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(58298))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessAssignWithCopyTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(34641))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessInitializeWithTakeTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(18648))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessAssignWithTakeTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(61402))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessGetEnumTagSinglePayloadTy = unsigned(* __ptrauth_swift_value_witness_function_pointer(24816))(const void * _Nonnull, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessStoreEnumTagSinglePayloadTy = void(* __ptrauth_swift_value_witness_function_pointer(41169))(void * _Nonnull, unsigned, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;

struct ValueWitnessTable {
  ValueWitnessInitializeBufferWithCopyOfBufferTy _Nonnull initializeBufferWithCopyOfBuffer;
  ValueWitnessDestroyTy _Nonnull destroy;
  ValueWitnessInitializeWithCopyTy _Nonnull initializeWithCopy;
  ValueWitnessAssignWithCopyTy _Nonnull assignWithCopy;
  ValueWitnessInitializeWithTakeTy _Nonnull initializeWithTake;
  ValueWitnessAssignWithTakeTy _Nonnull assignWithTake;
  ValueWitnessGetEnumTagSinglePayloadTy _Nonnull getEnumTagSinglePayload;
  ValueWitnessStoreEnumTagSinglePayloadTy _Nonnull storeEnumTagSinglePayload;
  size_t size;
  size_t stride;
  unsigned flags;
  unsigned extraInhabitantCount;

  constexpr size_t getAlignment() const { return (flags & 255) + 1; }
};

using EnumValueWitnessGetEnumTagTy = unsigned(* __ptrauth_swift_value_witness_function_pointer(41909))(const void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using EnumValueWitnessDestructiveProjectEnumDataTy = void(* __ptrauth_swift_value_witness_function_pointer(1053))(void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using EnumValueWitnessDestructiveInjectEnumTagTy = void(* __ptrauth_swift_value_witness_function_pointer(45796))(void * _Nonnull, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;

struct EnumValueWitnessTable {
  ValueWitnessTable vwTable;
  EnumValueWitnessGetEnumTagTy _Nonnull getEnumTag;
  EnumValueWitnessDestructiveProjectEnumDataTy _Nonnull destructiveProjectEnumData;
  EnumValueWitnessDestructiveInjectEnumTagTy _Nonnull destructiveInjectEnumTag;
};

#undef SWIFT_NOEXCEPT_FUNCTION_PTR


// type metadata address for Bool.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSbN;
// type metadata address for Int8.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss4Int8VN;
// type metadata address for UInt8.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5UInt8VN;
// type metadata address for Int16.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int16VN;
// type metadata address for UInt16.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt16VN;
// type metadata address for Int32.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int32VN;
// type metadata address for UInt32.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt32VN;
// type metadata address for Int64.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int64VN;
// type metadata address for UInt64.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt64VN;
// type metadata address for Float.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSfN;
// type metadata address for Double.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSdN;
// type metadata address for OpaquePointer.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss13OpaquePointerVN;
// type metadata address for Int.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSiN;
// type metadata address for UInt.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSuN;

#ifdef __cplusplus
}
#endif


} // namespace _impl


#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<bool> = true;

template<>
struct TypeMetadataTrait<bool> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSbN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int8_t> = true;

template<>
struct TypeMetadataTrait<int8_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss4Int8VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint8_t> = true;

template<>
struct TypeMetadataTrait<uint8_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5UInt8VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int16_t> = true;

template<>
struct TypeMetadataTrait<int16_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int16VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint16_t> = true;

template<>
struct TypeMetadataTrait<uint16_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt16VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int32_t> = true;

template<>
struct TypeMetadataTrait<int32_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int32VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint32_t> = true;

template<>
struct TypeMetadataTrait<uint32_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt32VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int64_t> = true;

template<>
struct TypeMetadataTrait<int64_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int64VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint64_t> = true;

template<>
struct TypeMetadataTrait<uint64_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt64VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<float> = true;

template<>
struct TypeMetadataTrait<float> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSfN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<double> = true;

template<>
struct TypeMetadataTrait<double> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSdN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<void *> = true;

template<>
struct TypeMetadataTrait<void *> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss13OpaquePointerVN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<swift::Int> = true;

template<>
struct TypeMetadataTrait<swift::Int> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSiN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<swift::UInt> = true;

template<>
struct TypeMetadataTrait<swift::UInt> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSuN;
  }
};

#pragma clang diagnostic pop

} // namespace swift

#endif
#ifdef __cplusplus
namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
namespace _impl {
extern "C" {
#endif

// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_swift_void_ptr_0_8 {
  void * _Nullable _1;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_swift_void_ptr_0_8(char * _Nonnull result, struct swift_interop_returnStub_swift_void_ptr_0_8 value) {
  memcpy(result + 0, &value._1, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_swift_void_ptr_0_8 $sS2ayxGycfC(void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // init()
SWIFT_EXTERN struct swift_interop_returnStub_swift_void_ptr_0_8 $sSa9repeating5countSayxGx_SitcfC(const void * _Nonnull repeatedValue, ptrdiff_t count, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // init(repeating:count:)
SWIFT_EXTERN void $sSa15reserveCapacityyySiF(ptrdiff_t minimumCapacity, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // reserveCapacity(_:)
SWIFT_EXTERN void $sSa6appendyyxnF(const void * _Nonnull newElement, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // append(_:)
SWIFT_EXTERN void $sSa17_customRemoveLastxSgyF(SWIFT_INDIRECT_RESULT void * _Nonnull, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _customRemoveLast()
SWIFT_EXTERN void $sSa6remove2atxSi_tF(SWIFT_INDIRECT_RESULT void * _Nonnull, ptrdiff_t index, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // remove(at:)
SWIFT_EXTERN void $sSa6insert_2atyxn_SitF(const void * _Nonnull newElement, ptrdiff_t i, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // insert(_:at:)
SWIFT_EXTERN void $sSa9removeAll15keepingCapacityySb_tF(bool keepCapacity, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // removeAll(keepingCapacity:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_swift_void_ptr_0_8 {
  void * _Nullable _1;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_swift_void_ptr_0_8 swift_interop_passDirect_swift_void_ptr_0_8(const char * _Nonnull value) {
  struct swift_interop_passStub_swift_void_ptr_0_8 result;
  memcpy(&result._1, value + 0, 8);
  return result;
}

SWIFT_EXTERN ptrdiff_t $sSa10startIndexSivg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSa8endIndexSivg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSa8distance4from2toS2i_SitF(ptrdiff_t start, ptrdiff_t end, struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // distance(from:to:)
SWIFT_EXTERN void $sSayxSicig(SWIFT_INDIRECT_RESULT void * _Nonnull, ptrdiff_t index, struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSa5countSivg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $sSa29_hoistableIsNativeTypeCheckedSbyF(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _hoistableIsNativeTypeChecked()
SWIFT_EXTERN ptrdiff_t $sSa8capacitySivg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 {
  uint64_t _1;
  void * _Nullable _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(char * _Nonnull result, struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSa11descriptionSSvg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSa16debugDescriptionSSvg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_swift_uint64_t_0_8 {
  uint64_t _1;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_swift_uint64_t_0_8(char * _Nonnull result, struct swift_interop_returnStub_swift_uint64_t_0_8 value) {
  memcpy(result + 0, &value._1, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_swift_void_ptr_0_8 $sSa12arrayLiteralSayxGxd_tcfC(struct swift_interop_passStub_swift_void_ptr_0_8 elements, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // init(arrayLiteral:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_swift_uint64_t_0_8 {
  uint64_t _1;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_swift_uint64_t_0_8 swift_interop_passDirect_swift_uint64_t_0_8(const char * _Nonnull value) {
  struct swift_interop_passStub_swift_uint64_t_0_8 result;
  memcpy(&result._1, value + 0, 8);
  return result;
}

SWIFT_EXTERN ptrdiff_t $sSS5IndexV13encodedOffsetSivg(struct swift_interop_passStub_swift_uint64_t_0_8 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS5IndexV13encodedOffsetABSi_tcfC(ptrdiff_t offset) SWIFT_NOEXCEPT SWIFT_CALL; // init(encodedOffset:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 {
  uint64_t _1;
  uint8_t _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(char * _Nonnull result, struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 1);
}

// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 {
  uint64_t _1;
  void * _Nullable _2;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(const char * _Nonnull value) {
  struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 result;
  memcpy(&result._1, value + 0, 8);
  memcpy(&result._2, value + 8, 8);
  return result;
}

SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 $sSS5IndexV_6withinABSgAB_SStcfC(struct swift_interop_passStub_swift_uint64_t_0_8 sourcePosition, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 target) SWIFT_NOEXCEPT SWIFT_CALL; // init(_:within:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 $sSS5IndexV12samePosition2inABSgSS8UTF8ViewV_tF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 utf8, struct swift_interop_passStub_swift_uint64_t_0_8 _self) SWIFT_NOEXCEPT SWIFT_CALL; // samePosition(in:)
SWIFT_EXTERN ptrdiff_t $sSS5IndexV9hashValueSivg(struct swift_interop_passStub_swift_uint64_t_0_8 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 $sSS5IndexV12samePosition2inABSgSS_tF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 characters, struct swift_interop_passStub_swift_uint64_t_0_8 _self) SWIFT_NOEXCEPT SWIFT_CALL; // samePosition(in:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 $sSS5IndexV_6withinABSgAB_SS8UTF8ViewVtcfC(struct swift_interop_passStub_swift_uint64_t_0_8 idx, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 target) SWIFT_NOEXCEPT SWIFT_CALL; // init(_:within:)
struct Swift_String_Index {
  _Alignas(8) char _storage[8];
};

SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSq16debugDescriptionSSvg(void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $sSq17unsafelyUnwrappedxvg(SWIFT_INDIRECT_RESULT void * _Nonnull, void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $sSqyxSgxcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, const void * _Nonnull some, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // init(_:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sS2SycfC(void) SWIFT_NOEXCEPT SWIFT_CALL; // init()
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS10startIndexSS0B0Vvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8endIndexSS0B0Vvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSS5countSivg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSS8distance4from2toSiSS5IndexV_AEtF(struct swift_interop_passStub_swift_uint64_t_0_8 start, struct swift_interop_passStub_swift_uint64_t_0_8 end, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // distance(from:to:)
SWIFT_EXTERN void $sSS15reserveCapacityyySiF(ptrdiff_t n, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // reserveCapacity(_:)
SWIFT_EXTERN void $sSS6appendyySSF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 other, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // append(_:)
SWIFT_EXTERN void $sSS6append10contentsOfySS_tF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 newElements, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // append(contentsOf:)
SWIFT_EXTERN void $sSS9removeAll15keepingCapacityySb_tF(bool keepCapacity, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // removeAll(keepingCapacity:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_swift_uint64_t_0_8_uint64_t_8_16 {
  uint64_t _1;
  uint64_t _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_swift_uint64_t_0_8_uint64_t_8_16(char * _Nonnull result, struct swift_interop_returnStub_swift_uint64_t_0_8_uint64_t_8_16 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS4utf8SS8UTF8ViewVvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $sSS4utf8SS8UTF8ViewVvs(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 newValue, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS10charactersSSvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $sSS10charactersSSvs(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 newValue, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSS9hashValueSivg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS10lowercasedSSyF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // lowercased()
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS10uppercasedSSyF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // uppercased()
SWIFT_EXTERN bool $sSS7isEmptySbvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_void_ptr_0_8 $sSS13_nfcCodeUnitsSays5UInt8VGvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS11descriptionSSvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $sSS5writeyySSF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 other, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // write(_:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS16debugDescriptionSSvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $sSS5_dumpyyF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _dump()
SWIFT_EXTERN bool $sSS9hasPrefixySbSSF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 prefix, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // hasPrefix(_:)
SWIFT_EXTERN bool $sSS9hasSuffixySbSSF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 suffix, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // hasSuffix(_:)
struct swift_interop_stub_Swift_String {
#if UINTPTR_MAX == 0xFFFFFFFFFFFFFFFFu
uint64_t _1;
void * _Nullable _2;
#elif UINTPTR_MAX == 0xFFFFFFFF
uint32_t _1;
uint32_t _2;
uint32_t _3;
#endif
};
static SWIFT_INLINE_THUNK struct swift_interop_stub_Swift_String swift_interop_passDirect_Swift_String(const char * _Nonnull value) {
struct swift_interop_stub_Swift_String result;
#if UINTPTR_MAX == 0xFFFFFFFFFFFFFFFFu
memcpy(&result._1, value, 8);
memcpy(&result._2, value + 8, 8);
#elif UINTPTR_MAX == 0xFFFFFFFF
memcpy(&result._1, value, 4);
memcpy(&result._2, value + 4, 4);
memcpy(&result._3, value + 8, 4);
#endif
return result;
}
SWIFT_EXTERN void *_Nonnull $sSS10FoundationE19_bridgeToObjectiveCSo8NSStringCyF(swift_interop_stub_Swift_String) SWIFT_NOEXCEPT SWIFT_CALL;
SWIFT_EXTERN swift_interop_stub_Swift_String $sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ(void * _Nullable) SWIFT_NOEXCEPT SWIFT_CALL;
SWIFT_EXTERN swift_interop_stub_Swift_String $sSS7cStringSSSPys4Int8VG_tcfC(const char * _Nonnull) SWIFT_NOEXCEPT SWIFT_CALL;
struct Swift_String {
  _Alignas(8) char _storage[16];
};

SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8UTF8ViewV10startIndexSS0D0Vvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8UTF8ViewV8endIndexSS0D0Vvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8UTF8ViewV5index5afterSS5IndexVAF_tF(struct swift_interop_passStub_swift_uint64_t_0_8 i, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // index(after:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8UTF8ViewV5index6beforeSS5IndexVAF_tF(struct swift_interop_passStub_swift_uint64_t_0_8 i, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // index(before:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8UTF8ViewV5index_8offsetBySS5IndexVAF_SitF(struct swift_interop_passStub_swift_uint64_t_0_8 i, ptrdiff_t n, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // index(_:offsetBy:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 $sSS8UTF8ViewV5index_8offsetBy07limitedE0SS5IndexVSgAG_SiAGtF(struct swift_interop_passStub_swift_uint64_t_0_8 i, ptrdiff_t n, struct swift_interop_passStub_swift_uint64_t_0_8 limit, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // index(_:offsetBy:limitedBy:)
SWIFT_EXTERN ptrdiff_t $sSS8UTF8ViewV8distance4from2toSiSS5IndexV_AGtF(struct swift_interop_passStub_swift_uint64_t_0_8 i, struct swift_interop_passStub_swift_uint64_t_0_8 j, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // distance(from:to:)
SWIFT_EXTERN uint8_t $sSS8UTF8ViewVys5UInt8VSS5IndexVcig(struct swift_interop_passStub_swift_uint64_t_0_8 i, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS8UTF8ViewV11descriptionSSvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS8UTF8ViewV16debugDescriptionSSvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSS8UTF8ViewV5countSivg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
struct Swift_UTF8View {
  _Alignas(8) char _storage[16];
};

}
}
}
namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {






































template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:Sq") Optional;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
static inline const constexpr bool isUsableInGenericContext<swift::Optional<T_0_0>> = isUsableInGenericContext<T_0_0>;
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
class SWIFT_SYMBOL("s:SS") String;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<swift::String> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:Sa") Array;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
static inline const constexpr bool isUsableInGenericContext<swift::Array<T_0_0>> = isUsableInGenericContext<T_0_0>;
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_Array;

static_assert(1 <= 3, "unsupported generic requirement list for metadata func");
// Type metadata accessor for Array
SWIFT_EXTERN swift::_impl::MetadataResponseTy $sSaMa(swift::_impl::MetadataRequestTy, void * _Nonnull) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:Sa") Array final {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK ~Array() noexcept {
    auto metadata = _impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK Array(const Array &other) noexcept {
    auto metadata = _impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK Array &operator =(const Array &other) noexcept {
    auto metadata = _impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK Array &operator =(Array &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER Array(Array &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
/// Creates a new, empty array.
/// This is equivalent to initializing with an empty array literal.
/// For example:
/// \code
/// var emptyArray = Array<Int>()
/// print(emptyArray.isEmpty)
/// // Prints "true"
///
/// emptyArray = []
/// print(emptyArray.isEmpty)
/// // Prints "true"
///
/// \endcode
  static SWIFT_INLINE_THUNK Array<T_0_0> init() SWIFT_SYMBOL("s:S2ayxGycfc");
/// Creates a new array containing the specified number of a single, repeated
/// value.
/// Here’s an example of creating an array initialized with five strings
/// containing the letter <em>Z</em>.
/// \code
/// let fiveZs = Array(repeating: "Z", count: 5)
/// print(fiveZs)
/// // Prints "["Z", "Z", "Z", "Z", "Z"]"
///
/// \endcode\param repeatedValue The element to repeat.
///
/// \param count The number of times to repeat the value passed in the
/// <code>repeating</code> parameter. <code>count</code> must be zero or greater.
///
  static SWIFT_INLINE_THUNK Array<T_0_0> init(const T_0_0& repeatedValue, swift::Int count) SWIFT_SYMBOL("s:Sa9repeating5countSayxGx_Sitcfc");
/// Reserves enough space to store the specified number of elements.
/// If you are adding a known number of elements to an array, use this method
/// to avoid multiple reallocations. This method ensures that the array has
/// unique, mutable, contiguous storage, with space allocated for at least
/// the requested number of elements.
/// Calling the <code>reserveCapacity(_:)</code> method on an array with bridged storage
/// triggers a copy to contiguous storage even if the existing storage
/// has room to store <code>minimumCapacity</code> elements.
/// For performance reasons, the size of the newly allocated storage might be
/// greater than the requested capacity. Use the array’s <code>capacity</code> property
/// to determine the size of the new storage.
/// <h1>Preserving an Array’s Geometric Growth Strategy</h1>
/// If you implement a custom data structure backed by an array that grows
/// dynamically, naively calling the <code>reserveCapacity(_:)</code> method can lead
/// to worse than expected performance. Arrays need to follow a geometric
/// allocation pattern for appending elements to achieve amortized
/// constant-time performance. The <code>Array</code> type’s <code>append(_:)</code> and
/// <code>append(contentsOf:)</code> methods take care of this detail for you, but
/// <code>reserveCapacity(_:)</code> allocates only as much space as you tell it to
/// (padded to a round value), and no more. This avoids over-allocation, but
/// can result in insertion not having amortized constant-time performance.
/// The following code declares <code>values</code>, an array of integers, and the
/// <code>addTenQuadratic()</code> function, which adds ten more values to the <code>values</code>
/// array on each call.
/// \code
///   var values: [Int] = [0, 1, 2, 3]
///
///   // Don't use 'reserveCapacity(_:)' like this
///   func addTenQuadratic() {
///       let newCount = values.count + 10
///       values.reserveCapacity(newCount)
///       for n in values.count..<newCount {
///           values.append(n)
///       }
///   }
///
/// \endcodeThe call to <code>reserveCapacity(_:)</code> increases the <code>values</code> array’s capacity
/// by exactly 10 elements on each pass through <code>addTenQuadratic()</code>, which
/// is linear growth. Instead of having constant time when averaged over
/// many calls, the function may decay to performance that is linear in
/// <code>values.count</code>. This is almost certainly not what you want.
/// In cases like this, the simplest fix is often to simply remove the call
/// to <code>reserveCapacity(_:)</code>, and let the <code>append(_:)</code> method grow the array
/// for you.
/// \code
///   func addTen() {
///       let newCount = values.count + 10
///       for n in values.count..<newCount {
///           values.append(n)
///       }
///   }
///
/// \endcodeIf you need more control over the capacity of your array, implement your
/// own geometric growth strategy, passing the size you compute to
/// <code>reserveCapacity(_:)</code>.
/// complexity:
/// O(<em>n</em>), where <em>n</em> is the number of elements in the array.
/// \param minimumCapacity The requested number of elements to store.
///
  SWIFT_INLINE_THUNK void reserveCapacity(swift::Int minimumCapacity) SWIFT_SYMBOL("s:Sa15reserveCapacityyySiF");
/// Adds a new element at the end of the array.
/// Use this method to append a single element to the end of a mutable array.
/// \code
/// var numbers = [1, 2, 3, 4, 5]
/// numbers.append(100)
/// print(numbers)
/// // Prints "[1, 2, 3, 4, 5, 100]"
///
/// \endcodeBecause arrays increase their allocated capacity using an exponential
/// strategy, appending a single element to an array is an O(1) operation
/// when averaged over many calls to the <code>append(_:)</code> method. When an array
/// has additional capacity and is not sharing its storage with another
/// instance, appending an element is O(1). When an array needs to
/// reallocate storage before appending or its storage is shared with
/// another copy, appending is O(<em>n</em>), where <em>n</em> is the length of the array.
/// complexity:
/// O(1) on average, over many calls to <code>append(_:)</code> on the
/// same array.
/// \param newElement The element to append to the array.
///
  SWIFT_INLINE_THUNK void append(const T_0_0& newElement) SWIFT_SYMBOL("s:Sa6appendyyxnF");
  SWIFT_INLINE_THUNK swift::Optional<T_0_0> _customRemoveLast() SWIFT_SYMBOL("s:Sa17_customRemoveLastxSgyF");
/// Removes and returns the element at the specified position.
/// All the elements following the specified position are moved up to
/// close the gap.
/// \code
/// var measurements: [Double] = [1.1, 1.5, 2.9, 1.2, 1.5, 1.3, 1.2]
/// let removed = measurements.remove(at: 2)
/// print(measurements)
/// // Prints "[1.1, 1.5, 1.2, 1.5, 1.3, 1.2]"
///
/// \endcodecomplexity:
/// O(<em>n</em>), where <em>n</em> is the length of the array.
/// \param index The position of the element to remove. <code>index</code> must
/// be a valid index of the array.
///
///
/// returns:
/// The element at the specified index.
  SWIFT_INLINE_THUNK T_0_0 removeAt(swift::Int index) SWIFT_SYMBOL("s:Sa6remove2atxSi_tF");
/// Inserts a new element at the specified position.
/// The new element is inserted before the element currently at the specified
/// index. If you pass the array’s <code>endIndex</code> property as the <code>index</code>
/// parameter, the new element is appended to the array.
/// \code
/// var numbers = [1, 2, 3, 4, 5]
/// numbers.insert(100, at: 3)
/// numbers.insert(200, at: numbers.endIndex)
///
/// print(numbers)
/// // Prints "[1, 2, 3, 100, 4, 5, 200]"
///
/// \endcodecomplexity:
/// O(<em>n</em>), where <em>n</em> is the length of the array. If
/// <code>i == endIndex</code>, this method is equivalent to <code>append(_:)</code>.
/// \param newElement The new element to insert into the array.
///
/// \param i The position at which to insert the new element.
/// <code>index</code> must be a valid index of the array or equal to its <code>endIndex</code>
/// property.
///
  SWIFT_INLINE_THUNK void insertAt(const T_0_0& newElement, swift::Int i) SWIFT_SYMBOL("s:Sa6insert_2atyxn_SitF");
/// Removes all elements from the array.
/// complexity:
/// O(<em>n</em>), where <em>n</em> is the length of the array.
/// \param keepCapacity Pass <code>true</code> to keep the existing capacity of
/// the array after removing its elements. The default value is
/// <code>false</code>.
///
  SWIFT_INLINE_THUNK void removeAllKeepingCapacity(bool keepCapacity) SWIFT_SYMBOL("s:Sa9removeAll15keepingCapacityySb_tF");
  SWIFT_INLINE_THUNK swift::Int getStartIndex() const SWIFT_SYMBOL("s:Sa10startIndexSivp");
  SWIFT_INLINE_THUNK swift::Int getEndIndex() const SWIFT_SYMBOL("s:Sa8endIndexSivp");
/// Returns the distance between two indices.
/// \param start A valid index of the collection.
///
/// \param end Another valid index of the collection. If <code>end</code> is equal to
/// <code>start</code>, the result is zero.
///
///
/// returns:
/// The distance between <code>start</code> and <code>end</code>.
  SWIFT_INLINE_THUNK swift::Int distanceFromTo(swift::Int start, swift::Int end) const SWIFT_SYMBOL("s:Sa8distance4from2toS2i_SitF");
SWIFT_INLINE_THUNK T_0_0 operator [](swift::Int index) const SWIFT_SYMBOL("s:SayxSicig");
  SWIFT_INLINE_THUNK swift::Int getCount() const SWIFT_SYMBOL("s:Sa5countSivp");
/// Returns <code>true</code> if the array is native and does not need a deferred
/// type check.  May be hoisted by the optimizer, which means its
/// results may be stale by the time they are used if there is an
/// inout violation in user code.
  SWIFT_INLINE_THUNK bool _hoistableIsNativeTypeChecked() const SWIFT_SYMBOL("s:Sa29_hoistableIsNativeTypeCheckedSbyF");
  SWIFT_INLINE_THUNK swift::Int getCapacity() const SWIFT_SYMBOL("s:Sa8capacitySivp");
  SWIFT_INLINE_THUNK String getDescription() const SWIFT_SYMBOL("s:Sa11descriptionSSvp");
  SWIFT_INLINE_THUNK String getDebugDescription() const SWIFT_SYMBOL("s:Sa16debugDescriptionSSvp");
/// Creates an array from the given array literal.
/// Do not call this initializer directly. It is used by the compiler
/// when you use an array literal. Instead, create a new array by using an
/// array literal as its value. To do this, enclose a comma-separated list of
/// values in square brackets.
/// Here, an array of strings is created from an array literal holding
/// only strings.
/// \code
/// let ingredients = ["cocoa beans", "sugar", "cocoa butter", "salt"]
///
/// \endcode\param elements A variadic list of elements of the new array.
///
  static SWIFT_INLINE_THUNK Array<T_0_0> init(const Array<T_0_0>& elements) SWIFT_SYMBOL("s:Sa12arrayLiteralSayxGxd_tcfc");
private:
  SWIFT_INLINE_THUNK Array(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK Array _make() noexcept {
    auto metadata = _impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return Array(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_Array<T_0_0>;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $sSayxGD;
  static inline constexpr $sSayxGD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_Array {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(Array<T_0_0> &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const Array<T_0_0> &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER Array<T_0_0> returnNewValue(T callable) {
    auto result = Array<T_0_0>::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
struct TypeMetadataTrait<swift::Array<T_0_0>> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return swift::_impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata())._0;
  }
};
namespace _impl{
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
static inline const constexpr bool isOpaqueLayout<swift::Array<T_0_0>> = true;
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {








































































































































































































































































































































































class SWIFT_SYMBOL("s:SS8UTF8ViewV") UTF8View;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<swift::UTF8View> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
class SWIFT_SYMBOL("s:SS5IndexV") String_Index;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<swift::String_Index> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
namespace _impl {

class _impl_String_Index;

// Type metadata accessor for Index
SWIFT_EXTERN swift::_impl::MetadataResponseTy $sSS5IndexVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:SS5IndexV") String_Index final {
public:
  SWIFT_INLINE_THUNK ~String_Index() noexcept {
    auto metadata = _impl::$sSS5IndexVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK String_Index(const String_Index &other) noexcept {
    auto metadata = _impl::$sSS5IndexVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK String_Index &operator =(const String_Index &other) noexcept {
    auto metadata = _impl::$sSS5IndexVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK String_Index &operator =(String_Index &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER String_Index(String_Index &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Int getEncodedOffset() const SWIFT_SYMBOL("s:SS5IndexV13encodedOffsetSivp");
/// Creates a new index at the specified code unit offset.
/// \param offset An offset in code units.
///
  static SWIFT_INLINE_THUNK String_Index init(swift::Int offset) SWIFT_SYMBOL("s:SS5IndexV13encodedOffsetABSi_tcfc");
/// Creates an index in the given string that corresponds exactly to the
/// specified position.
/// If the index passed as <code>sourcePosition</code> represents the start of an
/// extended grapheme cluster—the element type of a string—then the
/// initializer succeeds.
/// The following example converts the position of the Unicode scalar <code>"e"</code>
/// into its corresponding position in the string. The character at that
/// position is the composed <code>"é"</code> character.
/// \code
/// let cafe = "Cafe\u{0301}"
/// print(cafe)
/// // Prints "Café"
///
/// let scalarsIndex = cafe.unicodeScalars.firstIndex(of: "e")!
/// let stringIndex = String.Index(scalarsIndex, within: cafe)!
///
/// print(cafe[...stringIndex])
/// // Prints "Café"
///
/// \endcodeIf the index passed as <code>sourcePosition</code> doesn’t have an exact
/// corresponding position in <code>target</code>, the result of the initializer is
/// <code>nil</code>. For example, an attempt to convert the position of the combining
/// acute accent (<code>"\u{0301}"</code>) fails. Combining Unicode scalars do not have
/// their own position in a string.
/// \code
/// let nextScalarsIndex = cafe.unicodeScalars.index(after: scalarsIndex)
/// let nextStringIndex = String.Index(nextScalarsIndex, within: cafe)
///
/// print(nextStringIndex)
/// // Prints "nil"
///
/// \endcode\param sourcePosition A position in a view of the <code>target</code> parameter.
/// <code>sourcePosition</code> must be a valid index of at least one of the views
/// of <code>target</code>.
///
/// \param target The string referenced by the resulting index.
///
  static SWIFT_INLINE_THUNK swift::Optional<String_Index> init(const String_Index& sourcePosition, const String& target) SWIFT_SYMBOL("s:SS5IndexV_6withinABSgAB_SStcfc");
/// Returns the position in the given UTF-8 view that corresponds exactly to
/// this index.
/// This example first finds the position of the character <code>"é"</code>, and then
/// uses this method find the same position in the string’s <code>utf8</code> view.
/// \code
/// let cafe = "Café"
/// if let i = cafe.firstIndex(of: "é") {
///     let j = i.samePosition(in: cafe.utf8)!
///     print(Array(cafe.utf8[j...]))
/// }
/// // Prints "[195, 169]"
///
/// \endcode\param utf8 The view to use for the index conversion. This index
/// must be a valid index of at least one view of the string shared by
/// <code>utf8</code>.
///
///
/// returns:
/// The position in <code>utf8</code> that corresponds exactly to this index.
/// If this index does not have an exact corresponding position in <code>utf8</code>,
/// this method returns <code>nil</code>. For example, an attempt to convert the
/// position of a UTF-16 trailing surrogate returns <code>nil</code>.
  SWIFT_INLINE_THUNK swift::Optional<String_Index> samePositionIn(const UTF8View& utf8) const SWIFT_SYMBOL("s:SS5IndexV12samePosition2inABSgSS8UTF8ViewV_tF");
  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:SS5IndexV9hashValueSivp");
/// Returns the position in the given string that corresponds exactly to this
/// index.
/// This example first finds the position of a space (UTF-8 code point <code>32</code>)
/// in a string’s <code>utf8</code> view and then uses this method find the same position
/// in the string.
/// \code
/// let cafe = "Café 🍵"
/// let i = cafe.unicodeScalars.firstIndex(of: "🍵")!
/// let j = i.samePosition(in: cafe)!
/// print(cafe[j...])
/// // Prints "🍵"
///
/// \endcode\param characters The string to use for the index conversion.
/// This index must be a valid index of at least one view of <code>characters</code>.
///
///
/// returns:
/// The position in <code>characters</code> that corresponds exactly to
/// this index. If this index does not have an exact corresponding
/// position in <code>characters</code>, this method returns <code>nil</code>. For example,
/// an attempt to convert the position of a UTF-8 continuation byte
/// returns <code>nil</code>.
  SWIFT_INLINE_THUNK swift::Optional<String_Index> samePositionIn(const String& characters) const SWIFT_SYMBOL("s:SS5IndexV12samePosition2inABSgSS_tF");
/// Creates an index in the given UTF-8 view that corresponds exactly to the
/// specified <code>UTF16View</code> position.
/// The following example finds the position of a space in a string’s <code>utf16</code>
/// view and then converts that position to an index in the string’s
/// <code>utf8</code> view.
/// \code
/// let cafe = "Café 🍵"
///
/// let utf16Index = cafe.utf16.firstIndex(of: 32)!
/// let utf8Index = String.UTF8View.Index(utf16Index, within: cafe.utf8)!
///
/// print(Array(cafe.utf8[..<utf8Index]))
/// // Prints "[67, 97, 102, 195, 169]"
///
/// \endcodeIf the position passed in <code>utf16Index</code> doesn’t have an exact
/// corresponding position in <code>utf8</code>, the result of the initializer is
/// <code>nil</code>. For example, because UTF-8 and UTF-16 represent high Unicode code
/// points differently, an attempt to convert the position of the trailing
/// surrogate of a UTF-16 surrogate pair fails.
/// The next example attempts to convert the indices of the two UTF-16 code
/// points that represent the teacup emoji (<code>"🍵"</code>). The index of the lead
/// surrogate is successfully converted to a position in <code>utf8</code>, but the
/// index of the trailing surrogate is not.
/// \code
/// let emojiHigh = cafe.utf16.index(after: utf16Index)
/// print(String.UTF8View.Index(emojiHigh, within: cafe.utf8))
/// // Prints "Optional(String.Index(...))"
///
/// let emojiLow = cafe.utf16.index(after: emojiHigh)
/// print(String.UTF8View.Index(emojiLow, within: cafe.utf8))
/// // Prints "nil"
///
/// \endcode\param sourcePosition A position in a <code>String</code> or one of its views.
///
/// \param target The <code>UTF8View</code> in which to find the new position.
///
  static SWIFT_INLINE_THUNK swift::Optional<String_Index> init(const String_Index& idx, const UTF8View& target) SWIFT_SYMBOL("s:SS5IndexV_6withinABSgAB_SS8UTF8ViewVtcfc");
private:
  SWIFT_INLINE_THUNK String_Index() noexcept {}
  static SWIFT_INLINE_THUNK String_Index _make() noexcept { return String_Index(); }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage; }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage; }

  alignas(8) char _storage[8];
  friend class _impl::_impl_String_Index;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $sSS5IndexVD;
  static inline constexpr $sSS5IndexVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_String_Index {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(String_Index &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const String_Index &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER String_Index returnNewValue(T callable) {
    auto result = String_Index::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$sSS5IndexVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<swift::String_Index> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return swift::_impl::$sSS5IndexVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<swift::String_Index> = true;
template<>
struct implClassFor<swift::String_Index> { using type = swift::_impl::_impl_String_Index; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {











































































































































































































































































































































/// A type that represents either a wrapped value or the absence of a value.
/// You use the <code>Optional</code> type whenever you use optional values, even if you
/// never type the word <code>Optional</code>. Swift’s type system usually shows the
/// wrapped type’s name with a trailing question mark (<code>?</code>) instead of showing
/// the full type name. For example, if a variable has the type <code>Int?</code>, that’s
/// just another way of writing <code>Optional<Int></code>. The shortened form is
/// preferred for ease of reading and writing code.
/// The types of <code>shortForm</code> and <code>longForm</code> in the following code sample are
/// the same:
/// \code
/// let shortForm: Int? = Int("42")
/// let longForm: Optional<Int> = Int("42")
///
/// \endcodeThe <code>Optional</code> type is an enumeration with two cases. <code>Optional.none</code> is
/// equivalent to the <code>nil</code> literal. <code>Optional.some(Wrapped)</code> stores a wrapped
/// value. For example:
/// \code
/// let number: Int? = Optional.some(42)
/// let noNumber: Int? = Optional.none
/// print(noNumber == nil)
/// // Prints "true"
///
/// \endcodeYou must unwrap the value of an <code>Optional</code> instance before you can use it
/// in many contexts. Because Swift provides several ways to safely unwrap
/// optional values, you can choose the one that helps you write clear,
/// concise code.
/// The following examples use this dictionary of image names and file paths:
/// \code
/// let imagePaths = ["star": "/glyphs/star.png",
///                   "portrait": "/images/content/portrait.jpg",
///                   "spacer": "/images/shared/spacer.gif"]
///
/// \endcodeGetting a dictionary’s value using a key returns an optional value, so
/// <code>imagePaths["star"]</code> has type <code>Optional<String></code> or, written in the
/// preferred manner, <code>String?</code>.
/// <h2>Optional Binding</h2>
/// To conditionally bind the wrapped value of an <code>Optional</code> instance to a new
/// variable, use one of the optional binding control structures, including
/// <code>if let</code>, <code>guard let</code>, and <code>switch</code>.
/// \code
/// if let starPath = imagePaths["star"] {
///     print("The star image is at '\(starPath)'")
/// } else {
///     print("Couldn't find the star image")
/// }
/// // Prints "The star image is at '/glyphs/star.png'"
///
/// \endcode<h2>Optional Chaining</h2>
/// To safely access the properties and methods of a wrapped instance, use the
/// postfix optional chaining operator (postfix <code>?</code>). The following example uses
/// optional chaining to access the <code>hasSuffix(_:)</code> method on a <code>String?</code>
/// instance.
/// \code
/// if imagePaths["star"]?.hasSuffix(".png") == true {
///     print("The star image is in PNG format")
/// }
/// // Prints "The star image is in PNG format"
///
/// \endcode<h2>Using the Nil-Coalescing Operator</h2>
/// Use the nil-coalescing operator (<code>??</code>) to supply a default value in case
/// the <code>Optional</code> instance is <code>nil</code>. Here a default path is supplied for an
/// image that is missing from <code>imagePaths</code>.
/// \code
/// let defaultImagePath = "/images/default.png"
/// let heartPath = imagePaths["heart"] ?? defaultImagePath
/// print(heartPath)
/// // Prints "/images/default.png"
///
/// \endcodeThe <code>??</code> operator also works with another <code>Optional</code> instance on the
/// right-hand side. As a result, you can chain multiple <code>??</code> operators
/// together.
/// \code
/// let shapePath = imagePaths["cir"] ?? imagePaths["squ"] ?? defaultImagePath
/// print(shapePath)
/// // Prints "/images/default.png"
///
/// \endcode<h2>Unconditional Unwrapping</h2>
/// When you’re certain that an instance of <code>Optional</code> contains a value, you
/// can unconditionally unwrap the value by using the forced
/// unwrap operator (postfix <code>!</code>). For example, the result of the failable <code>Int</code>
/// initializer is unconditionally unwrapped in the example below.
/// \code
/// let number = Int("42")!
/// print(number)
/// // Prints "42"
///
/// \endcodeYou can also perform unconditional optional chaining by using the postfix
/// <code>!</code> operator.
/// \code
/// let isPNG = imagePaths["star"]!.hasSuffix(".png")
/// print(isPNG)
/// // Prints "true"
///
/// \endcodeUnconditionally unwrapping a <code>nil</code> instance with <code>!</code> triggers a runtime
/// error.
namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_Optional;

static_assert(1 <= 3, "unsupported generic requirement list for metadata func");
// Type metadata accessor for Optional
SWIFT_EXTERN swift::_impl::MetadataResponseTy $sSqMa(swift::_impl::MetadataRequestTy, void * _Nonnull) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum Optional
extern "C" {
extern unsigned $sSq4noneyxSgABmlFWC;
extern unsigned $sSq4someyxSgxcABmlFWC;
}

} // namespace _impl

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:Sq") Optional final {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK ~Optional() noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK Optional(const Optional &other) noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK Optional &operator =(const Optional &other) noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK Optional &operator =(Optional &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER Optional(Optional &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    some SWIFT_SYMBOL("s:Sq4someyxSgxcABmlF"),
    none SWIFT_SYMBOL("s:Sq4noneyxSgABmlF")
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_some {  // impl struct for case some
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::some;
    }
    SWIFT_INLINE_THUNK Optional<T_0_0> operator()(const T_0_0& val) const;
  } some SWIFT_SYMBOL("s:Sq4someyxSgxcABmlF");
  SWIFT_INLINE_THUNK bool isSome() const;
  SWIFT_INLINE_THUNK T_0_0 getSome() const;

  inline const static struct _impl_none {  // impl struct for case none
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::none;
    }
    SWIFT_INLINE_THUNK Optional<T_0_0> operator()() const;
  } none SWIFT_SYMBOL("s:Sq4noneyxSgABmlF");
  SWIFT_INLINE_THUNK bool isNone() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    switch (_getEnumTag()) {
      case 0: return cases::some;
      case 1: return cases::none;
      default: abort();
    }
  }

  SWIFT_INLINE_THUNK String getDebugDescription() const SWIFT_SYMBOL("s:Sq16debugDescriptionSSvp");
  SWIFT_INLINE_THUNK T_0_0 getUnsafelyUnwrapped() const SWIFT_SYMBOL("s:Sq17unsafelyUnwrappedxvp");
/// Creates an instance that stores the given value.
  static SWIFT_INLINE_THUNK swift::Optional<T_0_0> init(const T_0_0& some_) SWIFT_SYMBOL("s:SqsRi_zrlEyxSgxcfc");
#define SWIFT_CXX_INTEROP_OPTIONAL_MIXIN
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
// Allow user to find the header using additional include paths
#if __has_include(<swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <swiftToCxx/_SwiftStdlibCxxOverlay.h>
// Look for the C++ interop support header relative to clang's resource dir:
//  '<toolchain>/usr/lib/clang/<version>/include/../../../swift/swiftToCxx'.
#elif __has_include(<../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
#elif __has_include(<../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
//  '<toolchain>/usr/local/lib/clang/<version>/include/../../../../../lib/swift/swiftToCxx'.
#include <../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
#endif
#pragma clang diagnostic pop
private:
  SWIFT_INLINE_THUNK Optional(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK Optional _make() noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return Optional(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_Optional<T_0_0>;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $sxSgD;
  static inline constexpr $sxSgD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_Optional {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(Optional<T_0_0> &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const Optional<T_0_0> &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER Optional<T_0_0> returnNewValue(T callable) {
    auto result = Optional<T_0_0>::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
struct TypeMetadataTrait<swift::Optional<T_0_0>> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return swift::_impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata())._0;
  }
};
namespace _impl{
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
static inline const constexpr bool isOpaqueLayout<swift::Optional<T_0_0>> = true;
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
























































































































































































































































































































































































































































































namespace _impl {

class _impl_String;

// Type metadata accessor for String
SWIFT_EXTERN swift::_impl::MetadataResponseTy $sSSMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:SS") String final {
public:
  SWIFT_INLINE_THUNK ~String() noexcept {
    auto metadata = _impl::$sSSMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK String(const String &other) noexcept {
    auto metadata = _impl::$sSSMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK String &operator =(const String &other) noexcept {
    auto metadata = _impl::$sSSMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK String &operator =(String &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER String(String &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
/// Creates an empty string.
/// Using this initializer is equivalent to initializing a string with an
/// empty string literal.
/// \code
/// let empty = ""
/// let alsoEmpty = String()
///
/// \endcode
  static SWIFT_INLINE_THUNK String init() SWIFT_SYMBOL("s:S2Sycfc");
  SWIFT_INLINE_THUNK String_Index getStartIndex() const SWIFT_SYMBOL("s:SS10startIndexSS0B0Vvp");
  SWIFT_INLINE_THUNK String_Index getEndIndex() const SWIFT_SYMBOL("s:SS8endIndexSS0B0Vvp");
  SWIFT_INLINE_THUNK swift::Int getCount() const SWIFT_SYMBOL("s:SS5countSivp");
/// Returns the distance between two indices.
/// complexity:
/// O(<em>n</em>), where <em>n</em> is the resulting distance.
/// \param start A valid index of the collection.
///
/// \param end Another valid index of the collection. If <code>end</code> is equal to
/// <code>start</code>, the result is zero.
///
///
/// returns:
/// The distance between <code>start</code> and <code>end</code>.
  SWIFT_INLINE_THUNK swift::Int distanceFromTo(const String_Index& start, const String_Index& end) const SWIFT_SYMBOL("s:SS8distance4from2toSiSS5IndexV_AEtF");
/// Reserves enough space in the string’s underlying storage to store the
/// specified number of ASCII characters.
/// Because each character in a string can require more than a single ASCII
/// character’s worth of storage, additional allocation may be necessary
/// when adding characters to a string after a call to
/// <code>reserveCapacity(_:)</code>.
/// complexity:
/// O(<em>n</em>)
/// \param n The minimum number of ASCII character’s worth of storage
/// to allocate.
///
  SWIFT_INLINE_THUNK void reserveCapacity(swift::Int n) SWIFT_SYMBOL("s:SS15reserveCapacityyySiF");
/// Appends the given string to this string.
/// The following example builds a customized greeting by using the
/// <code>append(_:)</code> method:
/// \code
/// var greeting = "Hello, "
/// if let name = getUserName() {
///     greeting.append(name)
/// } else {
///     greeting.append("friend")
/// }
/// print(greeting)
/// // Prints "Hello, friend"
///
/// \endcode\param other Another string.
///
  SWIFT_INLINE_THUNK void append(const String& other) SWIFT_SYMBOL("s:SS6appendyySSF");
  SWIFT_INLINE_THUNK void appendContentsOf(const String& newElements) SWIFT_SYMBOL("s:SS6append10contentsOfySS_tF");
/// Replaces this string with the empty string.
/// Calling this method invalidates any existing indices for use with this
/// string.
/// \param keepCapacity Pass <code>true</code> to prevent the release of the
/// string’s allocated storage. Retaining the storage can be a useful
/// optimization when you’re planning to grow the string again. The
/// default value is <code>false</code>.
///
  SWIFT_INLINE_THUNK void removeAllKeepingCapacity(bool keepCapacity) SWIFT_SYMBOL("s:SS9removeAll15keepingCapacityySb_tF");
  SWIFT_INLINE_THUNK UTF8View getUtf8() const SWIFT_SYMBOL("s:SS4utf8SS8UTF8ViewVvp");
  SWIFT_INLINE_THUNK void setUtf8(const UTF8View& newValue) SWIFT_SYMBOL("s:SS4utf8SS8UTF8ViewVvp");
  SWIFT_INLINE_THUNK String getCharacters() const SWIFT_SYMBOL("s:SS10charactersSSvp");
  SWIFT_INLINE_THUNK void setCharacters(const String& newValue) SWIFT_SYMBOL("s:SS10charactersSSvp");
  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:SS9hashValueSivp");
/// Returns a lowercase version of the string.
/// Here’s an example of transforming a string to all lowercase letters.
/// \code
/// let cafe = "BBQ Café 🍵"
/// print(cafe.lowercased())
/// // Prints "bbq café 🍵"
///
/// \endcodecomplexity:
/// O(<em>n</em>)
///
/// returns:
/// A lowercase copy of the string.
  SWIFT_INLINE_THUNK String lowercased() const SWIFT_SYMBOL("s:SS10lowercasedSSyF");
/// Returns an uppercase version of the string.
/// The following example transforms a string to uppercase letters:
/// \code
/// let cafe = "Café 🍵"
/// print(cafe.uppercased())
/// // Prints "CAFÉ 🍵"
///
/// \endcodecomplexity:
/// O(<em>n</em>)
///
/// returns:
/// An uppercase copy of the string.
  SWIFT_INLINE_THUNK String uppercased() const SWIFT_SYMBOL("s:SS10uppercasedSSyF");
  SWIFT_INLINE_THUNK bool isEmpty() const SWIFT_SYMBOL("s:SS7isEmptySbvp");
  SWIFT_INLINE_THUNK Array<uint8_t> get_nfcCodeUnits() const SWIFT_SYMBOL("s:SS13_nfcCodeUnitsSays5UInt8VGvp");
  SWIFT_INLINE_THUNK String getDescription() const SWIFT_SYMBOL("s:SS11descriptionSSvp");
/// Appends the given string to this string.
/// \param other A string to append.
///
  SWIFT_INLINE_THUNK void write(const String& other) SWIFT_SYMBOL("s:SS5writeyySSF");
  SWIFT_INLINE_THUNK String getDebugDescription() const SWIFT_SYMBOL("s:SS16debugDescriptionSSvp");
  SWIFT_INLINE_THUNK void _dump() const SWIFT_SYMBOL("s:SS5_dumpyyF");
  SWIFT_INLINE_THUNK bool hasPrefix(const String& prefix) const SWIFT_SYMBOL("s:SS9hasPrefixySbSSF");
  SWIFT_INLINE_THUNK bool hasSuffix(const String& suffix) const SWIFT_SYMBOL("s:SS9hasSuffixySbSSF");
#if defined(__OBJC__)
  SWIFT_INLINE_THUNK operator NSString * _Nonnull () const noexcept {
    return (__bridge_transfer NSString *)(_impl::$sSS10FoundationE19_bridgeToObjectiveCSo8NSStringCyF(_impl::swift_interop_passDirect_Swift_String(_getOpaquePointer())));
  }
static SWIFT_INLINE_THUNK String init(NSString * _Nonnull nsString) noexcept {
    auto result = _make();
    auto res = _impl::$sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ((__bridge void *)nsString);
    memcpy(result._getOpaquePointer(), &res, sizeof(res));
    return result;
  }

#endif
#define SWIFT_CXX_INTEROP_STRING_MIXIN
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
// Allow user to find the header using additional include paths
#if __has_include(<swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <swiftToCxx/_SwiftStdlibCxxOverlay.h>
// Look for the C++ interop support header relative to clang's resource dir:
//  '<toolchain>/usr/lib/clang/<version>/include/../../../swift/swiftToCxx'.
#elif __has_include(<../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
#elif __has_include(<../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
//  '<toolchain>/usr/local/lib/clang/<version>/include/../../../../../lib/swift/swiftToCxx'.
#include <../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
#endif
#pragma clang diagnostic pop
private:
  SWIFT_INLINE_THUNK String() noexcept {}
  static SWIFT_INLINE_THUNK String _make() noexcept { return String(); }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage; }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage; }

  alignas(8) char _storage[16];
  friend class _impl::_impl_String;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $sSSD;
  static inline constexpr $sSSD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_String {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(String &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const String &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER String returnNewValue(T callable) {
    auto result = String::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$sSSMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<swift::String> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return swift::_impl::$sSSMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<swift::String> = true;
template<>
struct implClassFor<swift::String> { using type = swift::_impl::_impl_String; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {








































































































































































































namespace _impl {

class _impl_UTF8View;

// Type metadata accessor for UTF8View
SWIFT_EXTERN swift::_impl::MetadataResponseTy $sSS8UTF8ViewVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:SS8UTF8ViewV") UTF8View final {
public:
  SWIFT_INLINE_THUNK ~UTF8View() noexcept {
    auto metadata = _impl::$sSS8UTF8ViewVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK UTF8View(const UTF8View &other) noexcept {
    auto metadata = _impl::$sSS8UTF8ViewVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK UTF8View &operator =(const UTF8View &other) noexcept {
    auto metadata = _impl::$sSS8UTF8ViewVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK UTF8View &operator =(UTF8View &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER UTF8View(UTF8View &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK String_Index getStartIndex() const SWIFT_SYMBOL("s:SS8UTF8ViewV10startIndexSS0D0Vvp");
  SWIFT_INLINE_THUNK String_Index getEndIndex() const SWIFT_SYMBOL("s:SS8UTF8ViewV8endIndexSS0D0Vvp");
/// Returns the next consecutive position after <code>i</code>.
/// precondition:
/// The next position is representable.
  SWIFT_INLINE_THUNK String_Index indexAfter(const String_Index& i) const SWIFT_SYMBOL("s:SS8UTF8ViewV5index5afterSS5IndexVAF_tF");
  SWIFT_INLINE_THUNK String_Index indexBefore(const String_Index& i) const SWIFT_SYMBOL("s:SS8UTF8ViewV5index6beforeSS5IndexVAF_tF");
  SWIFT_INLINE_THUNK String_Index indexOffsetBy(const String_Index& i, swift::Int n) const SWIFT_SYMBOL("s:SS8UTF8ViewV5index_8offsetBySS5IndexVAF_SitF");
  SWIFT_INLINE_THUNK swift::Optional<String_Index> indexOffsetByLimitedBy(const String_Index& i, swift::Int n, const String_Index& limit) const SWIFT_SYMBOL("s:SS8UTF8ViewV5index_8offsetBy07limitedE0SS5IndexVSgAG_SiAGtF");
  SWIFT_INLINE_THUNK swift::Int distanceFromTo(const String_Index& i, const String_Index& j) const SWIFT_SYMBOL("s:SS8UTF8ViewV8distance4from2toSiSS5IndexV_AGtF");
SWIFT_INLINE_THUNK uint8_t operator [](const String_Index& i) const SWIFT_SYMBOL("s:SS8UTF8ViewVys5UInt8VSS5IndexVcig");
  SWIFT_INLINE_THUNK String getDescription() const SWIFT_SYMBOL("s:SS8UTF8ViewV11descriptionSSvp");
  SWIFT_INLINE_THUNK String getDebugDescription() const SWIFT_SYMBOL("s:SS8UTF8ViewV16debugDescriptionSSvp");
  SWIFT_INLINE_THUNK swift::Int getCount() const SWIFT_SYMBOL("s:SS8UTF8ViewV5countSivp");
private:
  SWIFT_INLINE_THUNK UTF8View() noexcept {}
  static SWIFT_INLINE_THUNK UTF8View _make() noexcept { return UTF8View(); }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage; }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage; }

  alignas(8) char _storage[16];
  friend class _impl::_impl_UTF8View;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $sSS8UTF8ViewVD;
  static inline constexpr $sSS8UTF8ViewVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_UTF8View {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(UTF8View &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const UTF8View &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER UTF8View returnNewValue(T callable) {
    auto result = UTF8View::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$sSS8UTF8ViewVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<swift::UTF8View> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return swift::_impl::$sSS8UTF8ViewVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<swift::UTF8View> = true;
template<>
struct implClassFor<swift::UTF8View> { using type = swift::_impl::_impl_UTF8View; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {














































































































































































































































































































































































































































































  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK Array<T_0_0> Array<T_0_0>::init() {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_Array<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_void_ptr_0_8(result, _impl::$sS2ayxGycfC(swift::TypeMetadataTrait<T_0_0>::getTypeMetadata()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK Array<T_0_0> Array<T_0_0>::init(const T_0_0& repeatedValue, swift::Int count) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  alignas(alignof(T_0_0)) char copyBuffer_consumedParamCopy_repeatedValue[sizeof(T_0_0)];
  auto &consumedParamCopy_repeatedValue = *(new(copyBuffer_consumedParamCopy_repeatedValue) T_0_0(repeatedValue));
  swift::_impl::ConsumedValueStorageDestroyer<T_0_0> storageGuard_consumedParamCopy_repeatedValue(consumedParamCopy_repeatedValue);
  return _impl::_impl_Array<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_void_ptr_0_8(result, _impl::$sSa9repeating5countSayxGx_SitcfC(swift::_impl::getOpaquePointer(consumedParamCopy_repeatedValue), count, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK void Array<T_0_0>::reserveCapacity(swift::Int minimumCapacity) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  _impl::$sSa15reserveCapacityyySiF(minimumCapacity, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK void Array<T_0_0>::append(const T_0_0& newElement) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  alignas(alignof(T_0_0)) char copyBuffer_consumedParamCopy_newElement[sizeof(T_0_0)];
  auto &consumedParamCopy_newElement = *(new(copyBuffer_consumedParamCopy_newElement) T_0_0(newElement));
  swift::_impl::ConsumedValueStorageDestroyer<T_0_0> storageGuard_consumedParamCopy_newElement(consumedParamCopy_newElement);
  _impl::$sSa6appendyyxnF(swift::_impl::getOpaquePointer(consumedParamCopy_newElement), swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Optional<T_0_0> Array<T_0_0>::_customRemoveLast() {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_Optional<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$sSa17_customRemoveLastxSgyF(result, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK T_0_0 Array<T_0_0>::removeAt(swift::Int index) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
  if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
  void *returnValue;
  _impl::$sSa6remove2atxSi_tF(reinterpret_cast<void *>(&returnValue), index, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  return ::swift::_impl::implClassFor<T_0_0>::type::makeRetained(returnValue);
  } else if constexpr (::swift::_impl::isValueType<T_0_0>) {
  return ::swift::_impl::implClassFor<T_0_0>::type::returnNewValue([&](void * _Nonnull returnValue) SWIFT_INLINE_THUNK_ATTRIBUTES {
_impl::$sSa6remove2atxSi_tF(returnValue, index, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  } else if constexpr (::swift::_impl::isSwiftBridgedCxxRecord<T_0_0>) {
alignas(alignof(T_0_0)) char storage[sizeof(T_0_0)];
auto * _Nonnull storageObjectPtr = reinterpret_cast<T_0_0 *>(storage);
_impl::$sSa6remove2atxSi_tF(storage, index, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
T_0_0 result(static_cast<T_0_0 &&>(*storageObjectPtr));
storageObjectPtr->~T_0_0();
return result;
  } else {
  T_0_0 returnValue;
_impl::$sSa6remove2atxSi_tF(reinterpret_cast<void *>(&returnValue), index, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  return returnValue;
  }
#pragma clang diagnostic pop
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK void Array<T_0_0>::insertAt(const T_0_0& newElement, swift::Int i) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  alignas(alignof(T_0_0)) char copyBuffer_consumedParamCopy_newElement[sizeof(T_0_0)];
  auto &consumedParamCopy_newElement = *(new(copyBuffer_consumedParamCopy_newElement) T_0_0(newElement));
  swift::_impl::ConsumedValueStorageDestroyer<T_0_0> storageGuard_consumedParamCopy_newElement(consumedParamCopy_newElement);
  _impl::$sSa6insert_2atyxn_SitF(swift::_impl::getOpaquePointer(consumedParamCopy_newElement), i, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK void Array<T_0_0>::removeAllKeepingCapacity(bool keepCapacity) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  _impl::$sSa9removeAll15keepingCapacityySb_tF(keepCapacity, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Int Array<T_0_0>::getStartIndex() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa10startIndexSivg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Int Array<T_0_0>::getEndIndex() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa8endIndexSivg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Int Array<T_0_0>::distanceFromTo(swift::Int start, swift::Int end) const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa8distance4from2toS2i_SitF(start, end, _impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK T_0_0 Array<T_0_0>::operator [](swift::Int index) const SWIFT_SYMBOL("s:SayxSicig") {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
  if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
  void *returnValue;
  _impl::$sSayxSicig(reinterpret_cast<void *>(&returnValue), index, _impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  return ::swift::_impl::implClassFor<T_0_0>::type::makeRetained(returnValue);
  } else if constexpr (::swift::_impl::isValueType<T_0_0>) {
  return ::swift::_impl::implClassFor<T_0_0>::type::returnNewValue([&](void * _Nonnull returnValue) SWIFT_INLINE_THUNK_ATTRIBUTES {
_impl::$sSayxSicig(returnValue, index, _impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  });
  } else if constexpr (::swift::_impl::isSwiftBridgedCxxRecord<T_0_0>) {
alignas(alignof(T_0_0)) char storage[sizeof(T_0_0)];
auto * _Nonnull storageObjectPtr = reinterpret_cast<T_0_0 *>(storage);
_impl::$sSayxSicig(storage, index, _impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
T_0_0 result(static_cast<T_0_0 &&>(*storageObjectPtr));
storageObjectPtr->~T_0_0();
return result;
  } else {
  T_0_0 returnValue;
_impl::$sSayxSicig(reinterpret_cast<void *>(&returnValue), index, _impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  return returnValue;
  }
#pragma clang diagnostic pop
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Int Array<T_0_0>::getCount() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa5countSivg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK bool Array<T_0_0>::_hoistableIsNativeTypeChecked() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa29_hoistableIsNativeTypeCheckedSbyF(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Int Array<T_0_0>::getCapacity() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa8capacitySivg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK String Array<T_0_0>::getDescription() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSa11descriptionSSvg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK String Array<T_0_0>::getDebugDescription() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSa16debugDescriptionSSvg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK Array<T_0_0> Array<T_0_0>::init(const Array<T_0_0>& elements) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  alignas(alignof(Array<T_0_0>)) char copyBuffer_consumedParamCopy_elements[sizeof(Array<T_0_0>)];
  auto &consumedParamCopy_elements = *(new(copyBuffer_consumedParamCopy_elements) Array<T_0_0>(elements));
  swift::_impl::ConsumedValueStorageDestroyer<Array<T_0_0>> storageGuard_consumedParamCopy_elements(consumedParamCopy_elements);
  return _impl::_impl_Array<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_void_ptr_0_8(result, _impl::$sSa12arrayLiteralSayxGxd_tcfC(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_impl::_impl_Array<T_0_0>::getOpaquePointer(consumedParamCopy_elements)), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata()));
  });
  }
  SWIFT_INLINE_THUNK swift::Int String_Index::getEncodedOffset() const {
  return _impl::$sSS5IndexV13encodedOffsetSivg(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK String_Index String_Index::init(swift::Int offset) {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS5IndexV13encodedOffsetABSi_tcfC(offset));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<String_Index> String_Index::init(const String_Index& sourcePosition, const String& target) {
  alignas(alignof(String)) char copyBuffer_consumedParamCopy_target[sizeof(String)];
  auto &consumedParamCopy_target = *(new(copyBuffer_consumedParamCopy_target) String(target));
  swift::_impl::ConsumedValueStorageDestroyer<String> storageGuard_consumedParamCopy_target(consumedParamCopy_target);
  return _impl::_impl_Optional<String_Index>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(result, _impl::$sSS5IndexV_6withinABSgAB_SStcfC(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(sourcePosition)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(consumedParamCopy_target))));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<String_Index> String_Index::samePositionIn(const UTF8View& utf8) const {
  return _impl::_impl_Optional<String_Index>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(result, _impl::$sSS5IndexV12samePosition2inABSgSS8UTF8ViewV_tF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_UTF8View::getOpaquePointer(utf8)), _impl::swift_interop_passDirect_swift_uint64_t_0_8(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Int String_Index::getHashValue() const {
  return _impl::$sSS5IndexV9hashValueSivg(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK swift::Optional<String_Index> String_Index::samePositionIn(const String& characters) const {
  return _impl::_impl_Optional<String_Index>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(result, _impl::$sSS5IndexV12samePosition2inABSgSS_tF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(characters)), _impl::swift_interop_passDirect_swift_uint64_t_0_8(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<String_Index> String_Index::init(const String_Index& idx, const UTF8View& target) {
  alignas(alignof(UTF8View)) char copyBuffer_consumedParamCopy_target[sizeof(UTF8View)];
  auto &consumedParamCopy_target = *(new(copyBuffer_consumedParamCopy_target) UTF8View(target));
  swift::_impl::ConsumedValueStorageDestroyer<UTF8View> storageGuard_consumedParamCopy_target(consumedParamCopy_target);
  return _impl::_impl_Optional<String_Index>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(result, _impl::$sSS5IndexV_6withinABSgAB_SS8UTF8ViewVtcfC(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(idx)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_UTF8View::getOpaquePointer(consumedParamCopy_target))));
  });
  }
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK Optional<T_0_0> Optional<T_0_0>::_impl_some::operator()(const T_0_0& val) const {
    auto result = Optional<T_0_0>::_make();
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
    void *ptr = ::swift::_impl::_impl_RefCountedClass::copyOpaquePointer(val);
    memcpy(result._getOpaquePointer(), &ptr, sizeof(ptr));
} else if constexpr (::swift::_impl::isValueType<T_0_0>) {
    alignas(T_0_0) unsigned char buffer[sizeof(T_0_0)];
    auto *valCopy = new(buffer) T_0_0(val);
    swift::_impl::implClassFor<T_0_0>::type::initializeWithTake(result._getOpaquePointer(), swift::_impl::implClassFor<T_0_0>::type::getOpaquePointer(*valCopy));
} else {
    memcpy(result._getOpaquePointer(), &val, sizeof(val));
}
#pragma clang diagnostic pop
    result._destructiveInjectEnumTag(0);
    return result;
  }
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK  bool Optional<T_0_0>::isSome() const {
    return *this == Optional<T_0_0>::some;
  }
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK T_0_0 Optional<T_0_0>::getSome() const {
    if (!isSome()) abort();
    alignas(Optional) unsigned char buffer[sizeof(Optional)];
    auto *thisCopy = new(buffer) Optional(*this);
    char * _Nonnull payloadFromDestruction = thisCopy->_destructiveProjectEnumData();
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
  if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
  void *returnValue;
  returnValue = *reinterpret_cast<void **>(payloadFromDestruction);
  return ::swift::_impl::implClassFor<T_0_0>::type::makeRetained(returnValue);
  } else if constexpr (::swift::_impl::isValueType<T_0_0>) {
  return ::swift::_impl::implClassFor<T_0_0>::type::returnNewValue([&](void * _Nonnull returnValue) SWIFT_INLINE_THUNK_ATTRIBUTES {
  return ::swift::_impl::implClassFor<T_0_0>::type::initializeWithTake(reinterpret_cast<char * _Nonnull>(returnValue), payloadFromDestruction);
  });
  } else if constexpr (::swift::_impl::isSwiftBridgedCxxRecord<T_0_0>) {
abort();
  } else {
  T_0_0 returnValue;
memcpy(&returnValue, payloadFromDestruction, sizeof(returnValue));
  return returnValue;
  }
#pragma clang diagnostic pop
}
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK Optional<T_0_0> Optional<T_0_0>::_impl_none::operator()() const {
    auto result = Optional<T_0_0>::_make();
    result._destructiveInjectEnumTag(1);
    return result;
  }
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK  bool Optional<T_0_0>::isNone() const {
    return *this == Optional<T_0_0>::none;
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK String Optional<T_0_0>::getDebugDescription() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSq16debugDescriptionSSvg(swift::TypeMetadataTrait<Optional<T_0_0>>::getTypeMetadata(), _getOpaquePointer()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK T_0_0 Optional<T_0_0>::getUnsafelyUnwrapped() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
  if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
  void *returnValue;
  _impl::$sSq17unsafelyUnwrappedxvg(reinterpret_cast<void *>(&returnValue), swift::TypeMetadataTrait<Optional<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  return ::swift::_impl::implClassFor<T_0_0>::type::makeRetained(returnValue);
  } else if constexpr (::swift::_impl::isValueType<T_0_0>) {
  return ::swift::_impl::implClassFor<T_0_0>::type::returnNewValue([&](void * _Nonnull returnValue) SWIFT_INLINE_THUNK_ATTRIBUTES {
_impl::$sSq17unsafelyUnwrappedxvg(returnValue, swift::TypeMetadataTrait<Optional<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  } else if constexpr (::swift::_impl::isSwiftBridgedCxxRecord<T_0_0>) {
alignas(alignof(T_0_0)) char storage[sizeof(T_0_0)];
auto * _Nonnull storageObjectPtr = reinterpret_cast<T_0_0 *>(storage);
_impl::$sSq17unsafelyUnwrappedxvg(storage, swift::TypeMetadataTrait<Optional<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
T_0_0 result(static_cast<T_0_0 &&>(*storageObjectPtr));
storageObjectPtr->~T_0_0();
return result;
  } else {
  T_0_0 returnValue;
_impl::$sSq17unsafelyUnwrappedxvg(reinterpret_cast<void *>(&returnValue), swift::TypeMetadataTrait<Optional<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  return returnValue;
  }
#pragma clang diagnostic pop
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Optional<T_0_0> Optional<T_0_0>::init(const T_0_0& some_) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  alignas(alignof(T_0_0)) char copyBuffer_consumedParamCopy_some[sizeof(T_0_0)];
  auto &consumedParamCopy_some = *(new(copyBuffer_consumedParamCopy_some) T_0_0(some_));
  swift::_impl::ConsumedValueStorageDestroyer<T_0_0> storageGuard_consumedParamCopy_some(consumedParamCopy_some);
  return _impl::_impl_Optional<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$sSqyxSgxcfC(result, swift::_impl::getOpaquePointer(consumedParamCopy_some), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  });
  }
  SWIFT_INLINE_THUNK String String::init() {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sS2SycfC());
  });
  }
  SWIFT_INLINE_THUNK String_Index String::getStartIndex() const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS10startIndexSS0B0Vvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String_Index String::getEndIndex() const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8endIndexSS0B0Vvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Int String::getCount() const {
  return _impl::$sSS5countSivg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK swift::Int String::distanceFromTo(const String_Index& start, const String_Index& end) const {
  return _impl::$sSS8distance4from2toSiSS5IndexV_AEtF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(start)), _impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(end)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK void String::reserveCapacity(swift::Int n) {
  _impl::$sSS15reserveCapacityyySiF(n, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void String::append(const String& other) {
  _impl::$sSS6appendyySSF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(other)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void String::appendContentsOf(const String& newElements) {
  _impl::$sSS6append10contentsOfySS_tF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(newElements)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void String::removeAllKeepingCapacity(bool keepCapacity) {
  _impl::$sSS9removeAll15keepingCapacityySb_tF(keepCapacity, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK UTF8View String::getUtf8() const {
  return _impl::_impl_UTF8View::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS4utf8SS8UTF8ViewVvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK void String::setUtf8(const UTF8View& newValue) {
  alignas(alignof(UTF8View)) char copyBuffer_consumedParamCopy_newValue[sizeof(UTF8View)];
  auto &consumedParamCopy_newValue = *(new(copyBuffer_consumedParamCopy_newValue) UTF8View(newValue));
  swift::_impl::ConsumedValueStorageDestroyer<UTF8View> storageGuard_consumedParamCopy_newValue(consumedParamCopy_newValue);
  _impl::$sSS4utf8SS8UTF8ViewVvs(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_UTF8View::getOpaquePointer(consumedParamCopy_newValue)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK String String::getCharacters() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS10charactersSSvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK void String::setCharacters(const String& newValue) {
  alignas(alignof(String)) char copyBuffer_consumedParamCopy_newValue[sizeof(String)];
  auto &consumedParamCopy_newValue = *(new(copyBuffer_consumedParamCopy_newValue) String(newValue));
  swift::_impl::ConsumedValueStorageDestroyer<String> storageGuard_consumedParamCopy_newValue(consumedParamCopy_newValue);
  _impl::$sSS10charactersSSvs(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(consumedParamCopy_newValue)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Int String::getHashValue() const {
  return _impl::$sSS9hashValueSivg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK String String::lowercased() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS10lowercasedSSyF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String String::uppercased() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS10uppercasedSSyF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK bool String::isEmpty() const {
  return _impl::$sSS7isEmptySbvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK Array<uint8_t> String::get_nfcCodeUnits() const {
  return _impl::_impl_Array<uint8_t>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_void_ptr_0_8(result, _impl::$sSS13_nfcCodeUnitsSays5UInt8VGvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String String::getDescription() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS11descriptionSSvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK void String::write(const String& other) {
  _impl::$sSS5writeyySSF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(other)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK String String::getDebugDescription() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS16debugDescriptionSSvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK void String::_dump() const {
  _impl::$sSS5_dumpyyF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK bool String::hasPrefix(const String& prefix) const {
  return _impl::$sSS9hasPrefixySbSSF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(prefix)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK bool String::hasSuffix(const String& suffix) const {
  return _impl::$sSS9hasSuffixySbSSF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(suffix)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK String_Index UTF8View::getStartIndex() const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8UTF8ViewV10startIndexSS0D0Vvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String_Index UTF8View::getEndIndex() const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8UTF8ViewV8endIndexSS0D0Vvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String_Index UTF8View::indexAfter(const String_Index& i) const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8UTF8ViewV5index5afterSS5IndexVAF_tF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String_Index UTF8View::indexBefore(const String_Index& i) const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8UTF8ViewV5index6beforeSS5IndexVAF_tF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String_Index UTF8View::indexOffsetBy(const String_Index& i, swift::Int n) const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8UTF8ViewV5index_8offsetBySS5IndexVAF_SitF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), n, _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<String_Index> UTF8View::indexOffsetByLimitedBy(const String_Index& i, swift::Int n, const String_Index& limit) const {
  return _impl::_impl_Optional<String_Index>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(result, _impl::$sSS8UTF8ViewV5index_8offsetBy07limitedE0SS5IndexVSgAG_SiAGtF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), n, _impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(limit)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Int UTF8View::distanceFromTo(const String_Index& i, const String_Index& j) const {
  return _impl::$sSS8UTF8ViewV8distance4from2toSiSS5IndexV_AGtF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), _impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(j)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
SWIFT_INLINE_THUNK uint8_t UTF8View::operator [](const String_Index& i) const SWIFT_SYMBOL("s:SS8UTF8ViewVys5UInt8VSS5IndexVcig") {
  return _impl::$sSS8UTF8ViewVys5UInt8VSS5IndexVcig(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK String UTF8View::getDescription() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS8UTF8ViewV11descriptionSSvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String UTF8View::getDebugDescription() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS8UTF8ViewV16debugDescriptionSSvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Int UTF8View::getCount() const {
  return _impl::$sSS8UTF8ViewV5countSivg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!==(_:_:)'.

// Unavailable in C++: Swift operator function '%(_:_:)'.

// Unavailable in C++: Swift operator function '%=(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '===(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '??(_:_:)'.

// Unavailable in C++: Swift operator function '??(_:_:)'.

class AdditiveArithmetic { } SWIFT_UNAVAILABLE_MSG("protocol 'AdditiveArithmetic' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'AnyClass'.

class AnyKeyPath { } SWIFT_UNAVAILABLE_MSG("class 'AnyKeyPath' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'AnyObject'.

// Unavailable in C++: Swift type alias 'ArrayLiteralConvertible'.

class BidirectionalCollection { } SWIFT_UNAVAILABLE_MSG("protocol 'BidirectionalCollection' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'BidirectionalIndexable'.

// Unavailable in C++: Swift type alias 'BidirectionalSlice'.

class BinaryFloatingPoint { } SWIFT_UNAVAILABLE_MSG("protocol 'BinaryFloatingPoint' can not yet be represented in C++");

class BinaryInteger { } SWIFT_UNAVAILABLE_MSG("protocol 'BinaryInteger' can not yet be represented in C++");

class BitwiseCopyable { } SWIFT_UNAVAILABLE_MSG("protocol 'BitwiseCopyable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'BooleanLiteralConvertible'.

// Unavailable in C++: Swift type alias 'BooleanLiteralType'.

// Unavailable in C++: Swift type alias 'CBool'.

// Unavailable in C++: Swift type alias 'CChar'.

// Unavailable in C++: Swift type alias 'CChar16'.

// Unavailable in C++: Swift type alias 'CChar32'.

// Unavailable in C++: Swift type alias 'CDouble'.

// Unavailable in C++: Swift type alias 'CFloat'.

// Unavailable in C++: Swift type alias 'CFloat16'.

// Unavailable in C++: Swift type alias 'CInt'.

// Unavailable in C++: Swift type alias 'CLong'.

// Unavailable in C++: Swift type alias 'CLongDouble'.

// Unavailable in C++: Swift type alias 'CLongLong'.

// Unavailable in C++: Swift type alias 'CShort'.

// Unavailable in C++: Swift type alias 'CSignedChar'.

// Unavailable in C++: Swift type alias 'CUnsignedChar'.

// Unavailable in C++: Swift type alias 'CUnsignedInt'.

// Unavailable in C++: Swift type alias 'CUnsignedLong'.

// Unavailable in C++: Swift type alias 'CUnsignedLongLong'.

// Unavailable in C++: Swift type alias 'CUnsignedShort'.

class CVarArg { } SWIFT_UNAVAILABLE_MSG("protocol 'CVarArg' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'CWideChar'.

class CaseIterable { } SWIFT_UNAVAILABLE_MSG("protocol 'CaseIterable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'ClosedRangeIndex'.

// Unavailable in C++: Swift type alias 'Codable'.

class CodingKey { } SWIFT_UNAVAILABLE_MSG("protocol 'CodingKey' can not yet be represented in C++");

class CodingKeyRepresentable { } SWIFT_UNAVAILABLE_MSG("protocol 'CodingKeyRepresentable' can not yet be represented in C++");

class Collection { } SWIFT_UNAVAILABLE_MSG("protocol 'Collection' can not yet be represented in C++");

class CommandLine { } SWIFT_UNAVAILABLE_MSG("enum 'CommandLine' is not yet exposed to C++");

class Comparable { } SWIFT_UNAVAILABLE_MSG("protocol 'Comparable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'ConcurrentValue'.

class Copyable { } SWIFT_UNAVAILABLE_MSG("protocol 'Copyable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'CountableClosedRange'.

// Unavailable in C++: Swift type alias 'CountablePartialRangeFrom'.

// Unavailable in C++: Swift type alias 'CountableRange'.

class CustomDebugStringConvertible { } SWIFT_UNAVAILABLE_MSG("protocol 'CustomDebugStringConvertible' can not yet be represented in C++");

class CustomLeafReflectable { } SWIFT_UNAVAILABLE_MSG("protocol 'CustomLeafReflectable' can not yet be represented in C++");

class CustomPlaygroundDisplayConvertible { } SWIFT_UNAVAILABLE_MSG("protocol 'CustomPlaygroundDisplayConvertible' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'CustomPlaygroundQuickLookable'.

class CustomReflectable { } SWIFT_UNAVAILABLE_MSG("protocol 'CustomReflectable' can not yet be represented in C++");

class CustomStringConvertible { } SWIFT_UNAVAILABLE_MSG("protocol 'CustomStringConvertible' can not yet be represented in C++");

// Unavailable in C++: Swift macro 'DebugDescription()'.

class Decodable { } SWIFT_UNAVAILABLE_MSG("protocol 'Decodable' can not yet be represented in C++");

class Decoder { } SWIFT_UNAVAILABLE_MSG("protocol 'Decoder' can not yet be represented in C++");

class DecodingError { } SWIFT_UNAVAILABLE_MSG("enum 'DecodingError' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'DefaultBidirectionalIndices'.

// Unavailable in C++: Swift type alias 'DefaultRandomAccessIndices'.

// Unavailable in C++: Swift type alias 'DictionaryIndex'.

// Unavailable in C++: Swift type alias 'DictionaryIterator'.

// Unavailable in C++: Swift type alias 'DictionaryLiteral'.

// Unavailable in C++: Swift type alias 'DictionaryLiteralConvertible'.

class DurationProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'DurationProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'EmptyIterator'.

class Encodable { } SWIFT_UNAVAILABLE_MSG("protocol 'Encodable' can not yet be represented in C++");

class Encoder { } SWIFT_UNAVAILABLE_MSG("protocol 'Encoder' can not yet be represented in C++");

class EncodingError { } SWIFT_UNAVAILABLE_MSG("enum 'EncodingError' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'EnumeratedIterator'.

class Equatable { } SWIFT_UNAVAILABLE_MSG("protocol 'Equatable' can not yet be represented in C++");

class Escapable { } SWIFT_UNAVAILABLE_MSG("protocol 'Escapable' can not yet be represented in C++");

class ExpressibleByArrayLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByArrayLiteral' can not yet be represented in C++");

class ExpressibleByBooleanLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByBooleanLiteral' can not yet be represented in C++");

class ExpressibleByDictionaryLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByDictionaryLiteral' can not yet be represented in C++");

class ExpressibleByExtendedGraphemeClusterLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByExtendedGraphemeClusterLiteral' can not yet be represented in C++");

class ExpressibleByFloatLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByFloatLiteral' can not yet be represented in C++");

class ExpressibleByIntegerLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByIntegerLiteral' can not yet be represented in C++");

class ExpressibleByNilLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByNilLiteral' can not yet be represented in C++");

class ExpressibleByStringInterpolation { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByStringInterpolation' can not yet be represented in C++");

class ExpressibleByStringLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByStringLiteral' can not yet be represented in C++");

class ExpressibleByUnicodeScalarLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByUnicodeScalarLiteral' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'ExtendedGraphemeClusterLiteralConvertible'.

// Unavailable in C++: Swift type alias 'ExtendedGraphemeClusterType'.

class FixedWidthInteger { } SWIFT_UNAVAILABLE_MSG("protocol 'FixedWidthInteger' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'FlattenBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'FlattenBidirectionalCollectionIndex'.

// Unavailable in C++: Swift type alias 'FlattenCollection'.

// Unavailable in C++: Swift type alias 'FlattenCollectionIndex'.

// Unavailable in C++: Swift type alias 'Float32'.

// Unavailable in C++: Swift type alias 'Float64'.

// Unavailable in C++: Swift type alias 'FloatLiteralConvertible'.

// Unavailable in C++: Swift type alias 'FloatLiteralType'.

class FloatingPoint { } SWIFT_UNAVAILABLE_MSG("protocol 'FloatingPoint' can not yet be represented in C++");

class FloatingPointClassification { } SWIFT_UNAVAILABLE_MSG("enum 'FloatingPointClassification' is not yet exposed to C++");

class FloatingPointRoundingRule { } SWIFT_UNAVAILABLE_MSG("enum 'FloatingPointRoundingRule' is not yet exposed to C++");

class FloatingPointSign { } SWIFT_UNAVAILABLE_MSG("enum 'FloatingPointSign' is not yet exposed to C++");

class Hashable { } SWIFT_UNAVAILABLE_MSG("protocol 'Hashable' can not yet be represented in C++");

class Identifiable { } SWIFT_UNAVAILABLE_MSG("protocol 'Identifiable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'ImplicitlyUnwrappedOptional'.

// Unavailable in C++: Swift type alias 'Indexable'.

// Unavailable in C++: Swift type alias 'IndexableBase'.

class InstantProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'InstantProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'IntegerLiteralConvertible'.

// Unavailable in C++: Swift type alias 'IntegerLiteralType'.

// Unavailable in C++: Swift type alias 'IteratorOverOne'.

class IteratorProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'IteratorProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'JoinedIterator'.

class KeyPath { } SWIFT_UNAVAILABLE_MSG("generic generic class 'KeyPath' can not yet be exposed to C++");

class KeyedDecodingContainerProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'KeyedDecodingContainerProtocol' can not yet be represented in C++");

class KeyedEncodingContainerProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'KeyedEncodingContainerProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'LazyBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'LazyCollection'.

class LazyCollectionProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'LazyCollectionProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'LazyDropWhileBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'LazyDropWhileCollection'.

// Unavailable in C++: Swift type alias 'LazyDropWhileIndex'.

// Unavailable in C++: Swift type alias 'LazyDropWhileIterator'.

// Unavailable in C++: Swift type alias 'LazyFilterBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'LazyFilterCollection'.

// Unavailable in C++: Swift type alias 'LazyFilterIndex'.

// Unavailable in C++: Swift type alias 'LazyFilterIterator'.

// Unavailable in C++: Swift type alias 'LazyMapBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'LazyMapCollection'.

// Unavailable in C++: Swift type alias 'LazyMapIterator'.

// Unavailable in C++: Swift type alias 'LazyMapRandomAccessCollection'.

// Unavailable in C++: Swift type alias 'LazyPrefixWhileBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'LazyPrefixWhileCollection'.

// Unavailable in C++: Swift type alias 'LazyPrefixWhileIndex'.

// Unavailable in C++: Swift type alias 'LazyPrefixWhileIterator'.

// Unavailable in C++: Swift type alias 'LazyRandomAccessCollection'.

class LazySequenceProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'LazySequenceProtocol' can not yet be represented in C++");

class LosslessStringConvertible { } SWIFT_UNAVAILABLE_MSG("protocol 'LosslessStringConvertible' can not yet be represented in C++");

class ManagedBuffer { } SWIFT_UNAVAILABLE_MSG("generic generic class 'ManagedBuffer' can not yet be exposed to C++");

class MemoryLayout { } SWIFT_UNAVAILABLE_MSG("generic enum 'MemoryLayout' is not yet exposed to C++");

class MirrorPath { } SWIFT_UNAVAILABLE_MSG("protocol 'MirrorPath' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'MutableBidirectionalSlice'.

class MutableCollection { } SWIFT_UNAVAILABLE_MSG("protocol 'MutableCollection' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'MutableIndexable'.

// Unavailable in C++: Swift type alias 'MutableRandomAccessSlice'.

// Unavailable in C++: Swift type alias 'MutableRangeReplaceableBidirectionalSlice'.

// Unavailable in C++: Swift type alias 'MutableRangeReplaceableRandomAccessSlice'.

// Unavailable in C++: Swift type alias 'MutableRangeReplaceableSlice'.

// Unavailable in C++: Swift type alias 'MutableSlice'.

class Never { } SWIFT_UNAVAILABLE_MSG("enum 'Never' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'NilLiteralConvertible'.

class Numeric { } SWIFT_UNAVAILABLE_MSG("protocol 'Numeric' can not yet be represented in C++");

class OptionSet { } SWIFT_UNAVAILABLE_MSG("protocol 'OptionSet' can not yet be represented in C++");

class PartialKeyPath { } SWIFT_UNAVAILABLE_MSG("generic generic class 'PartialKeyPath' can not yet be exposed to C++");

// Unavailable in C++: Swift type alias 'PlaygroundQuickLook'.

class RandomAccessCollection { } SWIFT_UNAVAILABLE_MSG("protocol 'RandomAccessCollection' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'RandomAccessIndexable'.

// Unavailable in C++: Swift type alias 'RandomAccessSlice'.

class RandomNumberGenerator { } SWIFT_UNAVAILABLE_MSG("protocol 'RandomNumberGenerator' can not yet be represented in C++");

class RangeExpression { } SWIFT_UNAVAILABLE_MSG("protocol 'RangeExpression' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'RangeReplaceableBidirectionalSlice'.

class RangeReplaceableCollection { } SWIFT_UNAVAILABLE_MSG("protocol 'RangeReplaceableCollection' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'RangeReplaceableIndexable'.

// Unavailable in C++: Swift type alias 'RangeReplaceableRandomAccessSlice'.

// Unavailable in C++: Swift type alias 'RangeReplaceableSlice'.

class RawRepresentable { } SWIFT_UNAVAILABLE_MSG("protocol 'RawRepresentable' can not yet be represented in C++");

class ReferenceWritableKeyPath { } SWIFT_UNAVAILABLE_MSG("generic generic class 'ReferenceWritableKeyPath' can not yet be exposed to C++");

class Result { } SWIFT_UNAVAILABLE_MSG("generic requirements for generic enum 'Result' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'ReversedIndex'.

// Unavailable in C++: Swift type alias 'ReversedRandomAccessCollection'.

class SIMD { } SWIFT_UNAVAILABLE_MSG("protocol 'SIMD' can not yet be represented in C++");

class SIMDScalar { } SWIFT_UNAVAILABLE_MSG("protocol 'SIMDScalar' can not yet be represented in C++");

class SIMDStorage { } SWIFT_UNAVAILABLE_MSG("protocol 'SIMDStorage' can not yet be represented in C++");

class Sendable { } SWIFT_UNAVAILABLE_MSG("protocol 'Sendable' can not yet be represented in C++");

class Sequence { } SWIFT_UNAVAILABLE_MSG("protocol 'Sequence' can not yet be represented in C++");

class SetAlgebra { } SWIFT_UNAVAILABLE_MSG("protocol 'SetAlgebra' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'SetIndex'.

// Unavailable in C++: Swift type alias 'SetIterator'.

class SignedInteger { } SWIFT_UNAVAILABLE_MSG("protocol 'SignedInteger' can not yet be represented in C++");

class SignedNumeric { } SWIFT_UNAVAILABLE_MSG("protocol 'SignedNumeric' can not yet be represented in C++");

class SingleValueDecodingContainer { } SWIFT_UNAVAILABLE_MSG("protocol 'SingleValueDecodingContainer' can not yet be represented in C++");

class SingleValueEncodingContainer { } SWIFT_UNAVAILABLE_MSG("protocol 'SingleValueEncodingContainer' can not yet be represented in C++");

class Strideable { } SWIFT_UNAVAILABLE_MSG("protocol 'Strideable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'StringInterpolationConvertible'.

class StringInterpolationProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'StringInterpolationProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'StringLiteralConvertible'.

// Unavailable in C++: Swift type alias 'StringLiteralType'.

class StringProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'StringProtocol' can not yet be represented in C++");

class TextOutputStream { } SWIFT_UNAVAILABLE_MSG("protocol 'TextOutputStream' can not yet be represented in C++");

class TextOutputStreamable { } SWIFT_UNAVAILABLE_MSG("protocol 'TextOutputStreamable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'UTF16'.

// Unavailable in C++: Swift type alias 'UTF32'.

// Unavailable in C++: Swift type alias 'UTF8'.

// Unavailable in C++: Swift type alias 'UnboundedRange'.

class UnboundedRange_ { } SWIFT_UNAVAILABLE_MSG("enum 'UnboundedRange_' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'UnfoldFirstSequence'.

class Unicode { } SWIFT_UNAVAILABLE_MSG("enum 'Unicode' is not yet exposed to C++");

class UnicodeCodec { } SWIFT_UNAVAILABLE_MSG("protocol 'UnicodeCodec' can not yet be represented in C++");

class UnicodeDecodingResult { } SWIFT_UNAVAILABLE_MSG("enum 'UnicodeDecodingResult' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'UnicodeScalar'.

// Unavailable in C++: Swift type alias 'UnicodeScalarLiteralConvertible'.

// Unavailable in C++: Swift type alias 'UnicodeScalarType'.

class UnkeyedDecodingContainer { } SWIFT_UNAVAILABLE_MSG("protocol 'UnkeyedDecodingContainer' can not yet be represented in C++");

class UnkeyedEncodingContainer { } SWIFT_UNAVAILABLE_MSG("protocol 'UnkeyedEncodingContainer' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'UnsafeBufferPointerIterator'.

// Unavailable in C++: Swift type alias 'UnsafeConcurrentValue'.

// Unavailable in C++: Swift type alias 'UnsafeMutableRawBufferPointerIterator'.

// Unavailable in C++: Swift type alias 'UnsafeRawBufferPointerIterator'.

class UnsafeSendable { } SWIFT_UNAVAILABLE_MSG("protocol 'UnsafeSendable' can not yet be represented in C++");

class UnsignedInteger { } SWIFT_UNAVAILABLE_MSG("protocol 'UnsignedInteger' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'Void'.

class WritableKeyPath { } SWIFT_UNAVAILABLE_MSG("generic generic class 'WritableKeyPath' can not yet be exposed to C++");

// Unavailable in C++: Swift type alias 'Zip2Iterator'.

// Unavailable in C++: Swift global function 'abs(_:)'.

// Unavailable in C++: Swift global function 'all(_:)'.

// Unavailable in C++: Swift global function 'any(_:)'.

// Unavailable in C++: Swift global function 'assert(_:_:file:line:)'.

// Unavailable in C++: Swift global function 'assertionFailure(_:file:line:)'.

// Unavailable in C++: Swift macro 'column()'.

// Unavailable in C++: Swift global function 'debugPrint(_:separator:terminator:)'.

// Unavailable in C++: Swift global function 'debugPrint(_:separator:terminator:to:)'.

// Unavailable in C++: Swift macro 'dsohandle()'.

// Unavailable in C++: Swift global function 'dump(_:name:indent:maxDepth:maxItems:)'.

// Unavailable in C++: Swift global function 'dump(_:to:name:indent:maxDepth:maxItems:)'.

// Unavailable in C++: Swift macro 'error(_:)'.

// Unavailable in C++: Swift global function 'exchange(_:with:)'.

// Unavailable in C++: Swift macro 'externalMacro(module:type:)'.

// Unavailable in C++: Swift global function 'fatalError(_:file:line:)'.

// Unavailable in C++: Swift macro 'file()'.

// Unavailable in C++: Swift macro 'fileID()'.

// Unavailable in C++: Swift macro 'filePath()'.

// Unavailable in C++: Swift macro 'function()'.

// Unavailable in C++: Swift global function 'getVaList(_:)'.

// Unavailable in C++: Swift global function 'isKnownUniquelyReferenced(_:)'.

// Unavailable in C++: Swift global function 'isKnownUniquelyReferenced(_:)'.

// Unavailable in C++: Swift macro 'line()'.

// Unavailable in C++: Swift global function 'max(_:_:)'.

// Unavailable in C++: Swift global function 'max(_:_:_:_:)'.

// Unavailable in C++: Swift global function 'min(_:_:)'.

// Unavailable in C++: Swift global function 'min(_:_:_:_:)'.

// Unavailable in C++: Swift global function 'numericCast(_:)'.

// Unavailable in C++: Swift global function 'pointwiseMax(_:_:)'.

// Unavailable in C++: Swift global function 'pointwiseMax(_:_:)'.

// Unavailable in C++: Swift global function 'pointwiseMin(_:_:)'.

// Unavailable in C++: Swift global function 'pointwiseMin(_:_:)'.

// Unavailable in C++: Swift global function 'precondition(_:_:file:line:)'.

// Unavailable in C++: Swift global function 'preconditionFailure(_:file:line:)'.

// Unavailable in C++: Swift global function 'print(_:separator:terminator:)'.

// Unavailable in C++: Swift global function 'print(_:separator:terminator:to:)'.

// Unavailable in C++: Swift global function 'readLine(strippingNewline:)'.

// Unavailable in C++: Swift global function 'repeatElement(_:count:)'.

// Unavailable in C++: Swift global function 'sequence(first:next:)'.

// Unavailable in C++: Swift global function 'sequence(state:next:)'.

// Unavailable in C++: Swift global function 'stride(from:through:by:)'.

// Unavailable in C++: Swift global function 'stride(from:to:by:)'.

// Unavailable in C++: Swift global function 'swap(_:_:)'.

// Unavailable in C++: Swift global function 'transcode(_:_:_:_:stopOnError:)'.

// Unavailable in C++: Swift global function 'transcode(_:from:to:stoppingOnError:into:)'.

// Unavailable in C++: Swift global function 'type(of:)'.

// Unavailable in C++: Swift global function 'unsafeBitCast(_:to:)'.

// Unavailable in C++: Swift global function 'unsafeDowncast(_:to:)'.

// Unavailable in C++: Swift macro 'warning(_:)'.

// Unavailable in C++: Swift global function 'withExtendedLifetime(_:_:)'.

// Unavailable in C++: Swift global function 'withExtendedLifetime(_:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeBytes(of:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeBytes(of:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeMutableBytes(of:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeMutablePointer(to:_:)'.

// Unavailable in C++: Swift global function 'withUnsafePointer(to:_:)'.

// Unavailable in C++: Swift global function 'withUnsafePointer(to:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeTemporaryAllocation(byteCount:alignment:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeTemporaryAllocation(of:capacity:_:)'.

// Unavailable in C++: Swift global function 'withVaList(_:_:)'.

// Unavailable in C++: Swift global function 'withoutActuallyEscaping(_:do:)'.

// Unavailable in C++: Swift global function 'zip(_:_:)'.

// Unavailable in C++: Swift operator function '~=(_:_:)'.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
// Allow user to find the header using additional include paths
#if __has_include(<swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <swiftToCxx/_SwiftStdlibCxxOverlay.h>
// Look for the C++ interop support header relative to clang's resource dir:
//  '<toolchain>/usr/lib/clang/<version>/include/../../../swift/swiftToCxx'.
#elif __has_include(<../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
#elif __has_include(<../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
//  '<toolchain>/usr/local/lib/clang/<version>/include/../../../../../lib/swift/swiftToCxx'.
#include <../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
#endif
#pragma clang diagnostic pop

} // namespace swift

#pragma clang diagnostic pop
#undef SWIFT_SYMBOL
#endif // SWIFT_SWIFT_H
#ifdef SWIFT_SYMBOL
#undef SWIFT_SYMBOL
#endif
#define SWIFT_SYMBOL(usrValue) SWIFT_SYMBOL_MODULE_USR("BlinkID", usrValue)
#ifndef SWIFT_PRINTED_CORE
#define SWIFT_PRINTED_CORE
namespace swift SWIFT_PRIVATE_ATTR {

namespace _impl {

#ifdef __cplusplus
extern "C" {
#endif

// Swift type metadata response type.
struct MetadataResponseTy {
  void * _Null_unspecified _0;
  uint64_t _1;
};
// Swift type metadata request type.
typedef uint64_t MetadataRequestTy;

#if __cplusplus > 201402L
#  define SWIFT_NOEXCEPT_FUNCTION_PTR noexcept
#else
#  define SWIFT_NOEXCEPT_FUNCTION_PTR
#endif

using ValueWitnessInitializeBufferWithCopyOfBufferTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(55882))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessDestroyTy = void(* __ptrauth_swift_value_witness_function_pointer(1272))(void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessInitializeWithCopyTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(58298))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessAssignWithCopyTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(34641))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessInitializeWithTakeTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(18648))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessAssignWithTakeTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(61402))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessGetEnumTagSinglePayloadTy = unsigned(* __ptrauth_swift_value_witness_function_pointer(24816))(const void * _Nonnull, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessStoreEnumTagSinglePayloadTy = void(* __ptrauth_swift_value_witness_function_pointer(41169))(void * _Nonnull, unsigned, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;

struct ValueWitnessTable {
  ValueWitnessInitializeBufferWithCopyOfBufferTy _Nonnull initializeBufferWithCopyOfBuffer;
  ValueWitnessDestroyTy _Nonnull destroy;
  ValueWitnessInitializeWithCopyTy _Nonnull initializeWithCopy;
  ValueWitnessAssignWithCopyTy _Nonnull assignWithCopy;
  ValueWitnessInitializeWithTakeTy _Nonnull initializeWithTake;
  ValueWitnessAssignWithTakeTy _Nonnull assignWithTake;
  ValueWitnessGetEnumTagSinglePayloadTy _Nonnull getEnumTagSinglePayload;
  ValueWitnessStoreEnumTagSinglePayloadTy _Nonnull storeEnumTagSinglePayload;
  size_t size;
  size_t stride;
  unsigned flags;
  unsigned extraInhabitantCount;

  constexpr size_t getAlignment() const { return (flags & 255) + 1; }
};

using EnumValueWitnessGetEnumTagTy = unsigned(* __ptrauth_swift_value_witness_function_pointer(41909))(const void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using EnumValueWitnessDestructiveProjectEnumDataTy = void(* __ptrauth_swift_value_witness_function_pointer(1053))(void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using EnumValueWitnessDestructiveInjectEnumTagTy = void(* __ptrauth_swift_value_witness_function_pointer(45796))(void * _Nonnull, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;

struct EnumValueWitnessTable {
  ValueWitnessTable vwTable;
  EnumValueWitnessGetEnumTagTy _Nonnull getEnumTag;
  EnumValueWitnessDestructiveProjectEnumDataTy _Nonnull destructiveProjectEnumData;
  EnumValueWitnessDestructiveInjectEnumTagTy _Nonnull destructiveInjectEnumTag;
};

#undef SWIFT_NOEXCEPT_FUNCTION_PTR


// type metadata address for Bool.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSbN;
// type metadata address for Int8.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss4Int8VN;
// type metadata address for UInt8.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5UInt8VN;
// type metadata address for Int16.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int16VN;
// type metadata address for UInt16.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt16VN;
// type metadata address for Int32.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int32VN;
// type metadata address for UInt32.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt32VN;
// type metadata address for Int64.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int64VN;
// type metadata address for UInt64.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt64VN;
// type metadata address for Float.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSfN;
// type metadata address for Double.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSdN;
// type metadata address for OpaquePointer.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss13OpaquePointerVN;
// type metadata address for Int.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSiN;
// type metadata address for UInt.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSuN;

#ifdef __cplusplus
}
#endif


} // namespace _impl


#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<bool> = true;

template<>
struct TypeMetadataTrait<bool> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSbN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int8_t> = true;

template<>
struct TypeMetadataTrait<int8_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss4Int8VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint8_t> = true;

template<>
struct TypeMetadataTrait<uint8_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5UInt8VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int16_t> = true;

template<>
struct TypeMetadataTrait<int16_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int16VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint16_t> = true;

template<>
struct TypeMetadataTrait<uint16_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt16VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int32_t> = true;

template<>
struct TypeMetadataTrait<int32_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int32VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint32_t> = true;

template<>
struct TypeMetadataTrait<uint32_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt32VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int64_t> = true;

template<>
struct TypeMetadataTrait<int64_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int64VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint64_t> = true;

template<>
struct TypeMetadataTrait<uint64_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt64VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<float> = true;

template<>
struct TypeMetadataTrait<float> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSfN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<double> = true;

template<>
struct TypeMetadataTrait<double> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSdN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<void *> = true;

template<>
struct TypeMetadataTrait<void *> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss13OpaquePointerVN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<swift::Int> = true;

template<>
struct TypeMetadataTrait<swift::Int> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSiN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<swift::UInt> = true;

template<>
struct TypeMetadataTrait<swift::UInt> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSuN;
  }
};

#pragma clang diagnostic pop

} // namespace swift

#endif
#endif
#ifdef __cplusplus
namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {
extern "C" {
#endif

// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_BlinkID_uint64_t_0_8_uint64_t_8_16 {
  uint64_t _1;
  uint64_t _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_BlinkID_uint64_t_0_8_uint64_t_8_16(char * _Nonnull result, struct swift_interop_returnStub_BlinkID_uint64_t_0_8_uint64_t_8_16 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_uint64_t_8_16 $s7BlinkID19AddressDetailedInfoV6streetSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_uint64_t_8_16 $s7BlinkID19AddressDetailedInfoV10postalCodeSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_uint64_t_8_16 $s7BlinkID19AddressDetailedInfoV4citySSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_uint64_t_8_16 $s7BlinkID19AddressDetailedInfoV12jurisdictionSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_BlinkID_uint64_t_0_8_void_ptr_8_16 {
  uint64_t _1;
  void * _Nullable _2;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_BlinkID_uint64_t_0_8_void_ptr_8_16 swift_interop_passDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(const char * _Nonnull value) {
  struct swift_interop_passStub_BlinkID_uint64_t_0_8_void_ptr_8_16 result;
  memcpy(&result._1, value + 0, 8);
  memcpy(&result._2, value + 8, 8);
  return result;
}

SWIFT_EXTERN void $s7BlinkID12AlphabetTypeO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkID_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 {
  uint64_t _1;
  void * _Nullable _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(char * _Nonnull result, struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID12AlphabetTypeO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID17AnonymizationModeO2idSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID17AnonymizationModeO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkID_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID17AnonymizationModeO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID11BarcodeDataV06stringD0SSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID11BarcodeDataV11barcodeTypeAA0cF0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID11BarcodeDataV9uncertainSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s7BlinkID17BarcodeElementKeyO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID15BarcodeElementsV8getValue3forSSAA0C10ElementKeyO_tF(const void * _Nonnull barcodeElementKey, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getValue(for:)
SWIFT_EXTERN void $s7BlinkID13BarcodeResultV11barcodeDataAA0cF0Vvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID13BarcodeResultV9firstNameSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID13BarcodeResultV10middleNameSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID13BarcodeResultV8lastNameSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID13BarcodeResultV8fullNameSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID13BarcodeResultV25additionalNameInformationSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID13BarcodeResultV7addressSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID13BarcodeResultV12placeOfBirthSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID13BarcodeResultV11nationalitySSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID13BarcodeResultV4raceSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID13BarcodeResultV8religionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID13BarcodeResultV10professionSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID13BarcodeResultV13maritalStatusSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID13BarcodeResultV17residentialStatusSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID13BarcodeResultV8employerSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID13BarcodeResultV3sexSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID13BarcodeResultV11dateOfBirthAA04DateD0VySSGvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID13BarcodeResultV11dateOfIssueAA04DateD0VySSGvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID13BarcodeResultV12dateOfExpiryAA04DateD0VySSGvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID13BarcodeResultV14documentNumberSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID13BarcodeResultV16personalIdNumberSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID13BarcodeResultV24documentAdditionalNumberSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID13BarcodeResultV16issuingAuthoritySSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID13BarcodeResultV19addressDetailedInfoAA07AddressfG0Vvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID13BarcodeResultV25driverLicenseDetailedInfoAA06DriverfgH0VySSGvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID13BarcodeResultV16extendedElementsAA0cF0Vvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s7BlinkID11BarcodeTypeO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID0A16IDScanningResultV15recognitionModeAA011RecognitionF0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID0A16IDScanningResultV09dataMatchD0AA04DatafD0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_BlinkID_uint8_t_0_1 {
  uint8_t _1;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_BlinkID_uint8_t_0_1(char * _Nonnull result, struct swift_interop_returnStub_BlinkID_uint8_t_0_1 value) {
  memcpy(result + 0, &value._1, 1);
}

SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint8_t_0_1 $s7BlinkID0A16IDScanningResultV21dateOfExpiryPermanentSbSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_BlinkID_uint64_t_0_8 {
  uint64_t _1;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_BlinkID_uint64_t_0_8(char * _Nonnull result, struct swift_interop_returnStub_BlinkID_uint64_t_0_8 value) {
  memcpy(result + 0, &value._1, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8 $s7BlinkID0A16IDScanningResultV14dependentsInfoSayAA09DependentF0VGSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_BlinkID_void_ptr_0_8 {
  void * _Nullable _1;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_BlinkID_void_ptr_0_8(char * _Nonnull result, struct swift_interop_returnStub_BlinkID_void_ptr_0_8 value) {
  memcpy(result + 0, &value._1, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_void_ptr_0_8 $s7BlinkID0A16IDScanningResultV10subResultsSayAA018SingleSideScanningD0VGvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID0A16IDScanningResultV13getInputImage12scanningSideAA0fgD0VSgAA08ScanningI0O_tF(SWIFT_INDIRECT_RESULT void * _Nonnull, const void * _Nonnull scanningSide, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getInputImage(scanningSide:)
SWIFT_EXTERN void $s7BlinkID0A16IDScanningResultV20getBarcodeInputImageAA0ghD0VSgyF(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getBarcodeInputImage()
SWIFT_EXTERN void $s7BlinkID0A16IDScanningResultV16getDocumentImage12scanningSideAA07CroppedgD0VSgAA08ScanningI0O_tF(SWIFT_INDIRECT_RESULT void * _Nonnull, const void * _Nonnull scanningSide, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getDocumentImage(scanningSide:)
SWIFT_EXTERN void $s7BlinkID0A16IDScanningResultV12getFaceImageAA015DetailedCroppedgD0VSgyF(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getFaceImage()
SWIFT_EXTERN void $s7BlinkID0A16IDScanningResultV17getSignatureImageAA015DetailedCroppedgD0VSgyF(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getSignatureImage()
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID0A13IDSdkSettingsV10licenseKeySSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID0A13IDSdkSettingsV10licenseKeySSvs(struct swift_interop_passStub_BlinkID_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_uint64_t_8_16 $s7BlinkID0A13IDSdkSettingsV8licenseeSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_BlinkID_uint64_t_0_8_uint64_t_8_16 {
  uint64_t _1;
  uint64_t _2;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_BlinkID_uint64_t_0_8_uint64_t_8_16 swift_interop_passDirect_BlinkID_uint64_t_0_8_uint64_t_8_16(const char * _Nonnull value) {
  struct swift_interop_passStub_BlinkID_uint64_t_0_8_uint64_t_8_16 result;
  memcpy(&result._1, value + 0, 8);
  memcpy(&result._2, value + 8, 8);
  return result;
}

SWIFT_EXTERN void $s7BlinkID0A13IDSdkSettingsV8licenseeSSSgvs(struct swift_interop_passStub_BlinkID_uint64_t_0_8_uint64_t_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID0A13IDSdkSettingsV15helloLogEnabledSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID0A13IDSdkSettingsV15helloLogEnabledSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID0A13IDSdkSettingsV17downloadResourcesSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID0A13IDSdkSettingsV17downloadResourcesSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID0A13IDSdkSettingsV19resourceDownloadUrlSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID0A13IDSdkSettingsV19resourceDownloadUrlSSvs(struct swift_interop_passStub_BlinkID_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID0A13IDSdkSettingsV19resourceLocalFolderSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID0A13IDSdkSettingsV19resourceLocalFolderSSvs(struct swift_interop_passStub_BlinkID_uint64_t_0_8_void_ptr_8_16 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID0A13IDSdkSettingsV22resourceRequestTimeoutAA0fG0Vvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID0A13IDSdkSettingsV22resourceRequestTimeoutAA0fG0Vvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID0A9IDSessionC22cancelActiveProcessingyyF(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // cancelActiveProcessing()
SWIFT_EXTERN void $s7BlinkID0A9IDSessionC22resumeActiveProcessingyyF(SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // resumeActiveProcessing()
SWIFT_EXTERN void $s7BlinkID0A17IDSessionSettingsV16inputImageSourceAA05InputfG0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID0A17IDSessionSettingsV16inputImageSourceAA05InputfG0Ovs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID0A17IDSessionSettingsV12scanningModeAA08ScanningF0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID0A17IDSessionSettingsV12scanningModeAA08ScanningF0Ovs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID0A17IDSessionSettingsV08scanningD0AA08ScanningD0Vvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID0A17IDSessionSettingsV08scanningD0AA08ScanningD0Vvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN double $s7BlinkID0A17IDSessionSettingsV19stepTimeoutDurationSdvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID0A17IDSessionSettingsV19stepTimeoutDurationSdvs(double value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID0A17IDSessionSettingsV16inputImageSource12scanningMode0hD019stepTimeoutDurationAcA05InputfG0O_AA08ScanningI0OAA0nD0VSdtcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, const void * _Nonnull inputImageSource, const void * _Nonnull scanningMode, const void * _Nonnull scanningSettings, double stepTimeoutDuration) SWIFT_NOEXCEPT SWIFT_CALL; // init(inputImageSource:scanningMode:scanningSettings:stepTimeoutDuration:)
SWIFT_EXTERN MBSampleBufferWrapper *_Nonnull $s7BlinkID11CameraFrameV6bufferSo21MBSampleBufferWrapperCvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID11CameraFrameV3roiAA16RegionOfInterestVvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID11CameraFrameV11orientationAA0cD16VideoOrientationOvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID11CameraFrameV6buffer3roi11orientationACSo21MBSampleBufferWrapperC_AA16RegionOfInterestVAA0cD16VideoOrientationOtcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, MBSampleBufferWrapper *_Nonnull buffer, const void * _Nonnull roi, const void * _Nonnull orientation) SWIFT_NOEXCEPT SWIFT_CALL; // init(buffer:roi:orientation:)
SWIFT_EXTERN ptrdiff_t $s7BlinkID11CameraFrameV5widthSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s7BlinkID11CameraFrameV6heightSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s7BlinkID27CameraFrameVideoOrientationO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID7CountryO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkID_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID7CountryO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN UIImage *_Nullable $s7BlinkID18CroppedImageResultV02uiD0So7UIImageCSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s7BlinkID20CroppedImageSettingsV11dotsPerInchSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID20CroppedImageSettingsV11dotsPerInchSivs(ptrdiff_t value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN float $s7BlinkID20CroppedImageSettingsV15extensionFactorSfvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID20CroppedImageSettingsV15extensionFactorSfvs(float value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID20CroppedImageSettingsV014returnDocumentD0Sbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID20CroppedImageSettingsV014returnDocumentD0Sbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID20CroppedImageSettingsV010returnFaceD0Sbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID20CroppedImageSettingsV010returnFaceD0Sbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID20CroppedImageSettingsV015returnSignatureD0Sbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID20CroppedImageSettingsV015returnSignatureD0Sbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID20CroppedImageSettingsV11dotsPerInch15extensionFactor014returnDocumentD00k4FaceD00k9SignatureD0ACSi_SfS3btcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, ptrdiff_t dotsPerInch, float extensionFactor, bool returnDocumentImage, bool returnFaceImage, bool returnSignatureImage) SWIFT_NOEXCEPT SWIFT_CALL; // init(dotsPerInch:extensionFactor:returnDocumentImage:returnFaceImage:returnSignatureImage:)
SWIFT_EXTERN ptrdiff_t $s7BlinkID18DataMatchFieldTypeO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_void_ptr_0_8 $s7BlinkID15DataMatchResultV6statesSayAA10FieldStateVGvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID15DataMatchResultV12overallStateAA0cdG0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID15DataMatchResultV8getState3forAA0cdG0OAA0cD9FieldTypeO_tF(SWIFT_INDIRECT_RESULT void * _Nonnull, const void * _Nonnull fieldType, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // getState(for:)
SWIFT_EXTERN ptrdiff_t $s7BlinkID14DataMatchStateO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_BlinkID_uint64_t_0_8_uint8_t_8_9 {
  uint64_t _1;
  uint8_t _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_BlinkID_uint64_t_0_8_uint8_t_8_9(char * _Nonnull result, struct swift_interop_returnStub_BlinkID_uint64_t_0_8_uint8_t_8_9 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 1);
}

SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_uint8_t_8_9 $s7BlinkID10DateResultV3daySiSgvg(void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_uint8_t_8_9 $s7BlinkID10DateResultV5monthSiSgvg(void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_uint8_t_8_9 $s7BlinkID10DateResultV4yearSiSgvg(void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID10DateResultV23filledByDomainKnowledgeSbvg(void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID10DateResultV18successfullyParsedSbvg(void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID10DateResultV14originalStringxvg(SWIFT_INDIRECT_RESULT void * _Nonnull, void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID10DateResultV8toStringSSySSRszrlF(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // toString()
SWIFT_EXTERN void $s7BlinkID26DetailedCroppedImageResultV4sideAA12ScanningSideOSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID26DetailedCroppedImageResultV8locationAA10RectangleFVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN UIImage *_Nullable $s7BlinkID26DetailedCroppedImageResultV02uiE0So7UIImageCSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID17DetailedFieldTypeV05fieldE0AA0dE0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID17DetailedFieldTypeV05fieldE0AA0dE0Ovs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID17DetailedFieldTypeV08alphabetE0AA08AlphabetE0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID17DetailedFieldTypeV08alphabetE0AA08AlphabetE0Ovs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID17DetailedFieldTypeV05fieldE008alphabetE0AcA0dE0O_AA08AlphabetE0OtcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, const void * _Nonnull fieldType, const void * _Nonnull alphabetType) SWIFT_NOEXCEPT SWIFT_CALL; // init(fieldType:alphabetType:)
SWIFT_EXTERN ptrdiff_t $s7BlinkID14DetectionLevelO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID15DetectionStatusO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkID_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID15DetectionStatusO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID29DocumentAnonymizationSettingsV14documentFilterAA0cG0Vvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID29DocumentAnonymizationSettingsV14documentFilterAA0cG0Vvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_void_ptr_0_8 $s7BlinkID29DocumentAnonymizationSettingsV6fieldsSayAA9FieldTypeOGvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_BlinkID_void_ptr_0_8 {
  void * _Nullable _1;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_BlinkID_void_ptr_0_8 swift_interop_passDirect_BlinkID_void_ptr_0_8(const char * _Nonnull value) {
  struct swift_interop_passStub_BlinkID_void_ptr_0_8 result;
  memcpy(&result._1, value + 0, 8);
  return result;
}

SWIFT_EXTERN void $s7BlinkID29DocumentAnonymizationSettingsV6fieldsSayAA9FieldTypeOGvs(struct swift_interop_passStub_BlinkID_void_ptr_0_8 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID29DocumentAnonymizationSettingsV014documentNumberdE0AA0cgdE0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID29DocumentAnonymizationSettingsV014documentNumberdE0AA0cgdE0VSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID29DocumentAnonymizationSettingsV14documentFilter6fields0f6NumberdE0AcA0cG0V_SayAA9FieldTypeOGAA0cidE0VSgtcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, const void * _Nonnull documentFilter, struct swift_interop_passStub_BlinkID_void_ptr_0_8 fields, const void * _Nonnull documentNumberAnonymizationSettings) SWIFT_NOEXCEPT SWIFT_CALL; // init(documentFilter:fields:documentNumberAnonymizationSettings:)
SWIFT_EXTERN void $s7BlinkID14DocumentFilterV7countryAA7CountryOSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID14DocumentFilterV7countryAA7CountryOSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID14DocumentFilterV6regionAA6RegionOSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID14DocumentFilterV6regionAA6RegionOSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID14DocumentFilterV12documentTypeAA0cF0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID14DocumentFilterV12documentTypeAA0cF0OSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID14DocumentFilterV7country6region12documentTypeAcA7CountryOSg_AA6RegionOSgAA0cH0OSgtcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, const void * _Nonnull country, const void * _Nonnull region, const void * _Nonnull documentType) SWIFT_NOEXCEPT SWIFT_CALL; // init(country:region:documentType:)
SWIFT_EXTERN void $s7BlinkID24DocumentImageColorStatusO8rawValueACSgSi_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, ptrdiff_t rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN ptrdiff_t $s7BlinkID24DocumentImageColorStatusO8rawValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s7BlinkID35DocumentNumberAnonymizationSettingsV19prefixDigitsVisibleSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID35DocumentNumberAnonymizationSettingsV19prefixDigitsVisibleSivs(ptrdiff_t value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s7BlinkID35DocumentNumberAnonymizationSettingsV19suffixDigitsVisibleSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID35DocumentNumberAnonymizationSettingsV19suffixDigitsVisibleSivs(ptrdiff_t value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID35DocumentNumberAnonymizationSettingsV19prefixDigitsVisible06suffixhI0ACSi_SitcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, ptrdiff_t prefixDigitsVisible, ptrdiff_t suffixDigitsVisible) SWIFT_NOEXCEPT SWIFT_CALL; // init(prefixDigitsVisible:suffixDigitsVisible:)
SWIFT_EXTERN void $s7BlinkID19DocumentOrientationO8rawValueACSgSi_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, ptrdiff_t rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN ptrdiff_t $s7BlinkID19DocumentOrientationO8rawValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16DocumentRotationO8rawValueACSgSi_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, ptrdiff_t rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN ptrdiff_t $s7BlinkID16DocumentRotationO8rawValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID13DocumentRulesV14documentFilterAA0cF0Vvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID13DocumentRulesV14documentFilterAA0cF0Vvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_void_ptr_0_8 $s7BlinkID13DocumentRulesV6fieldsSayAA17DetailedFieldTypeVGvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID13DocumentRulesV6fieldsSayAA17DetailedFieldTypeVGvs(struct swift_interop_passStub_BlinkID_void_ptr_0_8 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID13DocumentRulesV14documentFilter6fieldsAcA0cF0V_SayAA17DetailedFieldTypeVGtcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, const void * _Nonnull documentFilter, struct swift_interop_passStub_BlinkID_void_ptr_0_8 fields) SWIFT_NOEXCEPT SWIFT_CALL; // init(documentFilter:fields:)
SWIFT_EXTERN void $s7BlinkID12DocumentTypeO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkID_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID12DocumentTypeO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID25DriverLicenseDetailedInfoV12restrictionsxSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID25DriverLicenseDetailedInfoV12endorsementsxSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID25DriverLicenseDetailedInfoV12vehicleClassxSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID25DriverLicenseDetailedInfoV10conditionsxSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8 $s7BlinkID25DriverLicenseDetailedInfoV014vehicleClassesF0SayAA012VehicleClassF0VyxGGSgvg(void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID10FieldStateV9fieldTypeAA09DataMatchcF0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID10FieldStateV5stateAA09DataMatchD0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID9FieldTypeO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkID_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID9FieldTypeO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID18FrameProcessResultV12sessionErrorAA07SessionG0OSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID28ImageAnalysisDetectionStatusO8rawValueACSgSi_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, ptrdiff_t rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN ptrdiff_t $s7BlinkID28ImageAnalysisDetectionStatusO8rawValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s7BlinkID27ImageAnalysisLightingStatusO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s7BlinkID19ImageExtractionTypeO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s7BlinkID16ImageOrientationO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void * _Nonnull $s7BlinkID10InputImageC02uiD016regionOfInterestACSo7UIImageC_AA06RegiongH0VtcfC(UIImage *_Nonnull uiImage, const void * _Nonnull regionOfInterest, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // init(uiImage:regionOfInterest:)
SWIFT_EXTERN void * _Nonnull $s7BlinkID10InputImageC11cameraFrameAcA06CameraF0V_tcfC(const void * _Nonnull cameraFrame, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // init(cameraFrame:)
SWIFT_EXTERN void $s7BlinkID24InputImageAnalysisResultV16processingStatusAA010ProcessingH0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_void_ptr_0_8 $s7BlinkID24InputImageAnalysisResultV22missingMandatoryFieldsSayAA9FieldTypeOGvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_void_ptr_0_8 $s7BlinkID24InputImageAnalysisResultV15extractedFieldsSayAA9FieldTypeOGvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_void_ptr_0_8 $s7BlinkID24InputImageAnalysisResultV22invalidCharacterFieldsSayAA9FieldTypeOGvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_void_ptr_0_8 $s7BlinkID24InputImageAnalysisResultV18extraPresentFieldsSayAA9FieldTypeOGvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_void_ptr_0_8 $s7BlinkID24InputImageAnalysisResultV23imageExtractionFailuresSayAA0dH4TypeOGvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24InputImageAnalysisResultV12scanningSideAA08ScanningH0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24InputImageAnalysisResultV23documentDetectionStatusAA0hI0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24InputImageAnalysisResultV16documentLocationAA13QuadrilateralVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24InputImageAnalysisResultV19blurDetectionStatusAA0dehI0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24InputImageAnalysisResultV20glareDetectionStatusAA0dehI0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24InputImageAnalysisResultV19documentColorStatusAA08DocumentdhI0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24InputImageAnalysisResultV19documentMoireStatusAA0de9DetectionI0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24InputImageAnalysisResultV19faceDetectionStatusAA0dehI0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24InputImageAnalysisResultV18mrzDetectionStatusAA0dehI0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24InputImageAnalysisResultV22barcodeDetectionStatusAA0dehI0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24InputImageAnalysisResultV21realIDDetectionStatusAA0de9DetectionI0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24InputImageAnalysisResultV22documentLightingStatusAA0dehI0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24InputImageAnalysisResultV27documentHandOcclusionStatusAA0de9DetectionJ0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24InputImageAnalysisResultV19documentOrientationAA08DocumentH0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24InputImageAnalysisResultV16documentRotationAA08DocumentH0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN UIImage *_Nullable $s7BlinkID16InputImageResultV02uiD0So7UIImageCSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s7BlinkID16InputImageSourceO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID22InvalidLicenseKeyErrorV7messageSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s7BlinkID15MRZDocumentTypeO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID9MRZResultV12rawMRZStringSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID9MRZResultV12documentCodeSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID9MRZResultV6issuerSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID9MRZResultV14documentNumberSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID9MRZResultV4opt1SSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID9MRZResultV4opt2SSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID9MRZResultV6genderSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID9MRZResultV11nationalitySSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID9MRZResultV07primaryB0SSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID9MRZResultV09secondaryB0SSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID9MRZResultV10issuerNameSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID9MRZResultV15nationalityNameSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID9MRZResultV8verifiedSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID9MRZResultV11dateOfBirthAA10DateResultVySSGvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID9MRZResultV12dateOfExpiryAA10DateResultVySSGvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID9MRZResultV12documentTypeAA011MRZDocumentE0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID9MRZResultV13sanitizedOpt1SSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID9MRZResultV13sanitizedOpt2SSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID9MRZResultV20sanitizedNationalitySSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID9MRZResultV15sanitizedIssuerSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID9MRZResultV21sanitizedDocumentCodeSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID9MRZResultV23sanitizedDocumentNumberSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s7BlinkID18MemoryReserveErrorV011minRequiredC0Sivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID18MemoryReserveErrorV011minRequiredC0ACSi_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, ptrdiff_t minRequiredMemory) SWIFT_NOEXCEPT SWIFT_CALL; // init(minRequiredMemory:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID13MissingBundleV7messageSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_uint64_t_8_16 $s7BlinkID14ModelLoadErrorO16errorDescriptionSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s7BlinkID14ModelLoadErrorO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN int32_t $s7BlinkID5PointV1xs5Int32Vvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN int32_t $s7BlinkID5PointV1ys5Int32Vvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ProcessingStatusO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkID_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID16ProcessingStatusO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID13QuadrilateralV9upperLeftAA5PointVvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID13QuadrilateralV10upperRightAA5PointVvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID13QuadrilateralV10lowerRightAA5PointVvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID13QuadrilateralV9lowerLeftAA5PointVvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID15RecognitionModeO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkID_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID15RecognitionModeO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID21RecognitionModeFilterV11enableMrzIdSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID21RecognitionModeFilterV11enableMrzIdSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID21RecognitionModeFilterV13enableMrzVisaSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID21RecognitionModeFilterV13enableMrzVisaSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID21RecognitionModeFilterV17enableMrzPassportSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID21RecognitionModeFilterV17enableMrzPassportSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID21RecognitionModeFilterV13enablePhotoIdSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID21RecognitionModeFilterV13enablePhotoIdSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID21RecognitionModeFilterV15enableBarcodeIdSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID21RecognitionModeFilterV15enableBarcodeIdSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID21RecognitionModeFilterV018enableFullDocumentC0Sbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID21RecognitionModeFilterV018enableFullDocumentC0Sbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID21RecognitionModeFilterV11enableMrzId0fG4Visa0fG8Passport0f5PhotoH00f7BarcodeH00f12FullDocumentC0ACSb_S5btcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, bool enableMrzId, bool enableMrzVisa, bool enableMrzPassport, bool enablePhotoId, bool enableBarcodeId, bool enableFullDocumentRecognition) SWIFT_NOEXCEPT SWIFT_CALL; // init(enableMrzId:enableMrzVisa:enableMrzPassport:enablePhotoId:enableBarcodeId:enableFullDocumentRecognition:)
SWIFT_EXTERN void $s7BlinkID6RegionO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_BlinkID_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID6RegionO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN float $s7BlinkID16RegionOfInterestV1xSfvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN float $s7BlinkID16RegionOfInterestV1ySfvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN float $s7BlinkID16RegionOfInterestV5widthSfvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN float $s7BlinkID16RegionOfInterestV6heightSfvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16RegionOfInterestV1x1y5width6heightACSf_S3ftcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, float x, float y, float width, float height) SWIFT_NOEXCEPT SWIFT_CALL; // init(x:y:width:height:)
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_void_ptr_8_16 $s7BlinkID17ResourceLoadErrorV4nameSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID17ResourceLoadErrorV5errorAA05ModeldE0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_uint64_t_8_16 $s7BlinkID14ResourcesErrorO16errorDescriptionSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8_uint64_t_8_16 $s7BlinkID12SDKInitErrorO16errorDescriptionSSSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s7BlinkID12ScanningModeO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV18blurDetectionLevelAA0fG0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV18blurDetectionLevelAA0fG0Ovs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID16ScanningSettingsV18skipImagesWithBlurSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV18skipImagesWithBlurSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV19glareDetectionLevelAA0fG0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV19glareDetectionLevelAA0fG0Ovs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID16ScanningSettingsV19skipImagesWithGlareSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV19skipImagesWithGlareSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV18tiltDetectionLevelAA0fG0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV18tiltDetectionLevelAA0fG0Ovs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID16ScanningSettingsV42skipImagesWithInadequateLightingConditionsSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV42skipImagesWithInadequateLightingConditionsSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID16ScanningSettingsV24skipImagesOccludedByHandSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV24skipImagesOccludedByHandSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID16ScanningSettingsV37combineResultsFromMultipleInputImagesSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV37combineResultsFromMultipleInputImagesSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID16ScanningSettingsV21enableBarcodeScanOnlySbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV21enableBarcodeScanOnlySbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8 $s7BlinkID16ScanningSettingsV19customDocumentRulesSayAA0fG0VGSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_BlinkID_uint64_t_0_8 {
  uint64_t _1;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_BlinkID_uint64_t_0_8 swift_interop_passDirect_BlinkID_uint64_t_0_8(const char * _Nonnull value) {
  struct swift_interop_passStub_BlinkID_uint64_t_0_8 result;
  memcpy(&result._1, value + 0, 8);
  return result;
}

SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV19customDocumentRulesSayAA0fG0VGSgvs(struct swift_interop_passStub_BlinkID_uint64_t_0_8 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV17anonymizationModeAA013AnonymizationF0Ovg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV17anonymizationModeAA013AnonymizationF0Ovs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_uint64_t_0_8 $s7BlinkID16ScanningSettingsV027customDocumentAnonymizationD0SayAA0fgD0VGSgvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV027customDocumentAnonymizationD0SayAA0fgD0VGSgvs(struct swift_interop_passStub_BlinkID_uint64_t_0_8 value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID16ScanningSettingsV17returnInputImagesSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV17returnInputImagesSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID16ScanningSettingsV24scanCroppedDocumentImageSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV24scanCroppedDocumentImageSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV21recognitionModeFilterAA011RecognitionfG0Vvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV21recognitionModeFilterAA011RecognitionfG0Vvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID16ScanningSettingsV25enableCharacterValidationSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV25enableCharacterValidationSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN float $s7BlinkID16ScanningSettingsV16inputImageMarginSfvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV16inputImageMarginSfvs(float value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID16ScanningSettingsV19scanUnsupportedBackSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV19scanUnsupportedBackSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID16ScanningSettingsV27allowUncertainFrontSideScanSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV27allowUncertainFrontSideScanSbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s7BlinkID16ScanningSettingsV28maxAllowedMismatchesPerFieldSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV28maxAllowedMismatchesPerFieldSivs(ptrdiff_t value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID16ScanningSettingsV24scanPassportDataPageOnlySbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV24scanPassportDataPageOnlySbvs(bool value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV012croppedImageD0AA07CroppedfD0Vvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV012croppedImageD0AA07CroppedfD0Vvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16ScanningSettingsV18blurDetectionLevel18skipImagesWithBlur05glarefG00hiJ5Glare04tiltfG00hiJ28InadequateLightingConditions0hI14OccludedByHand031combineResultsFromMultipleInputI021enableBarcodeScanOnly19customDocumentRules17anonymizationMode027customDocumentAnonymizationD006returnyI024scanCroppedDocumentImage0Z19CharacterValidation21recognitionModeFilter16inputImageMargin19scanUnsupportedBack27allowUncertainFrontSideScan28maxAllowedMismatchesPerField24scanPassportDataPageOnly012croppedImageD0AcA0fG0O_SbA_SbA_S4bSayAA13DocumentRulesVGSgAA17AnonymizationModeOSayAA021DocumentAnonymizationD0VGSgS3bAA21RecognitionModeFilterVSfS2bSiSbAA012CroppedImageD0VtcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, const void * _Nonnull blurDetectionLevel, bool skipImagesWithBlur, const void * _Nonnull glareDetectionLevel, bool skipImagesWithGlare, const void * _Nonnull tiltDetectionLevel, bool skipImagesWithInadequateLightingConditions, bool skipImagesOccludedByHand, bool combineResultsFromMultipleInputImages, bool enableBarcodeScanOnly, struct swift_interop_passStub_BlinkID_uint64_t_0_8 customDocumentRules, const void * _Nonnull anonymizationMode, struct swift_interop_passStub_BlinkID_uint64_t_0_8 customDocumentAnonymizationSettings, bool returnInputImages, bool scanCroppedDocumentImage, bool enableCharacterValidation, const void * _Nonnull recognitionModeFilter, float inputImageMargin, bool scanUnsupportedBack, bool allowUncertainFrontSideScan, ptrdiff_t maxAllowedMismatchesPerField, bool scanPassportDataPageOnly, const void * _Nonnull croppedImageSettings) SWIFT_NOEXCEPT SWIFT_CALL; // init(blurDetectionLevel:skipImagesWithBlur:glareDetectionLevel:skipImagesWithGlare:tiltDetectionLevel:skipImagesWithInadequateLightingConditions:skipImagesOccludedByHand:combineResultsFromMultipleInputImages:enableBarcodeScanOnly:customDocumentRules:anonymizationMode:customDocumentAnonymizationSettings:returnInputImages:scanCroppedDocumentImage:enableCharacterValidation:recognitionModeFilter:inputImageMargin:scanUnsupportedBack:allowUncertainFrontSideScan:maxAllowedMismatchesPerField:scanPassportDataPageOnly:croppedImageSettings:)
SWIFT_EXTERN void $s7BlinkID12ScanningSideO8rawValueACSgSi_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, ptrdiff_t rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
SWIFT_EXTERN ptrdiff_t $s7BlinkID12ScanningSideO8rawValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s7BlinkID14ScanningStatusO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $s7BlinkID12SessionErrorO9hashValueSivg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24SingleSideScanningResultV3vizAA9VIZResultVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24SingleSideScanningResultV3vizAA9VIZResultVSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24SingleSideScanningResultV3mrzAA9MRZResultVSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24SingleSideScanningResultV3mrzAA9MRZResultVSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24SingleSideScanningResultV7barcodeAA07BarcodeF0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24SingleSideScanningResultV7barcodeAA07BarcodeF0VSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24SingleSideScanningResultV10inputImageAA05InputhF0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24SingleSideScanningResultV10inputImageAA05InputhF0VSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24SingleSideScanningResultV17barcodeInputImageAA0hiF0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24SingleSideScanningResultV17barcodeInputImageAA0hiF0VSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24SingleSideScanningResultV13documentImageAA07CroppedhF0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24SingleSideScanningResultV13documentImageAA07CroppedhF0VSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24SingleSideScanningResultV9faceImageAA015DetailedCroppedhF0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24SingleSideScanningResultV9faceImageAA015DetailedCroppedhF0VSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24SingleSideScanningResultV14signatureImageAA015DetailedCroppedhF0VSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID24SingleSideScanningResultV14signatureImageAA015DetailedCroppedhF0VSgvs(const void * _Nonnull value, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $s7BlinkID9VIZResultV21dateOfExpiryPermanentSbvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_BlinkID_void_ptr_0_8 $s7BlinkID9VIZResultV14dependentsInfoSayAA09DependentE0VGvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16VehicleClassInfoV07vehicleD0xSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16VehicleClassInfoV11licenceTypexSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16VehicleClassInfoV13effectiveDateAA0G6ResultVyxGSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $s7BlinkID16VehicleClassInfoV10expiryDateAA0G6ResultVyxGSgvg(SWIFT_INDIRECT_RESULT void * _Nonnull, void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _

#ifdef __cplusplus
}
}
}
namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID19AddressDetailedInfoV") AddressDetailedInfo;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::AddressDetailedInfo> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_AddressDetailedInfo;

// Type metadata accessor for AddressDetailedInfo
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID19AddressDetailedInfoVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID19AddressDetailedInfoV") AddressDetailedInfo final {
public:
  SWIFT_INLINE_THUNK ~AddressDetailedInfo() noexcept {
    auto metadata = _impl::$s7BlinkID19AddressDetailedInfoVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK AddressDetailedInfo(const AddressDetailedInfo &other) noexcept {
    auto metadata = _impl::$s7BlinkID19AddressDetailedInfoVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK AddressDetailedInfo &operator =(const AddressDetailedInfo &other) noexcept {
    auto metadata = _impl::$s7BlinkID19AddressDetailedInfoVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK AddressDetailedInfo &operator =(AddressDetailedInfo &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER AddressDetailedInfo(AddressDetailedInfo &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getStreet() const SWIFT_SYMBOL("s:7BlinkID19AddressDetailedInfoV6streetSSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getPostalCode() const SWIFT_SYMBOL("s:7BlinkID19AddressDetailedInfoV10postalCodeSSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getCity() const SWIFT_SYMBOL("s:7BlinkID19AddressDetailedInfoV4citySSSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getJurisdiction() const SWIFT_SYMBOL("s:7BlinkID19AddressDetailedInfoV12jurisdictionSSSgvp");
private:
  SWIFT_INLINE_THUNK AddressDetailedInfo(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK AddressDetailedInfo _make() noexcept {
    auto metadata = _impl::$s7BlinkID19AddressDetailedInfoVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return AddressDetailedInfo(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_AddressDetailedInfo;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID19AddressDetailedInfoVD;
  static inline constexpr $s7BlinkID19AddressDetailedInfoVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_AddressDetailedInfo {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(AddressDetailedInfo &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const AddressDetailedInfo &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER AddressDetailedInfo returnNewValue(T callable) {
    auto result = AddressDetailedInfo::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID19AddressDetailedInfoVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::AddressDetailedInfo> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID19AddressDetailedInfoVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::AddressDetailedInfo> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::AddressDetailedInfo> = true;
template<>
struct implClassFor<BlinkID::AddressDetailedInfo> { using type = BlinkID::_impl::_impl_AddressDetailedInfo; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID12AlphabetTypeO") AlphabetType;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::AlphabetType> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
/// Represents the type of the alphabet used in the document.
namespace _impl {

class _impl_AlphabetType;

// Type metadata accessor for AlphabetType
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID12AlphabetTypeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum AlphabetType
extern "C" {
extern unsigned $s7BlinkID12AlphabetTypeO5latinyA2CmFWC;
extern unsigned $s7BlinkID12AlphabetTypeO6arabicyA2CmFWC;
extern unsigned $s7BlinkID12AlphabetTypeO8cyrillicyA2CmFWC;
extern unsigned $s7BlinkID12AlphabetTypeO5greekyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID12AlphabetTypeO") AlphabetType final {
public:
  SWIFT_INLINE_THUNK ~AlphabetType() noexcept {
    auto metadata = _impl::$s7BlinkID12AlphabetTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK AlphabetType(const AlphabetType &other) noexcept {
    auto metadata = _impl::$s7BlinkID12AlphabetTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK AlphabetType &operator =(const AlphabetType &other) noexcept {
    auto metadata = _impl::$s7BlinkID12AlphabetTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK AlphabetType &operator =(AlphabetType &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER AlphabetType(AlphabetType &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    latin SWIFT_SYMBOL("s:7BlinkID12AlphabetTypeO5latinyA2CmF"),
    arabic SWIFT_SYMBOL("s:7BlinkID12AlphabetTypeO6arabicyA2CmF"),
    cyrillic SWIFT_SYMBOL("s:7BlinkID12AlphabetTypeO8cyrillicyA2CmF"),
    greek SWIFT_SYMBOL("s:7BlinkID12AlphabetTypeO5greekyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_latin {  // impl struct for case latin
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::latin;
    }
    SWIFT_INLINE_THUNK AlphabetType operator()() const;
  } latin SWIFT_SYMBOL("s:7BlinkID12AlphabetTypeO5latinyA2CmF");
  SWIFT_INLINE_THUNK bool isLatin() const;

  inline const static struct _impl_arabic {  // impl struct for case arabic
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::arabic;
    }
    SWIFT_INLINE_THUNK AlphabetType operator()() const;
  } arabic SWIFT_SYMBOL("s:7BlinkID12AlphabetTypeO6arabicyA2CmF");
  SWIFT_INLINE_THUNK bool isArabic() const;

  inline const static struct _impl_cyrillic {  // impl struct for case cyrillic
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cyrillic;
    }
    SWIFT_INLINE_THUNK AlphabetType operator()() const;
  } cyrillic SWIFT_SYMBOL("s:7BlinkID12AlphabetTypeO8cyrillicyA2CmF");
  SWIFT_INLINE_THUNK bool isCyrillic() const;

  inline const static struct _impl_greek {  // impl struct for case greek
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::greek;
    }
    SWIFT_INLINE_THUNK AlphabetType operator()() const;
  } greek SWIFT_SYMBOL("s:7BlinkID12AlphabetTypeO5greekyA2CmF");
  SWIFT_INLINE_THUNK bool isGreek() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID12AlphabetTypeO5latinyA2CmFWC) return cases::latin;
    if (tag == _impl::$s7BlinkID12AlphabetTypeO6arabicyA2CmFWC) return cases::arabic;
    if (tag == _impl::$s7BlinkID12AlphabetTypeO8cyrillicyA2CmFWC) return cases::cyrillic;
    if (tag == _impl::$s7BlinkID12AlphabetTypeO5greekyA2CmFWC) return cases::greek;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<AlphabetType> init(const swift::String& rawValue) SWIFT_SYMBOL("s:7BlinkID12AlphabetTypeO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:7BlinkID12AlphabetTypeO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK AlphabetType(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK AlphabetType _make() noexcept {
    auto metadata = _impl::$s7BlinkID12AlphabetTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return AlphabetType(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID12AlphabetTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID12AlphabetTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID12AlphabetTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_AlphabetType;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID12AlphabetTypeOD;
  static inline constexpr $s7BlinkID12AlphabetTypeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_AlphabetType {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(AlphabetType &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const AlphabetType &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER AlphabetType returnNewValue(T callable) {
    auto result = AlphabetType::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID12AlphabetTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::AlphabetType> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID12AlphabetTypeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::AlphabetType> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::AlphabetType> = true;
template<>
struct implClassFor<BlinkID::AlphabetType> { using type = BlinkID::_impl::_impl_AlphabetType; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID17AnonymizationModeO") AnonymizationMode;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::AnonymizationMode> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
/// AnonymizationMode is used to define level of anonymization
/// performed on recognizer result.
namespace _impl {

class _impl_AnonymizationMode;

// Type metadata accessor for AnonymizationMode
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID17AnonymizationModeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum AnonymizationMode
extern "C" {
extern unsigned $s7BlinkID17AnonymizationModeO4noneyA2CmFWC;
extern unsigned $s7BlinkID17AnonymizationModeO9imageOnlyyA2CmFWC;
extern unsigned $s7BlinkID17AnonymizationModeO16resultFieldsOnlyyA2CmFWC;
extern unsigned $s7BlinkID17AnonymizationModeO10fullResultyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID17AnonymizationModeO") AnonymizationMode final {
public:
  SWIFT_INLINE_THUNK ~AnonymizationMode() noexcept {
    auto metadata = _impl::$s7BlinkID17AnonymizationModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK AnonymizationMode(const AnonymizationMode &other) noexcept {
    auto metadata = _impl::$s7BlinkID17AnonymizationModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK AnonymizationMode &operator =(const AnonymizationMode &other) noexcept {
    auto metadata = _impl::$s7BlinkID17AnonymizationModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK AnonymizationMode &operator =(AnonymizationMode &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER AnonymizationMode(AnonymizationMode &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    none SWIFT_SYMBOL("s:7BlinkID17AnonymizationModeO4noneyA2CmF"),
    imageOnly SWIFT_SYMBOL("s:7BlinkID17AnonymizationModeO9imageOnlyyA2CmF"),
    resultFieldsOnly SWIFT_SYMBOL("s:7BlinkID17AnonymizationModeO16resultFieldsOnlyyA2CmF"),
    fullResult SWIFT_SYMBOL("s:7BlinkID17AnonymizationModeO10fullResultyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_none {  // impl struct for case none
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::none;
    }
    SWIFT_INLINE_THUNK AnonymizationMode operator()() const;
  } none SWIFT_SYMBOL("s:7BlinkID17AnonymizationModeO4noneyA2CmF");
  SWIFT_INLINE_THUNK bool isNone() const;

  inline const static struct _impl_imageOnly {  // impl struct for case imageOnly
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::imageOnly;
    }
    SWIFT_INLINE_THUNK AnonymizationMode operator()() const;
  } imageOnly SWIFT_SYMBOL("s:7BlinkID17AnonymizationModeO9imageOnlyyA2CmF");
  SWIFT_INLINE_THUNK bool isImageOnly() const;

  inline const static struct _impl_resultFieldsOnly {  // impl struct for case resultFieldsOnly
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::resultFieldsOnly;
    }
    SWIFT_INLINE_THUNK AnonymizationMode operator()() const;
  } resultFieldsOnly SWIFT_SYMBOL("s:7BlinkID17AnonymizationModeO16resultFieldsOnlyyA2CmF");
  SWIFT_INLINE_THUNK bool isResultFieldsOnly() const;

  inline const static struct _impl_fullResult {  // impl struct for case fullResult
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::fullResult;
    }
    SWIFT_INLINE_THUNK AnonymizationMode operator()() const;
  } fullResult SWIFT_SYMBOL("s:7BlinkID17AnonymizationModeO10fullResultyA2CmF");
  SWIFT_INLINE_THUNK bool isFullResult() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID17AnonymizationModeO4noneyA2CmFWC) return cases::none;
    if (tag == _impl::$s7BlinkID17AnonymizationModeO9imageOnlyyA2CmFWC) return cases::imageOnly;
    if (tag == _impl::$s7BlinkID17AnonymizationModeO16resultFieldsOnlyyA2CmFWC) return cases::resultFieldsOnly;
    if (tag == _impl::$s7BlinkID17AnonymizationModeO10fullResultyA2CmFWC) return cases::fullResult;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::String getId() const SWIFT_SYMBOL("s:7BlinkID17AnonymizationModeO2idSSvp");
  static SWIFT_INLINE_THUNK swift::Optional<AnonymizationMode> init(const swift::String& rawValue) SWIFT_SYMBOL("s:7BlinkID17AnonymizationModeO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:7BlinkID17AnonymizationModeO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK AnonymizationMode(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK AnonymizationMode _make() noexcept {
    auto metadata = _impl::$s7BlinkID17AnonymizationModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return AnonymizationMode(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID17AnonymizationModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID17AnonymizationModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID17AnonymizationModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_AnonymizationMode;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID17AnonymizationModeOD;
  static inline constexpr $s7BlinkID17AnonymizationModeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_AnonymizationMode {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(AnonymizationMode &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const AnonymizationMode &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER AnonymizationMode returnNewValue(T callable) {
    auto result = AnonymizationMode::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID17AnonymizationModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::AnonymizationMode> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID17AnonymizationModeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::AnonymizationMode> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::AnonymizationMode> = true;
template<>
struct implClassFor<BlinkID::AnonymizationMode> { using type = BlinkID::_impl::_impl_AnonymizationMode; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO") BarcodeType;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::BarcodeType> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID11BarcodeDataV") BarcodeData;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::BarcodeData> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_BarcodeData;

// Type metadata accessor for BarcodeData
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID11BarcodeDataVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID11BarcodeDataV") BarcodeData final {
public:
  SWIFT_INLINE_THUNK ~BarcodeData() noexcept {
    auto metadata = _impl::$s7BlinkID11BarcodeDataVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK BarcodeData(const BarcodeData &other) noexcept {
    auto metadata = _impl::$s7BlinkID11BarcodeDataVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK BarcodeData &operator =(const BarcodeData &other) noexcept {
    auto metadata = _impl::$s7BlinkID11BarcodeDataVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK BarcodeData &operator =(BarcodeData &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER BarcodeData(BarcodeData &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getStringData() const SWIFT_SYMBOL("s:7BlinkID11BarcodeDataV06stringD0SSvp");
  SWIFT_INLINE_THUNK BarcodeType getBarcodeType() const SWIFT_SYMBOL("s:7BlinkID11BarcodeDataV11barcodeTypeAA0cF0Ovp");
  SWIFT_INLINE_THUNK bool getUncertain() const SWIFT_SYMBOL("s:7BlinkID11BarcodeDataV9uncertainSbvp");
private:
  SWIFT_INLINE_THUNK BarcodeData(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK BarcodeData _make() noexcept {
    auto metadata = _impl::$s7BlinkID11BarcodeDataVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return BarcodeData(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_BarcodeData;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID11BarcodeDataVD;
  static inline constexpr $s7BlinkID11BarcodeDataVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_BarcodeData {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(BarcodeData &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const BarcodeData &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER BarcodeData returnNewValue(T callable) {
    auto result = BarcodeData::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID11BarcodeDataVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::BarcodeData> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID11BarcodeDataVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::BarcodeData> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::BarcodeData> = true;
template<>
struct implClassFor<BlinkID::BarcodeData> { using type = BlinkID::_impl::_impl_BarcodeData; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO") BarcodeElementKey;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::BarcodeElementKey> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
/// Represents the fields present in the barcode.
/// Currently this is only used for AAMVACompliant documents.
namespace _impl {

class _impl_BarcodeElementKey;

// Type metadata accessor for BarcodeElementKey
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID17BarcodeElementKeyOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum BarcodeElementKey
extern "C" {
extern unsigned $s7BlinkID17BarcodeElementKeyO12documentTypeyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO21standardVersionNumberyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO18customerFamilyNameyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO17customerFirstNameyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO16customerFullNameyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO11dateOfBirthyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO3sexyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO8eyeColoryA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO13addressStreetyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO11addressCityyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO23addressJurisdictionCodeyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO17addressPostalCodeyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO11fullAddressyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO6heightyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO8heightInyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO8heightCmyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO18customerMiddleNameyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO9hairColoryA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO10nameSuffixyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO11akaFullNameyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO13akaFamilyNameyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO12akaGivenNameyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO13akaSuffixNameyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO11weightRangeyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO12weightPoundsyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO15weightKilogramsyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO16customerIdNumberyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO20familyNameTruncationyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO19firstNameTruncationyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO20middleNameTruncationyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO12placeOfBirthyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO14addressStreet2yA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO13raceEthnicityyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO10namePrefixyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO21countryIdentificationyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO22residenceStreetAddressyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO23residenceStreetAddress2yA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO13residenceCityyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO25residenceJurisdictionCodeyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO19residencePostalCodeyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO20residenceFullAddressyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO7under18yA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO7under19yA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO7under21yA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO20socialSecurityNumberyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO23akaSocialSecurityNumberyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO13akaMiddleNameyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO13akaPrefixNameyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO10organDonoryA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO7veteranyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO14akaDateOfBirthyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO26issuerIdentificationNumberyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO22documentExpirationDateyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO25jurisdictionVersionNumberyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO24jurisdictionVehicleClassyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO28jurisdictionRestrictionCodesyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO28jurisdictionEndorsementCodesyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO17documentIssueDateyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO29federalCommercialVehicleCodesyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO19issuingJurisdictionyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO29standardVehicleClassificationyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO23issuingJurisdictionNameyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO23standardEndorsementCodeyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO23standardRestrictionCodeyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO44jurisdictionVehicleClassificationDescriptionyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO37jurisdictionEndorsmentCodeDescriptionyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO38jurisdictionRestrictionCodeDescriptionyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO22inventoryControlNumberyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO16cardRevisionDateyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO21documentDiscriminatoryA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO23limitedDurationDocumentyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO16auditInformationyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO14complianceTypeyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO14issueTimestampyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO20permitExpirationDateyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO16permitIdentifieryA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO15permitIssueDateyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO18numberOfDuplicatesyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO20hazmatExpirationDateyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO16medicalIndicatoryA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO11nonResidentyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO16uniqueCustomerIdyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO17dataDiscriminatoryA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO23documentExpirationMonthyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO19documentNonexpiringyA2CmFWC;
extern unsigned $s7BlinkID17BarcodeElementKeyO15securityVersionyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO") BarcodeElementKey final {
public:
  SWIFT_INLINE_THUNK ~BarcodeElementKey() noexcept {
    auto metadata = _impl::$s7BlinkID17BarcodeElementKeyOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK BarcodeElementKey(const BarcodeElementKey &other) noexcept {
    auto metadata = _impl::$s7BlinkID17BarcodeElementKeyOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK BarcodeElementKey &operator =(const BarcodeElementKey &other) noexcept {
    auto metadata = _impl::$s7BlinkID17BarcodeElementKeyOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey &operator =(BarcodeElementKey &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER BarcodeElementKey(BarcodeElementKey &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    documentType SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO12documentTypeyA2CmF"),
    standardVersionNumber SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO21standardVersionNumberyA2CmF"),
    customerFamilyName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO18customerFamilyNameyA2CmF"),
    customerFirstName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO17customerFirstNameyA2CmF"),
    customerFullName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO16customerFullNameyA2CmF"),
    dateOfBirth SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO11dateOfBirthyA2CmF"),
    sex SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO3sexyA2CmF"),
    eyeColor SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO8eyeColoryA2CmF"),
    addressStreet SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO13addressStreetyA2CmF"),
    addressCity SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO11addressCityyA2CmF"),
    addressJurisdictionCode SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO23addressJurisdictionCodeyA2CmF"),
    addressPostalCode SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO17addressPostalCodeyA2CmF"),
    fullAddress SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO11fullAddressyA2CmF"),
    height SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO6heightyA2CmF"),
    heightIn SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO8heightInyA2CmF"),
    heightCm SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO8heightCmyA2CmF"),
    customerMiddleName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO18customerMiddleNameyA2CmF"),
    hairColor SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO9hairColoryA2CmF"),
    nameSuffix SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO10nameSuffixyA2CmF"),
    akaFullName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO11akaFullNameyA2CmF"),
    akaFamilyName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO13akaFamilyNameyA2CmF"),
    akaGivenName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO12akaGivenNameyA2CmF"),
    akaSuffixName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO13akaSuffixNameyA2CmF"),
    weightRange SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO11weightRangeyA2CmF"),
    weightPounds SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO12weightPoundsyA2CmF"),
    weightKilograms SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO15weightKilogramsyA2CmF"),
    customerIdNumber SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO16customerIdNumberyA2CmF"),
    familyNameTruncation SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO20familyNameTruncationyA2CmF"),
    firstNameTruncation SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO19firstNameTruncationyA2CmF"),
    middleNameTruncation SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO20middleNameTruncationyA2CmF"),
    placeOfBirth SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO12placeOfBirthyA2CmF"),
    addressStreet2 SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO14addressStreet2yA2CmF"),
    raceEthnicity SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO13raceEthnicityyA2CmF"),
    namePrefix SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO10namePrefixyA2CmF"),
    countryIdentification SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO21countryIdentificationyA2CmF"),
    residenceStreetAddress SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO22residenceStreetAddressyA2CmF"),
    residenceStreetAddress2 SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO23residenceStreetAddress2yA2CmF"),
    residenceCity SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO13residenceCityyA2CmF"),
    residenceJurisdictionCode SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO25residenceJurisdictionCodeyA2CmF"),
    residencePostalCode SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO19residencePostalCodeyA2CmF"),
    residenceFullAddress SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO20residenceFullAddressyA2CmF"),
    under18 SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO7under18yA2CmF"),
    under19 SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO7under19yA2CmF"),
    under21 SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO7under21yA2CmF"),
    socialSecurityNumber SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO20socialSecurityNumberyA2CmF"),
    akaSocialSecurityNumber SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO23akaSocialSecurityNumberyA2CmF"),
    akaMiddleName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO13akaMiddleNameyA2CmF"),
    akaPrefixName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO13akaPrefixNameyA2CmF"),
    organDonor SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO10organDonoryA2CmF"),
    veteran SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO7veteranyA2CmF"),
    akaDateOfBirth SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO14akaDateOfBirthyA2CmF"),
    issuerIdentificationNumber SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO26issuerIdentificationNumberyA2CmF"),
    documentExpirationDate SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO22documentExpirationDateyA2CmF"),
    jurisdictionVersionNumber SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO25jurisdictionVersionNumberyA2CmF"),
    jurisdictionVehicleClass SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO24jurisdictionVehicleClassyA2CmF"),
    jurisdictionRestrictionCodes SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO28jurisdictionRestrictionCodesyA2CmF"),
    jurisdictionEndorsementCodes SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO28jurisdictionEndorsementCodesyA2CmF"),
    documentIssueDate SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO17documentIssueDateyA2CmF"),
    federalCommercialVehicleCodes SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO29federalCommercialVehicleCodesyA2CmF"),
    issuingJurisdiction SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO19issuingJurisdictionyA2CmF"),
    standardVehicleClassification SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO29standardVehicleClassificationyA2CmF"),
    issuingJurisdictionName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO23issuingJurisdictionNameyA2CmF"),
    standardEndorsementCode SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO23standardEndorsementCodeyA2CmF"),
    standardRestrictionCode SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO23standardRestrictionCodeyA2CmF"),
    jurisdictionVehicleClassificationDescription SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO44jurisdictionVehicleClassificationDescriptionyA2CmF"),
    jurisdictionEndorsmentCodeDescription SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO37jurisdictionEndorsmentCodeDescriptionyA2CmF"),
    jurisdictionRestrictionCodeDescription SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO38jurisdictionRestrictionCodeDescriptionyA2CmF"),
    inventoryControlNumber SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO22inventoryControlNumberyA2CmF"),
    cardRevisionDate SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO16cardRevisionDateyA2CmF"),
    documentDiscriminator SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO21documentDiscriminatoryA2CmF"),
    limitedDurationDocument SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO23limitedDurationDocumentyA2CmF"),
    auditInformation SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO16auditInformationyA2CmF"),
    complianceType SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO14complianceTypeyA2CmF"),
    issueTimestamp SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO14issueTimestampyA2CmF"),
    permitExpirationDate SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO20permitExpirationDateyA2CmF"),
    permitIdentifier SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO16permitIdentifieryA2CmF"),
    permitIssueDate SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO15permitIssueDateyA2CmF"),
    numberOfDuplicates SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO18numberOfDuplicatesyA2CmF"),
    hazmatExpirationDate SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO20hazmatExpirationDateyA2CmF"),
    medicalIndicator SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO16medicalIndicatoryA2CmF"),
    nonResident SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO11nonResidentyA2CmF"),
    uniqueCustomerId SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO16uniqueCustomerIdyA2CmF"),
    dataDiscriminator SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO17dataDiscriminatoryA2CmF"),
    documentExpirationMonth SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO23documentExpirationMonthyA2CmF"),
    documentNonexpiring SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO19documentNonexpiringyA2CmF"),
    securityVersion SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO15securityVersionyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_documentType {  // impl struct for case documentType
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::documentType;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } documentType SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO12documentTypeyA2CmF");
  SWIFT_INLINE_THUNK bool isDocumentType() const;

  inline const static struct _impl_standardVersionNumber {  // impl struct for case standardVersionNumber
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::standardVersionNumber;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } standardVersionNumber SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO21standardVersionNumberyA2CmF");
  SWIFT_INLINE_THUNK bool isStandardVersionNumber() const;

  inline const static struct _impl_customerFamilyName {  // impl struct for case customerFamilyName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::customerFamilyName;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } customerFamilyName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO18customerFamilyNameyA2CmF");
  SWIFT_INLINE_THUNK bool isCustomerFamilyName() const;

  inline const static struct _impl_customerFirstName {  // impl struct for case customerFirstName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::customerFirstName;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } customerFirstName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO17customerFirstNameyA2CmF");
  SWIFT_INLINE_THUNK bool isCustomerFirstName() const;

  inline const static struct _impl_customerFullName {  // impl struct for case customerFullName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::customerFullName;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } customerFullName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO16customerFullNameyA2CmF");
  SWIFT_INLINE_THUNK bool isCustomerFullName() const;

  inline const static struct _impl_dateOfBirth {  // impl struct for case dateOfBirth
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dateOfBirth;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } dateOfBirth SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO11dateOfBirthyA2CmF");
  SWIFT_INLINE_THUNK bool isDateOfBirth() const;

  inline const static struct _impl_sex {  // impl struct for case sex
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sex;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } sex SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO3sexyA2CmF");
  SWIFT_INLINE_THUNK bool isSex() const;

  inline const static struct _impl_eyeColor {  // impl struct for case eyeColor
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::eyeColor;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } eyeColor SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO8eyeColoryA2CmF");
  SWIFT_INLINE_THUNK bool isEyeColor() const;

  inline const static struct _impl_addressStreet {  // impl struct for case addressStreet
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::addressStreet;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } addressStreet SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO13addressStreetyA2CmF");
  SWIFT_INLINE_THUNK bool isAddressStreet() const;

  inline const static struct _impl_addressCity {  // impl struct for case addressCity
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::addressCity;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } addressCity SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO11addressCityyA2CmF");
  SWIFT_INLINE_THUNK bool isAddressCity() const;

  inline const static struct _impl_addressJurisdictionCode {  // impl struct for case addressJurisdictionCode
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::addressJurisdictionCode;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } addressJurisdictionCode SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO23addressJurisdictionCodeyA2CmF");
  SWIFT_INLINE_THUNK bool isAddressJurisdictionCode() const;

  inline const static struct _impl_addressPostalCode {  // impl struct for case addressPostalCode
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::addressPostalCode;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } addressPostalCode SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO17addressPostalCodeyA2CmF");
  SWIFT_INLINE_THUNK bool isAddressPostalCode() const;

  inline const static struct _impl_fullAddress {  // impl struct for case fullAddress
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::fullAddress;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } fullAddress SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO11fullAddressyA2CmF");
  SWIFT_INLINE_THUNK bool isFullAddress() const;

  inline const static struct _impl_height {  // impl struct for case height
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::height;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } height SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO6heightyA2CmF");
  SWIFT_INLINE_THUNK bool isHeight() const;

  inline const static struct _impl_heightIn {  // impl struct for case heightIn
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::heightIn;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } heightIn SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO8heightInyA2CmF");
  SWIFT_INLINE_THUNK bool isHeightIn() const;

  inline const static struct _impl_heightCm {  // impl struct for case heightCm
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::heightCm;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } heightCm SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO8heightCmyA2CmF");
  SWIFT_INLINE_THUNK bool isHeightCm() const;

  inline const static struct _impl_customerMiddleName {  // impl struct for case customerMiddleName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::customerMiddleName;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } customerMiddleName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO18customerMiddleNameyA2CmF");
  SWIFT_INLINE_THUNK bool isCustomerMiddleName() const;

  inline const static struct _impl_hairColor {  // impl struct for case hairColor
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::hairColor;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } hairColor SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO9hairColoryA2CmF");
  SWIFT_INLINE_THUNK bool isHairColor() const;

  inline const static struct _impl_nameSuffix {  // impl struct for case nameSuffix
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nameSuffix;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } nameSuffix SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO10nameSuffixyA2CmF");
  SWIFT_INLINE_THUNK bool isNameSuffix() const;

  inline const static struct _impl_akaFullName {  // impl struct for case akaFullName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::akaFullName;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } akaFullName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO11akaFullNameyA2CmF");
  SWIFT_INLINE_THUNK bool isAkaFullName() const;

  inline const static struct _impl_akaFamilyName {  // impl struct for case akaFamilyName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::akaFamilyName;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } akaFamilyName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO13akaFamilyNameyA2CmF");
  SWIFT_INLINE_THUNK bool isAkaFamilyName() const;

  inline const static struct _impl_akaGivenName {  // impl struct for case akaGivenName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::akaGivenName;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } akaGivenName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO12akaGivenNameyA2CmF");
  SWIFT_INLINE_THUNK bool isAkaGivenName() const;

  inline const static struct _impl_akaSuffixName {  // impl struct for case akaSuffixName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::akaSuffixName;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } akaSuffixName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO13akaSuffixNameyA2CmF");
  SWIFT_INLINE_THUNK bool isAkaSuffixName() const;

  inline const static struct _impl_weightRange {  // impl struct for case weightRange
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::weightRange;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } weightRange SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO11weightRangeyA2CmF");
  SWIFT_INLINE_THUNK bool isWeightRange() const;

  inline const static struct _impl_weightPounds {  // impl struct for case weightPounds
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::weightPounds;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } weightPounds SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO12weightPoundsyA2CmF");
  SWIFT_INLINE_THUNK bool isWeightPounds() const;

  inline const static struct _impl_weightKilograms {  // impl struct for case weightKilograms
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::weightKilograms;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } weightKilograms SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO15weightKilogramsyA2CmF");
  SWIFT_INLINE_THUNK bool isWeightKilograms() const;

  inline const static struct _impl_customerIdNumber {  // impl struct for case customerIdNumber
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::customerIdNumber;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } customerIdNumber SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO16customerIdNumberyA2CmF");
  SWIFT_INLINE_THUNK bool isCustomerIdNumber() const;

  inline const static struct _impl_familyNameTruncation {  // impl struct for case familyNameTruncation
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::familyNameTruncation;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } familyNameTruncation SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO20familyNameTruncationyA2CmF");
  SWIFT_INLINE_THUNK bool isFamilyNameTruncation() const;

  inline const static struct _impl_firstNameTruncation {  // impl struct for case firstNameTruncation
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::firstNameTruncation;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } firstNameTruncation SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO19firstNameTruncationyA2CmF");
  SWIFT_INLINE_THUNK bool isFirstNameTruncation() const;

  inline const static struct _impl_middleNameTruncation {  // impl struct for case middleNameTruncation
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::middleNameTruncation;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } middleNameTruncation SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO20middleNameTruncationyA2CmF");
  SWIFT_INLINE_THUNK bool isMiddleNameTruncation() const;

  inline const static struct _impl_placeOfBirth {  // impl struct for case placeOfBirth
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::placeOfBirth;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } placeOfBirth SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO12placeOfBirthyA2CmF");
  SWIFT_INLINE_THUNK bool isPlaceOfBirth() const;

  inline const static struct _impl_addressStreet2 {  // impl struct for case addressStreet2
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::addressStreet2;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } addressStreet2 SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO14addressStreet2yA2CmF");
  SWIFT_INLINE_THUNK bool isAddressStreet2() const;

  inline const static struct _impl_raceEthnicity {  // impl struct for case raceEthnicity
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::raceEthnicity;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } raceEthnicity SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO13raceEthnicityyA2CmF");
  SWIFT_INLINE_THUNK bool isRaceEthnicity() const;

  inline const static struct _impl_namePrefix {  // impl struct for case namePrefix
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::namePrefix;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } namePrefix SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO10namePrefixyA2CmF");
  SWIFT_INLINE_THUNK bool isNamePrefix() const;

  inline const static struct _impl_countryIdentification {  // impl struct for case countryIdentification
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::countryIdentification;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } countryIdentification SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO21countryIdentificationyA2CmF");
  SWIFT_INLINE_THUNK bool isCountryIdentification() const;

  inline const static struct _impl_residenceStreetAddress {  // impl struct for case residenceStreetAddress
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::residenceStreetAddress;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } residenceStreetAddress SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO22residenceStreetAddressyA2CmF");
  SWIFT_INLINE_THUNK bool isResidenceStreetAddress() const;

  inline const static struct _impl_residenceStreetAddress2 {  // impl struct for case residenceStreetAddress2
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::residenceStreetAddress2;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } residenceStreetAddress2 SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO23residenceStreetAddress2yA2CmF");
  SWIFT_INLINE_THUNK bool isResidenceStreetAddress2() const;

  inline const static struct _impl_residenceCity {  // impl struct for case residenceCity
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::residenceCity;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } residenceCity SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO13residenceCityyA2CmF");
  SWIFT_INLINE_THUNK bool isResidenceCity() const;

  inline const static struct _impl_residenceJurisdictionCode {  // impl struct for case residenceJurisdictionCode
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::residenceJurisdictionCode;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } residenceJurisdictionCode SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO25residenceJurisdictionCodeyA2CmF");
  SWIFT_INLINE_THUNK bool isResidenceJurisdictionCode() const;

  inline const static struct _impl_residencePostalCode {  // impl struct for case residencePostalCode
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::residencePostalCode;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } residencePostalCode SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO19residencePostalCodeyA2CmF");
  SWIFT_INLINE_THUNK bool isResidencePostalCode() const;

  inline const static struct _impl_residenceFullAddress {  // impl struct for case residenceFullAddress
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::residenceFullAddress;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } residenceFullAddress SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO20residenceFullAddressyA2CmF");
  SWIFT_INLINE_THUNK bool isResidenceFullAddress() const;

  inline const static struct _impl_under18 {  // impl struct for case under18
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::under18;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } under18 SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO7under18yA2CmF");
  SWIFT_INLINE_THUNK bool isUnder18() const;

  inline const static struct _impl_under19 {  // impl struct for case under19
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::under19;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } under19 SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO7under19yA2CmF");
  SWIFT_INLINE_THUNK bool isUnder19() const;

  inline const static struct _impl_under21 {  // impl struct for case under21
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::under21;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } under21 SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO7under21yA2CmF");
  SWIFT_INLINE_THUNK bool isUnder21() const;

  inline const static struct _impl_socialSecurityNumber {  // impl struct for case socialSecurityNumber
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::socialSecurityNumber;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } socialSecurityNumber SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO20socialSecurityNumberyA2CmF");
  SWIFT_INLINE_THUNK bool isSocialSecurityNumber() const;

  inline const static struct _impl_akaSocialSecurityNumber {  // impl struct for case akaSocialSecurityNumber
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::akaSocialSecurityNumber;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } akaSocialSecurityNumber SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO23akaSocialSecurityNumberyA2CmF");
  SWIFT_INLINE_THUNK bool isAkaSocialSecurityNumber() const;

  inline const static struct _impl_akaMiddleName {  // impl struct for case akaMiddleName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::akaMiddleName;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } akaMiddleName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO13akaMiddleNameyA2CmF");
  SWIFT_INLINE_THUNK bool isAkaMiddleName() const;

  inline const static struct _impl_akaPrefixName {  // impl struct for case akaPrefixName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::akaPrefixName;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } akaPrefixName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO13akaPrefixNameyA2CmF");
  SWIFT_INLINE_THUNK bool isAkaPrefixName() const;

  inline const static struct _impl_organDonor {  // impl struct for case organDonor
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::organDonor;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } organDonor SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO10organDonoryA2CmF");
  SWIFT_INLINE_THUNK bool isOrganDonor() const;

  inline const static struct _impl_veteran {  // impl struct for case veteran
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::veteran;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } veteran SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO7veteranyA2CmF");
  SWIFT_INLINE_THUNK bool isVeteran() const;

  inline const static struct _impl_akaDateOfBirth {  // impl struct for case akaDateOfBirth
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::akaDateOfBirth;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } akaDateOfBirth SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO14akaDateOfBirthyA2CmF");
  SWIFT_INLINE_THUNK bool isAkaDateOfBirth() const;

  inline const static struct _impl_issuerIdentificationNumber {  // impl struct for case issuerIdentificationNumber
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::issuerIdentificationNumber;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } issuerIdentificationNumber SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO26issuerIdentificationNumberyA2CmF");
  SWIFT_INLINE_THUNK bool isIssuerIdentificationNumber() const;

  inline const static struct _impl_documentExpirationDate {  // impl struct for case documentExpirationDate
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::documentExpirationDate;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } documentExpirationDate SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO22documentExpirationDateyA2CmF");
  SWIFT_INLINE_THUNK bool isDocumentExpirationDate() const;

  inline const static struct _impl_jurisdictionVersionNumber {  // impl struct for case jurisdictionVersionNumber
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::jurisdictionVersionNumber;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } jurisdictionVersionNumber SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO25jurisdictionVersionNumberyA2CmF");
  SWIFT_INLINE_THUNK bool isJurisdictionVersionNumber() const;

  inline const static struct _impl_jurisdictionVehicleClass {  // impl struct for case jurisdictionVehicleClass
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::jurisdictionVehicleClass;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } jurisdictionVehicleClass SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO24jurisdictionVehicleClassyA2CmF");
  SWIFT_INLINE_THUNK bool isJurisdictionVehicleClass() const;

  inline const static struct _impl_jurisdictionRestrictionCodes {  // impl struct for case jurisdictionRestrictionCodes
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::jurisdictionRestrictionCodes;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } jurisdictionRestrictionCodes SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO28jurisdictionRestrictionCodesyA2CmF");
  SWIFT_INLINE_THUNK bool isJurisdictionRestrictionCodes() const;

  inline const static struct _impl_jurisdictionEndorsementCodes {  // impl struct for case jurisdictionEndorsementCodes
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::jurisdictionEndorsementCodes;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } jurisdictionEndorsementCodes SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO28jurisdictionEndorsementCodesyA2CmF");
  SWIFT_INLINE_THUNK bool isJurisdictionEndorsementCodes() const;

  inline const static struct _impl_documentIssueDate {  // impl struct for case documentIssueDate
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::documentIssueDate;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } documentIssueDate SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO17documentIssueDateyA2CmF");
  SWIFT_INLINE_THUNK bool isDocumentIssueDate() const;

  inline const static struct _impl_federalCommercialVehicleCodes {  // impl struct for case federalCommercialVehicleCodes
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::federalCommercialVehicleCodes;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } federalCommercialVehicleCodes SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO29federalCommercialVehicleCodesyA2CmF");
  SWIFT_INLINE_THUNK bool isFederalCommercialVehicleCodes() const;

  inline const static struct _impl_issuingJurisdiction {  // impl struct for case issuingJurisdiction
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::issuingJurisdiction;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } issuingJurisdiction SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO19issuingJurisdictionyA2CmF");
  SWIFT_INLINE_THUNK bool isIssuingJurisdiction() const;

  inline const static struct _impl_standardVehicleClassification {  // impl struct for case standardVehicleClassification
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::standardVehicleClassification;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } standardVehicleClassification SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO29standardVehicleClassificationyA2CmF");
  SWIFT_INLINE_THUNK bool isStandardVehicleClassification() const;

  inline const static struct _impl_issuingJurisdictionName {  // impl struct for case issuingJurisdictionName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::issuingJurisdictionName;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } issuingJurisdictionName SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO23issuingJurisdictionNameyA2CmF");
  SWIFT_INLINE_THUNK bool isIssuingJurisdictionName() const;

  inline const static struct _impl_standardEndorsementCode {  // impl struct for case standardEndorsementCode
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::standardEndorsementCode;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } standardEndorsementCode SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO23standardEndorsementCodeyA2CmF");
  SWIFT_INLINE_THUNK bool isStandardEndorsementCode() const;

  inline const static struct _impl_standardRestrictionCode {  // impl struct for case standardRestrictionCode
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::standardRestrictionCode;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } standardRestrictionCode SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO23standardRestrictionCodeyA2CmF");
  SWIFT_INLINE_THUNK bool isStandardRestrictionCode() const;

  inline const static struct _impl_jurisdictionVehicleClassificationDescription {  // impl struct for case jurisdictionVehicleClassificationDescription
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::jurisdictionVehicleClassificationDescription;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } jurisdictionVehicleClassificationDescription SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO44jurisdictionVehicleClassificationDescriptionyA2CmF");
  SWIFT_INLINE_THUNK bool isJurisdictionVehicleClassificationDescription() const;

  inline const static struct _impl_jurisdictionEndorsmentCodeDescription {  // impl struct for case jurisdictionEndorsmentCodeDescription
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::jurisdictionEndorsmentCodeDescription;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } jurisdictionEndorsmentCodeDescription SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO37jurisdictionEndorsmentCodeDescriptionyA2CmF");
  SWIFT_INLINE_THUNK bool isJurisdictionEndorsmentCodeDescription() const;

  inline const static struct _impl_jurisdictionRestrictionCodeDescription {  // impl struct for case jurisdictionRestrictionCodeDescription
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::jurisdictionRestrictionCodeDescription;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } jurisdictionRestrictionCodeDescription SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO38jurisdictionRestrictionCodeDescriptionyA2CmF");
  SWIFT_INLINE_THUNK bool isJurisdictionRestrictionCodeDescription() const;

  inline const static struct _impl_inventoryControlNumber {  // impl struct for case inventoryControlNumber
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::inventoryControlNumber;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } inventoryControlNumber SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO22inventoryControlNumberyA2CmF");
  SWIFT_INLINE_THUNK bool isInventoryControlNumber() const;

  inline const static struct _impl_cardRevisionDate {  // impl struct for case cardRevisionDate
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cardRevisionDate;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } cardRevisionDate SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO16cardRevisionDateyA2CmF");
  SWIFT_INLINE_THUNK bool isCardRevisionDate() const;

  inline const static struct _impl_documentDiscriminator {  // impl struct for case documentDiscriminator
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::documentDiscriminator;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } documentDiscriminator SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO21documentDiscriminatoryA2CmF");
  SWIFT_INLINE_THUNK bool isDocumentDiscriminator() const;

  inline const static struct _impl_limitedDurationDocument {  // impl struct for case limitedDurationDocument
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::limitedDurationDocument;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } limitedDurationDocument SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO23limitedDurationDocumentyA2CmF");
  SWIFT_INLINE_THUNK bool isLimitedDurationDocument() const;

  inline const static struct _impl_auditInformation {  // impl struct for case auditInformation
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::auditInformation;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } auditInformation SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO16auditInformationyA2CmF");
  SWIFT_INLINE_THUNK bool isAuditInformation() const;

  inline const static struct _impl_complianceType {  // impl struct for case complianceType
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::complianceType;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } complianceType SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO14complianceTypeyA2CmF");
  SWIFT_INLINE_THUNK bool isComplianceType() const;

  inline const static struct _impl_issueTimestamp {  // impl struct for case issueTimestamp
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::issueTimestamp;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } issueTimestamp SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO14issueTimestampyA2CmF");
  SWIFT_INLINE_THUNK bool isIssueTimestamp() const;

  inline const static struct _impl_permitExpirationDate {  // impl struct for case permitExpirationDate
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::permitExpirationDate;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } permitExpirationDate SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO20permitExpirationDateyA2CmF");
  SWIFT_INLINE_THUNK bool isPermitExpirationDate() const;

  inline const static struct _impl_permitIdentifier {  // impl struct for case permitIdentifier
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::permitIdentifier;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } permitIdentifier SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO16permitIdentifieryA2CmF");
  SWIFT_INLINE_THUNK bool isPermitIdentifier() const;

  inline const static struct _impl_permitIssueDate {  // impl struct for case permitIssueDate
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::permitIssueDate;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } permitIssueDate SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO15permitIssueDateyA2CmF");
  SWIFT_INLINE_THUNK bool isPermitIssueDate() const;

  inline const static struct _impl_numberOfDuplicates {  // impl struct for case numberOfDuplicates
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::numberOfDuplicates;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } numberOfDuplicates SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO18numberOfDuplicatesyA2CmF");
  SWIFT_INLINE_THUNK bool isNumberOfDuplicates() const;

  inline const static struct _impl_hazmatExpirationDate {  // impl struct for case hazmatExpirationDate
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::hazmatExpirationDate;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } hazmatExpirationDate SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO20hazmatExpirationDateyA2CmF");
  SWIFT_INLINE_THUNK bool isHazmatExpirationDate() const;

  inline const static struct _impl_medicalIndicator {  // impl struct for case medicalIndicator
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::medicalIndicator;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } medicalIndicator SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO16medicalIndicatoryA2CmF");
  SWIFT_INLINE_THUNK bool isMedicalIndicator() const;

  inline const static struct _impl_nonResident {  // impl struct for case nonResident
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nonResident;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } nonResident SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO11nonResidentyA2CmF");
  SWIFT_INLINE_THUNK bool isNonResident() const;

  inline const static struct _impl_uniqueCustomerId {  // impl struct for case uniqueCustomerId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::uniqueCustomerId;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } uniqueCustomerId SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO16uniqueCustomerIdyA2CmF");
  SWIFT_INLINE_THUNK bool isUniqueCustomerId() const;

  inline const static struct _impl_dataDiscriminator {  // impl struct for case dataDiscriminator
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dataDiscriminator;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } dataDiscriminator SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO17dataDiscriminatoryA2CmF");
  SWIFT_INLINE_THUNK bool isDataDiscriminator() const;

  inline const static struct _impl_documentExpirationMonth {  // impl struct for case documentExpirationMonth
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::documentExpirationMonth;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } documentExpirationMonth SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO23documentExpirationMonthyA2CmF");
  SWIFT_INLINE_THUNK bool isDocumentExpirationMonth() const;

  inline const static struct _impl_documentNonexpiring {  // impl struct for case documentNonexpiring
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::documentNonexpiring;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } documentNonexpiring SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO19documentNonexpiringyA2CmF");
  SWIFT_INLINE_THUNK bool isDocumentNonexpiring() const;

  inline const static struct _impl_securityVersion {  // impl struct for case securityVersion
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::securityVersion;
    }
    SWIFT_INLINE_THUNK BarcodeElementKey operator()() const;
  } securityVersion SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO15securityVersionyA2CmF");
  SWIFT_INLINE_THUNK bool isSecurityVersion() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO12documentTypeyA2CmFWC) return cases::documentType;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO21standardVersionNumberyA2CmFWC) return cases::standardVersionNumber;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO18customerFamilyNameyA2CmFWC) return cases::customerFamilyName;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO17customerFirstNameyA2CmFWC) return cases::customerFirstName;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO16customerFullNameyA2CmFWC) return cases::customerFullName;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO11dateOfBirthyA2CmFWC) return cases::dateOfBirth;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO3sexyA2CmFWC) return cases::sex;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO8eyeColoryA2CmFWC) return cases::eyeColor;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO13addressStreetyA2CmFWC) return cases::addressStreet;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO11addressCityyA2CmFWC) return cases::addressCity;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO23addressJurisdictionCodeyA2CmFWC) return cases::addressJurisdictionCode;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO17addressPostalCodeyA2CmFWC) return cases::addressPostalCode;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO11fullAddressyA2CmFWC) return cases::fullAddress;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO6heightyA2CmFWC) return cases::height;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO8heightInyA2CmFWC) return cases::heightIn;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO8heightCmyA2CmFWC) return cases::heightCm;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO18customerMiddleNameyA2CmFWC) return cases::customerMiddleName;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO9hairColoryA2CmFWC) return cases::hairColor;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO10nameSuffixyA2CmFWC) return cases::nameSuffix;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO11akaFullNameyA2CmFWC) return cases::akaFullName;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO13akaFamilyNameyA2CmFWC) return cases::akaFamilyName;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO12akaGivenNameyA2CmFWC) return cases::akaGivenName;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO13akaSuffixNameyA2CmFWC) return cases::akaSuffixName;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO11weightRangeyA2CmFWC) return cases::weightRange;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO12weightPoundsyA2CmFWC) return cases::weightPounds;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO15weightKilogramsyA2CmFWC) return cases::weightKilograms;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO16customerIdNumberyA2CmFWC) return cases::customerIdNumber;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO20familyNameTruncationyA2CmFWC) return cases::familyNameTruncation;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO19firstNameTruncationyA2CmFWC) return cases::firstNameTruncation;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO20middleNameTruncationyA2CmFWC) return cases::middleNameTruncation;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO12placeOfBirthyA2CmFWC) return cases::placeOfBirth;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO14addressStreet2yA2CmFWC) return cases::addressStreet2;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO13raceEthnicityyA2CmFWC) return cases::raceEthnicity;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO10namePrefixyA2CmFWC) return cases::namePrefix;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO21countryIdentificationyA2CmFWC) return cases::countryIdentification;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO22residenceStreetAddressyA2CmFWC) return cases::residenceStreetAddress;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO23residenceStreetAddress2yA2CmFWC) return cases::residenceStreetAddress2;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO13residenceCityyA2CmFWC) return cases::residenceCity;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO25residenceJurisdictionCodeyA2CmFWC) return cases::residenceJurisdictionCode;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO19residencePostalCodeyA2CmFWC) return cases::residencePostalCode;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO20residenceFullAddressyA2CmFWC) return cases::residenceFullAddress;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO7under18yA2CmFWC) return cases::under18;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO7under19yA2CmFWC) return cases::under19;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO7under21yA2CmFWC) return cases::under21;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO20socialSecurityNumberyA2CmFWC) return cases::socialSecurityNumber;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO23akaSocialSecurityNumberyA2CmFWC) return cases::akaSocialSecurityNumber;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO13akaMiddleNameyA2CmFWC) return cases::akaMiddleName;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO13akaPrefixNameyA2CmFWC) return cases::akaPrefixName;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO10organDonoryA2CmFWC) return cases::organDonor;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO7veteranyA2CmFWC) return cases::veteran;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO14akaDateOfBirthyA2CmFWC) return cases::akaDateOfBirth;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO26issuerIdentificationNumberyA2CmFWC) return cases::issuerIdentificationNumber;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO22documentExpirationDateyA2CmFWC) return cases::documentExpirationDate;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO25jurisdictionVersionNumberyA2CmFWC) return cases::jurisdictionVersionNumber;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO24jurisdictionVehicleClassyA2CmFWC) return cases::jurisdictionVehicleClass;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO28jurisdictionRestrictionCodesyA2CmFWC) return cases::jurisdictionRestrictionCodes;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO28jurisdictionEndorsementCodesyA2CmFWC) return cases::jurisdictionEndorsementCodes;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO17documentIssueDateyA2CmFWC) return cases::documentIssueDate;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO29federalCommercialVehicleCodesyA2CmFWC) return cases::federalCommercialVehicleCodes;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO19issuingJurisdictionyA2CmFWC) return cases::issuingJurisdiction;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO29standardVehicleClassificationyA2CmFWC) return cases::standardVehicleClassification;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO23issuingJurisdictionNameyA2CmFWC) return cases::issuingJurisdictionName;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO23standardEndorsementCodeyA2CmFWC) return cases::standardEndorsementCode;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO23standardRestrictionCodeyA2CmFWC) return cases::standardRestrictionCode;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO44jurisdictionVehicleClassificationDescriptionyA2CmFWC) return cases::jurisdictionVehicleClassificationDescription;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO37jurisdictionEndorsmentCodeDescriptionyA2CmFWC) return cases::jurisdictionEndorsmentCodeDescription;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO38jurisdictionRestrictionCodeDescriptionyA2CmFWC) return cases::jurisdictionRestrictionCodeDescription;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO22inventoryControlNumberyA2CmFWC) return cases::inventoryControlNumber;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO16cardRevisionDateyA2CmFWC) return cases::cardRevisionDate;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO21documentDiscriminatoryA2CmFWC) return cases::documentDiscriminator;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO23limitedDurationDocumentyA2CmFWC) return cases::limitedDurationDocument;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO16auditInformationyA2CmFWC) return cases::auditInformation;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO14complianceTypeyA2CmFWC) return cases::complianceType;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO14issueTimestampyA2CmFWC) return cases::issueTimestamp;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO20permitExpirationDateyA2CmFWC) return cases::permitExpirationDate;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO16permitIdentifieryA2CmFWC) return cases::permitIdentifier;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO15permitIssueDateyA2CmFWC) return cases::permitIssueDate;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO18numberOfDuplicatesyA2CmFWC) return cases::numberOfDuplicates;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO20hazmatExpirationDateyA2CmFWC) return cases::hazmatExpirationDate;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO16medicalIndicatoryA2CmFWC) return cases::medicalIndicator;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO11nonResidentyA2CmFWC) return cases::nonResident;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO16uniqueCustomerIdyA2CmFWC) return cases::uniqueCustomerId;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO17dataDiscriminatoryA2CmFWC) return cases::dataDiscriminator;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO23documentExpirationMonthyA2CmFWC) return cases::documentExpirationMonth;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO19documentNonexpiringyA2CmFWC) return cases::documentNonexpiring;
    if (tag == _impl::$s7BlinkID17BarcodeElementKeyO15securityVersionyA2CmFWC) return cases::securityVersion;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:7BlinkID17BarcodeElementKeyO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK BarcodeElementKey(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK BarcodeElementKey _make() noexcept {
    auto metadata = _impl::$s7BlinkID17BarcodeElementKeyOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return BarcodeElementKey(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID17BarcodeElementKeyOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID17BarcodeElementKeyOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID17BarcodeElementKeyOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_BarcodeElementKey;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID17BarcodeElementKeyOD;
  static inline constexpr $s7BlinkID17BarcodeElementKeyOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_BarcodeElementKey {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(BarcodeElementKey &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const BarcodeElementKey &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER BarcodeElementKey returnNewValue(T callable) {
    auto result = BarcodeElementKey::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID17BarcodeElementKeyOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::BarcodeElementKey> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID17BarcodeElementKeyOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::BarcodeElementKey> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::BarcodeElementKey> = true;
template<>
struct implClassFor<BlinkID::BarcodeElementKey> { using type = BlinkID::_impl::_impl_BarcodeElementKey; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID15BarcodeElementsV") BarcodeElements;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::BarcodeElements> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_BarcodeElements;

// Type metadata accessor for BarcodeElements
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID15BarcodeElementsVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID15BarcodeElementsV") BarcodeElements final {
public:
  SWIFT_INLINE_THUNK ~BarcodeElements() noexcept {
    auto metadata = _impl::$s7BlinkID15BarcodeElementsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK BarcodeElements(const BarcodeElements &other) noexcept {
    auto metadata = _impl::$s7BlinkID15BarcodeElementsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK BarcodeElements &operator =(const BarcodeElements &other) noexcept {
    auto metadata = _impl::$s7BlinkID15BarcodeElementsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK BarcodeElements &operator =(BarcodeElements &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER BarcodeElements(BarcodeElements &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getValue(const BarcodeElementKey& barcodeElementKey) SWIFT_SYMBOL("s:7BlinkID15BarcodeElementsV8getValue3forSSAA0C10ElementKeyO_tF");
private:
  SWIFT_INLINE_THUNK BarcodeElements(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK BarcodeElements _make() noexcept {
    auto metadata = _impl::$s7BlinkID15BarcodeElementsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return BarcodeElements(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_BarcodeElements;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID15BarcodeElementsVD;
  static inline constexpr $s7BlinkID15BarcodeElementsVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_BarcodeElements {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(BarcodeElements &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const BarcodeElements &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER BarcodeElements returnNewValue(T callable) {
    auto result = BarcodeElements::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID15BarcodeElementsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::BarcodeElements> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID15BarcodeElementsVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::BarcodeElements> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::BarcodeElements> = true;
template<>
struct implClassFor<BlinkID::BarcodeElements> { using type = BlinkID::_impl::_impl_BarcodeElements; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:7BlinkID10DateResultV") DateResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
static inline const constexpr bool isUsableInGenericContext<BlinkID::DateResult<T_0_0>> = isUsableInGenericContext<T_0_0>;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:7BlinkID25DriverLicenseDetailedInfoV") DriverLicenseDetailedInfo;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
static inline const constexpr bool isUsableInGenericContext<BlinkID::DriverLicenseDetailedInfo<T_0_0>> = isUsableInGenericContext<T_0_0>;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV") BarcodeResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::BarcodeResult> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_BarcodeResult;

// Type metadata accessor for BarcodeResult
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID13BarcodeResultVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV") BarcodeResult final {
public:
  SWIFT_INLINE_THUNK ~BarcodeResult() noexcept {
    auto metadata = _impl::$s7BlinkID13BarcodeResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK BarcodeResult(const BarcodeResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID13BarcodeResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK BarcodeResult &operator =(const BarcodeResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID13BarcodeResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK BarcodeResult &operator =(BarcodeResult &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER BarcodeResult(BarcodeResult &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK BarcodeData getBarcodeData() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV11barcodeDataAA0cF0Vvp");
  SWIFT_INLINE_THUNK swift::String getFirstName() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV9firstNameSSvp");
  SWIFT_INLINE_THUNK swift::String getMiddleName() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV10middleNameSSvp");
  SWIFT_INLINE_THUNK swift::String getLastName() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV8lastNameSSvp");
  SWIFT_INLINE_THUNK swift::String getFullName() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV8fullNameSSvp");
  SWIFT_INLINE_THUNK swift::String getAdditionalNameInformation() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV25additionalNameInformationSSvp");
  SWIFT_INLINE_THUNK swift::String getAddress() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV7addressSSvp");
  SWIFT_INLINE_THUNK swift::String getPlaceOfBirth() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV12placeOfBirthSSvp");
  SWIFT_INLINE_THUNK swift::String getNationality() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV11nationalitySSvp");
  SWIFT_INLINE_THUNK swift::String getRace() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV4raceSSvp");
  SWIFT_INLINE_THUNK swift::String getReligion() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV8religionSSvp");
  SWIFT_INLINE_THUNK swift::String getProfession() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV10professionSSvp");
  SWIFT_INLINE_THUNK swift::String getMaritalStatus() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV13maritalStatusSSvp");
  SWIFT_INLINE_THUNK swift::String getResidentialStatus() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV17residentialStatusSSvp");
  SWIFT_INLINE_THUNK swift::String getEmployer() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV8employerSSvp");
  SWIFT_INLINE_THUNK swift::String getSex() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV3sexSSvp");
  SWIFT_INLINE_THUNK DateResult<swift::String> getDateOfBirth() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV11dateOfBirthAA04DateD0VySSGvp");
  SWIFT_INLINE_THUNK DateResult<swift::String> getDateOfIssue() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV11dateOfIssueAA04DateD0VySSGvp");
  SWIFT_INLINE_THUNK DateResult<swift::String> getDateOfExpiry() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV12dateOfExpiryAA04DateD0VySSGvp");
  SWIFT_INLINE_THUNK swift::String getDocumentNumber() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV14documentNumberSSvp");
  SWIFT_INLINE_THUNK swift::String getPersonalIdNumber() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV16personalIdNumberSSvp");
  SWIFT_INLINE_THUNK swift::String getDocumentAdditionalNumber() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV24documentAdditionalNumberSSvp");
  SWIFT_INLINE_THUNK swift::String getIssuingAuthority() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV16issuingAuthoritySSvp");
  SWIFT_INLINE_THUNK AddressDetailedInfo getAddressDetailedInfo() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV19addressDetailedInfoAA07AddressfG0Vvp");
  SWIFT_INLINE_THUNK DriverLicenseDetailedInfo<swift::String> getDriverLicenseDetailedInfo() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV25driverLicenseDetailedInfoAA06DriverfgH0VySSGvp");
  SWIFT_INLINE_THUNK BarcodeElements getExtendedElements() const SWIFT_SYMBOL("s:7BlinkID13BarcodeResultV16extendedElementsAA0cF0Vvp");
private:
  SWIFT_INLINE_THUNK BarcodeResult(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK BarcodeResult _make() noexcept {
    auto metadata = _impl::$s7BlinkID13BarcodeResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return BarcodeResult(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_BarcodeResult;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID13BarcodeResultVD;
  static inline constexpr $s7BlinkID13BarcodeResultVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_BarcodeResult {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(BarcodeResult &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const BarcodeResult &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER BarcodeResult returnNewValue(T callable) {
    auto result = BarcodeResult::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID13BarcodeResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::BarcodeResult> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID13BarcodeResultVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::BarcodeResult> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::BarcodeResult> = true;
template<>
struct implClassFor<BlinkID::BarcodeResult> { using type = BlinkID::_impl::_impl_BarcodeResult; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

/// Represents the type of scanned barcode
namespace _impl {

class _impl_BarcodeType;

// Type metadata accessor for BarcodeType
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID11BarcodeTypeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum BarcodeType
extern "C" {
extern unsigned $s7BlinkID11BarcodeTypeO4noneyA2CmFWC;
extern unsigned $s7BlinkID11BarcodeTypeO6qrCodeyA2CmFWC;
extern unsigned $s7BlinkID11BarcodeTypeO10dataMatrixyA2CmFWC;
extern unsigned $s7BlinkID11BarcodeTypeO4upceyA2CmFWC;
extern unsigned $s7BlinkID11BarcodeTypeO4upcayA2CmFWC;
extern unsigned $s7BlinkID11BarcodeTypeO4ean8yA2CmFWC;
extern unsigned $s7BlinkID11BarcodeTypeO5ean13yA2CmFWC;
extern unsigned $s7BlinkID11BarcodeTypeO7code128yA2CmFWC;
extern unsigned $s7BlinkID11BarcodeTypeO6code39yA2CmFWC;
extern unsigned $s7BlinkID11BarcodeTypeO3itfyA2CmFWC;
extern unsigned $s7BlinkID11BarcodeTypeO5aztecyA2CmFWC;
extern unsigned $s7BlinkID11BarcodeTypeO6pdf417yA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO") BarcodeType final {
public:
  SWIFT_INLINE_THUNK ~BarcodeType() noexcept {
    auto metadata = _impl::$s7BlinkID11BarcodeTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK BarcodeType(const BarcodeType &other) noexcept {
    auto metadata = _impl::$s7BlinkID11BarcodeTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK BarcodeType &operator =(const BarcodeType &other) noexcept {
    auto metadata = _impl::$s7BlinkID11BarcodeTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK BarcodeType &operator =(BarcodeType &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER BarcodeType(BarcodeType &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    none SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO4noneyA2CmF"),
    qrCode SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO6qrCodeyA2CmF"),
    dataMatrix SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO10dataMatrixyA2CmF"),
    upce SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO4upceyA2CmF"),
    upca SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO4upcayA2CmF"),
    ean8 SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO4ean8yA2CmF"),
    ean13 SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO5ean13yA2CmF"),
    code128 SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO7code128yA2CmF"),
    code39 SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO6code39yA2CmF"),
    itf SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO3itfyA2CmF"),
    aztec SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO5aztecyA2CmF"),
    pdf417 SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO6pdf417yA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_none {  // impl struct for case none
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::none;
    }
    SWIFT_INLINE_THUNK BarcodeType operator()() const;
  } none SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO4noneyA2CmF");
  SWIFT_INLINE_THUNK bool isNone() const;

  inline const static struct _impl_qrCode {  // impl struct for case qrCode
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::qrCode;
    }
    SWIFT_INLINE_THUNK BarcodeType operator()() const;
  } qrCode SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO6qrCodeyA2CmF");
  SWIFT_INLINE_THUNK bool isQrCode() const;

  inline const static struct _impl_dataMatrix {  // impl struct for case dataMatrix
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dataMatrix;
    }
    SWIFT_INLINE_THUNK BarcodeType operator()() const;
  } dataMatrix SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO10dataMatrixyA2CmF");
  SWIFT_INLINE_THUNK bool isDataMatrix() const;

  inline const static struct _impl_upce {  // impl struct for case upce
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::upce;
    }
    SWIFT_INLINE_THUNK BarcodeType operator()() const;
  } upce SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO4upceyA2CmF");
  SWIFT_INLINE_THUNK bool isUpce() const;

  inline const static struct _impl_upca {  // impl struct for case upca
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::upca;
    }
    SWIFT_INLINE_THUNK BarcodeType operator()() const;
  } upca SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO4upcayA2CmF");
  SWIFT_INLINE_THUNK bool isUpca() const;

  inline const static struct _impl_ean8 {  // impl struct for case ean8
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ean8;
    }
    SWIFT_INLINE_THUNK BarcodeType operator()() const;
  } ean8 SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO4ean8yA2CmF");
  SWIFT_INLINE_THUNK bool isEan8() const;

  inline const static struct _impl_ean13 {  // impl struct for case ean13
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ean13;
    }
    SWIFT_INLINE_THUNK BarcodeType operator()() const;
  } ean13 SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO5ean13yA2CmF");
  SWIFT_INLINE_THUNK bool isEan13() const;

  inline const static struct _impl_code128 {  // impl struct for case code128
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::code128;
    }
    SWIFT_INLINE_THUNK BarcodeType operator()() const;
  } code128 SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO7code128yA2CmF");
  SWIFT_INLINE_THUNK bool isCode128() const;

  inline const static struct _impl_code39 {  // impl struct for case code39
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::code39;
    }
    SWIFT_INLINE_THUNK BarcodeType operator()() const;
  } code39 SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO6code39yA2CmF");
  SWIFT_INLINE_THUNK bool isCode39() const;

  inline const static struct _impl_itf {  // impl struct for case itf
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::itf;
    }
    SWIFT_INLINE_THUNK BarcodeType operator()() const;
  } itf SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO3itfyA2CmF");
  SWIFT_INLINE_THUNK bool isItf() const;

  inline const static struct _impl_aztec {  // impl struct for case aztec
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::aztec;
    }
    SWIFT_INLINE_THUNK BarcodeType operator()() const;
  } aztec SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO5aztecyA2CmF");
  SWIFT_INLINE_THUNK bool isAztec() const;

  inline const static struct _impl_pdf417 {  // impl struct for case pdf417
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::pdf417;
    }
    SWIFT_INLINE_THUNK BarcodeType operator()() const;
  } pdf417 SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO6pdf417yA2CmF");
  SWIFT_INLINE_THUNK bool isPdf417() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID11BarcodeTypeO4noneyA2CmFWC) return cases::none;
    if (tag == _impl::$s7BlinkID11BarcodeTypeO6qrCodeyA2CmFWC) return cases::qrCode;
    if (tag == _impl::$s7BlinkID11BarcodeTypeO10dataMatrixyA2CmFWC) return cases::dataMatrix;
    if (tag == _impl::$s7BlinkID11BarcodeTypeO4upceyA2CmFWC) return cases::upce;
    if (tag == _impl::$s7BlinkID11BarcodeTypeO4upcayA2CmFWC) return cases::upca;
    if (tag == _impl::$s7BlinkID11BarcodeTypeO4ean8yA2CmFWC) return cases::ean8;
    if (tag == _impl::$s7BlinkID11BarcodeTypeO5ean13yA2CmFWC) return cases::ean13;
    if (tag == _impl::$s7BlinkID11BarcodeTypeO7code128yA2CmFWC) return cases::code128;
    if (tag == _impl::$s7BlinkID11BarcodeTypeO6code39yA2CmFWC) return cases::code39;
    if (tag == _impl::$s7BlinkID11BarcodeTypeO3itfyA2CmFWC) return cases::itf;
    if (tag == _impl::$s7BlinkID11BarcodeTypeO5aztecyA2CmFWC) return cases::aztec;
    if (tag == _impl::$s7BlinkID11BarcodeTypeO6pdf417yA2CmFWC) return cases::pdf417;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:7BlinkID11BarcodeTypeO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK BarcodeType(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK BarcodeType _make() noexcept {
    auto metadata = _impl::$s7BlinkID11BarcodeTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return BarcodeType(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID11BarcodeTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID11BarcodeTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID11BarcodeTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_BarcodeType;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID11BarcodeTypeOD;
  static inline constexpr $s7BlinkID11BarcodeTypeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_BarcodeType {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(BarcodeType &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const BarcodeType &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER BarcodeType returnNewValue(T callable) {
    auto result = BarcodeType::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID11BarcodeTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::BarcodeType> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID11BarcodeTypeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::BarcodeType> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::BarcodeType> = true;
template<>
struct implClassFor<BlinkID::BarcodeType> { using type = BlinkID::_impl::_impl_BarcodeType; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID0A5IDSDKV") BlinkIDSDK;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::BlinkIDSDK> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_BlinkIDSDK;

// Type metadata accessor for BlinkIDSDK
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID0A5IDSDKVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID0A5IDSDKV") BlinkIDSDK final {
public:
  SWIFT_INLINE_THUNK ~BlinkIDSDK() noexcept {
    auto metadata = _impl::$s7BlinkID0A5IDSDKVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK BlinkIDSDK(const BlinkIDSDK &other) noexcept {
    auto metadata = _impl::$s7BlinkID0A5IDSDKVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK BlinkIDSDK &operator =(const BlinkIDSDK &other) noexcept {
    auto metadata = _impl::$s7BlinkID0A5IDSDKVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK BlinkIDSDK &operator =(BlinkIDSDK &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER BlinkIDSDK(BlinkIDSDK &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
private:
  SWIFT_INLINE_THUNK BlinkIDSDK(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK BlinkIDSDK _make() noexcept {
    auto metadata = _impl::$s7BlinkID0A5IDSDKVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return BlinkIDSDK(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_BlinkIDSDK;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID0A5IDSDKVD;
  static inline constexpr $s7BlinkID0A5IDSDKVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_BlinkIDSDK {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(BlinkIDSDK &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const BlinkIDSDK &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER BlinkIDSDK returnNewValue(T callable) {
    auto result = BlinkIDSDK::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID0A5IDSDKVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::BlinkIDSDK> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID0A5IDSDKVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::BlinkIDSDK> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::BlinkIDSDK> = true;
template<>
struct implClassFor<BlinkID::BlinkIDSDK> { using type = BlinkID::_impl::_impl_BlinkIDSDK; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID15RecognitionModeO") RecognitionMode;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::RecognitionMode> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID0A5IDSDKV17DocumentClassInfoV") DocumentClassInfo;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::DocumentClassInfo> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID15DataMatchResultV") DataMatchResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::DataMatchResult> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID0A5IDSDKV12StringResultV") StringResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::StringResult> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID13DependentInfoV") DependentInfo;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::DependentInfo> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID24SingleSideScanningResultV") SingleSideScanningResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::SingleSideScanningResult> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID12ScanningSideO") ScanningSide;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::ScanningSide> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID16InputImageResultV") InputImageResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::InputImageResult> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID18CroppedImageResultV") CroppedImageResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::CroppedImageResult> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID26DetailedCroppedImageResultV") DetailedCroppedImageResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::DetailedCroppedImageResult> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID0A16IDScanningResultV") BlinkIDScanningResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::BlinkIDScanningResult> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_BlinkIDScanningResult;

// Type metadata accessor for BlinkIDScanningResult
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID0A16IDScanningResultVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID0A16IDScanningResultV") BlinkIDScanningResult final {
public:
  SWIFT_INLINE_THUNK ~BlinkIDScanningResult() noexcept {
    auto metadata = _impl::$s7BlinkID0A16IDScanningResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK BlinkIDScanningResult(const BlinkIDScanningResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID0A16IDScanningResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK BlinkIDScanningResult &operator =(const BlinkIDScanningResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID0A16IDScanningResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK BlinkIDScanningResult &operator =(BlinkIDScanningResult &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER BlinkIDScanningResult(BlinkIDScanningResult &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK RecognitionMode getRecognitionMode() const SWIFT_SYMBOL("s:7BlinkID0A16IDScanningResultV15recognitionModeAA011RecognitionF0Ovp");
  SWIFT_INLINE_THUNK swift::Optional<DataMatchResult> getDataMatchResult() const SWIFT_SYMBOL("s:7BlinkID0A16IDScanningResultV09dataMatchD0AA04DatafD0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<bool> getDateOfExpiryPermanent() const SWIFT_SYMBOL("s:7BlinkID0A16IDScanningResultV21dateOfExpiryPermanentSbSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::Array<DependentInfo>> getDependentsInfo() const SWIFT_SYMBOL("s:7BlinkID0A16IDScanningResultV14dependentsInfoSayAA09DependentF0VGSgvp");
  SWIFT_INLINE_THUNK swift::Array<SingleSideScanningResult> getSubResults() const SWIFT_SYMBOL("s:7BlinkID0A16IDScanningResultV10subResultsSayAA018SingleSideScanningD0VGvp");
/// Returns the input image for the given scanning side.
/// \param scanningSide The scanning side. 
///
///
/// returns:
/// The input image for the given scanning side or <code>nil</code> if the input image is not available.
  SWIFT_INLINE_THUNK swift::Optional<InputImageResult> getInputImage(const ScanningSide& scanningSide) const SWIFT_SYMBOL("s:7BlinkID0A16IDScanningResultV13getInputImage12scanningSideAA0fgD0VSgAA08ScanningI0O_tF");
/// Returns the input image containing parsable barcode.
///
/// returns:
/// The input image containing parsable barcode or <code>nil</code> if the barcode input image is not available.
  SWIFT_INLINE_THUNK swift::Optional<InputImageResult> getBarcodeInputImage() const SWIFT_SYMBOL("s:7BlinkID0A16IDScanningResultV20getBarcodeInputImageAA0ghD0VSgyF");
/// Returns the cropped document image for the given scanning side.
/// \param scanningSide The scanning side. 
///
///
/// returns:
/// The cropped document image for the given scanning side or <code>nil</code> if the document image is not available.
  SWIFT_INLINE_THUNK swift::Optional<CroppedImageResult> getDocumentImage(const ScanningSide& scanningSide) const SWIFT_SYMBOL("s:7BlinkID0A16IDScanningResultV16getDocumentImage12scanningSideAA07CroppedgD0VSgAA08ScanningI0O_tF");
/// Returns the cropped face image with additional info.
///
/// returns:
/// The cropped face image with additional info or <code>nil</code> if the face image is not available.
  SWIFT_INLINE_THUNK swift::Optional<DetailedCroppedImageResult> getFaceImage() const SWIFT_SYMBOL("s:7BlinkID0A16IDScanningResultV12getFaceImageAA015DetailedCroppedgD0VSgyF");
/// Returns the cropped signature image with additional info.
///
/// returns:
/// The cropped signature image with additional info or <code>nil</code> if the signature image is not available.
  SWIFT_INLINE_THUNK swift::Optional<DetailedCroppedImageResult> getSignatureImage() const SWIFT_SYMBOL("s:7BlinkID0A16IDScanningResultV17getSignatureImageAA015DetailedCroppedgD0VSgyF");
private:
  SWIFT_INLINE_THUNK BlinkIDScanningResult(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK BlinkIDScanningResult _make() noexcept {
    auto metadata = _impl::$s7BlinkID0A16IDScanningResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return BlinkIDScanningResult(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_BlinkIDScanningResult;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID0A16IDScanningResultVD;
  static inline constexpr $s7BlinkID0A16IDScanningResultVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_BlinkIDScanningResult {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(BlinkIDScanningResult &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const BlinkIDScanningResult &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER BlinkIDScanningResult returnNewValue(T callable) {
    auto result = BlinkIDScanningResult::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID0A16IDScanningResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::BlinkIDScanningResult> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID0A16IDScanningResultVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::BlinkIDScanningResult> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::BlinkIDScanningResult> = true;
template<>
struct implClassFor<BlinkID::BlinkIDScanningResult> { using type = BlinkID::_impl::_impl_BlinkIDScanningResult; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {


/// A thread-safe SDK for document verification and scanning operations.
/// <code>BlinkIDSdk</code> provides functionality for creating document scanning sessions
/// and managing SDK lifecycle.
/// Example usage:
/// \code
/// let settings = BlinkIDSdkSettings(
///     licenseKey: "your-license-key",
///     downloadResources: true,
/// )
///
/// do {
///     let sdk = try await createBlinkIDSdk(withSettings: settings)
///     let session = await sdk.createScanningSession()
///     // Use the session for document scanning
/// } catch {
///     // Handle initialization errors
/// }
///
/// \endcode
class SWIFT_SYMBOL("s:7BlinkID0A5IDSdkC") BlinkIDSdk;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::BlinkIDSdk> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_BlinkIDSdk;
// Type metadata accessor for BlinkIDSdk
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID0A5IDSdkCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID0A5IDSdkC") BlinkIDSdk final : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
protected:
  SWIFT_INLINE_THUNK BlinkIDSdk(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_BlinkIDSdk;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID0A5IDSdkCD;
  static inline constexpr $s7BlinkID0A5IDSdkCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_BlinkIDSdk {
public:
static SWIFT_INLINE_THUNK BlinkIDSdk makeRetained(void * _Nonnull ptr) noexcept { return BlinkIDSdk(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::BlinkIDSdk> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID0A5IDSdkCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<BlinkID::BlinkIDSdk> { using type = BlinkID::_impl::_impl_BlinkIDSdk; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID14RequestTimeoutV") RequestTimeout;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::RequestTimeout> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID0A13IDSdkSettingsV") BlinkIDSdkSettings;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::BlinkIDSdkSettings> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_BlinkIDSdkSettings;

// Type metadata accessor for BlinkIDSdkSettings
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID0A13IDSdkSettingsVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID0A13IDSdkSettingsV") BlinkIDSdkSettings final {
public:
  SWIFT_INLINE_THUNK ~BlinkIDSdkSettings() noexcept {
    auto metadata = _impl::$s7BlinkID0A13IDSdkSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK BlinkIDSdkSettings(const BlinkIDSdkSettings &other) noexcept {
    auto metadata = _impl::$s7BlinkID0A13IDSdkSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK BlinkIDSdkSettings &operator =(const BlinkIDSdkSettings &other) noexcept {
    auto metadata = _impl::$s7BlinkID0A13IDSdkSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK BlinkIDSdkSettings &operator =(BlinkIDSdkSettings &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER BlinkIDSdkSettings(BlinkIDSdkSettings &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getLicenseKey() const SWIFT_SYMBOL("s:7BlinkID0A13IDSdkSettingsV10licenseKeySSvp");
  SWIFT_INLINE_THUNK void setLicenseKey(const swift::String& value) SWIFT_SYMBOL("s:7BlinkID0A13IDSdkSettingsV10licenseKeySSvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::String> getLicensee() const SWIFT_SYMBOL("s:7BlinkID0A13IDSdkSettingsV8licenseeSSSgvp");
  SWIFT_INLINE_THUNK void setLicensee(const swift::Optional<swift::String>& value) SWIFT_SYMBOL("s:7BlinkID0A13IDSdkSettingsV8licenseeSSSgvp");
  SWIFT_INLINE_THUNK bool getHelloLogEnabled() const SWIFT_SYMBOL("s:7BlinkID0A13IDSdkSettingsV15helloLogEnabledSbvp");
  SWIFT_INLINE_THUNK void setHelloLogEnabled(bool value) SWIFT_SYMBOL("s:7BlinkID0A13IDSdkSettingsV15helloLogEnabledSbvp");
  SWIFT_INLINE_THUNK bool getDownloadResources() const SWIFT_SYMBOL("s:7BlinkID0A13IDSdkSettingsV17downloadResourcesSbvp");
  SWIFT_INLINE_THUNK void setDownloadResources(bool value) SWIFT_SYMBOL("s:7BlinkID0A13IDSdkSettingsV17downloadResourcesSbvp");
  SWIFT_INLINE_THUNK swift::String getResourceDownloadUrl() const SWIFT_SYMBOL("s:7BlinkID0A13IDSdkSettingsV19resourceDownloadUrlSSvp");
  SWIFT_INLINE_THUNK void setResourceDownloadUrl(const swift::String& value) SWIFT_SYMBOL("s:7BlinkID0A13IDSdkSettingsV19resourceDownloadUrlSSvp");
  SWIFT_INLINE_THUNK swift::String getResourceLocalFolder() const SWIFT_SYMBOL("s:7BlinkID0A13IDSdkSettingsV19resourceLocalFolderSSvp");
  SWIFT_INLINE_THUNK void setResourceLocalFolder(const swift::String& value) SWIFT_SYMBOL("s:7BlinkID0A13IDSdkSettingsV19resourceLocalFolderSSvp");
  SWIFT_INLINE_THUNK RequestTimeout getResourceRequestTimeout() const SWIFT_SYMBOL("s:7BlinkID0A13IDSdkSettingsV22resourceRequestTimeoutAA0fG0Vvp");
  SWIFT_INLINE_THUNK void setResourceRequestTimeout(const RequestTimeout& value) SWIFT_SYMBOL("s:7BlinkID0A13IDSdkSettingsV22resourceRequestTimeoutAA0fG0Vvp");
private:
  SWIFT_INLINE_THUNK BlinkIDSdkSettings(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK BlinkIDSdkSettings _make() noexcept {
    auto metadata = _impl::$s7BlinkID0A13IDSdkSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return BlinkIDSdkSettings(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_BlinkIDSdkSettings;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID0A13IDSdkSettingsVD;
  static inline constexpr $s7BlinkID0A13IDSdkSettingsVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_BlinkIDSdkSettings {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(BlinkIDSdkSettings &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const BlinkIDSdkSettings &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER BlinkIDSdkSettings returnNewValue(T callable) {
    auto result = BlinkIDSdkSettings::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID0A13IDSdkSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::BlinkIDSdkSettings> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID0A13IDSdkSettingsVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::BlinkIDSdkSettings> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::BlinkIDSdkSettings> = true;
template<>
struct implClassFor<BlinkID::BlinkIDSdkSettings> { using type = BlinkID::_impl::_impl_BlinkIDSdkSettings; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {


/// A session controller for BlinkID SDK
/// <code>BlinkIDSession</code> manages the lifecycle of a BlinkID session,
/// handling image processing, barcode scanning, and result generation.
class SWIFT_SYMBOL("s:7BlinkID0A9IDSessionC") BlinkIDSession;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::BlinkIDSession> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_BlinkIDSession;
// Type metadata accessor for BlinkIDSession
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID0A9IDSessionCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID0A9IDSessionC") BlinkIDSession final : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
/// Cancels any ongoing processing operations.
/// This method can be called from any context to immediately stop
/// the current processing operation. It’s useful when needing to
/// abort a verification session or handle user cancellation.
  SWIFT_INLINE_THUNK void cancelActiveProcessing() SWIFT_SYMBOL("s:7BlinkID0A9IDSessionC22cancelActiveProcessingyyF");
/// Resums any ongoing processing operations.
/// This method can be called from any context to immediately start
/// the current processing operation which wwas canceled. It’s useful when needing to
/// resume a BlinkID session after handling cancelation.
  SWIFT_INLINE_THUNK void resumeActiveProcessing() SWIFT_SYMBOL("s:7BlinkID0A9IDSessionC22resumeActiveProcessingyyF");
protected:
  SWIFT_INLINE_THUNK BlinkIDSession(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_BlinkIDSession;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID0A9IDSessionCD;
  static inline constexpr $s7BlinkID0A9IDSessionCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_BlinkIDSession {
public:
static SWIFT_INLINE_THUNK BlinkIDSession makeRetained(void * _Nonnull ptr) noexcept { return BlinkIDSession(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::BlinkIDSession> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID0A9IDSessionCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<BlinkID::BlinkIDSession> { using type = BlinkID::_impl::_impl_BlinkIDSession; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID16InputImageSourceO") InputImageSource;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::InputImageSource> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID12ScanningModeO") ScanningMode;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::ScanningMode> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV") ScanningSettings;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::ScanningSettings> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID0A17IDSessionSettingsV") BlinkIDSessionSettings;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::BlinkIDSessionSettings> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_BlinkIDSessionSettings;

// Type metadata accessor for BlinkIDSessionSettings
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID0A17IDSessionSettingsVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID0A17IDSessionSettingsV") BlinkIDSessionSettings final {
public:
  SWIFT_INLINE_THUNK ~BlinkIDSessionSettings() noexcept {
    auto metadata = _impl::$s7BlinkID0A17IDSessionSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK BlinkIDSessionSettings(const BlinkIDSessionSettings &other) noexcept {
    auto metadata = _impl::$s7BlinkID0A17IDSessionSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK BlinkIDSessionSettings &operator =(const BlinkIDSessionSettings &other) noexcept {
    auto metadata = _impl::$s7BlinkID0A17IDSessionSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK BlinkIDSessionSettings &operator =(BlinkIDSessionSettings &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER BlinkIDSessionSettings(BlinkIDSessionSettings &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK InputImageSource getInputImageSource() const SWIFT_SYMBOL("s:7BlinkID0A17IDSessionSettingsV16inputImageSourceAA05InputfG0Ovp");
  SWIFT_INLINE_THUNK void setInputImageSource(const InputImageSource& value) SWIFT_SYMBOL("s:7BlinkID0A17IDSessionSettingsV16inputImageSourceAA05InputfG0Ovp");
  SWIFT_INLINE_THUNK ScanningMode getScanningMode() const SWIFT_SYMBOL("s:7BlinkID0A17IDSessionSettingsV12scanningModeAA08ScanningF0Ovp");
  SWIFT_INLINE_THUNK void setScanningMode(const ScanningMode& value) SWIFT_SYMBOL("s:7BlinkID0A17IDSessionSettingsV12scanningModeAA08ScanningF0Ovp");
  SWIFT_INLINE_THUNK ScanningSettings getScanningSettings() const SWIFT_SYMBOL("s:7BlinkID0A17IDSessionSettingsV08scanningD0AA08ScanningD0Vvp");
  SWIFT_INLINE_THUNK void setScanningSettings(const ScanningSettings& value) SWIFT_SYMBOL("s:7BlinkID0A17IDSessionSettingsV08scanningD0AA08ScanningD0Vvp");
  SWIFT_INLINE_THUNK double getStepTimeoutDuration() const SWIFT_SYMBOL("s:7BlinkID0A17IDSessionSettingsV19stepTimeoutDurationSdvp");
  SWIFT_INLINE_THUNK void setStepTimeoutDuration(double value) SWIFT_SYMBOL("s:7BlinkID0A17IDSessionSettingsV19stepTimeoutDurationSdvp");
  static SWIFT_INLINE_THUNK BlinkIDSessionSettings init(const InputImageSource& inputImageSource, const ScanningMode& scanningMode, const ScanningSettings& scanningSettings, double stepTimeoutDuration) SWIFT_SYMBOL("s:7BlinkID0A17IDSessionSettingsV16inputImageSource12scanningMode0hD019stepTimeoutDurationAcA05InputfG0O_AA08ScanningI0OAA0nD0VSdtcfc");
private:
  SWIFT_INLINE_THUNK BlinkIDSessionSettings(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK BlinkIDSessionSettings _make() noexcept {
    auto metadata = _impl::$s7BlinkID0A17IDSessionSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return BlinkIDSessionSettings(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_BlinkIDSessionSettings;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID0A17IDSessionSettingsVD;
  static inline constexpr $s7BlinkID0A17IDSessionSettingsVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_BlinkIDSessionSettings {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(BlinkIDSessionSettings &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const BlinkIDSessionSettings &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER BlinkIDSessionSettings returnNewValue(T callable) {
    auto result = BlinkIDSessionSettings::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID0A17IDSessionSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::BlinkIDSessionSettings> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID0A17IDSessionSettingsVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::BlinkIDSessionSettings> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::BlinkIDSessionSettings> = true;
template<>
struct implClassFor<BlinkID::BlinkIDSessionSettings> { using type = BlinkID::_impl::_impl_BlinkIDSessionSettings; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID16RegionOfInterestV") RegionOfInterest;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::RegionOfInterest> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID27CameraFrameVideoOrientationO") CameraFrameVideoOrientation;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::CameraFrameVideoOrientation> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID11CameraFrameV") CameraFrame;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::CameraFrame> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_CameraFrame;

// Type metadata accessor for CameraFrame
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID11CameraFrameVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID11CameraFrameV") CameraFrame final {
public:
  SWIFT_INLINE_THUNK ~CameraFrame() noexcept {
    auto metadata = _impl::$s7BlinkID11CameraFrameVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CameraFrame(const CameraFrame &other) noexcept {
    auto metadata = _impl::$s7BlinkID11CameraFrameVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CameraFrame &operator =(const CameraFrame &other) noexcept {
    auto metadata = _impl::$s7BlinkID11CameraFrameVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CameraFrame &operator =(CameraFrame &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CameraFrame(CameraFrame &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK MBSampleBufferWrapper *_Nonnull getBuffer() const SWIFT_SYMBOL("s:7BlinkID11CameraFrameV6bufferSo21MBSampleBufferWrapperCvp");
  SWIFT_INLINE_THUNK RegionOfInterest getRoi() const SWIFT_SYMBOL("s:7BlinkID11CameraFrameV3roiAA16RegionOfInterestVvp");
  SWIFT_INLINE_THUNK CameraFrameVideoOrientation getOrientation() const SWIFT_SYMBOL("s:7BlinkID11CameraFrameV11orientationAA0cD16VideoOrientationOvp");
/// Creates a new camera frame instance.
/// \param buffer The wrapped sample buffer containing the image data
///
/// \param roi The region of interest within the frame. Defaults to full frame
///
/// \param orientation The orientation of the camera. Defaults to portrait
///
  static SWIFT_INLINE_THUNK CameraFrame init(MBSampleBufferWrapper *_Nonnull buffer, const RegionOfInterest& roi, const CameraFrameVideoOrientation& orientation) SWIFT_SYMBOL("s:7BlinkID11CameraFrameV6buffer3roi11orientationACSo21MBSampleBufferWrapperC_AA16RegionOfInterestVAA0cD16VideoOrientationOtcfc");
  SWIFT_INLINE_THUNK swift::Int getWidth() const SWIFT_SYMBOL("s:7BlinkID11CameraFrameV5widthSivp");
  SWIFT_INLINE_THUNK swift::Int getHeight() const SWIFT_SYMBOL("s:7BlinkID11CameraFrameV6heightSivp");
private:
  SWIFT_INLINE_THUNK CameraFrame(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CameraFrame _make() noexcept {
    auto metadata = _impl::$s7BlinkID11CameraFrameVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CameraFrame(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CameraFrame;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID11CameraFrameVD;
  static inline constexpr $s7BlinkID11CameraFrameVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CameraFrame {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CameraFrame &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CameraFrame &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CameraFrame returnNewValue(T callable) {
    auto result = CameraFrame::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID11CameraFrameVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::CameraFrame> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID11CameraFrameVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::CameraFrame> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::CameraFrame> = true;
template<>
struct implClassFor<BlinkID::CameraFrame> { using type = BlinkID::_impl::_impl_CameraFrame; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

/// Represents the video orientation of a camera frame.
/// This enum defines the possible orientations of the device when capturing
/// camera frames, which is essential for proper image processing.
namespace _impl {

class _impl_CameraFrameVideoOrientation;

// Type metadata accessor for CameraFrameVideoOrientation
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID27CameraFrameVideoOrientationOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum CameraFrameVideoOrientation
extern "C" {
extern unsigned $s7BlinkID27CameraFrameVideoOrientationO8portraityA2CmFWC;
extern unsigned $s7BlinkID27CameraFrameVideoOrientationO18portraitUpsideDownyA2CmFWC;
extern unsigned $s7BlinkID27CameraFrameVideoOrientationO14landscapeRightyA2CmFWC;
extern unsigned $s7BlinkID27CameraFrameVideoOrientationO13landscapeLeftyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID27CameraFrameVideoOrientationO") CameraFrameVideoOrientation final {
public:
  SWIFT_INLINE_THUNK ~CameraFrameVideoOrientation() noexcept {
    auto metadata = _impl::$s7BlinkID27CameraFrameVideoOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CameraFrameVideoOrientation(const CameraFrameVideoOrientation &other) noexcept {
    auto metadata = _impl::$s7BlinkID27CameraFrameVideoOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CameraFrameVideoOrientation &operator =(const CameraFrameVideoOrientation &other) noexcept {
    auto metadata = _impl::$s7BlinkID27CameraFrameVideoOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CameraFrameVideoOrientation &operator =(CameraFrameVideoOrientation &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CameraFrameVideoOrientation(CameraFrameVideoOrientation &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    portrait SWIFT_SYMBOL("s:7BlinkID27CameraFrameVideoOrientationO8portraityA2CmF"),
    portraitUpsideDown SWIFT_SYMBOL("s:7BlinkID27CameraFrameVideoOrientationO18portraitUpsideDownyA2CmF"),
    landscapeRight SWIFT_SYMBOL("s:7BlinkID27CameraFrameVideoOrientationO14landscapeRightyA2CmF"),
    landscapeLeft SWIFT_SYMBOL("s:7BlinkID27CameraFrameVideoOrientationO13landscapeLeftyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_portrait {  // impl struct for case portrait
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::portrait;
    }
    SWIFT_INLINE_THUNK CameraFrameVideoOrientation operator()() const;
  } portrait SWIFT_SYMBOL("s:7BlinkID27CameraFrameVideoOrientationO8portraityA2CmF");
  SWIFT_INLINE_THUNK bool isPortrait() const;

  inline const static struct _impl_portraitUpsideDown {  // impl struct for case portraitUpsideDown
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::portraitUpsideDown;
    }
    SWIFT_INLINE_THUNK CameraFrameVideoOrientation operator()() const;
  } portraitUpsideDown SWIFT_SYMBOL("s:7BlinkID27CameraFrameVideoOrientationO18portraitUpsideDownyA2CmF");
  SWIFT_INLINE_THUNK bool isPortraitUpsideDown() const;

  inline const static struct _impl_landscapeRight {  // impl struct for case landscapeRight
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::landscapeRight;
    }
    SWIFT_INLINE_THUNK CameraFrameVideoOrientation operator()() const;
  } landscapeRight SWIFT_SYMBOL("s:7BlinkID27CameraFrameVideoOrientationO14landscapeRightyA2CmF");
  SWIFT_INLINE_THUNK bool isLandscapeRight() const;

  inline const static struct _impl_landscapeLeft {  // impl struct for case landscapeLeft
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::landscapeLeft;
    }
    SWIFT_INLINE_THUNK CameraFrameVideoOrientation operator()() const;
  } landscapeLeft SWIFT_SYMBOL("s:7BlinkID27CameraFrameVideoOrientationO13landscapeLeftyA2CmF");
  SWIFT_INLINE_THUNK bool isLandscapeLeft() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID27CameraFrameVideoOrientationO8portraityA2CmFWC) return cases::portrait;
    if (tag == _impl::$s7BlinkID27CameraFrameVideoOrientationO18portraitUpsideDownyA2CmFWC) return cases::portraitUpsideDown;
    if (tag == _impl::$s7BlinkID27CameraFrameVideoOrientationO14landscapeRightyA2CmFWC) return cases::landscapeRight;
    if (tag == _impl::$s7BlinkID27CameraFrameVideoOrientationO13landscapeLeftyA2CmFWC) return cases::landscapeLeft;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:7BlinkID27CameraFrameVideoOrientationO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK CameraFrameVideoOrientation(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CameraFrameVideoOrientation _make() noexcept {
    auto metadata = _impl::$s7BlinkID27CameraFrameVideoOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CameraFrameVideoOrientation(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID27CameraFrameVideoOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID27CameraFrameVideoOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID27CameraFrameVideoOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CameraFrameVideoOrientation;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID27CameraFrameVideoOrientationOD;
  static inline constexpr $s7BlinkID27CameraFrameVideoOrientationOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CameraFrameVideoOrientation {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CameraFrameVideoOrientation &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CameraFrameVideoOrientation &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CameraFrameVideoOrientation returnNewValue(T callable) {
    auto result = CameraFrameVideoOrientation::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID27CameraFrameVideoOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::CameraFrameVideoOrientation> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID27CameraFrameVideoOrientationOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::CameraFrameVideoOrientation> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::CameraFrameVideoOrientation> = true;
template<>
struct implClassFor<BlinkID::CameraFrameVideoOrientation> { using type = BlinkID::_impl::_impl_CameraFrameVideoOrientation; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID7CountryO") Country;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::Country> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
/// Document country.
namespace _impl {

class _impl_Country;

// Type metadata accessor for Country
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID7CountryOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum Country
extern "C" {
extern unsigned $s7BlinkID7CountryO4noneyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7albaniayA2CmFWC;
extern unsigned $s7BlinkID7CountryO7algeriayA2CmFWC;
extern unsigned $s7BlinkID7CountryO9argentinayA2CmFWC;
extern unsigned $s7BlinkID7CountryO9australiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO7austriayA2CmFWC;
extern unsigned $s7BlinkID7CountryO10azerbaijanyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7bahrainyA2CmFWC;
extern unsigned $s7BlinkID7CountryO10bangladeshyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7belgiumyA2CmFWC;
extern unsigned $s7BlinkID7CountryO20bosniaAndHerzegovinayA2CmFWC;
extern unsigned $s7BlinkID7CountryO6bruneiyA2CmFWC;
extern unsigned $s7BlinkID7CountryO8bulgariayA2CmFWC;
extern unsigned $s7BlinkID7CountryO8cambodiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO6canadayA2CmFWC;
extern unsigned $s7BlinkID7CountryO5chileyA2CmFWC;
extern unsigned $s7BlinkID7CountryO8colombiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO9costaRicayA2CmFWC;
extern unsigned $s7BlinkID7CountryO7croatiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO6cyprusyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7czechiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO7denmarkyA2CmFWC;
extern unsigned $s7BlinkID7CountryO17dominicanRepublicyA2CmFWC;
extern unsigned $s7BlinkID7CountryO5egyptyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7estoniayA2CmFWC;
extern unsigned $s7BlinkID7CountryO7finlandyA2CmFWC;
extern unsigned $s7BlinkID7CountryO6franceyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7georgiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO7germanyyA2CmFWC;
extern unsigned $s7BlinkID7CountryO5ghanayA2CmFWC;
extern unsigned $s7BlinkID7CountryO6greeceyA2CmFWC;
extern unsigned $s7BlinkID7CountryO9guatemalayA2CmFWC;
extern unsigned $s7BlinkID7CountryO8hongKongyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7hungaryyA2CmFWC;
extern unsigned $s7BlinkID7CountryO5indiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO9indonesiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO7irelandyA2CmFWC;
extern unsigned $s7BlinkID7CountryO6israelyA2CmFWC;
extern unsigned $s7BlinkID7CountryO5italyyA2CmFWC;
extern unsigned $s7BlinkID7CountryO6jordanyA2CmFWC;
extern unsigned $s7BlinkID7CountryO10kazakhstanyA2CmFWC;
extern unsigned $s7BlinkID7CountryO5kenyayA2CmFWC;
extern unsigned $s7BlinkID7CountryO6kosovoyA2CmFWC;
extern unsigned $s7BlinkID7CountryO6kuwaityA2CmFWC;
extern unsigned $s7BlinkID7CountryO6latviayA2CmFWC;
extern unsigned $s7BlinkID7CountryO9lithuaniayA2CmFWC;
extern unsigned $s7BlinkID7CountryO8malaysiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO8maldivesyA2CmFWC;
extern unsigned $s7BlinkID7CountryO5maltayA2CmFWC;
extern unsigned $s7BlinkID7CountryO9mauritiusyA2CmFWC;
extern unsigned $s7BlinkID7CountryO6mexicoyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7moroccoyA2CmFWC;
extern unsigned $s7BlinkID7CountryO11netherlandsyA2CmFWC;
extern unsigned $s7BlinkID7CountryO10newZealandyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7nigeriayA2CmFWC;
extern unsigned $s7BlinkID7CountryO8pakistanyA2CmFWC;
extern unsigned $s7BlinkID7CountryO6panamayA2CmFWC;
extern unsigned $s7BlinkID7CountryO8paraguayyA2CmFWC;
extern unsigned $s7BlinkID7CountryO11philippinesyA2CmFWC;
extern unsigned $s7BlinkID7CountryO6polandyA2CmFWC;
extern unsigned $s7BlinkID7CountryO8portugalyA2CmFWC;
extern unsigned $s7BlinkID7CountryO10puertoRicoyA2CmFWC;
extern unsigned $s7BlinkID7CountryO5qataryA2CmFWC;
extern unsigned $s7BlinkID7CountryO7romaniayA2CmFWC;
extern unsigned $s7BlinkID7CountryO6russiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO11saudiArabiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO6serbiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO9singaporeyA2CmFWC;
extern unsigned $s7BlinkID7CountryO8slovakiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO8sloveniayA2CmFWC;
extern unsigned $s7BlinkID7CountryO11southAfricayA2CmFWC;
extern unsigned $s7BlinkID7CountryO5spainyA2CmFWC;
extern unsigned $s7BlinkID7CountryO6swedenyA2CmFWC;
extern unsigned $s7BlinkID7CountryO11switzerlandyA2CmFWC;
extern unsigned $s7BlinkID7CountryO6taiwanyA2CmFWC;
extern unsigned $s7BlinkID7CountryO8thailandyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7tunisiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO6turkeyyA2CmFWC;
extern unsigned $s7BlinkID7CountryO3uaeyA2CmFWC;
extern unsigned $s7BlinkID7CountryO6ugandayA2CmFWC;
extern unsigned $s7BlinkID7CountryO2ukyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7ukraineyA2CmFWC;
extern unsigned $s7BlinkID7CountryO3usayA2CmFWC;
extern unsigned $s7BlinkID7CountryO7vietnamyA2CmFWC;
extern unsigned $s7BlinkID7CountryO6brazilyA2CmFWC;
extern unsigned $s7BlinkID7CountryO6norwayyA2CmFWC;
extern unsigned $s7BlinkID7CountryO4omanyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7ecuadoryA2CmFWC;
extern unsigned $s7BlinkID7CountryO10elSalvadoryA2CmFWC;
extern unsigned $s7BlinkID7CountryO8sriLankayA2CmFWC;
extern unsigned $s7BlinkID7CountryO4peruyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7uruguayyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7bahamasyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7bermudayA2CmFWC;
extern unsigned $s7BlinkID7CountryO7boliviayA2CmFWC;
extern unsigned $s7BlinkID7CountryO5chinayA2CmFWC;
extern unsigned $s7BlinkID7CountryO13europeanUnionyA2CmFWC;
extern unsigned $s7BlinkID7CountryO5haitiyA2CmFWC;
extern unsigned $s7BlinkID7CountryO8hondurasyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7icelandyA2CmFWC;
extern unsigned $s7BlinkID7CountryO5japanyA2CmFWC;
extern unsigned $s7BlinkID7CountryO10luxembourgyA2CmFWC;
extern unsigned $s7BlinkID7CountryO10montenegroyA2CmFWC;
extern unsigned $s7BlinkID7CountryO9nicaraguayA2CmFWC;
extern unsigned $s7BlinkID7CountryO10southKoreayA2CmFWC;
extern unsigned $s7BlinkID7CountryO9venezuelayA2CmFWC;
extern unsigned $s7BlinkID7CountryO11afghanistanyA2CmFWC;
extern unsigned $s7BlinkID7CountryO12alandIslandsyA2CmFWC;
extern unsigned $s7BlinkID7CountryO13americanSamoayA2CmFWC;
extern unsigned $s7BlinkID7CountryO7andorrayA2CmFWC;
extern unsigned $s7BlinkID7CountryO6angolayA2CmFWC;
extern unsigned $s7BlinkID7CountryO8anguillayA2CmFWC;
extern unsigned $s7BlinkID7CountryO10antarcticayA2CmFWC;
extern unsigned $s7BlinkID7CountryO17antiguaAndBarbudayA2CmFWC;
extern unsigned $s7BlinkID7CountryO7armeniayA2CmFWC;
extern unsigned $s7BlinkID7CountryO5arubayA2CmFWC;
extern unsigned $s7BlinkID7CountryO19bailiwickOfGuernseyyA2CmFWC;
extern unsigned $s7BlinkID7CountryO17bailiwickOfJerseyyA2CmFWC;
extern unsigned $s7BlinkID7CountryO8barbadosyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7belarusyA2CmFWC;
extern unsigned $s7BlinkID7CountryO6belizeyA2CmFWC;
extern unsigned $s7BlinkID7CountryO5beninyA2CmFWC;
extern unsigned $s7BlinkID7CountryO6bhutanyA2CmFWC;
extern unsigned $s7BlinkID7CountryO28bonaireSaintEustatiusAndSabayA2CmFWC;
extern unsigned $s7BlinkID7CountryO8botswanayA2CmFWC;
extern unsigned $s7BlinkID7CountryO12bouvetIslandyA2CmFWC;
extern unsigned $s7BlinkID7CountryO27britishIndianOceanTerritoryyA2CmFWC;
extern unsigned $s7BlinkID7CountryO11burkinaFasoyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7burundiyA2CmFWC;
extern unsigned $s7BlinkID7CountryO8cameroonyA2CmFWC;
extern unsigned $s7BlinkID7CountryO9capeVerdeyA2CmFWC;
extern unsigned $s7BlinkID7CountryO20caribbeanNetherlandsyA2CmFWC;
extern unsigned $s7BlinkID7CountryO13caymanIslandsyA2CmFWC;
extern unsigned $s7BlinkID7CountryO22centralAfricanRepublicyA2CmFWC;
extern unsigned $s7BlinkID7CountryO4chadyA2CmFWC;
extern unsigned $s7BlinkID7CountryO15christmasIslandyA2CmFWC;
extern unsigned $s7BlinkID7CountryO12cocosIslandsyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7comorosyA2CmFWC;
extern unsigned $s7BlinkID7CountryO5congoyA2CmFWC;
extern unsigned $s7BlinkID7CountryO11cookIslandsyA2CmFWC;
extern unsigned $s7BlinkID7CountryO4cubayA2CmFWC;
extern unsigned $s7BlinkID7CountryO7curacaoyA2CmFWC;
extern unsigned $s7BlinkID7CountryO28democraticRepublicOfTheCongoyA2CmFWC;
extern unsigned $s7BlinkID7CountryO8djiboutiyA2CmFWC;
extern unsigned $s7BlinkID7CountryO8dominicayA2CmFWC;
extern unsigned $s7BlinkID7CountryO9eastTimoryA2CmFWC;
extern unsigned $s7BlinkID7CountryO16equatorialGuineayA2CmFWC;
extern unsigned $s7BlinkID7CountryO7eritreayA2CmFWC;
extern unsigned $s7BlinkID7CountryO8ethiopiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO15falklandIslandsyA2CmFWC;
extern unsigned $s7BlinkID7CountryO12faroeIslandsyA2CmFWC;
extern unsigned $s7BlinkID7CountryO27federatedStatesOfMicronesiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO4fijiyA2CmFWC;
extern unsigned $s7BlinkID7CountryO12frenchGuianayA2CmFWC;
extern unsigned $s7BlinkID7CountryO15frenchPolynesiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO25frenchSouthernTerritoriesyA2CmFWC;
extern unsigned $s7BlinkID7CountryO5gabonyA2CmFWC;
extern unsigned $s7BlinkID7CountryO6gambiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO9gibraltaryA2CmFWC;
extern unsigned $s7BlinkID7CountryO9greenlandyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7grenadayA2CmFWC;
extern unsigned $s7BlinkID7CountryO10guadeloupeyA2CmFWC;
extern unsigned $s7BlinkID7CountryO4guamyA2CmFWC;
extern unsigned $s7BlinkID7CountryO6guineayA2CmFWC;
extern unsigned $s7BlinkID7CountryO12guineaBissauyA2CmFWC;
extern unsigned $s7BlinkID7CountryO6guyanayA2CmFWC;
extern unsigned $s7BlinkID7CountryO29heardIslandAndMcdonaldIslandsyA2CmFWC;
extern unsigned $s7BlinkID7CountryO4iranyA2CmFWC;
extern unsigned $s7BlinkID7CountryO4iraqyA2CmFWC;
extern unsigned $s7BlinkID7CountryO9isleOfManyA2CmFWC;
extern unsigned $s7BlinkID7CountryO10ivoryCoastyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7jamaicayA2CmFWC;
extern unsigned $s7BlinkID7CountryO8kiribatiyA2CmFWC;
extern unsigned $s7BlinkID7CountryO10kyrgyzstanyA2CmFWC;
extern unsigned $s7BlinkID7CountryO4laosyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7lebanonyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7lesothoyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7liberiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO5libyayA2CmFWC;
extern unsigned $s7BlinkID7CountryO13liechtensteinyA2CmFWC;
extern unsigned $s7BlinkID7CountryO5macauyA2CmFWC;
extern unsigned $s7BlinkID7CountryO10madagascaryA2CmFWC;
extern unsigned $s7BlinkID7CountryO6malawiyA2CmFWC;
extern unsigned $s7BlinkID7CountryO4maliyA2CmFWC;
extern unsigned $s7BlinkID7CountryO15marshallIslandsyA2CmFWC;
extern unsigned $s7BlinkID7CountryO10martiniqueyA2CmFWC;
extern unsigned $s7BlinkID7CountryO10mauritaniayA2CmFWC;
extern unsigned $s7BlinkID7CountryO7mayotteyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7moldovayA2CmFWC;
extern unsigned $s7BlinkID7CountryO6monacoyA2CmFWC;
extern unsigned $s7BlinkID7CountryO8mongoliayA2CmFWC;
extern unsigned $s7BlinkID7CountryO10montserratyA2CmFWC;
extern unsigned $s7BlinkID7CountryO10mozambiqueyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7myanmaryA2CmFWC;
extern unsigned $s7BlinkID7CountryO7namibiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO5nauruyA2CmFWC;
extern unsigned $s7BlinkID7CountryO5nepalyA2CmFWC;
extern unsigned $s7BlinkID7CountryO12newCaledoniayA2CmFWC;
extern unsigned $s7BlinkID7CountryO5nigeryA2CmFWC;
extern unsigned $s7BlinkID7CountryO4niueyA2CmFWC;
extern unsigned $s7BlinkID7CountryO13norfolkIslandyA2CmFWC;
extern unsigned $s7BlinkID7CountryO14northernCyprusyA2CmFWC;
extern unsigned $s7BlinkID7CountryO22northernMarianaIslandsyA2CmFWC;
extern unsigned $s7BlinkID7CountryO10northKoreayA2CmFWC;
extern unsigned $s7BlinkID7CountryO14northMacedoniayA2CmFWC;
extern unsigned $s7BlinkID7CountryO5palauyA2CmFWC;
extern unsigned $s7BlinkID7CountryO9palestineyA2CmFWC;
extern unsigned $s7BlinkID7CountryO14papuaNewGuineayA2CmFWC;
extern unsigned $s7BlinkID7CountryO8pitcairnyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7reunionyA2CmFWC;
extern unsigned $s7BlinkID7CountryO6rwandayA2CmFWC;
extern unsigned $s7BlinkID7CountryO15saintBarthelemyyA2CmFWC;
extern unsigned $s7BlinkID7CountryO38saintHelenaAscensionAndTristianDaCunhayA2CmFWC;
extern unsigned $s7BlinkID7CountryO18saintKittsAndNevisyA2CmFWC;
extern unsigned $s7BlinkID7CountryO10saintLuciayA2CmFWC;
extern unsigned $s7BlinkID7CountryO11saintMartinyA2CmFWC;
extern unsigned $s7BlinkID7CountryO22saintPierreAndMiquelonyA2CmFWC;
extern unsigned $s7BlinkID7CountryO28saintVincentAndTheGrenadinesyA2CmFWC;
extern unsigned $s7BlinkID7CountryO5samoayA2CmFWC;
extern unsigned $s7BlinkID7CountryO9sanMarinoyA2CmFWC;
extern unsigned $s7BlinkID7CountryO18saoTomeAndPrincipeyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7senegalyA2CmFWC;
extern unsigned $s7BlinkID7CountryO10seychellesyA2CmFWC;
extern unsigned $s7BlinkID7CountryO11sierraLeoneyA2CmFWC;
extern unsigned $s7BlinkID7CountryO11sintMaartenyA2CmFWC;
extern unsigned $s7BlinkID7CountryO14solomonIslandsyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7somaliayA2CmFWC;
extern unsigned $s7BlinkID7CountryO38southGeorgiaAndTheSouthSandwichIslandsyA2CmFWC;
extern unsigned $s7BlinkID7CountryO10southSudanyA2CmFWC;
extern unsigned $s7BlinkID7CountryO5sudanyA2CmFWC;
extern unsigned $s7BlinkID7CountryO8surinameyA2CmFWC;
extern unsigned $s7BlinkID7CountryO19svalbardAndJanMayenyA2CmFWC;
extern unsigned $s7BlinkID7CountryO8eswatiniyA2CmFWC;
extern unsigned $s7BlinkID7CountryO5syriayA2CmFWC;
extern unsigned $s7BlinkID7CountryO10tajikistanyA2CmFWC;
extern unsigned $s7BlinkID7CountryO8tanzaniayA2CmFWC;
extern unsigned $s7BlinkID7CountryO4togoyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7tokelauyA2CmFWC;
extern unsigned $s7BlinkID7CountryO5tongayA2CmFWC;
extern unsigned $s7BlinkID7CountryO17trinidadAndTobagoyA2CmFWC;
extern unsigned $s7BlinkID7CountryO12turkmenistanyA2CmFWC;
extern unsigned $s7BlinkID7CountryO21turksAndCaicosIslandsyA2CmFWC;
extern unsigned $s7BlinkID7CountryO6tuvaluyA2CmFWC;
extern unsigned $s7BlinkID7CountryO32unitedStatesMinorOutlyingIslandsyA2CmFWC;
extern unsigned $s7BlinkID7CountryO10uzbekistanyA2CmFWC;
extern unsigned $s7BlinkID7CountryO7vanuatuyA2CmFWC;
extern unsigned $s7BlinkID7CountryO11vaticanCityyA2CmFWC;
extern unsigned $s7BlinkID7CountryO20virginIslandsBritishyA2CmFWC;
extern unsigned $s7BlinkID7CountryO15virginIslandsUsyA2CmFWC;
extern unsigned $s7BlinkID7CountryO15wallisAndFutunayA2CmFWC;
extern unsigned $s7BlinkID7CountryO13westernSaharayA2CmFWC;
extern unsigned $s7BlinkID7CountryO5yemenyA2CmFWC;
extern unsigned $s7BlinkID7CountryO10yugoslaviayA2CmFWC;
extern unsigned $s7BlinkID7CountryO6zambiayA2CmFWC;
extern unsigned $s7BlinkID7CountryO8zimbabweyA2CmFWC;
extern unsigned $s7BlinkID7CountryO13schengen_areayA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID7CountryO") Country final {
public:
  SWIFT_INLINE_THUNK ~Country() noexcept {
    auto metadata = _impl::$s7BlinkID7CountryOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK Country(const Country &other) noexcept {
    auto metadata = _impl::$s7BlinkID7CountryOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK Country &operator =(const Country &other) noexcept {
    auto metadata = _impl::$s7BlinkID7CountryOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK Country &operator =(Country &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER Country(Country &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    none SWIFT_SYMBOL("s:7BlinkID7CountryO4noneyA2CmF"),
    albania SWIFT_SYMBOL("s:7BlinkID7CountryO7albaniayA2CmF"),
    algeria SWIFT_SYMBOL("s:7BlinkID7CountryO7algeriayA2CmF"),
    argentina SWIFT_SYMBOL("s:7BlinkID7CountryO9argentinayA2CmF"),
    australia SWIFT_SYMBOL("s:7BlinkID7CountryO9australiayA2CmF"),
    austria SWIFT_SYMBOL("s:7BlinkID7CountryO7austriayA2CmF"),
    azerbaijan SWIFT_SYMBOL("s:7BlinkID7CountryO10azerbaijanyA2CmF"),
    bahrain SWIFT_SYMBOL("s:7BlinkID7CountryO7bahrainyA2CmF"),
    bangladesh SWIFT_SYMBOL("s:7BlinkID7CountryO10bangladeshyA2CmF"),
    belgium SWIFT_SYMBOL("s:7BlinkID7CountryO7belgiumyA2CmF"),
    bosniaAndHerzegovina SWIFT_SYMBOL("s:7BlinkID7CountryO20bosniaAndHerzegovinayA2CmF"),
    brunei SWIFT_SYMBOL("s:7BlinkID7CountryO6bruneiyA2CmF"),
    bulgaria SWIFT_SYMBOL("s:7BlinkID7CountryO8bulgariayA2CmF"),
    cambodia SWIFT_SYMBOL("s:7BlinkID7CountryO8cambodiayA2CmF"),
    canada SWIFT_SYMBOL("s:7BlinkID7CountryO6canadayA2CmF"),
    chile SWIFT_SYMBOL("s:7BlinkID7CountryO5chileyA2CmF"),
    colombia SWIFT_SYMBOL("s:7BlinkID7CountryO8colombiayA2CmF"),
    costaRica SWIFT_SYMBOL("s:7BlinkID7CountryO9costaRicayA2CmF"),
    croatia SWIFT_SYMBOL("s:7BlinkID7CountryO7croatiayA2CmF"),
    cyprus SWIFT_SYMBOL("s:7BlinkID7CountryO6cyprusyA2CmF"),
    czechia SWIFT_SYMBOL("s:7BlinkID7CountryO7czechiayA2CmF"),
    denmark SWIFT_SYMBOL("s:7BlinkID7CountryO7denmarkyA2CmF"),
    dominicanRepublic SWIFT_SYMBOL("s:7BlinkID7CountryO17dominicanRepublicyA2CmF"),
    egypt SWIFT_SYMBOL("s:7BlinkID7CountryO5egyptyA2CmF"),
    estonia SWIFT_SYMBOL("s:7BlinkID7CountryO7estoniayA2CmF"),
    finland SWIFT_SYMBOL("s:7BlinkID7CountryO7finlandyA2CmF"),
    france SWIFT_SYMBOL("s:7BlinkID7CountryO6franceyA2CmF"),
    georgia SWIFT_SYMBOL("s:7BlinkID7CountryO7georgiayA2CmF"),
    germany SWIFT_SYMBOL("s:7BlinkID7CountryO7germanyyA2CmF"),
    ghana SWIFT_SYMBOL("s:7BlinkID7CountryO5ghanayA2CmF"),
    greece SWIFT_SYMBOL("s:7BlinkID7CountryO6greeceyA2CmF"),
    guatemala SWIFT_SYMBOL("s:7BlinkID7CountryO9guatemalayA2CmF"),
    hongKong SWIFT_SYMBOL("s:7BlinkID7CountryO8hongKongyA2CmF"),
    hungary SWIFT_SYMBOL("s:7BlinkID7CountryO7hungaryyA2CmF"),
    india SWIFT_SYMBOL("s:7BlinkID7CountryO5indiayA2CmF"),
    indonesia SWIFT_SYMBOL("s:7BlinkID7CountryO9indonesiayA2CmF"),
    ireland SWIFT_SYMBOL("s:7BlinkID7CountryO7irelandyA2CmF"),
    israel SWIFT_SYMBOL("s:7BlinkID7CountryO6israelyA2CmF"),
    italy SWIFT_SYMBOL("s:7BlinkID7CountryO5italyyA2CmF"),
    jordan SWIFT_SYMBOL("s:7BlinkID7CountryO6jordanyA2CmF"),
    kazakhstan SWIFT_SYMBOL("s:7BlinkID7CountryO10kazakhstanyA2CmF"),
    kenya SWIFT_SYMBOL("s:7BlinkID7CountryO5kenyayA2CmF"),
    kosovo SWIFT_SYMBOL("s:7BlinkID7CountryO6kosovoyA2CmF"),
    kuwait SWIFT_SYMBOL("s:7BlinkID7CountryO6kuwaityA2CmF"),
    latvia SWIFT_SYMBOL("s:7BlinkID7CountryO6latviayA2CmF"),
    lithuania SWIFT_SYMBOL("s:7BlinkID7CountryO9lithuaniayA2CmF"),
    malaysia SWIFT_SYMBOL("s:7BlinkID7CountryO8malaysiayA2CmF"),
    maldives SWIFT_SYMBOL("s:7BlinkID7CountryO8maldivesyA2CmF"),
    malta SWIFT_SYMBOL("s:7BlinkID7CountryO5maltayA2CmF"),
    mauritius SWIFT_SYMBOL("s:7BlinkID7CountryO9mauritiusyA2CmF"),
    mexico SWIFT_SYMBOL("s:7BlinkID7CountryO6mexicoyA2CmF"),
    morocco SWIFT_SYMBOL("s:7BlinkID7CountryO7moroccoyA2CmF"),
    netherlands SWIFT_SYMBOL("s:7BlinkID7CountryO11netherlandsyA2CmF"),
    newZealand SWIFT_SYMBOL("s:7BlinkID7CountryO10newZealandyA2CmF"),
    nigeria SWIFT_SYMBOL("s:7BlinkID7CountryO7nigeriayA2CmF"),
    pakistan SWIFT_SYMBOL("s:7BlinkID7CountryO8pakistanyA2CmF"),
    panama SWIFT_SYMBOL("s:7BlinkID7CountryO6panamayA2CmF"),
    paraguay SWIFT_SYMBOL("s:7BlinkID7CountryO8paraguayyA2CmF"),
    philippines SWIFT_SYMBOL("s:7BlinkID7CountryO11philippinesyA2CmF"),
    poland SWIFT_SYMBOL("s:7BlinkID7CountryO6polandyA2CmF"),
    portugal SWIFT_SYMBOL("s:7BlinkID7CountryO8portugalyA2CmF"),
    puertoRico SWIFT_SYMBOL("s:7BlinkID7CountryO10puertoRicoyA2CmF"),
    qatar SWIFT_SYMBOL("s:7BlinkID7CountryO5qataryA2CmF"),
    romania SWIFT_SYMBOL("s:7BlinkID7CountryO7romaniayA2CmF"),
    russia SWIFT_SYMBOL("s:7BlinkID7CountryO6russiayA2CmF"),
    saudiArabia SWIFT_SYMBOL("s:7BlinkID7CountryO11saudiArabiayA2CmF"),
    serbia SWIFT_SYMBOL("s:7BlinkID7CountryO6serbiayA2CmF"),
    singapore SWIFT_SYMBOL("s:7BlinkID7CountryO9singaporeyA2CmF"),
    slovakia SWIFT_SYMBOL("s:7BlinkID7CountryO8slovakiayA2CmF"),
    slovenia SWIFT_SYMBOL("s:7BlinkID7CountryO8sloveniayA2CmF"),
    southAfrica SWIFT_SYMBOL("s:7BlinkID7CountryO11southAfricayA2CmF"),
    spain SWIFT_SYMBOL("s:7BlinkID7CountryO5spainyA2CmF"),
    sweden SWIFT_SYMBOL("s:7BlinkID7CountryO6swedenyA2CmF"),
    switzerland SWIFT_SYMBOL("s:7BlinkID7CountryO11switzerlandyA2CmF"),
    taiwan SWIFT_SYMBOL("s:7BlinkID7CountryO6taiwanyA2CmF"),
    thailand SWIFT_SYMBOL("s:7BlinkID7CountryO8thailandyA2CmF"),
    tunisia SWIFT_SYMBOL("s:7BlinkID7CountryO7tunisiayA2CmF"),
    turkey SWIFT_SYMBOL("s:7BlinkID7CountryO6turkeyyA2CmF"),
    uae SWIFT_SYMBOL("s:7BlinkID7CountryO3uaeyA2CmF"),
    uganda SWIFT_SYMBOL("s:7BlinkID7CountryO6ugandayA2CmF"),
    uk SWIFT_SYMBOL("s:7BlinkID7CountryO2ukyA2CmF"),
    ukraine SWIFT_SYMBOL("s:7BlinkID7CountryO7ukraineyA2CmF"),
    usa SWIFT_SYMBOL("s:7BlinkID7CountryO3usayA2CmF"),
    vietnam SWIFT_SYMBOL("s:7BlinkID7CountryO7vietnamyA2CmF"),
    brazil SWIFT_SYMBOL("s:7BlinkID7CountryO6brazilyA2CmF"),
    norway SWIFT_SYMBOL("s:7BlinkID7CountryO6norwayyA2CmF"),
    oman SWIFT_SYMBOL("s:7BlinkID7CountryO4omanyA2CmF"),
    ecuador SWIFT_SYMBOL("s:7BlinkID7CountryO7ecuadoryA2CmF"),
    elSalvador SWIFT_SYMBOL("s:7BlinkID7CountryO10elSalvadoryA2CmF"),
    sriLanka SWIFT_SYMBOL("s:7BlinkID7CountryO8sriLankayA2CmF"),
    peru SWIFT_SYMBOL("s:7BlinkID7CountryO4peruyA2CmF"),
    uruguay SWIFT_SYMBOL("s:7BlinkID7CountryO7uruguayyA2CmF"),
    bahamas SWIFT_SYMBOL("s:7BlinkID7CountryO7bahamasyA2CmF"),
    bermuda SWIFT_SYMBOL("s:7BlinkID7CountryO7bermudayA2CmF"),
    bolivia SWIFT_SYMBOL("s:7BlinkID7CountryO7boliviayA2CmF"),
    china SWIFT_SYMBOL("s:7BlinkID7CountryO5chinayA2CmF"),
    europeanUnion SWIFT_SYMBOL("s:7BlinkID7CountryO13europeanUnionyA2CmF"),
    haiti SWIFT_SYMBOL("s:7BlinkID7CountryO5haitiyA2CmF"),
    honduras SWIFT_SYMBOL("s:7BlinkID7CountryO8hondurasyA2CmF"),
    iceland SWIFT_SYMBOL("s:7BlinkID7CountryO7icelandyA2CmF"),
    japan SWIFT_SYMBOL("s:7BlinkID7CountryO5japanyA2CmF"),
    luxembourg SWIFT_SYMBOL("s:7BlinkID7CountryO10luxembourgyA2CmF"),
    montenegro SWIFT_SYMBOL("s:7BlinkID7CountryO10montenegroyA2CmF"),
    nicaragua SWIFT_SYMBOL("s:7BlinkID7CountryO9nicaraguayA2CmF"),
    southKorea SWIFT_SYMBOL("s:7BlinkID7CountryO10southKoreayA2CmF"),
    venezuela SWIFT_SYMBOL("s:7BlinkID7CountryO9venezuelayA2CmF"),
    afghanistan SWIFT_SYMBOL("s:7BlinkID7CountryO11afghanistanyA2CmF"),
    alandIslands SWIFT_SYMBOL("s:7BlinkID7CountryO12alandIslandsyA2CmF"),
    americanSamoa SWIFT_SYMBOL("s:7BlinkID7CountryO13americanSamoayA2CmF"),
    andorra SWIFT_SYMBOL("s:7BlinkID7CountryO7andorrayA2CmF"),
    angola SWIFT_SYMBOL("s:7BlinkID7CountryO6angolayA2CmF"),
    anguilla SWIFT_SYMBOL("s:7BlinkID7CountryO8anguillayA2CmF"),
    antarctica SWIFT_SYMBOL("s:7BlinkID7CountryO10antarcticayA2CmF"),
    antiguaAndBarbuda SWIFT_SYMBOL("s:7BlinkID7CountryO17antiguaAndBarbudayA2CmF"),
    armenia SWIFT_SYMBOL("s:7BlinkID7CountryO7armeniayA2CmF"),
    aruba SWIFT_SYMBOL("s:7BlinkID7CountryO5arubayA2CmF"),
    bailiwickOfGuernsey SWIFT_SYMBOL("s:7BlinkID7CountryO19bailiwickOfGuernseyyA2CmF"),
    bailiwickOfJersey SWIFT_SYMBOL("s:7BlinkID7CountryO17bailiwickOfJerseyyA2CmF"),
    barbados SWIFT_SYMBOL("s:7BlinkID7CountryO8barbadosyA2CmF"),
    belarus SWIFT_SYMBOL("s:7BlinkID7CountryO7belarusyA2CmF"),
    belize SWIFT_SYMBOL("s:7BlinkID7CountryO6belizeyA2CmF"),
    benin SWIFT_SYMBOL("s:7BlinkID7CountryO5beninyA2CmF"),
    bhutan SWIFT_SYMBOL("s:7BlinkID7CountryO6bhutanyA2CmF"),
    bonaireSaintEustatiusAndSaba SWIFT_SYMBOL("s:7BlinkID7CountryO28bonaireSaintEustatiusAndSabayA2CmF"),
    botswana SWIFT_SYMBOL("s:7BlinkID7CountryO8botswanayA2CmF"),
    bouvetIsland SWIFT_SYMBOL("s:7BlinkID7CountryO12bouvetIslandyA2CmF"),
    britishIndianOceanTerritory SWIFT_SYMBOL("s:7BlinkID7CountryO27britishIndianOceanTerritoryyA2CmF"),
    burkinaFaso SWIFT_SYMBOL("s:7BlinkID7CountryO11burkinaFasoyA2CmF"),
    burundi SWIFT_SYMBOL("s:7BlinkID7CountryO7burundiyA2CmF"),
    cameroon SWIFT_SYMBOL("s:7BlinkID7CountryO8cameroonyA2CmF"),
    capeVerde SWIFT_SYMBOL("s:7BlinkID7CountryO9capeVerdeyA2CmF"),
    caribbeanNetherlands SWIFT_SYMBOL("s:7BlinkID7CountryO20caribbeanNetherlandsyA2CmF"),
    caymanIslands SWIFT_SYMBOL("s:7BlinkID7CountryO13caymanIslandsyA2CmF"),
    centralAfricanRepublic SWIFT_SYMBOL("s:7BlinkID7CountryO22centralAfricanRepublicyA2CmF"),
    chad SWIFT_SYMBOL("s:7BlinkID7CountryO4chadyA2CmF"),
    christmasIsland SWIFT_SYMBOL("s:7BlinkID7CountryO15christmasIslandyA2CmF"),
    cocosIslands SWIFT_SYMBOL("s:7BlinkID7CountryO12cocosIslandsyA2CmF"),
    comoros SWIFT_SYMBOL("s:7BlinkID7CountryO7comorosyA2CmF"),
    congo SWIFT_SYMBOL("s:7BlinkID7CountryO5congoyA2CmF"),
    cookIslands SWIFT_SYMBOL("s:7BlinkID7CountryO11cookIslandsyA2CmF"),
    cuba SWIFT_SYMBOL("s:7BlinkID7CountryO4cubayA2CmF"),
    curacao SWIFT_SYMBOL("s:7BlinkID7CountryO7curacaoyA2CmF"),
    democraticRepublicOfTheCongo SWIFT_SYMBOL("s:7BlinkID7CountryO28democraticRepublicOfTheCongoyA2CmF"),
    djibouti SWIFT_SYMBOL("s:7BlinkID7CountryO8djiboutiyA2CmF"),
    dominica SWIFT_SYMBOL("s:7BlinkID7CountryO8dominicayA2CmF"),
    eastTimor SWIFT_SYMBOL("s:7BlinkID7CountryO9eastTimoryA2CmF"),
    equatorialGuinea SWIFT_SYMBOL("s:7BlinkID7CountryO16equatorialGuineayA2CmF"),
    eritrea SWIFT_SYMBOL("s:7BlinkID7CountryO7eritreayA2CmF"),
    ethiopia SWIFT_SYMBOL("s:7BlinkID7CountryO8ethiopiayA2CmF"),
    falklandIslands SWIFT_SYMBOL("s:7BlinkID7CountryO15falklandIslandsyA2CmF"),
    faroeIslands SWIFT_SYMBOL("s:7BlinkID7CountryO12faroeIslandsyA2CmF"),
    federatedStatesOfMicronesia SWIFT_SYMBOL("s:7BlinkID7CountryO27federatedStatesOfMicronesiayA2CmF"),
    fiji SWIFT_SYMBOL("s:7BlinkID7CountryO4fijiyA2CmF"),
    frenchGuiana SWIFT_SYMBOL("s:7BlinkID7CountryO12frenchGuianayA2CmF"),
    frenchPolynesia SWIFT_SYMBOL("s:7BlinkID7CountryO15frenchPolynesiayA2CmF"),
    frenchSouthernTerritories SWIFT_SYMBOL("s:7BlinkID7CountryO25frenchSouthernTerritoriesyA2CmF"),
    gabon SWIFT_SYMBOL("s:7BlinkID7CountryO5gabonyA2CmF"),
    gambia SWIFT_SYMBOL("s:7BlinkID7CountryO6gambiayA2CmF"),
    gibraltar SWIFT_SYMBOL("s:7BlinkID7CountryO9gibraltaryA2CmF"),
    greenland SWIFT_SYMBOL("s:7BlinkID7CountryO9greenlandyA2CmF"),
    grenada SWIFT_SYMBOL("s:7BlinkID7CountryO7grenadayA2CmF"),
    guadeloupe SWIFT_SYMBOL("s:7BlinkID7CountryO10guadeloupeyA2CmF"),
    guam SWIFT_SYMBOL("s:7BlinkID7CountryO4guamyA2CmF"),
    guinea SWIFT_SYMBOL("s:7BlinkID7CountryO6guineayA2CmF"),
    guineaBissau SWIFT_SYMBOL("s:7BlinkID7CountryO12guineaBissauyA2CmF"),
    guyana SWIFT_SYMBOL("s:7BlinkID7CountryO6guyanayA2CmF"),
    heardIslandAndMcdonaldIslands SWIFT_SYMBOL("s:7BlinkID7CountryO29heardIslandAndMcdonaldIslandsyA2CmF"),
    iran SWIFT_SYMBOL("s:7BlinkID7CountryO4iranyA2CmF"),
    iraq SWIFT_SYMBOL("s:7BlinkID7CountryO4iraqyA2CmF"),
    isleOfMan SWIFT_SYMBOL("s:7BlinkID7CountryO9isleOfManyA2CmF"),
    ivoryCoast SWIFT_SYMBOL("s:7BlinkID7CountryO10ivoryCoastyA2CmF"),
    jamaica SWIFT_SYMBOL("s:7BlinkID7CountryO7jamaicayA2CmF"),
    kiribati SWIFT_SYMBOL("s:7BlinkID7CountryO8kiribatiyA2CmF"),
    kyrgyzstan SWIFT_SYMBOL("s:7BlinkID7CountryO10kyrgyzstanyA2CmF"),
    laos SWIFT_SYMBOL("s:7BlinkID7CountryO4laosyA2CmF"),
    lebanon SWIFT_SYMBOL("s:7BlinkID7CountryO7lebanonyA2CmF"),
    lesotho SWIFT_SYMBOL("s:7BlinkID7CountryO7lesothoyA2CmF"),
    liberia SWIFT_SYMBOL("s:7BlinkID7CountryO7liberiayA2CmF"),
    libya SWIFT_SYMBOL("s:7BlinkID7CountryO5libyayA2CmF"),
    liechtenstein SWIFT_SYMBOL("s:7BlinkID7CountryO13liechtensteinyA2CmF"),
    macau SWIFT_SYMBOL("s:7BlinkID7CountryO5macauyA2CmF"),
    madagascar SWIFT_SYMBOL("s:7BlinkID7CountryO10madagascaryA2CmF"),
    malawi SWIFT_SYMBOL("s:7BlinkID7CountryO6malawiyA2CmF"),
    mali SWIFT_SYMBOL("s:7BlinkID7CountryO4maliyA2CmF"),
    marshallIslands SWIFT_SYMBOL("s:7BlinkID7CountryO15marshallIslandsyA2CmF"),
    martinique SWIFT_SYMBOL("s:7BlinkID7CountryO10martiniqueyA2CmF"),
    mauritania SWIFT_SYMBOL("s:7BlinkID7CountryO10mauritaniayA2CmF"),
    mayotte SWIFT_SYMBOL("s:7BlinkID7CountryO7mayotteyA2CmF"),
    moldova SWIFT_SYMBOL("s:7BlinkID7CountryO7moldovayA2CmF"),
    monaco SWIFT_SYMBOL("s:7BlinkID7CountryO6monacoyA2CmF"),
    mongolia SWIFT_SYMBOL("s:7BlinkID7CountryO8mongoliayA2CmF"),
    montserrat SWIFT_SYMBOL("s:7BlinkID7CountryO10montserratyA2CmF"),
    mozambique SWIFT_SYMBOL("s:7BlinkID7CountryO10mozambiqueyA2CmF"),
    myanmar SWIFT_SYMBOL("s:7BlinkID7CountryO7myanmaryA2CmF"),
    namibia SWIFT_SYMBOL("s:7BlinkID7CountryO7namibiayA2CmF"),
    nauru SWIFT_SYMBOL("s:7BlinkID7CountryO5nauruyA2CmF"),
    nepal SWIFT_SYMBOL("s:7BlinkID7CountryO5nepalyA2CmF"),
    newCaledonia SWIFT_SYMBOL("s:7BlinkID7CountryO12newCaledoniayA2CmF"),
    niger SWIFT_SYMBOL("s:7BlinkID7CountryO5nigeryA2CmF"),
    niue SWIFT_SYMBOL("s:7BlinkID7CountryO4niueyA2CmF"),
    norfolkIsland SWIFT_SYMBOL("s:7BlinkID7CountryO13norfolkIslandyA2CmF"),
    northernCyprus SWIFT_SYMBOL("s:7BlinkID7CountryO14northernCyprusyA2CmF"),
    northernMarianaIslands SWIFT_SYMBOL("s:7BlinkID7CountryO22northernMarianaIslandsyA2CmF"),
    northKorea SWIFT_SYMBOL("s:7BlinkID7CountryO10northKoreayA2CmF"),
    northMacedonia SWIFT_SYMBOL("s:7BlinkID7CountryO14northMacedoniayA2CmF"),
    palau SWIFT_SYMBOL("s:7BlinkID7CountryO5palauyA2CmF"),
    palestine SWIFT_SYMBOL("s:7BlinkID7CountryO9palestineyA2CmF"),
    papuaNewGuinea SWIFT_SYMBOL("s:7BlinkID7CountryO14papuaNewGuineayA2CmF"),
    pitcairn SWIFT_SYMBOL("s:7BlinkID7CountryO8pitcairnyA2CmF"),
    reunion SWIFT_SYMBOL("s:7BlinkID7CountryO7reunionyA2CmF"),
    rwanda SWIFT_SYMBOL("s:7BlinkID7CountryO6rwandayA2CmF"),
    saintBarthelemy SWIFT_SYMBOL("s:7BlinkID7CountryO15saintBarthelemyyA2CmF"),
    saintHelenaAscensionAndTristianDaCunha SWIFT_SYMBOL("s:7BlinkID7CountryO38saintHelenaAscensionAndTristianDaCunhayA2CmF"),
    saintKittsAndNevis SWIFT_SYMBOL("s:7BlinkID7CountryO18saintKittsAndNevisyA2CmF"),
    saintLucia SWIFT_SYMBOL("s:7BlinkID7CountryO10saintLuciayA2CmF"),
    saintMartin SWIFT_SYMBOL("s:7BlinkID7CountryO11saintMartinyA2CmF"),
    saintPierreAndMiquelon SWIFT_SYMBOL("s:7BlinkID7CountryO22saintPierreAndMiquelonyA2CmF"),
    saintVincentAndTheGrenadines SWIFT_SYMBOL("s:7BlinkID7CountryO28saintVincentAndTheGrenadinesyA2CmF"),
    samoa SWIFT_SYMBOL("s:7BlinkID7CountryO5samoayA2CmF"),
    sanMarino SWIFT_SYMBOL("s:7BlinkID7CountryO9sanMarinoyA2CmF"),
    saoTomeAndPrincipe SWIFT_SYMBOL("s:7BlinkID7CountryO18saoTomeAndPrincipeyA2CmF"),
    senegal SWIFT_SYMBOL("s:7BlinkID7CountryO7senegalyA2CmF"),
    seychelles SWIFT_SYMBOL("s:7BlinkID7CountryO10seychellesyA2CmF"),
    sierraLeone SWIFT_SYMBOL("s:7BlinkID7CountryO11sierraLeoneyA2CmF"),
    sintMaarten SWIFT_SYMBOL("s:7BlinkID7CountryO11sintMaartenyA2CmF"),
    solomonIslands SWIFT_SYMBOL("s:7BlinkID7CountryO14solomonIslandsyA2CmF"),
    somalia SWIFT_SYMBOL("s:7BlinkID7CountryO7somaliayA2CmF"),
    southGeorgiaAndTheSouthSandwichIslands SWIFT_SYMBOL("s:7BlinkID7CountryO38southGeorgiaAndTheSouthSandwichIslandsyA2CmF"),
    southSudan SWIFT_SYMBOL("s:7BlinkID7CountryO10southSudanyA2CmF"),
    sudan SWIFT_SYMBOL("s:7BlinkID7CountryO5sudanyA2CmF"),
    suriname SWIFT_SYMBOL("s:7BlinkID7CountryO8surinameyA2CmF"),
    svalbardAndJanMayen SWIFT_SYMBOL("s:7BlinkID7CountryO19svalbardAndJanMayenyA2CmF"),
    eswatini SWIFT_SYMBOL("s:7BlinkID7CountryO8eswatiniyA2CmF"),
    syria SWIFT_SYMBOL("s:7BlinkID7CountryO5syriayA2CmF"),
    tajikistan SWIFT_SYMBOL("s:7BlinkID7CountryO10tajikistanyA2CmF"),
    tanzania SWIFT_SYMBOL("s:7BlinkID7CountryO8tanzaniayA2CmF"),
    togo SWIFT_SYMBOL("s:7BlinkID7CountryO4togoyA2CmF"),
    tokelau SWIFT_SYMBOL("s:7BlinkID7CountryO7tokelauyA2CmF"),
    tonga SWIFT_SYMBOL("s:7BlinkID7CountryO5tongayA2CmF"),
    trinidadAndTobago SWIFT_SYMBOL("s:7BlinkID7CountryO17trinidadAndTobagoyA2CmF"),
    turkmenistan SWIFT_SYMBOL("s:7BlinkID7CountryO12turkmenistanyA2CmF"),
    turksAndCaicosIslands SWIFT_SYMBOL("s:7BlinkID7CountryO21turksAndCaicosIslandsyA2CmF"),
    tuvalu SWIFT_SYMBOL("s:7BlinkID7CountryO6tuvaluyA2CmF"),
    unitedStatesMinorOutlyingIslands SWIFT_SYMBOL("s:7BlinkID7CountryO32unitedStatesMinorOutlyingIslandsyA2CmF"),
    uzbekistan SWIFT_SYMBOL("s:7BlinkID7CountryO10uzbekistanyA2CmF"),
    vanuatu SWIFT_SYMBOL("s:7BlinkID7CountryO7vanuatuyA2CmF"),
    vaticanCity SWIFT_SYMBOL("s:7BlinkID7CountryO11vaticanCityyA2CmF"),
    virginIslandsBritish SWIFT_SYMBOL("s:7BlinkID7CountryO20virginIslandsBritishyA2CmF"),
    virginIslandsUs SWIFT_SYMBOL("s:7BlinkID7CountryO15virginIslandsUsyA2CmF"),
    wallisAndFutuna SWIFT_SYMBOL("s:7BlinkID7CountryO15wallisAndFutunayA2CmF"),
    westernSahara SWIFT_SYMBOL("s:7BlinkID7CountryO13westernSaharayA2CmF"),
    yemen SWIFT_SYMBOL("s:7BlinkID7CountryO5yemenyA2CmF"),
    yugoslavia SWIFT_SYMBOL("s:7BlinkID7CountryO10yugoslaviayA2CmF"),
    zambia SWIFT_SYMBOL("s:7BlinkID7CountryO6zambiayA2CmF"),
    zimbabwe SWIFT_SYMBOL("s:7BlinkID7CountryO8zimbabweyA2CmF"),
    schengen_area SWIFT_SYMBOL("s:7BlinkID7CountryO13schengen_areayA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_none {  // impl struct for case none
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::none;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } none SWIFT_SYMBOL("s:7BlinkID7CountryO4noneyA2CmF");
  SWIFT_INLINE_THUNK bool isNone() const;

  inline const static struct _impl_albania {  // impl struct for case albania
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::albania;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } albania SWIFT_SYMBOL("s:7BlinkID7CountryO7albaniayA2CmF");
  SWIFT_INLINE_THUNK bool isAlbania() const;

  inline const static struct _impl_algeria {  // impl struct for case algeria
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::algeria;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } algeria SWIFT_SYMBOL("s:7BlinkID7CountryO7algeriayA2CmF");
  SWIFT_INLINE_THUNK bool isAlgeria() const;

  inline const static struct _impl_argentina {  // impl struct for case argentina
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::argentina;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } argentina SWIFT_SYMBOL("s:7BlinkID7CountryO9argentinayA2CmF");
  SWIFT_INLINE_THUNK bool isArgentina() const;

  inline const static struct _impl_australia {  // impl struct for case australia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::australia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } australia SWIFT_SYMBOL("s:7BlinkID7CountryO9australiayA2CmF");
  SWIFT_INLINE_THUNK bool isAustralia() const;

  inline const static struct _impl_austria {  // impl struct for case austria
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::austria;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } austria SWIFT_SYMBOL("s:7BlinkID7CountryO7austriayA2CmF");
  SWIFT_INLINE_THUNK bool isAustria() const;

  inline const static struct _impl_azerbaijan {  // impl struct for case azerbaijan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::azerbaijan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } azerbaijan SWIFT_SYMBOL("s:7BlinkID7CountryO10azerbaijanyA2CmF");
  SWIFT_INLINE_THUNK bool isAzerbaijan() const;

  inline const static struct _impl_bahrain {  // impl struct for case bahrain
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bahrain;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } bahrain SWIFT_SYMBOL("s:7BlinkID7CountryO7bahrainyA2CmF");
  SWIFT_INLINE_THUNK bool isBahrain() const;

  inline const static struct _impl_bangladesh {  // impl struct for case bangladesh
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bangladesh;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } bangladesh SWIFT_SYMBOL("s:7BlinkID7CountryO10bangladeshyA2CmF");
  SWIFT_INLINE_THUNK bool isBangladesh() const;

  inline const static struct _impl_belgium {  // impl struct for case belgium
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::belgium;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } belgium SWIFT_SYMBOL("s:7BlinkID7CountryO7belgiumyA2CmF");
  SWIFT_INLINE_THUNK bool isBelgium() const;

  inline const static struct _impl_bosniaAndHerzegovina {  // impl struct for case bosniaAndHerzegovina
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bosniaAndHerzegovina;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } bosniaAndHerzegovina SWIFT_SYMBOL("s:7BlinkID7CountryO20bosniaAndHerzegovinayA2CmF");
  SWIFT_INLINE_THUNK bool isBosniaAndHerzegovina() const;

  inline const static struct _impl_brunei {  // impl struct for case brunei
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::brunei;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } brunei SWIFT_SYMBOL("s:7BlinkID7CountryO6bruneiyA2CmF");
  SWIFT_INLINE_THUNK bool isBrunei() const;

  inline const static struct _impl_bulgaria {  // impl struct for case bulgaria
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bulgaria;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } bulgaria SWIFT_SYMBOL("s:7BlinkID7CountryO8bulgariayA2CmF");
  SWIFT_INLINE_THUNK bool isBulgaria() const;

  inline const static struct _impl_cambodia {  // impl struct for case cambodia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cambodia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } cambodia SWIFT_SYMBOL("s:7BlinkID7CountryO8cambodiayA2CmF");
  SWIFT_INLINE_THUNK bool isCambodia() const;

  inline const static struct _impl_canada {  // impl struct for case canada
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::canada;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } canada SWIFT_SYMBOL("s:7BlinkID7CountryO6canadayA2CmF");
  SWIFT_INLINE_THUNK bool isCanada() const;

  inline const static struct _impl_chile {  // impl struct for case chile
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::chile;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } chile SWIFT_SYMBOL("s:7BlinkID7CountryO5chileyA2CmF");
  SWIFT_INLINE_THUNK bool isChile() const;

  inline const static struct _impl_colombia {  // impl struct for case colombia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::colombia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } colombia SWIFT_SYMBOL("s:7BlinkID7CountryO8colombiayA2CmF");
  SWIFT_INLINE_THUNK bool isColombia() const;

  inline const static struct _impl_costaRica {  // impl struct for case costaRica
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::costaRica;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } costaRica SWIFT_SYMBOL("s:7BlinkID7CountryO9costaRicayA2CmF");
  SWIFT_INLINE_THUNK bool isCostaRica() const;

  inline const static struct _impl_croatia {  // impl struct for case croatia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::croatia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } croatia SWIFT_SYMBOL("s:7BlinkID7CountryO7croatiayA2CmF");
  SWIFT_INLINE_THUNK bool isCroatia() const;

  inline const static struct _impl_cyprus {  // impl struct for case cyprus
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cyprus;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } cyprus SWIFT_SYMBOL("s:7BlinkID7CountryO6cyprusyA2CmF");
  SWIFT_INLINE_THUNK bool isCyprus() const;

  inline const static struct _impl_czechia {  // impl struct for case czechia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::czechia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } czechia SWIFT_SYMBOL("s:7BlinkID7CountryO7czechiayA2CmF");
  SWIFT_INLINE_THUNK bool isCzechia() const;

  inline const static struct _impl_denmark {  // impl struct for case denmark
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::denmark;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } denmark SWIFT_SYMBOL("s:7BlinkID7CountryO7denmarkyA2CmF");
  SWIFT_INLINE_THUNK bool isDenmark() const;

  inline const static struct _impl_dominicanRepublic {  // impl struct for case dominicanRepublic
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dominicanRepublic;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } dominicanRepublic SWIFT_SYMBOL("s:7BlinkID7CountryO17dominicanRepublicyA2CmF");
  SWIFT_INLINE_THUNK bool isDominicanRepublic() const;

  inline const static struct _impl_egypt {  // impl struct for case egypt
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::egypt;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } egypt SWIFT_SYMBOL("s:7BlinkID7CountryO5egyptyA2CmF");
  SWIFT_INLINE_THUNK bool isEgypt() const;

  inline const static struct _impl_estonia {  // impl struct for case estonia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::estonia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } estonia SWIFT_SYMBOL("s:7BlinkID7CountryO7estoniayA2CmF");
  SWIFT_INLINE_THUNK bool isEstonia() const;

  inline const static struct _impl_finland {  // impl struct for case finland
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::finland;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } finland SWIFT_SYMBOL("s:7BlinkID7CountryO7finlandyA2CmF");
  SWIFT_INLINE_THUNK bool isFinland() const;

  inline const static struct _impl_france {  // impl struct for case france
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::france;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } france SWIFT_SYMBOL("s:7BlinkID7CountryO6franceyA2CmF");
  SWIFT_INLINE_THUNK bool isFrance() const;

  inline const static struct _impl_georgia {  // impl struct for case georgia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::georgia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } georgia SWIFT_SYMBOL("s:7BlinkID7CountryO7georgiayA2CmF");
  SWIFT_INLINE_THUNK bool isGeorgia() const;

  inline const static struct _impl_germany {  // impl struct for case germany
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::germany;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } germany SWIFT_SYMBOL("s:7BlinkID7CountryO7germanyyA2CmF");
  SWIFT_INLINE_THUNK bool isGermany() const;

  inline const static struct _impl_ghana {  // impl struct for case ghana
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ghana;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } ghana SWIFT_SYMBOL("s:7BlinkID7CountryO5ghanayA2CmF");
  SWIFT_INLINE_THUNK bool isGhana() const;

  inline const static struct _impl_greece {  // impl struct for case greece
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::greece;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } greece SWIFT_SYMBOL("s:7BlinkID7CountryO6greeceyA2CmF");
  SWIFT_INLINE_THUNK bool isGreece() const;

  inline const static struct _impl_guatemala {  // impl struct for case guatemala
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::guatemala;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } guatemala SWIFT_SYMBOL("s:7BlinkID7CountryO9guatemalayA2CmF");
  SWIFT_INLINE_THUNK bool isGuatemala() const;

  inline const static struct _impl_hongKong {  // impl struct for case hongKong
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::hongKong;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } hongKong SWIFT_SYMBOL("s:7BlinkID7CountryO8hongKongyA2CmF");
  SWIFT_INLINE_THUNK bool isHongKong() const;

  inline const static struct _impl_hungary {  // impl struct for case hungary
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::hungary;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } hungary SWIFT_SYMBOL("s:7BlinkID7CountryO7hungaryyA2CmF");
  SWIFT_INLINE_THUNK bool isHungary() const;

  inline const static struct _impl_india {  // impl struct for case india
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::india;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } india SWIFT_SYMBOL("s:7BlinkID7CountryO5indiayA2CmF");
  SWIFT_INLINE_THUNK bool isIndia() const;

  inline const static struct _impl_indonesia {  // impl struct for case indonesia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::indonesia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } indonesia SWIFT_SYMBOL("s:7BlinkID7CountryO9indonesiayA2CmF");
  SWIFT_INLINE_THUNK bool isIndonesia() const;

  inline const static struct _impl_ireland {  // impl struct for case ireland
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ireland;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } ireland SWIFT_SYMBOL("s:7BlinkID7CountryO7irelandyA2CmF");
  SWIFT_INLINE_THUNK bool isIreland() const;

  inline const static struct _impl_israel {  // impl struct for case israel
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::israel;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } israel SWIFT_SYMBOL("s:7BlinkID7CountryO6israelyA2CmF");
  SWIFT_INLINE_THUNK bool isIsrael() const;

  inline const static struct _impl_italy {  // impl struct for case italy
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::italy;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } italy SWIFT_SYMBOL("s:7BlinkID7CountryO5italyyA2CmF");
  SWIFT_INLINE_THUNK bool isItaly() const;

  inline const static struct _impl_jordan {  // impl struct for case jordan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::jordan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } jordan SWIFT_SYMBOL("s:7BlinkID7CountryO6jordanyA2CmF");
  SWIFT_INLINE_THUNK bool isJordan() const;

  inline const static struct _impl_kazakhstan {  // impl struct for case kazakhstan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::kazakhstan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } kazakhstan SWIFT_SYMBOL("s:7BlinkID7CountryO10kazakhstanyA2CmF");
  SWIFT_INLINE_THUNK bool isKazakhstan() const;

  inline const static struct _impl_kenya {  // impl struct for case kenya
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::kenya;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } kenya SWIFT_SYMBOL("s:7BlinkID7CountryO5kenyayA2CmF");
  SWIFT_INLINE_THUNK bool isKenya() const;

  inline const static struct _impl_kosovo {  // impl struct for case kosovo
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::kosovo;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } kosovo SWIFT_SYMBOL("s:7BlinkID7CountryO6kosovoyA2CmF");
  SWIFT_INLINE_THUNK bool isKosovo() const;

  inline const static struct _impl_kuwait {  // impl struct for case kuwait
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::kuwait;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } kuwait SWIFT_SYMBOL("s:7BlinkID7CountryO6kuwaityA2CmF");
  SWIFT_INLINE_THUNK bool isKuwait() const;

  inline const static struct _impl_latvia {  // impl struct for case latvia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::latvia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } latvia SWIFT_SYMBOL("s:7BlinkID7CountryO6latviayA2CmF");
  SWIFT_INLINE_THUNK bool isLatvia() const;

  inline const static struct _impl_lithuania {  // impl struct for case lithuania
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::lithuania;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } lithuania SWIFT_SYMBOL("s:7BlinkID7CountryO9lithuaniayA2CmF");
  SWIFT_INLINE_THUNK bool isLithuania() const;

  inline const static struct _impl_malaysia {  // impl struct for case malaysia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::malaysia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } malaysia SWIFT_SYMBOL("s:7BlinkID7CountryO8malaysiayA2CmF");
  SWIFT_INLINE_THUNK bool isMalaysia() const;

  inline const static struct _impl_maldives {  // impl struct for case maldives
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::maldives;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } maldives SWIFT_SYMBOL("s:7BlinkID7CountryO8maldivesyA2CmF");
  SWIFT_INLINE_THUNK bool isMaldives() const;

  inline const static struct _impl_malta {  // impl struct for case malta
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::malta;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } malta SWIFT_SYMBOL("s:7BlinkID7CountryO5maltayA2CmF");
  SWIFT_INLINE_THUNK bool isMalta() const;

  inline const static struct _impl_mauritius {  // impl struct for case mauritius
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mauritius;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } mauritius SWIFT_SYMBOL("s:7BlinkID7CountryO9mauritiusyA2CmF");
  SWIFT_INLINE_THUNK bool isMauritius() const;

  inline const static struct _impl_mexico {  // impl struct for case mexico
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mexico;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } mexico SWIFT_SYMBOL("s:7BlinkID7CountryO6mexicoyA2CmF");
  SWIFT_INLINE_THUNK bool isMexico() const;

  inline const static struct _impl_morocco {  // impl struct for case morocco
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::morocco;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } morocco SWIFT_SYMBOL("s:7BlinkID7CountryO7moroccoyA2CmF");
  SWIFT_INLINE_THUNK bool isMorocco() const;

  inline const static struct _impl_netherlands {  // impl struct for case netherlands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::netherlands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } netherlands SWIFT_SYMBOL("s:7BlinkID7CountryO11netherlandsyA2CmF");
  SWIFT_INLINE_THUNK bool isNetherlands() const;

  inline const static struct _impl_newZealand {  // impl struct for case newZealand
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::newZealand;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } newZealand SWIFT_SYMBOL("s:7BlinkID7CountryO10newZealandyA2CmF");
  SWIFT_INLINE_THUNK bool isNewZealand() const;

  inline const static struct _impl_nigeria {  // impl struct for case nigeria
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nigeria;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } nigeria SWIFT_SYMBOL("s:7BlinkID7CountryO7nigeriayA2CmF");
  SWIFT_INLINE_THUNK bool isNigeria() const;

  inline const static struct _impl_pakistan {  // impl struct for case pakistan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::pakistan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } pakistan SWIFT_SYMBOL("s:7BlinkID7CountryO8pakistanyA2CmF");
  SWIFT_INLINE_THUNK bool isPakistan() const;

  inline const static struct _impl_panama {  // impl struct for case panama
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::panama;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } panama SWIFT_SYMBOL("s:7BlinkID7CountryO6panamayA2CmF");
  SWIFT_INLINE_THUNK bool isPanama() const;

  inline const static struct _impl_paraguay {  // impl struct for case paraguay
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::paraguay;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } paraguay SWIFT_SYMBOL("s:7BlinkID7CountryO8paraguayyA2CmF");
  SWIFT_INLINE_THUNK bool isParaguay() const;

  inline const static struct _impl_philippines {  // impl struct for case philippines
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::philippines;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } philippines SWIFT_SYMBOL("s:7BlinkID7CountryO11philippinesyA2CmF");
  SWIFT_INLINE_THUNK bool isPhilippines() const;

  inline const static struct _impl_poland {  // impl struct for case poland
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::poland;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } poland SWIFT_SYMBOL("s:7BlinkID7CountryO6polandyA2CmF");
  SWIFT_INLINE_THUNK bool isPoland() const;

  inline const static struct _impl_portugal {  // impl struct for case portugal
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::portugal;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } portugal SWIFT_SYMBOL("s:7BlinkID7CountryO8portugalyA2CmF");
  SWIFT_INLINE_THUNK bool isPortugal() const;

  inline const static struct _impl_puertoRico {  // impl struct for case puertoRico
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::puertoRico;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } puertoRico SWIFT_SYMBOL("s:7BlinkID7CountryO10puertoRicoyA2CmF");
  SWIFT_INLINE_THUNK bool isPuertoRico() const;

  inline const static struct _impl_qatar {  // impl struct for case qatar
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::qatar;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } qatar SWIFT_SYMBOL("s:7BlinkID7CountryO5qataryA2CmF");
  SWIFT_INLINE_THUNK bool isQatar() const;

  inline const static struct _impl_romania {  // impl struct for case romania
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::romania;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } romania SWIFT_SYMBOL("s:7BlinkID7CountryO7romaniayA2CmF");
  SWIFT_INLINE_THUNK bool isRomania() const;

  inline const static struct _impl_russia {  // impl struct for case russia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::russia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } russia SWIFT_SYMBOL("s:7BlinkID7CountryO6russiayA2CmF");
  SWIFT_INLINE_THUNK bool isRussia() const;

  inline const static struct _impl_saudiArabia {  // impl struct for case saudiArabia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::saudiArabia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } saudiArabia SWIFT_SYMBOL("s:7BlinkID7CountryO11saudiArabiayA2CmF");
  SWIFT_INLINE_THUNK bool isSaudiArabia() const;

  inline const static struct _impl_serbia {  // impl struct for case serbia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::serbia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } serbia SWIFT_SYMBOL("s:7BlinkID7CountryO6serbiayA2CmF");
  SWIFT_INLINE_THUNK bool isSerbia() const;

  inline const static struct _impl_singapore {  // impl struct for case singapore
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::singapore;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } singapore SWIFT_SYMBOL("s:7BlinkID7CountryO9singaporeyA2CmF");
  SWIFT_INLINE_THUNK bool isSingapore() const;

  inline const static struct _impl_slovakia {  // impl struct for case slovakia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::slovakia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } slovakia SWIFT_SYMBOL("s:7BlinkID7CountryO8slovakiayA2CmF");
  SWIFT_INLINE_THUNK bool isSlovakia() const;

  inline const static struct _impl_slovenia {  // impl struct for case slovenia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::slovenia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } slovenia SWIFT_SYMBOL("s:7BlinkID7CountryO8sloveniayA2CmF");
  SWIFT_INLINE_THUNK bool isSlovenia() const;

  inline const static struct _impl_southAfrica {  // impl struct for case southAfrica
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::southAfrica;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } southAfrica SWIFT_SYMBOL("s:7BlinkID7CountryO11southAfricayA2CmF");
  SWIFT_INLINE_THUNK bool isSouthAfrica() const;

  inline const static struct _impl_spain {  // impl struct for case spain
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::spain;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } spain SWIFT_SYMBOL("s:7BlinkID7CountryO5spainyA2CmF");
  SWIFT_INLINE_THUNK bool isSpain() const;

  inline const static struct _impl_sweden {  // impl struct for case sweden
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sweden;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } sweden SWIFT_SYMBOL("s:7BlinkID7CountryO6swedenyA2CmF");
  SWIFT_INLINE_THUNK bool isSweden() const;

  inline const static struct _impl_switzerland {  // impl struct for case switzerland
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::switzerland;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } switzerland SWIFT_SYMBOL("s:7BlinkID7CountryO11switzerlandyA2CmF");
  SWIFT_INLINE_THUNK bool isSwitzerland() const;

  inline const static struct _impl_taiwan {  // impl struct for case taiwan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::taiwan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } taiwan SWIFT_SYMBOL("s:7BlinkID7CountryO6taiwanyA2CmF");
  SWIFT_INLINE_THUNK bool isTaiwan() const;

  inline const static struct _impl_thailand {  // impl struct for case thailand
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::thailand;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } thailand SWIFT_SYMBOL("s:7BlinkID7CountryO8thailandyA2CmF");
  SWIFT_INLINE_THUNK bool isThailand() const;

  inline const static struct _impl_tunisia {  // impl struct for case tunisia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tunisia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } tunisia SWIFT_SYMBOL("s:7BlinkID7CountryO7tunisiayA2CmF");
  SWIFT_INLINE_THUNK bool isTunisia() const;

  inline const static struct _impl_turkey {  // impl struct for case turkey
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::turkey;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } turkey SWIFT_SYMBOL("s:7BlinkID7CountryO6turkeyyA2CmF");
  SWIFT_INLINE_THUNK bool isTurkey() const;

  inline const static struct _impl_uae {  // impl struct for case uae
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::uae;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } uae SWIFT_SYMBOL("s:7BlinkID7CountryO3uaeyA2CmF");
  SWIFT_INLINE_THUNK bool isUae() const;

  inline const static struct _impl_uganda {  // impl struct for case uganda
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::uganda;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } uganda SWIFT_SYMBOL("s:7BlinkID7CountryO6ugandayA2CmF");
  SWIFT_INLINE_THUNK bool isUganda() const;

  inline const static struct _impl_uk {  // impl struct for case uk
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::uk;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } uk SWIFT_SYMBOL("s:7BlinkID7CountryO2ukyA2CmF");
  SWIFT_INLINE_THUNK bool isUk() const;

  inline const static struct _impl_ukraine {  // impl struct for case ukraine
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ukraine;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } ukraine SWIFT_SYMBOL("s:7BlinkID7CountryO7ukraineyA2CmF");
  SWIFT_INLINE_THUNK bool isUkraine() const;

  inline const static struct _impl_usa {  // impl struct for case usa
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::usa;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } usa SWIFT_SYMBOL("s:7BlinkID7CountryO3usayA2CmF");
  SWIFT_INLINE_THUNK bool isUsa() const;

  inline const static struct _impl_vietnam {  // impl struct for case vietnam
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::vietnam;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } vietnam SWIFT_SYMBOL("s:7BlinkID7CountryO7vietnamyA2CmF");
  SWIFT_INLINE_THUNK bool isVietnam() const;

  inline const static struct _impl_brazil {  // impl struct for case brazil
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::brazil;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } brazil SWIFT_SYMBOL("s:7BlinkID7CountryO6brazilyA2CmF");
  SWIFT_INLINE_THUNK bool isBrazil() const;

  inline const static struct _impl_norway {  // impl struct for case norway
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::norway;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } norway SWIFT_SYMBOL("s:7BlinkID7CountryO6norwayyA2CmF");
  SWIFT_INLINE_THUNK bool isNorway() const;

  inline const static struct _impl_oman {  // impl struct for case oman
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::oman;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } oman SWIFT_SYMBOL("s:7BlinkID7CountryO4omanyA2CmF");
  SWIFT_INLINE_THUNK bool isOman() const;

  inline const static struct _impl_ecuador {  // impl struct for case ecuador
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ecuador;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } ecuador SWIFT_SYMBOL("s:7BlinkID7CountryO7ecuadoryA2CmF");
  SWIFT_INLINE_THUNK bool isEcuador() const;

  inline const static struct _impl_elSalvador {  // impl struct for case elSalvador
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::elSalvador;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } elSalvador SWIFT_SYMBOL("s:7BlinkID7CountryO10elSalvadoryA2CmF");
  SWIFT_INLINE_THUNK bool isElSalvador() const;

  inline const static struct _impl_sriLanka {  // impl struct for case sriLanka
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sriLanka;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } sriLanka SWIFT_SYMBOL("s:7BlinkID7CountryO8sriLankayA2CmF");
  SWIFT_INLINE_THUNK bool isSriLanka() const;

  inline const static struct _impl_peru {  // impl struct for case peru
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::peru;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } peru SWIFT_SYMBOL("s:7BlinkID7CountryO4peruyA2CmF");
  SWIFT_INLINE_THUNK bool isPeru() const;

  inline const static struct _impl_uruguay {  // impl struct for case uruguay
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::uruguay;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } uruguay SWIFT_SYMBOL("s:7BlinkID7CountryO7uruguayyA2CmF");
  SWIFT_INLINE_THUNK bool isUruguay() const;

  inline const static struct _impl_bahamas {  // impl struct for case bahamas
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bahamas;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } bahamas SWIFT_SYMBOL("s:7BlinkID7CountryO7bahamasyA2CmF");
  SWIFT_INLINE_THUNK bool isBahamas() const;

  inline const static struct _impl_bermuda {  // impl struct for case bermuda
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bermuda;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } bermuda SWIFT_SYMBOL("s:7BlinkID7CountryO7bermudayA2CmF");
  SWIFT_INLINE_THUNK bool isBermuda() const;

  inline const static struct _impl_bolivia {  // impl struct for case bolivia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bolivia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } bolivia SWIFT_SYMBOL("s:7BlinkID7CountryO7boliviayA2CmF");
  SWIFT_INLINE_THUNK bool isBolivia() const;

  inline const static struct _impl_china {  // impl struct for case china
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::china;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } china SWIFT_SYMBOL("s:7BlinkID7CountryO5chinayA2CmF");
  SWIFT_INLINE_THUNK bool isChina() const;

  inline const static struct _impl_europeanUnion {  // impl struct for case europeanUnion
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::europeanUnion;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } europeanUnion SWIFT_SYMBOL("s:7BlinkID7CountryO13europeanUnionyA2CmF");
  SWIFT_INLINE_THUNK bool isEuropeanUnion() const;

  inline const static struct _impl_haiti {  // impl struct for case haiti
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::haiti;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } haiti SWIFT_SYMBOL("s:7BlinkID7CountryO5haitiyA2CmF");
  SWIFT_INLINE_THUNK bool isHaiti() const;

  inline const static struct _impl_honduras {  // impl struct for case honduras
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::honduras;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } honduras SWIFT_SYMBOL("s:7BlinkID7CountryO8hondurasyA2CmF");
  SWIFT_INLINE_THUNK bool isHonduras() const;

  inline const static struct _impl_iceland {  // impl struct for case iceland
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::iceland;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } iceland SWIFT_SYMBOL("s:7BlinkID7CountryO7icelandyA2CmF");
  SWIFT_INLINE_THUNK bool isIceland() const;

  inline const static struct _impl_japan {  // impl struct for case japan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::japan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } japan SWIFT_SYMBOL("s:7BlinkID7CountryO5japanyA2CmF");
  SWIFT_INLINE_THUNK bool isJapan() const;

  inline const static struct _impl_luxembourg {  // impl struct for case luxembourg
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::luxembourg;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } luxembourg SWIFT_SYMBOL("s:7BlinkID7CountryO10luxembourgyA2CmF");
  SWIFT_INLINE_THUNK bool isLuxembourg() const;

  inline const static struct _impl_montenegro {  // impl struct for case montenegro
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::montenegro;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } montenegro SWIFT_SYMBOL("s:7BlinkID7CountryO10montenegroyA2CmF");
  SWIFT_INLINE_THUNK bool isMontenegro() const;

  inline const static struct _impl_nicaragua {  // impl struct for case nicaragua
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nicaragua;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } nicaragua SWIFT_SYMBOL("s:7BlinkID7CountryO9nicaraguayA2CmF");
  SWIFT_INLINE_THUNK bool isNicaragua() const;

  inline const static struct _impl_southKorea {  // impl struct for case southKorea
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::southKorea;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } southKorea SWIFT_SYMBOL("s:7BlinkID7CountryO10southKoreayA2CmF");
  SWIFT_INLINE_THUNK bool isSouthKorea() const;

  inline const static struct _impl_venezuela {  // impl struct for case venezuela
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::venezuela;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } venezuela SWIFT_SYMBOL("s:7BlinkID7CountryO9venezuelayA2CmF");
  SWIFT_INLINE_THUNK bool isVenezuela() const;

  inline const static struct _impl_afghanistan {  // impl struct for case afghanistan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::afghanistan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } afghanistan SWIFT_SYMBOL("s:7BlinkID7CountryO11afghanistanyA2CmF");
  SWIFT_INLINE_THUNK bool isAfghanistan() const;

  inline const static struct _impl_alandIslands {  // impl struct for case alandIslands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::alandIslands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } alandIslands SWIFT_SYMBOL("s:7BlinkID7CountryO12alandIslandsyA2CmF");
  SWIFT_INLINE_THUNK bool isAlandIslands() const;

  inline const static struct _impl_americanSamoa {  // impl struct for case americanSamoa
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::americanSamoa;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } americanSamoa SWIFT_SYMBOL("s:7BlinkID7CountryO13americanSamoayA2CmF");
  SWIFT_INLINE_THUNK bool isAmericanSamoa() const;

  inline const static struct _impl_andorra {  // impl struct for case andorra
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::andorra;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } andorra SWIFT_SYMBOL("s:7BlinkID7CountryO7andorrayA2CmF");
  SWIFT_INLINE_THUNK bool isAndorra() const;

  inline const static struct _impl_angola {  // impl struct for case angola
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::angola;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } angola SWIFT_SYMBOL("s:7BlinkID7CountryO6angolayA2CmF");
  SWIFT_INLINE_THUNK bool isAngola() const;

  inline const static struct _impl_anguilla {  // impl struct for case anguilla
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::anguilla;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } anguilla SWIFT_SYMBOL("s:7BlinkID7CountryO8anguillayA2CmF");
  SWIFT_INLINE_THUNK bool isAnguilla() const;

  inline const static struct _impl_antarctica {  // impl struct for case antarctica
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::antarctica;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } antarctica SWIFT_SYMBOL("s:7BlinkID7CountryO10antarcticayA2CmF");
  SWIFT_INLINE_THUNK bool isAntarctica() const;

  inline const static struct _impl_antiguaAndBarbuda {  // impl struct for case antiguaAndBarbuda
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::antiguaAndBarbuda;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } antiguaAndBarbuda SWIFT_SYMBOL("s:7BlinkID7CountryO17antiguaAndBarbudayA2CmF");
  SWIFT_INLINE_THUNK bool isAntiguaAndBarbuda() const;

  inline const static struct _impl_armenia {  // impl struct for case armenia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::armenia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } armenia SWIFT_SYMBOL("s:7BlinkID7CountryO7armeniayA2CmF");
  SWIFT_INLINE_THUNK bool isArmenia() const;

  inline const static struct _impl_aruba {  // impl struct for case aruba
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::aruba;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } aruba SWIFT_SYMBOL("s:7BlinkID7CountryO5arubayA2CmF");
  SWIFT_INLINE_THUNK bool isAruba() const;

  inline const static struct _impl_bailiwickOfGuernsey {  // impl struct for case bailiwickOfGuernsey
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bailiwickOfGuernsey;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } bailiwickOfGuernsey SWIFT_SYMBOL("s:7BlinkID7CountryO19bailiwickOfGuernseyyA2CmF");
  SWIFT_INLINE_THUNK bool isBailiwickOfGuernsey() const;

  inline const static struct _impl_bailiwickOfJersey {  // impl struct for case bailiwickOfJersey
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bailiwickOfJersey;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } bailiwickOfJersey SWIFT_SYMBOL("s:7BlinkID7CountryO17bailiwickOfJerseyyA2CmF");
  SWIFT_INLINE_THUNK bool isBailiwickOfJersey() const;

  inline const static struct _impl_barbados {  // impl struct for case barbados
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::barbados;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } barbados SWIFT_SYMBOL("s:7BlinkID7CountryO8barbadosyA2CmF");
  SWIFT_INLINE_THUNK bool isBarbados() const;

  inline const static struct _impl_belarus {  // impl struct for case belarus
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::belarus;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } belarus SWIFT_SYMBOL("s:7BlinkID7CountryO7belarusyA2CmF");
  SWIFT_INLINE_THUNK bool isBelarus() const;

  inline const static struct _impl_belize {  // impl struct for case belize
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::belize;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } belize SWIFT_SYMBOL("s:7BlinkID7CountryO6belizeyA2CmF");
  SWIFT_INLINE_THUNK bool isBelize() const;

  inline const static struct _impl_benin {  // impl struct for case benin
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::benin;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } benin SWIFT_SYMBOL("s:7BlinkID7CountryO5beninyA2CmF");
  SWIFT_INLINE_THUNK bool isBenin() const;

  inline const static struct _impl_bhutan {  // impl struct for case bhutan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bhutan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } bhutan SWIFT_SYMBOL("s:7BlinkID7CountryO6bhutanyA2CmF");
  SWIFT_INLINE_THUNK bool isBhutan() const;

  inline const static struct _impl_bonaireSaintEustatiusAndSaba {  // impl struct for case bonaireSaintEustatiusAndSaba
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bonaireSaintEustatiusAndSaba;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } bonaireSaintEustatiusAndSaba SWIFT_SYMBOL("s:7BlinkID7CountryO28bonaireSaintEustatiusAndSabayA2CmF");
  SWIFT_INLINE_THUNK bool isBonaireSaintEustatiusAndSaba() const;

  inline const static struct _impl_botswana {  // impl struct for case botswana
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::botswana;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } botswana SWIFT_SYMBOL("s:7BlinkID7CountryO8botswanayA2CmF");
  SWIFT_INLINE_THUNK bool isBotswana() const;

  inline const static struct _impl_bouvetIsland {  // impl struct for case bouvetIsland
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bouvetIsland;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } bouvetIsland SWIFT_SYMBOL("s:7BlinkID7CountryO12bouvetIslandyA2CmF");
  SWIFT_INLINE_THUNK bool isBouvetIsland() const;

  inline const static struct _impl_britishIndianOceanTerritory {  // impl struct for case britishIndianOceanTerritory
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::britishIndianOceanTerritory;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } britishIndianOceanTerritory SWIFT_SYMBOL("s:7BlinkID7CountryO27britishIndianOceanTerritoryyA2CmF");
  SWIFT_INLINE_THUNK bool isBritishIndianOceanTerritory() const;

  inline const static struct _impl_burkinaFaso {  // impl struct for case burkinaFaso
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::burkinaFaso;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } burkinaFaso SWIFT_SYMBOL("s:7BlinkID7CountryO11burkinaFasoyA2CmF");
  SWIFT_INLINE_THUNK bool isBurkinaFaso() const;

  inline const static struct _impl_burundi {  // impl struct for case burundi
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::burundi;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } burundi SWIFT_SYMBOL("s:7BlinkID7CountryO7burundiyA2CmF");
  SWIFT_INLINE_THUNK bool isBurundi() const;

  inline const static struct _impl_cameroon {  // impl struct for case cameroon
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cameroon;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } cameroon SWIFT_SYMBOL("s:7BlinkID7CountryO8cameroonyA2CmF");
  SWIFT_INLINE_THUNK bool isCameroon() const;

  inline const static struct _impl_capeVerde {  // impl struct for case capeVerde
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::capeVerde;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } capeVerde SWIFT_SYMBOL("s:7BlinkID7CountryO9capeVerdeyA2CmF");
  SWIFT_INLINE_THUNK bool isCapeVerde() const;

  inline const static struct _impl_caribbeanNetherlands {  // impl struct for case caribbeanNetherlands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::caribbeanNetherlands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } caribbeanNetherlands SWIFT_SYMBOL("s:7BlinkID7CountryO20caribbeanNetherlandsyA2CmF");
  SWIFT_INLINE_THUNK bool isCaribbeanNetherlands() const;

  inline const static struct _impl_caymanIslands {  // impl struct for case caymanIslands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::caymanIslands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } caymanIslands SWIFT_SYMBOL("s:7BlinkID7CountryO13caymanIslandsyA2CmF");
  SWIFT_INLINE_THUNK bool isCaymanIslands() const;

  inline const static struct _impl_centralAfricanRepublic {  // impl struct for case centralAfricanRepublic
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::centralAfricanRepublic;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } centralAfricanRepublic SWIFT_SYMBOL("s:7BlinkID7CountryO22centralAfricanRepublicyA2CmF");
  SWIFT_INLINE_THUNK bool isCentralAfricanRepublic() const;

  inline const static struct _impl_chad {  // impl struct for case chad
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::chad;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } chad SWIFT_SYMBOL("s:7BlinkID7CountryO4chadyA2CmF");
  SWIFT_INLINE_THUNK bool isChad() const;

  inline const static struct _impl_christmasIsland {  // impl struct for case christmasIsland
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::christmasIsland;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } christmasIsland SWIFT_SYMBOL("s:7BlinkID7CountryO15christmasIslandyA2CmF");
  SWIFT_INLINE_THUNK bool isChristmasIsland() const;

  inline const static struct _impl_cocosIslands {  // impl struct for case cocosIslands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cocosIslands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } cocosIslands SWIFT_SYMBOL("s:7BlinkID7CountryO12cocosIslandsyA2CmF");
  SWIFT_INLINE_THUNK bool isCocosIslands() const;

  inline const static struct _impl_comoros {  // impl struct for case comoros
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::comoros;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } comoros SWIFT_SYMBOL("s:7BlinkID7CountryO7comorosyA2CmF");
  SWIFT_INLINE_THUNK bool isComoros() const;

  inline const static struct _impl_congo {  // impl struct for case congo
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::congo;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } congo SWIFT_SYMBOL("s:7BlinkID7CountryO5congoyA2CmF");
  SWIFT_INLINE_THUNK bool isCongo() const;

  inline const static struct _impl_cookIslands {  // impl struct for case cookIslands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cookIslands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } cookIslands SWIFT_SYMBOL("s:7BlinkID7CountryO11cookIslandsyA2CmF");
  SWIFT_INLINE_THUNK bool isCookIslands() const;

  inline const static struct _impl_cuba {  // impl struct for case cuba
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cuba;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } cuba SWIFT_SYMBOL("s:7BlinkID7CountryO4cubayA2CmF");
  SWIFT_INLINE_THUNK bool isCuba() const;

  inline const static struct _impl_curacao {  // impl struct for case curacao
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::curacao;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } curacao SWIFT_SYMBOL("s:7BlinkID7CountryO7curacaoyA2CmF");
  SWIFT_INLINE_THUNK bool isCuracao() const;

  inline const static struct _impl_democraticRepublicOfTheCongo {  // impl struct for case democraticRepublicOfTheCongo
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::democraticRepublicOfTheCongo;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } democraticRepublicOfTheCongo SWIFT_SYMBOL("s:7BlinkID7CountryO28democraticRepublicOfTheCongoyA2CmF");
  SWIFT_INLINE_THUNK bool isDemocraticRepublicOfTheCongo() const;

  inline const static struct _impl_djibouti {  // impl struct for case djibouti
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::djibouti;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } djibouti SWIFT_SYMBOL("s:7BlinkID7CountryO8djiboutiyA2CmF");
  SWIFT_INLINE_THUNK bool isDjibouti() const;

  inline const static struct _impl_dominica {  // impl struct for case dominica
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dominica;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } dominica SWIFT_SYMBOL("s:7BlinkID7CountryO8dominicayA2CmF");
  SWIFT_INLINE_THUNK bool isDominica() const;

  inline const static struct _impl_eastTimor {  // impl struct for case eastTimor
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::eastTimor;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } eastTimor SWIFT_SYMBOL("s:7BlinkID7CountryO9eastTimoryA2CmF");
  SWIFT_INLINE_THUNK bool isEastTimor() const;

  inline const static struct _impl_equatorialGuinea {  // impl struct for case equatorialGuinea
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::equatorialGuinea;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } equatorialGuinea SWIFT_SYMBOL("s:7BlinkID7CountryO16equatorialGuineayA2CmF");
  SWIFT_INLINE_THUNK bool isEquatorialGuinea() const;

  inline const static struct _impl_eritrea {  // impl struct for case eritrea
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::eritrea;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } eritrea SWIFT_SYMBOL("s:7BlinkID7CountryO7eritreayA2CmF");
  SWIFT_INLINE_THUNK bool isEritrea() const;

  inline const static struct _impl_ethiopia {  // impl struct for case ethiopia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ethiopia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } ethiopia SWIFT_SYMBOL("s:7BlinkID7CountryO8ethiopiayA2CmF");
  SWIFT_INLINE_THUNK bool isEthiopia() const;

  inline const static struct _impl_falklandIslands {  // impl struct for case falklandIslands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::falklandIslands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } falklandIslands SWIFT_SYMBOL("s:7BlinkID7CountryO15falklandIslandsyA2CmF");
  SWIFT_INLINE_THUNK bool isFalklandIslands() const;

  inline const static struct _impl_faroeIslands {  // impl struct for case faroeIslands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::faroeIslands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } faroeIslands SWIFT_SYMBOL("s:7BlinkID7CountryO12faroeIslandsyA2CmF");
  SWIFT_INLINE_THUNK bool isFaroeIslands() const;

  inline const static struct _impl_federatedStatesOfMicronesia {  // impl struct for case federatedStatesOfMicronesia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::federatedStatesOfMicronesia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } federatedStatesOfMicronesia SWIFT_SYMBOL("s:7BlinkID7CountryO27federatedStatesOfMicronesiayA2CmF");
  SWIFT_INLINE_THUNK bool isFederatedStatesOfMicronesia() const;

  inline const static struct _impl_fiji {  // impl struct for case fiji
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::fiji;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } fiji SWIFT_SYMBOL("s:7BlinkID7CountryO4fijiyA2CmF");
  SWIFT_INLINE_THUNK bool isFiji() const;

  inline const static struct _impl_frenchGuiana {  // impl struct for case frenchGuiana
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::frenchGuiana;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } frenchGuiana SWIFT_SYMBOL("s:7BlinkID7CountryO12frenchGuianayA2CmF");
  SWIFT_INLINE_THUNK bool isFrenchGuiana() const;

  inline const static struct _impl_frenchPolynesia {  // impl struct for case frenchPolynesia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::frenchPolynesia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } frenchPolynesia SWIFT_SYMBOL("s:7BlinkID7CountryO15frenchPolynesiayA2CmF");
  SWIFT_INLINE_THUNK bool isFrenchPolynesia() const;

  inline const static struct _impl_frenchSouthernTerritories {  // impl struct for case frenchSouthernTerritories
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::frenchSouthernTerritories;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } frenchSouthernTerritories SWIFT_SYMBOL("s:7BlinkID7CountryO25frenchSouthernTerritoriesyA2CmF");
  SWIFT_INLINE_THUNK bool isFrenchSouthernTerritories() const;

  inline const static struct _impl_gabon {  // impl struct for case gabon
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::gabon;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } gabon SWIFT_SYMBOL("s:7BlinkID7CountryO5gabonyA2CmF");
  SWIFT_INLINE_THUNK bool isGabon() const;

  inline const static struct _impl_gambia {  // impl struct for case gambia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::gambia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } gambia SWIFT_SYMBOL("s:7BlinkID7CountryO6gambiayA2CmF");
  SWIFT_INLINE_THUNK bool isGambia() const;

  inline const static struct _impl_gibraltar {  // impl struct for case gibraltar
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::gibraltar;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } gibraltar SWIFT_SYMBOL("s:7BlinkID7CountryO9gibraltaryA2CmF");
  SWIFT_INLINE_THUNK bool isGibraltar() const;

  inline const static struct _impl_greenland {  // impl struct for case greenland
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::greenland;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } greenland SWIFT_SYMBOL("s:7BlinkID7CountryO9greenlandyA2CmF");
  SWIFT_INLINE_THUNK bool isGreenland() const;

  inline const static struct _impl_grenada {  // impl struct for case grenada
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::grenada;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } grenada SWIFT_SYMBOL("s:7BlinkID7CountryO7grenadayA2CmF");
  SWIFT_INLINE_THUNK bool isGrenada() const;

  inline const static struct _impl_guadeloupe {  // impl struct for case guadeloupe
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::guadeloupe;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } guadeloupe SWIFT_SYMBOL("s:7BlinkID7CountryO10guadeloupeyA2CmF");
  SWIFT_INLINE_THUNK bool isGuadeloupe() const;

  inline const static struct _impl_guam {  // impl struct for case guam
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::guam;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } guam SWIFT_SYMBOL("s:7BlinkID7CountryO4guamyA2CmF");
  SWIFT_INLINE_THUNK bool isGuam() const;

  inline const static struct _impl_guinea {  // impl struct for case guinea
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::guinea;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } guinea SWIFT_SYMBOL("s:7BlinkID7CountryO6guineayA2CmF");
  SWIFT_INLINE_THUNK bool isGuinea() const;

  inline const static struct _impl_guineaBissau {  // impl struct for case guineaBissau
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::guineaBissau;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } guineaBissau SWIFT_SYMBOL("s:7BlinkID7CountryO12guineaBissauyA2CmF");
  SWIFT_INLINE_THUNK bool isGuineaBissau() const;

  inline const static struct _impl_guyana {  // impl struct for case guyana
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::guyana;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } guyana SWIFT_SYMBOL("s:7BlinkID7CountryO6guyanayA2CmF");
  SWIFT_INLINE_THUNK bool isGuyana() const;

  inline const static struct _impl_heardIslandAndMcdonaldIslands {  // impl struct for case heardIslandAndMcdonaldIslands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::heardIslandAndMcdonaldIslands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } heardIslandAndMcdonaldIslands SWIFT_SYMBOL("s:7BlinkID7CountryO29heardIslandAndMcdonaldIslandsyA2CmF");
  SWIFT_INLINE_THUNK bool isHeardIslandAndMcdonaldIslands() const;

  inline const static struct _impl_iran {  // impl struct for case iran
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::iran;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } iran SWIFT_SYMBOL("s:7BlinkID7CountryO4iranyA2CmF");
  SWIFT_INLINE_THUNK bool isIran() const;

  inline const static struct _impl_iraq {  // impl struct for case iraq
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::iraq;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } iraq SWIFT_SYMBOL("s:7BlinkID7CountryO4iraqyA2CmF");
  SWIFT_INLINE_THUNK bool isIraq() const;

  inline const static struct _impl_isleOfMan {  // impl struct for case isleOfMan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::isleOfMan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } isleOfMan SWIFT_SYMBOL("s:7BlinkID7CountryO9isleOfManyA2CmF");
  SWIFT_INLINE_THUNK bool isIsleOfMan() const;

  inline const static struct _impl_ivoryCoast {  // impl struct for case ivoryCoast
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ivoryCoast;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } ivoryCoast SWIFT_SYMBOL("s:7BlinkID7CountryO10ivoryCoastyA2CmF");
  SWIFT_INLINE_THUNK bool isIvoryCoast() const;

  inline const static struct _impl_jamaica {  // impl struct for case jamaica
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::jamaica;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } jamaica SWIFT_SYMBOL("s:7BlinkID7CountryO7jamaicayA2CmF");
  SWIFT_INLINE_THUNK bool isJamaica() const;

  inline const static struct _impl_kiribati {  // impl struct for case kiribati
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::kiribati;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } kiribati SWIFT_SYMBOL("s:7BlinkID7CountryO8kiribatiyA2CmF");
  SWIFT_INLINE_THUNK bool isKiribati() const;

  inline const static struct _impl_kyrgyzstan {  // impl struct for case kyrgyzstan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::kyrgyzstan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } kyrgyzstan SWIFT_SYMBOL("s:7BlinkID7CountryO10kyrgyzstanyA2CmF");
  SWIFT_INLINE_THUNK bool isKyrgyzstan() const;

  inline const static struct _impl_laos {  // impl struct for case laos
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::laos;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } laos SWIFT_SYMBOL("s:7BlinkID7CountryO4laosyA2CmF");
  SWIFT_INLINE_THUNK bool isLaos() const;

  inline const static struct _impl_lebanon {  // impl struct for case lebanon
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::lebanon;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } lebanon SWIFT_SYMBOL("s:7BlinkID7CountryO7lebanonyA2CmF");
  SWIFT_INLINE_THUNK bool isLebanon() const;

  inline const static struct _impl_lesotho {  // impl struct for case lesotho
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::lesotho;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } lesotho SWIFT_SYMBOL("s:7BlinkID7CountryO7lesothoyA2CmF");
  SWIFT_INLINE_THUNK bool isLesotho() const;

  inline const static struct _impl_liberia {  // impl struct for case liberia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::liberia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } liberia SWIFT_SYMBOL("s:7BlinkID7CountryO7liberiayA2CmF");
  SWIFT_INLINE_THUNK bool isLiberia() const;

  inline const static struct _impl_libya {  // impl struct for case libya
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::libya;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } libya SWIFT_SYMBOL("s:7BlinkID7CountryO5libyayA2CmF");
  SWIFT_INLINE_THUNK bool isLibya() const;

  inline const static struct _impl_liechtenstein {  // impl struct for case liechtenstein
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::liechtenstein;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } liechtenstein SWIFT_SYMBOL("s:7BlinkID7CountryO13liechtensteinyA2CmF");
  SWIFT_INLINE_THUNK bool isLiechtenstein() const;

  inline const static struct _impl_macau {  // impl struct for case macau
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::macau;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } macau SWIFT_SYMBOL("s:7BlinkID7CountryO5macauyA2CmF");
  SWIFT_INLINE_THUNK bool isMacau() const;

  inline const static struct _impl_madagascar {  // impl struct for case madagascar
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::madagascar;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } madagascar SWIFT_SYMBOL("s:7BlinkID7CountryO10madagascaryA2CmF");
  SWIFT_INLINE_THUNK bool isMadagascar() const;

  inline const static struct _impl_malawi {  // impl struct for case malawi
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::malawi;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } malawi SWIFT_SYMBOL("s:7BlinkID7CountryO6malawiyA2CmF");
  SWIFT_INLINE_THUNK bool isMalawi() const;

  inline const static struct _impl_mali {  // impl struct for case mali
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mali;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } mali SWIFT_SYMBOL("s:7BlinkID7CountryO4maliyA2CmF");
  SWIFT_INLINE_THUNK bool isMali() const;

  inline const static struct _impl_marshallIslands {  // impl struct for case marshallIslands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::marshallIslands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } marshallIslands SWIFT_SYMBOL("s:7BlinkID7CountryO15marshallIslandsyA2CmF");
  SWIFT_INLINE_THUNK bool isMarshallIslands() const;

  inline const static struct _impl_martinique {  // impl struct for case martinique
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::martinique;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } martinique SWIFT_SYMBOL("s:7BlinkID7CountryO10martiniqueyA2CmF");
  SWIFT_INLINE_THUNK bool isMartinique() const;

  inline const static struct _impl_mauritania {  // impl struct for case mauritania
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mauritania;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } mauritania SWIFT_SYMBOL("s:7BlinkID7CountryO10mauritaniayA2CmF");
  SWIFT_INLINE_THUNK bool isMauritania() const;

  inline const static struct _impl_mayotte {  // impl struct for case mayotte
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mayotte;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } mayotte SWIFT_SYMBOL("s:7BlinkID7CountryO7mayotteyA2CmF");
  SWIFT_INLINE_THUNK bool isMayotte() const;

  inline const static struct _impl_moldova {  // impl struct for case moldova
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::moldova;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } moldova SWIFT_SYMBOL("s:7BlinkID7CountryO7moldovayA2CmF");
  SWIFT_INLINE_THUNK bool isMoldova() const;

  inline const static struct _impl_monaco {  // impl struct for case monaco
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::monaco;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } monaco SWIFT_SYMBOL("s:7BlinkID7CountryO6monacoyA2CmF");
  SWIFT_INLINE_THUNK bool isMonaco() const;

  inline const static struct _impl_mongolia {  // impl struct for case mongolia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mongolia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } mongolia SWIFT_SYMBOL("s:7BlinkID7CountryO8mongoliayA2CmF");
  SWIFT_INLINE_THUNK bool isMongolia() const;

  inline const static struct _impl_montserrat {  // impl struct for case montserrat
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::montserrat;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } montserrat SWIFT_SYMBOL("s:7BlinkID7CountryO10montserratyA2CmF");
  SWIFT_INLINE_THUNK bool isMontserrat() const;

  inline const static struct _impl_mozambique {  // impl struct for case mozambique
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mozambique;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } mozambique SWIFT_SYMBOL("s:7BlinkID7CountryO10mozambiqueyA2CmF");
  SWIFT_INLINE_THUNK bool isMozambique() const;

  inline const static struct _impl_myanmar {  // impl struct for case myanmar
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::myanmar;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } myanmar SWIFT_SYMBOL("s:7BlinkID7CountryO7myanmaryA2CmF");
  SWIFT_INLINE_THUNK bool isMyanmar() const;

  inline const static struct _impl_namibia {  // impl struct for case namibia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::namibia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } namibia SWIFT_SYMBOL("s:7BlinkID7CountryO7namibiayA2CmF");
  SWIFT_INLINE_THUNK bool isNamibia() const;

  inline const static struct _impl_nauru {  // impl struct for case nauru
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nauru;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } nauru SWIFT_SYMBOL("s:7BlinkID7CountryO5nauruyA2CmF");
  SWIFT_INLINE_THUNK bool isNauru() const;

  inline const static struct _impl_nepal {  // impl struct for case nepal
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nepal;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } nepal SWIFT_SYMBOL("s:7BlinkID7CountryO5nepalyA2CmF");
  SWIFT_INLINE_THUNK bool isNepal() const;

  inline const static struct _impl_newCaledonia {  // impl struct for case newCaledonia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::newCaledonia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } newCaledonia SWIFT_SYMBOL("s:7BlinkID7CountryO12newCaledoniayA2CmF");
  SWIFT_INLINE_THUNK bool isNewCaledonia() const;

  inline const static struct _impl_niger {  // impl struct for case niger
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::niger;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } niger SWIFT_SYMBOL("s:7BlinkID7CountryO5nigeryA2CmF");
  SWIFT_INLINE_THUNK bool isNiger() const;

  inline const static struct _impl_niue {  // impl struct for case niue
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::niue;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } niue SWIFT_SYMBOL("s:7BlinkID7CountryO4niueyA2CmF");
  SWIFT_INLINE_THUNK bool isNiue() const;

  inline const static struct _impl_norfolkIsland {  // impl struct for case norfolkIsland
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::norfolkIsland;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } norfolkIsland SWIFT_SYMBOL("s:7BlinkID7CountryO13norfolkIslandyA2CmF");
  SWIFT_INLINE_THUNK bool isNorfolkIsland() const;

  inline const static struct _impl_northernCyprus {  // impl struct for case northernCyprus
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::northernCyprus;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } northernCyprus SWIFT_SYMBOL("s:7BlinkID7CountryO14northernCyprusyA2CmF");
  SWIFT_INLINE_THUNK bool isNorthernCyprus() const;

  inline const static struct _impl_northernMarianaIslands {  // impl struct for case northernMarianaIslands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::northernMarianaIslands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } northernMarianaIslands SWIFT_SYMBOL("s:7BlinkID7CountryO22northernMarianaIslandsyA2CmF");
  SWIFT_INLINE_THUNK bool isNorthernMarianaIslands() const;

  inline const static struct _impl_northKorea {  // impl struct for case northKorea
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::northKorea;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } northKorea SWIFT_SYMBOL("s:7BlinkID7CountryO10northKoreayA2CmF");
  SWIFT_INLINE_THUNK bool isNorthKorea() const;

  inline const static struct _impl_northMacedonia {  // impl struct for case northMacedonia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::northMacedonia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } northMacedonia SWIFT_SYMBOL("s:7BlinkID7CountryO14northMacedoniayA2CmF");
  SWIFT_INLINE_THUNK bool isNorthMacedonia() const;

  inline const static struct _impl_palau {  // impl struct for case palau
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::palau;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } palau SWIFT_SYMBOL("s:7BlinkID7CountryO5palauyA2CmF");
  SWIFT_INLINE_THUNK bool isPalau() const;

  inline const static struct _impl_palestine {  // impl struct for case palestine
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::palestine;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } palestine SWIFT_SYMBOL("s:7BlinkID7CountryO9palestineyA2CmF");
  SWIFT_INLINE_THUNK bool isPalestine() const;

  inline const static struct _impl_papuaNewGuinea {  // impl struct for case papuaNewGuinea
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::papuaNewGuinea;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } papuaNewGuinea SWIFT_SYMBOL("s:7BlinkID7CountryO14papuaNewGuineayA2CmF");
  SWIFT_INLINE_THUNK bool isPapuaNewGuinea() const;

  inline const static struct _impl_pitcairn {  // impl struct for case pitcairn
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::pitcairn;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } pitcairn SWIFT_SYMBOL("s:7BlinkID7CountryO8pitcairnyA2CmF");
  SWIFT_INLINE_THUNK bool isPitcairn() const;

  inline const static struct _impl_reunion {  // impl struct for case reunion
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::reunion;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } reunion SWIFT_SYMBOL("s:7BlinkID7CountryO7reunionyA2CmF");
  SWIFT_INLINE_THUNK bool isReunion() const;

  inline const static struct _impl_rwanda {  // impl struct for case rwanda
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::rwanda;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } rwanda SWIFT_SYMBOL("s:7BlinkID7CountryO6rwandayA2CmF");
  SWIFT_INLINE_THUNK bool isRwanda() const;

  inline const static struct _impl_saintBarthelemy {  // impl struct for case saintBarthelemy
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::saintBarthelemy;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } saintBarthelemy SWIFT_SYMBOL("s:7BlinkID7CountryO15saintBarthelemyyA2CmF");
  SWIFT_INLINE_THUNK bool isSaintBarthelemy() const;

  inline const static struct _impl_saintHelenaAscensionAndTristianDaCunha {  // impl struct for case saintHelenaAscensionAndTristianDaCunha
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::saintHelenaAscensionAndTristianDaCunha;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } saintHelenaAscensionAndTristianDaCunha SWIFT_SYMBOL("s:7BlinkID7CountryO38saintHelenaAscensionAndTristianDaCunhayA2CmF");
  SWIFT_INLINE_THUNK bool isSaintHelenaAscensionAndTristianDaCunha() const;

  inline const static struct _impl_saintKittsAndNevis {  // impl struct for case saintKittsAndNevis
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::saintKittsAndNevis;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } saintKittsAndNevis SWIFT_SYMBOL("s:7BlinkID7CountryO18saintKittsAndNevisyA2CmF");
  SWIFT_INLINE_THUNK bool isSaintKittsAndNevis() const;

  inline const static struct _impl_saintLucia {  // impl struct for case saintLucia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::saintLucia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } saintLucia SWIFT_SYMBOL("s:7BlinkID7CountryO10saintLuciayA2CmF");
  SWIFT_INLINE_THUNK bool isSaintLucia() const;

  inline const static struct _impl_saintMartin {  // impl struct for case saintMartin
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::saintMartin;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } saintMartin SWIFT_SYMBOL("s:7BlinkID7CountryO11saintMartinyA2CmF");
  SWIFT_INLINE_THUNK bool isSaintMartin() const;

  inline const static struct _impl_saintPierreAndMiquelon {  // impl struct for case saintPierreAndMiquelon
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::saintPierreAndMiquelon;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } saintPierreAndMiquelon SWIFT_SYMBOL("s:7BlinkID7CountryO22saintPierreAndMiquelonyA2CmF");
  SWIFT_INLINE_THUNK bool isSaintPierreAndMiquelon() const;

  inline const static struct _impl_saintVincentAndTheGrenadines {  // impl struct for case saintVincentAndTheGrenadines
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::saintVincentAndTheGrenadines;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } saintVincentAndTheGrenadines SWIFT_SYMBOL("s:7BlinkID7CountryO28saintVincentAndTheGrenadinesyA2CmF");
  SWIFT_INLINE_THUNK bool isSaintVincentAndTheGrenadines() const;

  inline const static struct _impl_samoa {  // impl struct for case samoa
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::samoa;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } samoa SWIFT_SYMBOL("s:7BlinkID7CountryO5samoayA2CmF");
  SWIFT_INLINE_THUNK bool isSamoa() const;

  inline const static struct _impl_sanMarino {  // impl struct for case sanMarino
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sanMarino;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } sanMarino SWIFT_SYMBOL("s:7BlinkID7CountryO9sanMarinoyA2CmF");
  SWIFT_INLINE_THUNK bool isSanMarino() const;

  inline const static struct _impl_saoTomeAndPrincipe {  // impl struct for case saoTomeAndPrincipe
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::saoTomeAndPrincipe;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } saoTomeAndPrincipe SWIFT_SYMBOL("s:7BlinkID7CountryO18saoTomeAndPrincipeyA2CmF");
  SWIFT_INLINE_THUNK bool isSaoTomeAndPrincipe() const;

  inline const static struct _impl_senegal {  // impl struct for case senegal
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::senegal;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } senegal SWIFT_SYMBOL("s:7BlinkID7CountryO7senegalyA2CmF");
  SWIFT_INLINE_THUNK bool isSenegal() const;

  inline const static struct _impl_seychelles {  // impl struct for case seychelles
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::seychelles;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } seychelles SWIFT_SYMBOL("s:7BlinkID7CountryO10seychellesyA2CmF");
  SWIFT_INLINE_THUNK bool isSeychelles() const;

  inline const static struct _impl_sierraLeone {  // impl struct for case sierraLeone
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sierraLeone;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } sierraLeone SWIFT_SYMBOL("s:7BlinkID7CountryO11sierraLeoneyA2CmF");
  SWIFT_INLINE_THUNK bool isSierraLeone() const;

  inline const static struct _impl_sintMaarten {  // impl struct for case sintMaarten
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sintMaarten;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } sintMaarten SWIFT_SYMBOL("s:7BlinkID7CountryO11sintMaartenyA2CmF");
  SWIFT_INLINE_THUNK bool isSintMaarten() const;

  inline const static struct _impl_solomonIslands {  // impl struct for case solomonIslands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::solomonIslands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } solomonIslands SWIFT_SYMBOL("s:7BlinkID7CountryO14solomonIslandsyA2CmF");
  SWIFT_INLINE_THUNK bool isSolomonIslands() const;

  inline const static struct _impl_somalia {  // impl struct for case somalia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::somalia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } somalia SWIFT_SYMBOL("s:7BlinkID7CountryO7somaliayA2CmF");
  SWIFT_INLINE_THUNK bool isSomalia() const;

  inline const static struct _impl_southGeorgiaAndTheSouthSandwichIslands {  // impl struct for case southGeorgiaAndTheSouthSandwichIslands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::southGeorgiaAndTheSouthSandwichIslands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } southGeorgiaAndTheSouthSandwichIslands SWIFT_SYMBOL("s:7BlinkID7CountryO38southGeorgiaAndTheSouthSandwichIslandsyA2CmF");
  SWIFT_INLINE_THUNK bool isSouthGeorgiaAndTheSouthSandwichIslands() const;

  inline const static struct _impl_southSudan {  // impl struct for case southSudan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::southSudan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } southSudan SWIFT_SYMBOL("s:7BlinkID7CountryO10southSudanyA2CmF");
  SWIFT_INLINE_THUNK bool isSouthSudan() const;

  inline const static struct _impl_sudan {  // impl struct for case sudan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sudan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } sudan SWIFT_SYMBOL("s:7BlinkID7CountryO5sudanyA2CmF");
  SWIFT_INLINE_THUNK bool isSudan() const;

  inline const static struct _impl_suriname {  // impl struct for case suriname
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::suriname;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } suriname SWIFT_SYMBOL("s:7BlinkID7CountryO8surinameyA2CmF");
  SWIFT_INLINE_THUNK bool isSuriname() const;

  inline const static struct _impl_svalbardAndJanMayen {  // impl struct for case svalbardAndJanMayen
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::svalbardAndJanMayen;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } svalbardAndJanMayen SWIFT_SYMBOL("s:7BlinkID7CountryO19svalbardAndJanMayenyA2CmF");
  SWIFT_INLINE_THUNK bool isSvalbardAndJanMayen() const;

  inline const static struct _impl_eswatini {  // impl struct for case eswatini
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::eswatini;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } eswatini SWIFT_SYMBOL("s:7BlinkID7CountryO8eswatiniyA2CmF");
  SWIFT_INLINE_THUNK bool isEswatini() const;

  inline const static struct _impl_syria {  // impl struct for case syria
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::syria;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } syria SWIFT_SYMBOL("s:7BlinkID7CountryO5syriayA2CmF");
  SWIFT_INLINE_THUNK bool isSyria() const;

  inline const static struct _impl_tajikistan {  // impl struct for case tajikistan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tajikistan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } tajikistan SWIFT_SYMBOL("s:7BlinkID7CountryO10tajikistanyA2CmF");
  SWIFT_INLINE_THUNK bool isTajikistan() const;

  inline const static struct _impl_tanzania {  // impl struct for case tanzania
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tanzania;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } tanzania SWIFT_SYMBOL("s:7BlinkID7CountryO8tanzaniayA2CmF");
  SWIFT_INLINE_THUNK bool isTanzania() const;

  inline const static struct _impl_togo {  // impl struct for case togo
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::togo;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } togo SWIFT_SYMBOL("s:7BlinkID7CountryO4togoyA2CmF");
  SWIFT_INLINE_THUNK bool isTogo() const;

  inline const static struct _impl_tokelau {  // impl struct for case tokelau
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tokelau;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } tokelau SWIFT_SYMBOL("s:7BlinkID7CountryO7tokelauyA2CmF");
  SWIFT_INLINE_THUNK bool isTokelau() const;

  inline const static struct _impl_tonga {  // impl struct for case tonga
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tonga;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } tonga SWIFT_SYMBOL("s:7BlinkID7CountryO5tongayA2CmF");
  SWIFT_INLINE_THUNK bool isTonga() const;

  inline const static struct _impl_trinidadAndTobago {  // impl struct for case trinidadAndTobago
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::trinidadAndTobago;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } trinidadAndTobago SWIFT_SYMBOL("s:7BlinkID7CountryO17trinidadAndTobagoyA2CmF");
  SWIFT_INLINE_THUNK bool isTrinidadAndTobago() const;

  inline const static struct _impl_turkmenistan {  // impl struct for case turkmenistan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::turkmenistan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } turkmenistan SWIFT_SYMBOL("s:7BlinkID7CountryO12turkmenistanyA2CmF");
  SWIFT_INLINE_THUNK bool isTurkmenistan() const;

  inline const static struct _impl_turksAndCaicosIslands {  // impl struct for case turksAndCaicosIslands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::turksAndCaicosIslands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } turksAndCaicosIslands SWIFT_SYMBOL("s:7BlinkID7CountryO21turksAndCaicosIslandsyA2CmF");
  SWIFT_INLINE_THUNK bool isTurksAndCaicosIslands() const;

  inline const static struct _impl_tuvalu {  // impl struct for case tuvalu
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tuvalu;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } tuvalu SWIFT_SYMBOL("s:7BlinkID7CountryO6tuvaluyA2CmF");
  SWIFT_INLINE_THUNK bool isTuvalu() const;

  inline const static struct _impl_unitedStatesMinorOutlyingIslands {  // impl struct for case unitedStatesMinorOutlyingIslands
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unitedStatesMinorOutlyingIslands;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } unitedStatesMinorOutlyingIslands SWIFT_SYMBOL("s:7BlinkID7CountryO32unitedStatesMinorOutlyingIslandsyA2CmF");
  SWIFT_INLINE_THUNK bool isUnitedStatesMinorOutlyingIslands() const;

  inline const static struct _impl_uzbekistan {  // impl struct for case uzbekistan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::uzbekistan;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } uzbekistan SWIFT_SYMBOL("s:7BlinkID7CountryO10uzbekistanyA2CmF");
  SWIFT_INLINE_THUNK bool isUzbekistan() const;

  inline const static struct _impl_vanuatu {  // impl struct for case vanuatu
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::vanuatu;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } vanuatu SWIFT_SYMBOL("s:7BlinkID7CountryO7vanuatuyA2CmF");
  SWIFT_INLINE_THUNK bool isVanuatu() const;

  inline const static struct _impl_vaticanCity {  // impl struct for case vaticanCity
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::vaticanCity;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } vaticanCity SWIFT_SYMBOL("s:7BlinkID7CountryO11vaticanCityyA2CmF");
  SWIFT_INLINE_THUNK bool isVaticanCity() const;

  inline const static struct _impl_virginIslandsBritish {  // impl struct for case virginIslandsBritish
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::virginIslandsBritish;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } virginIslandsBritish SWIFT_SYMBOL("s:7BlinkID7CountryO20virginIslandsBritishyA2CmF");
  SWIFT_INLINE_THUNK bool isVirginIslandsBritish() const;

  inline const static struct _impl_virginIslandsUs {  // impl struct for case virginIslandsUs
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::virginIslandsUs;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } virginIslandsUs SWIFT_SYMBOL("s:7BlinkID7CountryO15virginIslandsUsyA2CmF");
  SWIFT_INLINE_THUNK bool isVirginIslandsUs() const;

  inline const static struct _impl_wallisAndFutuna {  // impl struct for case wallisAndFutuna
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::wallisAndFutuna;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } wallisAndFutuna SWIFT_SYMBOL("s:7BlinkID7CountryO15wallisAndFutunayA2CmF");
  SWIFT_INLINE_THUNK bool isWallisAndFutuna() const;

  inline const static struct _impl_westernSahara {  // impl struct for case westernSahara
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::westernSahara;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } westernSahara SWIFT_SYMBOL("s:7BlinkID7CountryO13westernSaharayA2CmF");
  SWIFT_INLINE_THUNK bool isWesternSahara() const;

  inline const static struct _impl_yemen {  // impl struct for case yemen
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::yemen;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } yemen SWIFT_SYMBOL("s:7BlinkID7CountryO5yemenyA2CmF");
  SWIFT_INLINE_THUNK bool isYemen() const;

  inline const static struct _impl_yugoslavia {  // impl struct for case yugoslavia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::yugoslavia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } yugoslavia SWIFT_SYMBOL("s:7BlinkID7CountryO10yugoslaviayA2CmF");
  SWIFT_INLINE_THUNK bool isYugoslavia() const;

  inline const static struct _impl_zambia {  // impl struct for case zambia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::zambia;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } zambia SWIFT_SYMBOL("s:7BlinkID7CountryO6zambiayA2CmF");
  SWIFT_INLINE_THUNK bool isZambia() const;

  inline const static struct _impl_zimbabwe {  // impl struct for case zimbabwe
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::zimbabwe;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } zimbabwe SWIFT_SYMBOL("s:7BlinkID7CountryO8zimbabweyA2CmF");
  SWIFT_INLINE_THUNK bool isZimbabwe() const;

  inline const static struct _impl_schengen_area {  // impl struct for case schengen_area
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::schengen_area;
    }
    SWIFT_INLINE_THUNK Country operator()() const;
  } schengen_area SWIFT_SYMBOL("s:7BlinkID7CountryO13schengen_areayA2CmF");
  SWIFT_INLINE_THUNK bool isSchengen_area() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID7CountryO4noneyA2CmFWC) return cases::none;
    if (tag == _impl::$s7BlinkID7CountryO7albaniayA2CmFWC) return cases::albania;
    if (tag == _impl::$s7BlinkID7CountryO7algeriayA2CmFWC) return cases::algeria;
    if (tag == _impl::$s7BlinkID7CountryO9argentinayA2CmFWC) return cases::argentina;
    if (tag == _impl::$s7BlinkID7CountryO9australiayA2CmFWC) return cases::australia;
    if (tag == _impl::$s7BlinkID7CountryO7austriayA2CmFWC) return cases::austria;
    if (tag == _impl::$s7BlinkID7CountryO10azerbaijanyA2CmFWC) return cases::azerbaijan;
    if (tag == _impl::$s7BlinkID7CountryO7bahrainyA2CmFWC) return cases::bahrain;
    if (tag == _impl::$s7BlinkID7CountryO10bangladeshyA2CmFWC) return cases::bangladesh;
    if (tag == _impl::$s7BlinkID7CountryO7belgiumyA2CmFWC) return cases::belgium;
    if (tag == _impl::$s7BlinkID7CountryO20bosniaAndHerzegovinayA2CmFWC) return cases::bosniaAndHerzegovina;
    if (tag == _impl::$s7BlinkID7CountryO6bruneiyA2CmFWC) return cases::brunei;
    if (tag == _impl::$s7BlinkID7CountryO8bulgariayA2CmFWC) return cases::bulgaria;
    if (tag == _impl::$s7BlinkID7CountryO8cambodiayA2CmFWC) return cases::cambodia;
    if (tag == _impl::$s7BlinkID7CountryO6canadayA2CmFWC) return cases::canada;
    if (tag == _impl::$s7BlinkID7CountryO5chileyA2CmFWC) return cases::chile;
    if (tag == _impl::$s7BlinkID7CountryO8colombiayA2CmFWC) return cases::colombia;
    if (tag == _impl::$s7BlinkID7CountryO9costaRicayA2CmFWC) return cases::costaRica;
    if (tag == _impl::$s7BlinkID7CountryO7croatiayA2CmFWC) return cases::croatia;
    if (tag == _impl::$s7BlinkID7CountryO6cyprusyA2CmFWC) return cases::cyprus;
    if (tag == _impl::$s7BlinkID7CountryO7czechiayA2CmFWC) return cases::czechia;
    if (tag == _impl::$s7BlinkID7CountryO7denmarkyA2CmFWC) return cases::denmark;
    if (tag == _impl::$s7BlinkID7CountryO17dominicanRepublicyA2CmFWC) return cases::dominicanRepublic;
    if (tag == _impl::$s7BlinkID7CountryO5egyptyA2CmFWC) return cases::egypt;
    if (tag == _impl::$s7BlinkID7CountryO7estoniayA2CmFWC) return cases::estonia;
    if (tag == _impl::$s7BlinkID7CountryO7finlandyA2CmFWC) return cases::finland;
    if (tag == _impl::$s7BlinkID7CountryO6franceyA2CmFWC) return cases::france;
    if (tag == _impl::$s7BlinkID7CountryO7georgiayA2CmFWC) return cases::georgia;
    if (tag == _impl::$s7BlinkID7CountryO7germanyyA2CmFWC) return cases::germany;
    if (tag == _impl::$s7BlinkID7CountryO5ghanayA2CmFWC) return cases::ghana;
    if (tag == _impl::$s7BlinkID7CountryO6greeceyA2CmFWC) return cases::greece;
    if (tag == _impl::$s7BlinkID7CountryO9guatemalayA2CmFWC) return cases::guatemala;
    if (tag == _impl::$s7BlinkID7CountryO8hongKongyA2CmFWC) return cases::hongKong;
    if (tag == _impl::$s7BlinkID7CountryO7hungaryyA2CmFWC) return cases::hungary;
    if (tag == _impl::$s7BlinkID7CountryO5indiayA2CmFWC) return cases::india;
    if (tag == _impl::$s7BlinkID7CountryO9indonesiayA2CmFWC) return cases::indonesia;
    if (tag == _impl::$s7BlinkID7CountryO7irelandyA2CmFWC) return cases::ireland;
    if (tag == _impl::$s7BlinkID7CountryO6israelyA2CmFWC) return cases::israel;
    if (tag == _impl::$s7BlinkID7CountryO5italyyA2CmFWC) return cases::italy;
    if (tag == _impl::$s7BlinkID7CountryO6jordanyA2CmFWC) return cases::jordan;
    if (tag == _impl::$s7BlinkID7CountryO10kazakhstanyA2CmFWC) return cases::kazakhstan;
    if (tag == _impl::$s7BlinkID7CountryO5kenyayA2CmFWC) return cases::kenya;
    if (tag == _impl::$s7BlinkID7CountryO6kosovoyA2CmFWC) return cases::kosovo;
    if (tag == _impl::$s7BlinkID7CountryO6kuwaityA2CmFWC) return cases::kuwait;
    if (tag == _impl::$s7BlinkID7CountryO6latviayA2CmFWC) return cases::latvia;
    if (tag == _impl::$s7BlinkID7CountryO9lithuaniayA2CmFWC) return cases::lithuania;
    if (tag == _impl::$s7BlinkID7CountryO8malaysiayA2CmFWC) return cases::malaysia;
    if (tag == _impl::$s7BlinkID7CountryO8maldivesyA2CmFWC) return cases::maldives;
    if (tag == _impl::$s7BlinkID7CountryO5maltayA2CmFWC) return cases::malta;
    if (tag == _impl::$s7BlinkID7CountryO9mauritiusyA2CmFWC) return cases::mauritius;
    if (tag == _impl::$s7BlinkID7CountryO6mexicoyA2CmFWC) return cases::mexico;
    if (tag == _impl::$s7BlinkID7CountryO7moroccoyA2CmFWC) return cases::morocco;
    if (tag == _impl::$s7BlinkID7CountryO11netherlandsyA2CmFWC) return cases::netherlands;
    if (tag == _impl::$s7BlinkID7CountryO10newZealandyA2CmFWC) return cases::newZealand;
    if (tag == _impl::$s7BlinkID7CountryO7nigeriayA2CmFWC) return cases::nigeria;
    if (tag == _impl::$s7BlinkID7CountryO8pakistanyA2CmFWC) return cases::pakistan;
    if (tag == _impl::$s7BlinkID7CountryO6panamayA2CmFWC) return cases::panama;
    if (tag == _impl::$s7BlinkID7CountryO8paraguayyA2CmFWC) return cases::paraguay;
    if (tag == _impl::$s7BlinkID7CountryO11philippinesyA2CmFWC) return cases::philippines;
    if (tag == _impl::$s7BlinkID7CountryO6polandyA2CmFWC) return cases::poland;
    if (tag == _impl::$s7BlinkID7CountryO8portugalyA2CmFWC) return cases::portugal;
    if (tag == _impl::$s7BlinkID7CountryO10puertoRicoyA2CmFWC) return cases::puertoRico;
    if (tag == _impl::$s7BlinkID7CountryO5qataryA2CmFWC) return cases::qatar;
    if (tag == _impl::$s7BlinkID7CountryO7romaniayA2CmFWC) return cases::romania;
    if (tag == _impl::$s7BlinkID7CountryO6russiayA2CmFWC) return cases::russia;
    if (tag == _impl::$s7BlinkID7CountryO11saudiArabiayA2CmFWC) return cases::saudiArabia;
    if (tag == _impl::$s7BlinkID7CountryO6serbiayA2CmFWC) return cases::serbia;
    if (tag == _impl::$s7BlinkID7CountryO9singaporeyA2CmFWC) return cases::singapore;
    if (tag == _impl::$s7BlinkID7CountryO8slovakiayA2CmFWC) return cases::slovakia;
    if (tag == _impl::$s7BlinkID7CountryO8sloveniayA2CmFWC) return cases::slovenia;
    if (tag == _impl::$s7BlinkID7CountryO11southAfricayA2CmFWC) return cases::southAfrica;
    if (tag == _impl::$s7BlinkID7CountryO5spainyA2CmFWC) return cases::spain;
    if (tag == _impl::$s7BlinkID7CountryO6swedenyA2CmFWC) return cases::sweden;
    if (tag == _impl::$s7BlinkID7CountryO11switzerlandyA2CmFWC) return cases::switzerland;
    if (tag == _impl::$s7BlinkID7CountryO6taiwanyA2CmFWC) return cases::taiwan;
    if (tag == _impl::$s7BlinkID7CountryO8thailandyA2CmFWC) return cases::thailand;
    if (tag == _impl::$s7BlinkID7CountryO7tunisiayA2CmFWC) return cases::tunisia;
    if (tag == _impl::$s7BlinkID7CountryO6turkeyyA2CmFWC) return cases::turkey;
    if (tag == _impl::$s7BlinkID7CountryO3uaeyA2CmFWC) return cases::uae;
    if (tag == _impl::$s7BlinkID7CountryO6ugandayA2CmFWC) return cases::uganda;
    if (tag == _impl::$s7BlinkID7CountryO2ukyA2CmFWC) return cases::uk;
    if (tag == _impl::$s7BlinkID7CountryO7ukraineyA2CmFWC) return cases::ukraine;
    if (tag == _impl::$s7BlinkID7CountryO3usayA2CmFWC) return cases::usa;
    if (tag == _impl::$s7BlinkID7CountryO7vietnamyA2CmFWC) return cases::vietnam;
    if (tag == _impl::$s7BlinkID7CountryO6brazilyA2CmFWC) return cases::brazil;
    if (tag == _impl::$s7BlinkID7CountryO6norwayyA2CmFWC) return cases::norway;
    if (tag == _impl::$s7BlinkID7CountryO4omanyA2CmFWC) return cases::oman;
    if (tag == _impl::$s7BlinkID7CountryO7ecuadoryA2CmFWC) return cases::ecuador;
    if (tag == _impl::$s7BlinkID7CountryO10elSalvadoryA2CmFWC) return cases::elSalvador;
    if (tag == _impl::$s7BlinkID7CountryO8sriLankayA2CmFWC) return cases::sriLanka;
    if (tag == _impl::$s7BlinkID7CountryO4peruyA2CmFWC) return cases::peru;
    if (tag == _impl::$s7BlinkID7CountryO7uruguayyA2CmFWC) return cases::uruguay;
    if (tag == _impl::$s7BlinkID7CountryO7bahamasyA2CmFWC) return cases::bahamas;
    if (tag == _impl::$s7BlinkID7CountryO7bermudayA2CmFWC) return cases::bermuda;
    if (tag == _impl::$s7BlinkID7CountryO7boliviayA2CmFWC) return cases::bolivia;
    if (tag == _impl::$s7BlinkID7CountryO5chinayA2CmFWC) return cases::china;
    if (tag == _impl::$s7BlinkID7CountryO13europeanUnionyA2CmFWC) return cases::europeanUnion;
    if (tag == _impl::$s7BlinkID7CountryO5haitiyA2CmFWC) return cases::haiti;
    if (tag == _impl::$s7BlinkID7CountryO8hondurasyA2CmFWC) return cases::honduras;
    if (tag == _impl::$s7BlinkID7CountryO7icelandyA2CmFWC) return cases::iceland;
    if (tag == _impl::$s7BlinkID7CountryO5japanyA2CmFWC) return cases::japan;
    if (tag == _impl::$s7BlinkID7CountryO10luxembourgyA2CmFWC) return cases::luxembourg;
    if (tag == _impl::$s7BlinkID7CountryO10montenegroyA2CmFWC) return cases::montenegro;
    if (tag == _impl::$s7BlinkID7CountryO9nicaraguayA2CmFWC) return cases::nicaragua;
    if (tag == _impl::$s7BlinkID7CountryO10southKoreayA2CmFWC) return cases::southKorea;
    if (tag == _impl::$s7BlinkID7CountryO9venezuelayA2CmFWC) return cases::venezuela;
    if (tag == _impl::$s7BlinkID7CountryO11afghanistanyA2CmFWC) return cases::afghanistan;
    if (tag == _impl::$s7BlinkID7CountryO12alandIslandsyA2CmFWC) return cases::alandIslands;
    if (tag == _impl::$s7BlinkID7CountryO13americanSamoayA2CmFWC) return cases::americanSamoa;
    if (tag == _impl::$s7BlinkID7CountryO7andorrayA2CmFWC) return cases::andorra;
    if (tag == _impl::$s7BlinkID7CountryO6angolayA2CmFWC) return cases::angola;
    if (tag == _impl::$s7BlinkID7CountryO8anguillayA2CmFWC) return cases::anguilla;
    if (tag == _impl::$s7BlinkID7CountryO10antarcticayA2CmFWC) return cases::antarctica;
    if (tag == _impl::$s7BlinkID7CountryO17antiguaAndBarbudayA2CmFWC) return cases::antiguaAndBarbuda;
    if (tag == _impl::$s7BlinkID7CountryO7armeniayA2CmFWC) return cases::armenia;
    if (tag == _impl::$s7BlinkID7CountryO5arubayA2CmFWC) return cases::aruba;
    if (tag == _impl::$s7BlinkID7CountryO19bailiwickOfGuernseyyA2CmFWC) return cases::bailiwickOfGuernsey;
    if (tag == _impl::$s7BlinkID7CountryO17bailiwickOfJerseyyA2CmFWC) return cases::bailiwickOfJersey;
    if (tag == _impl::$s7BlinkID7CountryO8barbadosyA2CmFWC) return cases::barbados;
    if (tag == _impl::$s7BlinkID7CountryO7belarusyA2CmFWC) return cases::belarus;
    if (tag == _impl::$s7BlinkID7CountryO6belizeyA2CmFWC) return cases::belize;
    if (tag == _impl::$s7BlinkID7CountryO5beninyA2CmFWC) return cases::benin;
    if (tag == _impl::$s7BlinkID7CountryO6bhutanyA2CmFWC) return cases::bhutan;
    if (tag == _impl::$s7BlinkID7CountryO28bonaireSaintEustatiusAndSabayA2CmFWC) return cases::bonaireSaintEustatiusAndSaba;
    if (tag == _impl::$s7BlinkID7CountryO8botswanayA2CmFWC) return cases::botswana;
    if (tag == _impl::$s7BlinkID7CountryO12bouvetIslandyA2CmFWC) return cases::bouvetIsland;
    if (tag == _impl::$s7BlinkID7CountryO27britishIndianOceanTerritoryyA2CmFWC) return cases::britishIndianOceanTerritory;
    if (tag == _impl::$s7BlinkID7CountryO11burkinaFasoyA2CmFWC) return cases::burkinaFaso;
    if (tag == _impl::$s7BlinkID7CountryO7burundiyA2CmFWC) return cases::burundi;
    if (tag == _impl::$s7BlinkID7CountryO8cameroonyA2CmFWC) return cases::cameroon;
    if (tag == _impl::$s7BlinkID7CountryO9capeVerdeyA2CmFWC) return cases::capeVerde;
    if (tag == _impl::$s7BlinkID7CountryO20caribbeanNetherlandsyA2CmFWC) return cases::caribbeanNetherlands;
    if (tag == _impl::$s7BlinkID7CountryO13caymanIslandsyA2CmFWC) return cases::caymanIslands;
    if (tag == _impl::$s7BlinkID7CountryO22centralAfricanRepublicyA2CmFWC) return cases::centralAfricanRepublic;
    if (tag == _impl::$s7BlinkID7CountryO4chadyA2CmFWC) return cases::chad;
    if (tag == _impl::$s7BlinkID7CountryO15christmasIslandyA2CmFWC) return cases::christmasIsland;
    if (tag == _impl::$s7BlinkID7CountryO12cocosIslandsyA2CmFWC) return cases::cocosIslands;
    if (tag == _impl::$s7BlinkID7CountryO7comorosyA2CmFWC) return cases::comoros;
    if (tag == _impl::$s7BlinkID7CountryO5congoyA2CmFWC) return cases::congo;
    if (tag == _impl::$s7BlinkID7CountryO11cookIslandsyA2CmFWC) return cases::cookIslands;
    if (tag == _impl::$s7BlinkID7CountryO4cubayA2CmFWC) return cases::cuba;
    if (tag == _impl::$s7BlinkID7CountryO7curacaoyA2CmFWC) return cases::curacao;
    if (tag == _impl::$s7BlinkID7CountryO28democraticRepublicOfTheCongoyA2CmFWC) return cases::democraticRepublicOfTheCongo;
    if (tag == _impl::$s7BlinkID7CountryO8djiboutiyA2CmFWC) return cases::djibouti;
    if (tag == _impl::$s7BlinkID7CountryO8dominicayA2CmFWC) return cases::dominica;
    if (tag == _impl::$s7BlinkID7CountryO9eastTimoryA2CmFWC) return cases::eastTimor;
    if (tag == _impl::$s7BlinkID7CountryO16equatorialGuineayA2CmFWC) return cases::equatorialGuinea;
    if (tag == _impl::$s7BlinkID7CountryO7eritreayA2CmFWC) return cases::eritrea;
    if (tag == _impl::$s7BlinkID7CountryO8ethiopiayA2CmFWC) return cases::ethiopia;
    if (tag == _impl::$s7BlinkID7CountryO15falklandIslandsyA2CmFWC) return cases::falklandIslands;
    if (tag == _impl::$s7BlinkID7CountryO12faroeIslandsyA2CmFWC) return cases::faroeIslands;
    if (tag == _impl::$s7BlinkID7CountryO27federatedStatesOfMicronesiayA2CmFWC) return cases::federatedStatesOfMicronesia;
    if (tag == _impl::$s7BlinkID7CountryO4fijiyA2CmFWC) return cases::fiji;
    if (tag == _impl::$s7BlinkID7CountryO12frenchGuianayA2CmFWC) return cases::frenchGuiana;
    if (tag == _impl::$s7BlinkID7CountryO15frenchPolynesiayA2CmFWC) return cases::frenchPolynesia;
    if (tag == _impl::$s7BlinkID7CountryO25frenchSouthernTerritoriesyA2CmFWC) return cases::frenchSouthernTerritories;
    if (tag == _impl::$s7BlinkID7CountryO5gabonyA2CmFWC) return cases::gabon;
    if (tag == _impl::$s7BlinkID7CountryO6gambiayA2CmFWC) return cases::gambia;
    if (tag == _impl::$s7BlinkID7CountryO9gibraltaryA2CmFWC) return cases::gibraltar;
    if (tag == _impl::$s7BlinkID7CountryO9greenlandyA2CmFWC) return cases::greenland;
    if (tag == _impl::$s7BlinkID7CountryO7grenadayA2CmFWC) return cases::grenada;
    if (tag == _impl::$s7BlinkID7CountryO10guadeloupeyA2CmFWC) return cases::guadeloupe;
    if (tag == _impl::$s7BlinkID7CountryO4guamyA2CmFWC) return cases::guam;
    if (tag == _impl::$s7BlinkID7CountryO6guineayA2CmFWC) return cases::guinea;
    if (tag == _impl::$s7BlinkID7CountryO12guineaBissauyA2CmFWC) return cases::guineaBissau;
    if (tag == _impl::$s7BlinkID7CountryO6guyanayA2CmFWC) return cases::guyana;
    if (tag == _impl::$s7BlinkID7CountryO29heardIslandAndMcdonaldIslandsyA2CmFWC) return cases::heardIslandAndMcdonaldIslands;
    if (tag == _impl::$s7BlinkID7CountryO4iranyA2CmFWC) return cases::iran;
    if (tag == _impl::$s7BlinkID7CountryO4iraqyA2CmFWC) return cases::iraq;
    if (tag == _impl::$s7BlinkID7CountryO9isleOfManyA2CmFWC) return cases::isleOfMan;
    if (tag == _impl::$s7BlinkID7CountryO10ivoryCoastyA2CmFWC) return cases::ivoryCoast;
    if (tag == _impl::$s7BlinkID7CountryO7jamaicayA2CmFWC) return cases::jamaica;
    if (tag == _impl::$s7BlinkID7CountryO8kiribatiyA2CmFWC) return cases::kiribati;
    if (tag == _impl::$s7BlinkID7CountryO10kyrgyzstanyA2CmFWC) return cases::kyrgyzstan;
    if (tag == _impl::$s7BlinkID7CountryO4laosyA2CmFWC) return cases::laos;
    if (tag == _impl::$s7BlinkID7CountryO7lebanonyA2CmFWC) return cases::lebanon;
    if (tag == _impl::$s7BlinkID7CountryO7lesothoyA2CmFWC) return cases::lesotho;
    if (tag == _impl::$s7BlinkID7CountryO7liberiayA2CmFWC) return cases::liberia;
    if (tag == _impl::$s7BlinkID7CountryO5libyayA2CmFWC) return cases::libya;
    if (tag == _impl::$s7BlinkID7CountryO13liechtensteinyA2CmFWC) return cases::liechtenstein;
    if (tag == _impl::$s7BlinkID7CountryO5macauyA2CmFWC) return cases::macau;
    if (tag == _impl::$s7BlinkID7CountryO10madagascaryA2CmFWC) return cases::madagascar;
    if (tag == _impl::$s7BlinkID7CountryO6malawiyA2CmFWC) return cases::malawi;
    if (tag == _impl::$s7BlinkID7CountryO4maliyA2CmFWC) return cases::mali;
    if (tag == _impl::$s7BlinkID7CountryO15marshallIslandsyA2CmFWC) return cases::marshallIslands;
    if (tag == _impl::$s7BlinkID7CountryO10martiniqueyA2CmFWC) return cases::martinique;
    if (tag == _impl::$s7BlinkID7CountryO10mauritaniayA2CmFWC) return cases::mauritania;
    if (tag == _impl::$s7BlinkID7CountryO7mayotteyA2CmFWC) return cases::mayotte;
    if (tag == _impl::$s7BlinkID7CountryO7moldovayA2CmFWC) return cases::moldova;
    if (tag == _impl::$s7BlinkID7CountryO6monacoyA2CmFWC) return cases::monaco;
    if (tag == _impl::$s7BlinkID7CountryO8mongoliayA2CmFWC) return cases::mongolia;
    if (tag == _impl::$s7BlinkID7CountryO10montserratyA2CmFWC) return cases::montserrat;
    if (tag == _impl::$s7BlinkID7CountryO10mozambiqueyA2CmFWC) return cases::mozambique;
    if (tag == _impl::$s7BlinkID7CountryO7myanmaryA2CmFWC) return cases::myanmar;
    if (tag == _impl::$s7BlinkID7CountryO7namibiayA2CmFWC) return cases::namibia;
    if (tag == _impl::$s7BlinkID7CountryO5nauruyA2CmFWC) return cases::nauru;
    if (tag == _impl::$s7BlinkID7CountryO5nepalyA2CmFWC) return cases::nepal;
    if (tag == _impl::$s7BlinkID7CountryO12newCaledoniayA2CmFWC) return cases::newCaledonia;
    if (tag == _impl::$s7BlinkID7CountryO5nigeryA2CmFWC) return cases::niger;
    if (tag == _impl::$s7BlinkID7CountryO4niueyA2CmFWC) return cases::niue;
    if (tag == _impl::$s7BlinkID7CountryO13norfolkIslandyA2CmFWC) return cases::norfolkIsland;
    if (tag == _impl::$s7BlinkID7CountryO14northernCyprusyA2CmFWC) return cases::northernCyprus;
    if (tag == _impl::$s7BlinkID7CountryO22northernMarianaIslandsyA2CmFWC) return cases::northernMarianaIslands;
    if (tag == _impl::$s7BlinkID7CountryO10northKoreayA2CmFWC) return cases::northKorea;
    if (tag == _impl::$s7BlinkID7CountryO14northMacedoniayA2CmFWC) return cases::northMacedonia;
    if (tag == _impl::$s7BlinkID7CountryO5palauyA2CmFWC) return cases::palau;
    if (tag == _impl::$s7BlinkID7CountryO9palestineyA2CmFWC) return cases::palestine;
    if (tag == _impl::$s7BlinkID7CountryO14papuaNewGuineayA2CmFWC) return cases::papuaNewGuinea;
    if (tag == _impl::$s7BlinkID7CountryO8pitcairnyA2CmFWC) return cases::pitcairn;
    if (tag == _impl::$s7BlinkID7CountryO7reunionyA2CmFWC) return cases::reunion;
    if (tag == _impl::$s7BlinkID7CountryO6rwandayA2CmFWC) return cases::rwanda;
    if (tag == _impl::$s7BlinkID7CountryO15saintBarthelemyyA2CmFWC) return cases::saintBarthelemy;
    if (tag == _impl::$s7BlinkID7CountryO38saintHelenaAscensionAndTristianDaCunhayA2CmFWC) return cases::saintHelenaAscensionAndTristianDaCunha;
    if (tag == _impl::$s7BlinkID7CountryO18saintKittsAndNevisyA2CmFWC) return cases::saintKittsAndNevis;
    if (tag == _impl::$s7BlinkID7CountryO10saintLuciayA2CmFWC) return cases::saintLucia;
    if (tag == _impl::$s7BlinkID7CountryO11saintMartinyA2CmFWC) return cases::saintMartin;
    if (tag == _impl::$s7BlinkID7CountryO22saintPierreAndMiquelonyA2CmFWC) return cases::saintPierreAndMiquelon;
    if (tag == _impl::$s7BlinkID7CountryO28saintVincentAndTheGrenadinesyA2CmFWC) return cases::saintVincentAndTheGrenadines;
    if (tag == _impl::$s7BlinkID7CountryO5samoayA2CmFWC) return cases::samoa;
    if (tag == _impl::$s7BlinkID7CountryO9sanMarinoyA2CmFWC) return cases::sanMarino;
    if (tag == _impl::$s7BlinkID7CountryO18saoTomeAndPrincipeyA2CmFWC) return cases::saoTomeAndPrincipe;
    if (tag == _impl::$s7BlinkID7CountryO7senegalyA2CmFWC) return cases::senegal;
    if (tag == _impl::$s7BlinkID7CountryO10seychellesyA2CmFWC) return cases::seychelles;
    if (tag == _impl::$s7BlinkID7CountryO11sierraLeoneyA2CmFWC) return cases::sierraLeone;
    if (tag == _impl::$s7BlinkID7CountryO11sintMaartenyA2CmFWC) return cases::sintMaarten;
    if (tag == _impl::$s7BlinkID7CountryO14solomonIslandsyA2CmFWC) return cases::solomonIslands;
    if (tag == _impl::$s7BlinkID7CountryO7somaliayA2CmFWC) return cases::somalia;
    if (tag == _impl::$s7BlinkID7CountryO38southGeorgiaAndTheSouthSandwichIslandsyA2CmFWC) return cases::southGeorgiaAndTheSouthSandwichIslands;
    if (tag == _impl::$s7BlinkID7CountryO10southSudanyA2CmFWC) return cases::southSudan;
    if (tag == _impl::$s7BlinkID7CountryO5sudanyA2CmFWC) return cases::sudan;
    if (tag == _impl::$s7BlinkID7CountryO8surinameyA2CmFWC) return cases::suriname;
    if (tag == _impl::$s7BlinkID7CountryO19svalbardAndJanMayenyA2CmFWC) return cases::svalbardAndJanMayen;
    if (tag == _impl::$s7BlinkID7CountryO8eswatiniyA2CmFWC) return cases::eswatini;
    if (tag == _impl::$s7BlinkID7CountryO5syriayA2CmFWC) return cases::syria;
    if (tag == _impl::$s7BlinkID7CountryO10tajikistanyA2CmFWC) return cases::tajikistan;
    if (tag == _impl::$s7BlinkID7CountryO8tanzaniayA2CmFWC) return cases::tanzania;
    if (tag == _impl::$s7BlinkID7CountryO4togoyA2CmFWC) return cases::togo;
    if (tag == _impl::$s7BlinkID7CountryO7tokelauyA2CmFWC) return cases::tokelau;
    if (tag == _impl::$s7BlinkID7CountryO5tongayA2CmFWC) return cases::tonga;
    if (tag == _impl::$s7BlinkID7CountryO17trinidadAndTobagoyA2CmFWC) return cases::trinidadAndTobago;
    if (tag == _impl::$s7BlinkID7CountryO12turkmenistanyA2CmFWC) return cases::turkmenistan;
    if (tag == _impl::$s7BlinkID7CountryO21turksAndCaicosIslandsyA2CmFWC) return cases::turksAndCaicosIslands;
    if (tag == _impl::$s7BlinkID7CountryO6tuvaluyA2CmFWC) return cases::tuvalu;
    if (tag == _impl::$s7BlinkID7CountryO32unitedStatesMinorOutlyingIslandsyA2CmFWC) return cases::unitedStatesMinorOutlyingIslands;
    if (tag == _impl::$s7BlinkID7CountryO10uzbekistanyA2CmFWC) return cases::uzbekistan;
    if (tag == _impl::$s7BlinkID7CountryO7vanuatuyA2CmFWC) return cases::vanuatu;
    if (tag == _impl::$s7BlinkID7CountryO11vaticanCityyA2CmFWC) return cases::vaticanCity;
    if (tag == _impl::$s7BlinkID7CountryO20virginIslandsBritishyA2CmFWC) return cases::virginIslandsBritish;
    if (tag == _impl::$s7BlinkID7CountryO15virginIslandsUsyA2CmFWC) return cases::virginIslandsUs;
    if (tag == _impl::$s7BlinkID7CountryO15wallisAndFutunayA2CmFWC) return cases::wallisAndFutuna;
    if (tag == _impl::$s7BlinkID7CountryO13westernSaharayA2CmFWC) return cases::westernSahara;
    if (tag == _impl::$s7BlinkID7CountryO5yemenyA2CmFWC) return cases::yemen;
    if (tag == _impl::$s7BlinkID7CountryO10yugoslaviayA2CmFWC) return cases::yugoslavia;
    if (tag == _impl::$s7BlinkID7CountryO6zambiayA2CmFWC) return cases::zambia;
    if (tag == _impl::$s7BlinkID7CountryO8zimbabweyA2CmFWC) return cases::zimbabwe;
    if (tag == _impl::$s7BlinkID7CountryO13schengen_areayA2CmFWC) return cases::schengen_area;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<Country> init(const swift::String& rawValue) SWIFT_SYMBOL("s:7BlinkID7CountryO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:7BlinkID7CountryO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK Country(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK Country _make() noexcept {
    auto metadata = _impl::$s7BlinkID7CountryOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return Country(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID7CountryOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID7CountryOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID7CountryOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_Country;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID7CountryOD;
  static inline constexpr $s7BlinkID7CountryOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_Country {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(Country &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const Country &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER Country returnNewValue(T callable) {
    auto result = Country::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID7CountryOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::Country> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID7CountryOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::Country> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::Country> = true;
template<>
struct implClassFor<BlinkID::Country> { using type = BlinkID::_impl::_impl_Country; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {


namespace _impl {

class _impl_CroppedImageResult;

// Type metadata accessor for CroppedImageResult
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID18CroppedImageResultVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID18CroppedImageResultV") CroppedImageResult final {
public:
  SWIFT_INLINE_THUNK ~CroppedImageResult() noexcept {
    auto metadata = _impl::$s7BlinkID18CroppedImageResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CroppedImageResult(const CroppedImageResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID18CroppedImageResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CroppedImageResult &operator =(const CroppedImageResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID18CroppedImageResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CroppedImageResult &operator =(CroppedImageResult &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CroppedImageResult(CroppedImageResult &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK UIImage *_Nullable getUiImage() const SWIFT_SYMBOL("s:7BlinkID18CroppedImageResultV02uiD0So7UIImageCSgvp");
private:
  SWIFT_INLINE_THUNK CroppedImageResult(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CroppedImageResult _make() noexcept {
    auto metadata = _impl::$s7BlinkID18CroppedImageResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CroppedImageResult(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CroppedImageResult;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID18CroppedImageResultVD;
  static inline constexpr $s7BlinkID18CroppedImageResultVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CroppedImageResult {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CroppedImageResult &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CroppedImageResult &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CroppedImageResult returnNewValue(T callable) {
    auto result = CroppedImageResult::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID18CroppedImageResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::CroppedImageResult> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID18CroppedImageResultVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::CroppedImageResult> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::CroppedImageResult> = true;
template<>
struct implClassFor<BlinkID::CroppedImageResult> { using type = BlinkID::_impl::_impl_CroppedImageResult; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID20CroppedImageSettingsV") CroppedImageSettings;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::CroppedImageSettings> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_CroppedImageSettings;

// Type metadata accessor for CroppedImageSettings
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID20CroppedImageSettingsVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID20CroppedImageSettingsV") CroppedImageSettings final {
public:
  SWIFT_INLINE_THUNK ~CroppedImageSettings() noexcept {
    auto metadata = _impl::$s7BlinkID20CroppedImageSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK CroppedImageSettings(const CroppedImageSettings &other) noexcept {
    auto metadata = _impl::$s7BlinkID20CroppedImageSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK CroppedImageSettings &operator =(const CroppedImageSettings &other) noexcept {
    auto metadata = _impl::$s7BlinkID20CroppedImageSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK CroppedImageSettings &operator =(CroppedImageSettings &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER CroppedImageSettings(CroppedImageSettings &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Int getDotsPerInch() const SWIFT_SYMBOL("s:7BlinkID20CroppedImageSettingsV11dotsPerInchSivp");
  SWIFT_INLINE_THUNK void setDotsPerInch(swift::Int value) SWIFT_SYMBOL("s:7BlinkID20CroppedImageSettingsV11dotsPerInchSivp");
  SWIFT_INLINE_THUNK float getExtensionFactor() const SWIFT_SYMBOL("s:7BlinkID20CroppedImageSettingsV15extensionFactorSfvp");
  SWIFT_INLINE_THUNK void setExtensionFactor(float value) SWIFT_SYMBOL("s:7BlinkID20CroppedImageSettingsV15extensionFactorSfvp");
  SWIFT_INLINE_THUNK bool getReturnDocumentImage() const SWIFT_SYMBOL("s:7BlinkID20CroppedImageSettingsV014returnDocumentD0Sbvp");
  SWIFT_INLINE_THUNK void setReturnDocumentImage(bool value) SWIFT_SYMBOL("s:7BlinkID20CroppedImageSettingsV014returnDocumentD0Sbvp");
  SWIFT_INLINE_THUNK bool getReturnFaceImage() const SWIFT_SYMBOL("s:7BlinkID20CroppedImageSettingsV010returnFaceD0Sbvp");
  SWIFT_INLINE_THUNK void setReturnFaceImage(bool value) SWIFT_SYMBOL("s:7BlinkID20CroppedImageSettingsV010returnFaceD0Sbvp");
  SWIFT_INLINE_THUNK bool getReturnSignatureImage() const SWIFT_SYMBOL("s:7BlinkID20CroppedImageSettingsV015returnSignatureD0Sbvp");
  SWIFT_INLINE_THUNK void setReturnSignatureImage(bool value) SWIFT_SYMBOL("s:7BlinkID20CroppedImageSettingsV015returnSignatureD0Sbvp");
  static SWIFT_INLINE_THUNK CroppedImageSettings init(swift::Int dotsPerInch, float extensionFactor, bool returnDocumentImage, bool returnFaceImage, bool returnSignatureImage) SWIFT_SYMBOL("s:7BlinkID20CroppedImageSettingsV11dotsPerInch15extensionFactor014returnDocumentD00k4FaceD00k9SignatureD0ACSi_SfS3btcfc");
private:
  SWIFT_INLINE_THUNK CroppedImageSettings(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK CroppedImageSettings _make() noexcept {
    auto metadata = _impl::$s7BlinkID20CroppedImageSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return CroppedImageSettings(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_CroppedImageSettings;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID20CroppedImageSettingsVD;
  static inline constexpr $s7BlinkID20CroppedImageSettingsVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_CroppedImageSettings {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(CroppedImageSettings &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const CroppedImageSettings &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER CroppedImageSettings returnNewValue(T callable) {
    auto result = CroppedImageSettings::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID20CroppedImageSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::CroppedImageSettings> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID20CroppedImageSettingsVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::CroppedImageSettings> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::CroppedImageSettings> = true;
template<>
struct implClassFor<BlinkID::CroppedImageSettings> { using type = BlinkID::_impl::_impl_CroppedImageSettings; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {


class SWIFT_SYMBOL("s:7BlinkID18DataMatchFieldTypeO") DataMatchFieldType;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::DataMatchFieldType> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
/// Represents the type of the field used in data match.
namespace _impl {

class _impl_DataMatchFieldType;

// Type metadata accessor for DataMatchFieldType
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID18DataMatchFieldTypeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum DataMatchFieldType
extern "C" {
extern unsigned $s7BlinkID18DataMatchFieldTypeO11dateOfBirthyA2CmFWC;
extern unsigned $s7BlinkID18DataMatchFieldTypeO12dateOfExpiryyA2CmFWC;
extern unsigned $s7BlinkID18DataMatchFieldTypeO14documentNumberyA2CmFWC;
extern unsigned $s7BlinkID18DataMatchFieldTypeO24documentAdditionalNumberyA2CmFWC;
extern unsigned $s7BlinkID18DataMatchFieldTypeO32documentOptionalAdditionalNumberyA2CmFWC;
extern unsigned $s7BlinkID18DataMatchFieldTypeO16personalIdNumberyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID18DataMatchFieldTypeO") DataMatchFieldType final {
public:
  SWIFT_INLINE_THUNK ~DataMatchFieldType() noexcept {
    auto metadata = _impl::$s7BlinkID18DataMatchFieldTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DataMatchFieldType(const DataMatchFieldType &other) noexcept {
    auto metadata = _impl::$s7BlinkID18DataMatchFieldTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DataMatchFieldType &operator =(const DataMatchFieldType &other) noexcept {
    auto metadata = _impl::$s7BlinkID18DataMatchFieldTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DataMatchFieldType &operator =(DataMatchFieldType &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DataMatchFieldType(DataMatchFieldType &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    dateOfBirth SWIFT_SYMBOL("s:7BlinkID18DataMatchFieldTypeO11dateOfBirthyA2CmF"),
    dateOfExpiry SWIFT_SYMBOL("s:7BlinkID18DataMatchFieldTypeO12dateOfExpiryyA2CmF"),
    documentNumber SWIFT_SYMBOL("s:7BlinkID18DataMatchFieldTypeO14documentNumberyA2CmF"),
    documentAdditionalNumber SWIFT_SYMBOL("s:7BlinkID18DataMatchFieldTypeO24documentAdditionalNumberyA2CmF"),
    documentOptionalAdditionalNumber SWIFT_SYMBOL("s:7BlinkID18DataMatchFieldTypeO32documentOptionalAdditionalNumberyA2CmF"),
    personalIdNumber SWIFT_SYMBOL("s:7BlinkID18DataMatchFieldTypeO16personalIdNumberyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_dateOfBirth {  // impl struct for case dateOfBirth
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dateOfBirth;
    }
    SWIFT_INLINE_THUNK DataMatchFieldType operator()() const;
  } dateOfBirth SWIFT_SYMBOL("s:7BlinkID18DataMatchFieldTypeO11dateOfBirthyA2CmF");
  SWIFT_INLINE_THUNK bool isDateOfBirth() const;

  inline const static struct _impl_dateOfExpiry {  // impl struct for case dateOfExpiry
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dateOfExpiry;
    }
    SWIFT_INLINE_THUNK DataMatchFieldType operator()() const;
  } dateOfExpiry SWIFT_SYMBOL("s:7BlinkID18DataMatchFieldTypeO12dateOfExpiryyA2CmF");
  SWIFT_INLINE_THUNK bool isDateOfExpiry() const;

  inline const static struct _impl_documentNumber {  // impl struct for case documentNumber
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::documentNumber;
    }
    SWIFT_INLINE_THUNK DataMatchFieldType operator()() const;
  } documentNumber SWIFT_SYMBOL("s:7BlinkID18DataMatchFieldTypeO14documentNumberyA2CmF");
  SWIFT_INLINE_THUNK bool isDocumentNumber() const;

  inline const static struct _impl_documentAdditionalNumber {  // impl struct for case documentAdditionalNumber
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::documentAdditionalNumber;
    }
    SWIFT_INLINE_THUNK DataMatchFieldType operator()() const;
  } documentAdditionalNumber SWIFT_SYMBOL("s:7BlinkID18DataMatchFieldTypeO24documentAdditionalNumberyA2CmF");
  SWIFT_INLINE_THUNK bool isDocumentAdditionalNumber() const;

  inline const static struct _impl_documentOptionalAdditionalNumber {  // impl struct for case documentOptionalAdditionalNumber
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::documentOptionalAdditionalNumber;
    }
    SWIFT_INLINE_THUNK DataMatchFieldType operator()() const;
  } documentOptionalAdditionalNumber SWIFT_SYMBOL("s:7BlinkID18DataMatchFieldTypeO32documentOptionalAdditionalNumberyA2CmF");
  SWIFT_INLINE_THUNK bool isDocumentOptionalAdditionalNumber() const;

  inline const static struct _impl_personalIdNumber {  // impl struct for case personalIdNumber
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::personalIdNumber;
    }
    SWIFT_INLINE_THUNK DataMatchFieldType operator()() const;
  } personalIdNumber SWIFT_SYMBOL("s:7BlinkID18DataMatchFieldTypeO16personalIdNumberyA2CmF");
  SWIFT_INLINE_THUNK bool isPersonalIdNumber() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID18DataMatchFieldTypeO11dateOfBirthyA2CmFWC) return cases::dateOfBirth;
    if (tag == _impl::$s7BlinkID18DataMatchFieldTypeO12dateOfExpiryyA2CmFWC) return cases::dateOfExpiry;
    if (tag == _impl::$s7BlinkID18DataMatchFieldTypeO14documentNumberyA2CmFWC) return cases::documentNumber;
    if (tag == _impl::$s7BlinkID18DataMatchFieldTypeO24documentAdditionalNumberyA2CmFWC) return cases::documentAdditionalNumber;
    if (tag == _impl::$s7BlinkID18DataMatchFieldTypeO32documentOptionalAdditionalNumberyA2CmFWC) return cases::documentOptionalAdditionalNumber;
    if (tag == _impl::$s7BlinkID18DataMatchFieldTypeO16personalIdNumberyA2CmFWC) return cases::personalIdNumber;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:7BlinkID18DataMatchFieldTypeO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK DataMatchFieldType(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DataMatchFieldType _make() noexcept {
    auto metadata = _impl::$s7BlinkID18DataMatchFieldTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DataMatchFieldType(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID18DataMatchFieldTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID18DataMatchFieldTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID18DataMatchFieldTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DataMatchFieldType;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID18DataMatchFieldTypeOD;
  static inline constexpr $s7BlinkID18DataMatchFieldTypeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DataMatchFieldType {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DataMatchFieldType &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DataMatchFieldType &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DataMatchFieldType returnNewValue(T callable) {
    auto result = DataMatchFieldType::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID18DataMatchFieldTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::DataMatchFieldType> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID18DataMatchFieldTypeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::DataMatchFieldType> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::DataMatchFieldType> = true;
template<>
struct implClassFor<BlinkID::DataMatchFieldType> { using type = BlinkID::_impl::_impl_DataMatchFieldType; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID10FieldStateV") FieldState;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::FieldState> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID14DataMatchStateO") DataMatchState;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::DataMatchState> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_DataMatchResult;

// Type metadata accessor for DataMatchResult
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID15DataMatchResultVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID15DataMatchResultV") DataMatchResult final {
public:
  SWIFT_INLINE_THUNK ~DataMatchResult() noexcept {
    auto metadata = _impl::$s7BlinkID15DataMatchResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DataMatchResult(const DataMatchResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID15DataMatchResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DataMatchResult &operator =(const DataMatchResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID15DataMatchResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DataMatchResult &operator =(DataMatchResult &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DataMatchResult(DataMatchResult &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Array<FieldState> getStates() const SWIFT_SYMBOL("s:7BlinkID15DataMatchResultV6statesSayAA10FieldStateVGvp");
  SWIFT_INLINE_THUNK DataMatchState getOverallState() const SWIFT_SYMBOL("s:7BlinkID15DataMatchResultV12overallStateAA0cdG0Ovp");
/// The state of the data match on the specified field.
/// For example if date of expiry is scanned from the front and back side
/// of the document and values do not match, this method will return <code>DataMatchFieldType</code> <code>.failed</code>.
/// Result will be <code>DataMatchFieldType</code> <code>.success</code> only if scanned values for all fields that are
/// compared are the same. If data matching has not been performed, result will be <code>DataMatchFieldType</code> <code>.notPerformed</code>.
///
/// returns:
/// Result of the data matching algorithm for scanned parts/sides of the document.
  SWIFT_INLINE_THUNK DataMatchState getState(const DataMatchFieldType& fieldType) const SWIFT_SYMBOL("s:7BlinkID15DataMatchResultV8getState3forAA0cdG0OAA0cD9FieldTypeO_tF");
private:
  SWIFT_INLINE_THUNK DataMatchResult(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DataMatchResult _make() noexcept {
    auto metadata = _impl::$s7BlinkID15DataMatchResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DataMatchResult(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DataMatchResult;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID15DataMatchResultVD;
  static inline constexpr $s7BlinkID15DataMatchResultVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DataMatchResult {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DataMatchResult &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DataMatchResult &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DataMatchResult returnNewValue(T callable) {
    auto result = DataMatchResult::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID15DataMatchResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::DataMatchResult> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID15DataMatchResultVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::DataMatchResult> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::DataMatchResult> = true;
template<>
struct implClassFor<BlinkID::DataMatchResult> { using type = BlinkID::_impl::_impl_DataMatchResult; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

/// Represents the state of the data match.
namespace _impl {

class _impl_DataMatchState;

// Type metadata accessor for DataMatchState
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID14DataMatchStateOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum DataMatchState
extern "C" {
extern unsigned $s7BlinkID14DataMatchStateO12notPerformedyA2CmFWC;
extern unsigned $s7BlinkID14DataMatchStateO6failedyA2CmFWC;
extern unsigned $s7BlinkID14DataMatchStateO7successyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID14DataMatchStateO") DataMatchState final {
public:
  SWIFT_INLINE_THUNK ~DataMatchState() noexcept {
    auto metadata = _impl::$s7BlinkID14DataMatchStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DataMatchState(const DataMatchState &other) noexcept {
    auto metadata = _impl::$s7BlinkID14DataMatchStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DataMatchState &operator =(const DataMatchState &other) noexcept {
    auto metadata = _impl::$s7BlinkID14DataMatchStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DataMatchState &operator =(DataMatchState &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DataMatchState(DataMatchState &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    notPerformed SWIFT_SYMBOL("s:7BlinkID14DataMatchStateO12notPerformedyA2CmF"),
    failed SWIFT_SYMBOL("s:7BlinkID14DataMatchStateO6failedyA2CmF"),
    success SWIFT_SYMBOL("s:7BlinkID14DataMatchStateO7successyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_notPerformed {  // impl struct for case notPerformed
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::notPerformed;
    }
    SWIFT_INLINE_THUNK DataMatchState operator()() const;
  } notPerformed SWIFT_SYMBOL("s:7BlinkID14DataMatchStateO12notPerformedyA2CmF");
  SWIFT_INLINE_THUNK bool isNotPerformed() const;

  inline const static struct _impl_failed {  // impl struct for case failed
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::failed;
    }
    SWIFT_INLINE_THUNK DataMatchState operator()() const;
  } failed SWIFT_SYMBOL("s:7BlinkID14DataMatchStateO6failedyA2CmF");
  SWIFT_INLINE_THUNK bool isFailed() const;

  inline const static struct _impl_success {  // impl struct for case success
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::success;
    }
    SWIFT_INLINE_THUNK DataMatchState operator()() const;
  } success SWIFT_SYMBOL("s:7BlinkID14DataMatchStateO7successyA2CmF");
  SWIFT_INLINE_THUNK bool isSuccess() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID14DataMatchStateO12notPerformedyA2CmFWC) return cases::notPerformed;
    if (tag == _impl::$s7BlinkID14DataMatchStateO6failedyA2CmFWC) return cases::failed;
    if (tag == _impl::$s7BlinkID14DataMatchStateO7successyA2CmFWC) return cases::success;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:7BlinkID14DataMatchStateO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK DataMatchState(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DataMatchState _make() noexcept {
    auto metadata = _impl::$s7BlinkID14DataMatchStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DataMatchState(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID14DataMatchStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID14DataMatchStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID14DataMatchStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DataMatchState;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID14DataMatchStateOD;
  static inline constexpr $s7BlinkID14DataMatchStateOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DataMatchState {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DataMatchState &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DataMatchState &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DataMatchState returnNewValue(T callable) {
    auto result = DataMatchState::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID14DataMatchStateOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::DataMatchState> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID14DataMatchStateOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::DataMatchState> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::DataMatchState> = true;
template<>
struct implClassFor<BlinkID::DataMatchState> { using type = BlinkID::_impl::_impl_DataMatchState; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_DateResult;

static_assert(1 <= 3, "unsupported generic requirement list for metadata func");
// Type metadata accessor for DateResult
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID10DateResultVMa(swift::_impl::MetadataRequestTy, void * _Nonnull) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:7BlinkID10DateResultV") DateResult final {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK ~DateResult() noexcept {
    auto metadata = _impl::$s7BlinkID10DateResultVMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DateResult(const DateResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID10DateResultVMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DateResult &operator =(const DateResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID10DateResultVMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DateResult &operator =(DateResult &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DateResult(DateResult &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::Int> getDay() const SWIFT_SYMBOL("s:7BlinkID10DateResultV3daySiSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::Int> getMonth() const SWIFT_SYMBOL("s:7BlinkID10DateResultV5monthSiSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::Int> getYear() const SWIFT_SYMBOL("s:7BlinkID10DateResultV4yearSiSgvp");
  SWIFT_INLINE_THUNK bool getFilledByDomainKnowledge() const SWIFT_SYMBOL("s:7BlinkID10DateResultV23filledByDomainKnowledgeSbvp");
  SWIFT_INLINE_THUNK bool getSuccessfullyParsed() const SWIFT_SYMBOL("s:7BlinkID10DateResultV18successfullyParsedSbvp");
  SWIFT_INLINE_THUNK T_0_0 getOriginalString() const SWIFT_SYMBOL("s:7BlinkID10DateResultV14originalStringxvp");
/// Creates a string representation of date in specific format, defaut format : “%D/%M/%yyyy”
  SWIFT_INLINE_THUNK swift::String toString() const SWIFT_SYMBOL("s:7BlinkID10DateResultV8toStringSSySSRszrlF");
private:
  SWIFT_INLINE_THUNK DateResult(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DateResult _make() noexcept {
    auto metadata = _impl::$s7BlinkID10DateResultVMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DateResult(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DateResult<T_0_0>;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID10DateResultVyxGD;
  static inline constexpr $s7BlinkID10DateResultVyxGD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_DateResult {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DateResult<T_0_0> &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DateResult<T_0_0> &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DateResult<T_0_0> returnNewValue(T callable) {
    auto result = DateResult<T_0_0>::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID10DateResultVMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
struct TypeMetadataTrait<BlinkID::DateResult<T_0_0>> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID10DateResultVMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata())._0;
  }
};
namespace _impl{
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
static inline const constexpr bool isOpaqueLayout<BlinkID::DateResult<T_0_0>> = true;
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

namespace _impl {

class _impl_DependentInfo;

// Type metadata accessor for DependentInfo
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID13DependentInfoVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID13DependentInfoV") DependentInfo final {
public:
  SWIFT_INLINE_THUNK ~DependentInfo() noexcept {
    auto metadata = _impl::$s7BlinkID13DependentInfoVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DependentInfo(const DependentInfo &other) noexcept {
    auto metadata = _impl::$s7BlinkID13DependentInfoVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DependentInfo &operator =(const DependentInfo &other) noexcept {
    auto metadata = _impl::$s7BlinkID13DependentInfoVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DependentInfo &operator =(DependentInfo &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DependentInfo(DependentInfo &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
private:
  SWIFT_INLINE_THUNK DependentInfo(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DependentInfo _make() noexcept {
    auto metadata = _impl::$s7BlinkID13DependentInfoVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DependentInfo(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DependentInfo;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID13DependentInfoVD;
  static inline constexpr $s7BlinkID13DependentInfoVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DependentInfo {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DependentInfo &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DependentInfo &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DependentInfo returnNewValue(T callable) {
    auto result = DependentInfo::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID13DependentInfoVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::DependentInfo> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID13DependentInfoVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::DependentInfo> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::DependentInfo> = true;
template<>
struct implClassFor<BlinkID::DependentInfo> { using type = BlinkID::_impl::_impl_DependentInfo; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID10RectangleFV") RectangleF;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::RectangleF> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_DetailedCroppedImageResult;

// Type metadata accessor for DetailedCroppedImageResult
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID26DetailedCroppedImageResultVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID26DetailedCroppedImageResultV") DetailedCroppedImageResult final {
public:
  SWIFT_INLINE_THUNK ~DetailedCroppedImageResult() noexcept {
    auto metadata = _impl::$s7BlinkID26DetailedCroppedImageResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DetailedCroppedImageResult(const DetailedCroppedImageResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID26DetailedCroppedImageResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DetailedCroppedImageResult &operator =(const DetailedCroppedImageResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID26DetailedCroppedImageResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DetailedCroppedImageResult &operator =(DetailedCroppedImageResult &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DetailedCroppedImageResult(DetailedCroppedImageResult &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Optional<ScanningSide> getSide() const SWIFT_SYMBOL("s:7BlinkID26DetailedCroppedImageResultV4sideAA12ScanningSideOSgvp");
  SWIFT_INLINE_THUNK swift::Optional<RectangleF> getLocation() const SWIFT_SYMBOL("s:7BlinkID26DetailedCroppedImageResultV8locationAA10RectangleFVSgvp");
  SWIFT_INLINE_THUNK UIImage *_Nullable getUiImage() const SWIFT_SYMBOL("s:7BlinkID26DetailedCroppedImageResultV02uiE0So7UIImageCSgvp");
private:
  SWIFT_INLINE_THUNK DetailedCroppedImageResult(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DetailedCroppedImageResult _make() noexcept {
    auto metadata = _impl::$s7BlinkID26DetailedCroppedImageResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DetailedCroppedImageResult(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DetailedCroppedImageResult;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID26DetailedCroppedImageResultVD;
  static inline constexpr $s7BlinkID26DetailedCroppedImageResultVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DetailedCroppedImageResult {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DetailedCroppedImageResult &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DetailedCroppedImageResult &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DetailedCroppedImageResult returnNewValue(T callable) {
    auto result = DetailedCroppedImageResult::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID26DetailedCroppedImageResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::DetailedCroppedImageResult> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID26DetailedCroppedImageResultVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::DetailedCroppedImageResult> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::DetailedCroppedImageResult> = true;
template<>
struct implClassFor<BlinkID::DetailedCroppedImageResult> { using type = BlinkID::_impl::_impl_DetailedCroppedImageResult; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID9FieldTypeO") FieldType;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::FieldType> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID17DetailedFieldTypeV") DetailedFieldType;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::DetailedFieldType> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_DetailedFieldType;

// Type metadata accessor for DetailedFieldType
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID17DetailedFieldTypeVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID17DetailedFieldTypeV") DetailedFieldType final {
public:
  SWIFT_INLINE_THUNK ~DetailedFieldType() noexcept {
    auto metadata = _impl::$s7BlinkID17DetailedFieldTypeVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DetailedFieldType(const DetailedFieldType &other) noexcept {
    auto metadata = _impl::$s7BlinkID17DetailedFieldTypeVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DetailedFieldType &operator =(const DetailedFieldType &other) noexcept {
    auto metadata = _impl::$s7BlinkID17DetailedFieldTypeVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DetailedFieldType &operator =(DetailedFieldType &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DetailedFieldType(DetailedFieldType &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK FieldType getFieldType() const SWIFT_SYMBOL("s:7BlinkID17DetailedFieldTypeV05fieldE0AA0dE0Ovp");
  SWIFT_INLINE_THUNK void setFieldType(const FieldType& value) SWIFT_SYMBOL("s:7BlinkID17DetailedFieldTypeV05fieldE0AA0dE0Ovp");
  SWIFT_INLINE_THUNK AlphabetType getAlphabetType() const SWIFT_SYMBOL("s:7BlinkID17DetailedFieldTypeV08alphabetE0AA08AlphabetE0Ovp");
  SWIFT_INLINE_THUNK void setAlphabetType(const AlphabetType& value) SWIFT_SYMBOL("s:7BlinkID17DetailedFieldTypeV08alphabetE0AA08AlphabetE0Ovp");
  static SWIFT_INLINE_THUNK DetailedFieldType init(const FieldType& fieldType, const AlphabetType& alphabetType) SWIFT_SYMBOL("s:7BlinkID17DetailedFieldTypeV05fieldE008alphabetE0AcA0dE0O_AA08AlphabetE0Otcfc");
private:
  SWIFT_INLINE_THUNK DetailedFieldType(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DetailedFieldType _make() noexcept {
    auto metadata = _impl::$s7BlinkID17DetailedFieldTypeVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DetailedFieldType(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DetailedFieldType;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID17DetailedFieldTypeVD;
  static inline constexpr $s7BlinkID17DetailedFieldTypeVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DetailedFieldType {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DetailedFieldType &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DetailedFieldType &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DetailedFieldType returnNewValue(T callable) {
    auto result = DetailedFieldType::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID17DetailedFieldTypeVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::DetailedFieldType> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID17DetailedFieldTypeVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::DetailedFieldType> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::DetailedFieldType> = true;
template<>
struct implClassFor<BlinkID::DetailedFieldType> { using type = BlinkID::_impl::_impl_DetailedFieldType; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID14DetectionLevelO") DetectionLevel;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::DetectionLevel> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
/// Represents the different levels of detection sensitivity.
/// This enum class is used to configure detection thresholds and enable or
/// disable detection functionality. The levels range from turning detection
/// off completely to setting various levels of sensitivity (low, mid, high).
namespace _impl {

class _impl_DetectionLevel;

// Type metadata accessor for DetectionLevel
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID14DetectionLevelOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum DetectionLevel
extern "C" {
extern unsigned $s7BlinkID14DetectionLevelO3offyA2CmFWC;
extern unsigned $s7BlinkID14DetectionLevelO3lowyA2CmFWC;
extern unsigned $s7BlinkID14DetectionLevelO3midyA2CmFWC;
extern unsigned $s7BlinkID14DetectionLevelO4highyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID14DetectionLevelO") DetectionLevel final {
public:
  SWIFT_INLINE_THUNK ~DetectionLevel() noexcept {
    auto metadata = _impl::$s7BlinkID14DetectionLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DetectionLevel(const DetectionLevel &other) noexcept {
    auto metadata = _impl::$s7BlinkID14DetectionLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DetectionLevel &operator =(const DetectionLevel &other) noexcept {
    auto metadata = _impl::$s7BlinkID14DetectionLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DetectionLevel &operator =(DetectionLevel &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DetectionLevel(DetectionLevel &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    off SWIFT_SYMBOL("s:7BlinkID14DetectionLevelO3offyA2CmF"),
    low SWIFT_SYMBOL("s:7BlinkID14DetectionLevelO3lowyA2CmF"),
    mid SWIFT_SYMBOL("s:7BlinkID14DetectionLevelO3midyA2CmF"),
    high SWIFT_SYMBOL("s:7BlinkID14DetectionLevelO4highyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_off {  // impl struct for case off
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::off;
    }
    SWIFT_INLINE_THUNK DetectionLevel operator()() const;
  } off SWIFT_SYMBOL("s:7BlinkID14DetectionLevelO3offyA2CmF");
  SWIFT_INLINE_THUNK bool isOff() const;

  inline const static struct _impl_low {  // impl struct for case low
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::low;
    }
    SWIFT_INLINE_THUNK DetectionLevel operator()() const;
  } low SWIFT_SYMBOL("s:7BlinkID14DetectionLevelO3lowyA2CmF");
  SWIFT_INLINE_THUNK bool isLow() const;

  inline const static struct _impl_mid {  // impl struct for case mid
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mid;
    }
    SWIFT_INLINE_THUNK DetectionLevel operator()() const;
  } mid SWIFT_SYMBOL("s:7BlinkID14DetectionLevelO3midyA2CmF");
  SWIFT_INLINE_THUNK bool isMid() const;

  inline const static struct _impl_high {  // impl struct for case high
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::high;
    }
    SWIFT_INLINE_THUNK DetectionLevel operator()() const;
  } high SWIFT_SYMBOL("s:7BlinkID14DetectionLevelO4highyA2CmF");
  SWIFT_INLINE_THUNK bool isHigh() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID14DetectionLevelO3offyA2CmFWC) return cases::off;
    if (tag == _impl::$s7BlinkID14DetectionLevelO3lowyA2CmFWC) return cases::low;
    if (tag == _impl::$s7BlinkID14DetectionLevelO3midyA2CmFWC) return cases::mid;
    if (tag == _impl::$s7BlinkID14DetectionLevelO4highyA2CmFWC) return cases::high;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:7BlinkID14DetectionLevelO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK DetectionLevel(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DetectionLevel _make() noexcept {
    auto metadata = _impl::$s7BlinkID14DetectionLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DetectionLevel(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID14DetectionLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID14DetectionLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID14DetectionLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DetectionLevel;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID14DetectionLevelOD;
  static inline constexpr $s7BlinkID14DetectionLevelOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DetectionLevel {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DetectionLevel &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DetectionLevel &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DetectionLevel returnNewValue(T callable) {
    auto result = DetectionLevel::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID14DetectionLevelOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::DetectionLevel> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID14DetectionLevelOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::DetectionLevel> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::DetectionLevel> = true;
template<>
struct implClassFor<BlinkID::DetectionLevel> { using type = BlinkID::_impl::_impl_DetectionLevel; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID15DetectionStatusO") DetectionStatus;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::DetectionStatus> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
/// Defines all possible document detection statuses.
namespace _impl {

class _impl_DetectionStatus;

// Type metadata accessor for DetectionStatus
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID15DetectionStatusOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum DetectionStatus
extern "C" {
extern unsigned $s7BlinkID15DetectionStatusO6failedyA2CmFWC;
extern unsigned $s7BlinkID15DetectionStatusO7successyA2CmFWC;
extern unsigned $s7BlinkID15DetectionStatusO12cameraTooFaryA2CmFWC;
extern unsigned $s7BlinkID15DetectionStatusO14cameraTooCloseyA2CmFWC;
extern unsigned $s7BlinkID15DetectionStatusO19cameraAngleTooSteepyA2CmFWC;
extern unsigned $s7BlinkID15DetectionStatusO28documentTooCloseToCameraEdgeyA2CmFWC;
extern unsigned $s7BlinkID15DetectionStatusO24documentPartiallyVisibleyA2CmFWC;
extern unsigned $s7BlinkID15DetectionStatusO15fallbackSuccessyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID15DetectionStatusO") DetectionStatus final {
public:
  SWIFT_INLINE_THUNK ~DetectionStatus() noexcept {
    auto metadata = _impl::$s7BlinkID15DetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DetectionStatus(const DetectionStatus &other) noexcept {
    auto metadata = _impl::$s7BlinkID15DetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DetectionStatus &operator =(const DetectionStatus &other) noexcept {
    auto metadata = _impl::$s7BlinkID15DetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DetectionStatus &operator =(DetectionStatus &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DetectionStatus(DetectionStatus &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    failed SWIFT_SYMBOL("s:7BlinkID15DetectionStatusO6failedyA2CmF"),
    success SWIFT_SYMBOL("s:7BlinkID15DetectionStatusO7successyA2CmF"),
    cameraTooFar SWIFT_SYMBOL("s:7BlinkID15DetectionStatusO12cameraTooFaryA2CmF"),
    cameraTooClose SWIFT_SYMBOL("s:7BlinkID15DetectionStatusO14cameraTooCloseyA2CmF"),
    cameraAngleTooSteep SWIFT_SYMBOL("s:7BlinkID15DetectionStatusO19cameraAngleTooSteepyA2CmF"),
    documentTooCloseToCameraEdge SWIFT_SYMBOL("s:7BlinkID15DetectionStatusO28documentTooCloseToCameraEdgeyA2CmF"),
    documentPartiallyVisible SWIFT_SYMBOL("s:7BlinkID15DetectionStatusO24documentPartiallyVisibleyA2CmF"),
    fallbackSuccess SWIFT_SYMBOL("s:7BlinkID15DetectionStatusO15fallbackSuccessyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_failed {  // impl struct for case failed
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::failed;
    }
    SWIFT_INLINE_THUNK DetectionStatus operator()() const;
  } failed SWIFT_SYMBOL("s:7BlinkID15DetectionStatusO6failedyA2CmF");
  SWIFT_INLINE_THUNK bool isFailed() const;

  inline const static struct _impl_success {  // impl struct for case success
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::success;
    }
    SWIFT_INLINE_THUNK DetectionStatus operator()() const;
  } success SWIFT_SYMBOL("s:7BlinkID15DetectionStatusO7successyA2CmF");
  SWIFT_INLINE_THUNK bool isSuccess() const;

  inline const static struct _impl_cameraTooFar {  // impl struct for case cameraTooFar
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cameraTooFar;
    }
    SWIFT_INLINE_THUNK DetectionStatus operator()() const;
  } cameraTooFar SWIFT_SYMBOL("s:7BlinkID15DetectionStatusO12cameraTooFaryA2CmF");
  SWIFT_INLINE_THUNK bool isCameraTooFar() const;

  inline const static struct _impl_cameraTooClose {  // impl struct for case cameraTooClose
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cameraTooClose;
    }
    SWIFT_INLINE_THUNK DetectionStatus operator()() const;
  } cameraTooClose SWIFT_SYMBOL("s:7BlinkID15DetectionStatusO14cameraTooCloseyA2CmF");
  SWIFT_INLINE_THUNK bool isCameraTooClose() const;

  inline const static struct _impl_cameraAngleTooSteep {  // impl struct for case cameraAngleTooSteep
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cameraAngleTooSteep;
    }
    SWIFT_INLINE_THUNK DetectionStatus operator()() const;
  } cameraAngleTooSteep SWIFT_SYMBOL("s:7BlinkID15DetectionStatusO19cameraAngleTooSteepyA2CmF");
  SWIFT_INLINE_THUNK bool isCameraAngleTooSteep() const;

  inline const static struct _impl_documentTooCloseToCameraEdge {  // impl struct for case documentTooCloseToCameraEdge
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::documentTooCloseToCameraEdge;
    }
    SWIFT_INLINE_THUNK DetectionStatus operator()() const;
  } documentTooCloseToCameraEdge SWIFT_SYMBOL("s:7BlinkID15DetectionStatusO28documentTooCloseToCameraEdgeyA2CmF");
  SWIFT_INLINE_THUNK bool isDocumentTooCloseToCameraEdge() const;

  inline const static struct _impl_documentPartiallyVisible {  // impl struct for case documentPartiallyVisible
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::documentPartiallyVisible;
    }
    SWIFT_INLINE_THUNK DetectionStatus operator()() const;
  } documentPartiallyVisible SWIFT_SYMBOL("s:7BlinkID15DetectionStatusO24documentPartiallyVisibleyA2CmF");
  SWIFT_INLINE_THUNK bool isDocumentPartiallyVisible() const;

  inline const static struct _impl_fallbackSuccess {  // impl struct for case fallbackSuccess
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::fallbackSuccess;
    }
    SWIFT_INLINE_THUNK DetectionStatus operator()() const;
  } fallbackSuccess SWIFT_SYMBOL("s:7BlinkID15DetectionStatusO15fallbackSuccessyA2CmF");
  SWIFT_INLINE_THUNK bool isFallbackSuccess() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID15DetectionStatusO6failedyA2CmFWC) return cases::failed;
    if (tag == _impl::$s7BlinkID15DetectionStatusO7successyA2CmFWC) return cases::success;
    if (tag == _impl::$s7BlinkID15DetectionStatusO12cameraTooFaryA2CmFWC) return cases::cameraTooFar;
    if (tag == _impl::$s7BlinkID15DetectionStatusO14cameraTooCloseyA2CmFWC) return cases::cameraTooClose;
    if (tag == _impl::$s7BlinkID15DetectionStatusO19cameraAngleTooSteepyA2CmFWC) return cases::cameraAngleTooSteep;
    if (tag == _impl::$s7BlinkID15DetectionStatusO28documentTooCloseToCameraEdgeyA2CmFWC) return cases::documentTooCloseToCameraEdge;
    if (tag == _impl::$s7BlinkID15DetectionStatusO24documentPartiallyVisibleyA2CmFWC) return cases::documentPartiallyVisible;
    if (tag == _impl::$s7BlinkID15DetectionStatusO15fallbackSuccessyA2CmFWC) return cases::fallbackSuccess;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<DetectionStatus> init(const swift::String& rawValue) SWIFT_SYMBOL("s:7BlinkID15DetectionStatusO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:7BlinkID15DetectionStatusO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK DetectionStatus(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DetectionStatus _make() noexcept {
    auto metadata = _impl::$s7BlinkID15DetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DetectionStatus(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID15DetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID15DetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID15DetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DetectionStatus;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID15DetectionStatusOD;
  static inline constexpr $s7BlinkID15DetectionStatusOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DetectionStatus {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DetectionStatus &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DetectionStatus &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DetectionStatus returnNewValue(T callable) {
    auto result = DetectionStatus::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID15DetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::DetectionStatus> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID15DetectionStatusOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::DetectionStatus> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::DetectionStatus> = true;
template<>
struct implClassFor<BlinkID::DetectionStatus> { using type = BlinkID::_impl::_impl_DetectionStatus; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID14DocumentFilterV") DocumentFilter;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::DocumentFilter> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID35DocumentNumberAnonymizationSettingsV") DocumentNumberAnonymizationSettings;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::DocumentNumberAnonymizationSettings> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID29DocumentAnonymizationSettingsV") DocumentAnonymizationSettings;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::DocumentAnonymizationSettings> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_DocumentAnonymizationSettings;

// Type metadata accessor for DocumentAnonymizationSettings
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID29DocumentAnonymizationSettingsVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID29DocumentAnonymizationSettingsV") DocumentAnonymizationSettings final {
public:
  SWIFT_INLINE_THUNK ~DocumentAnonymizationSettings() noexcept {
    auto metadata = _impl::$s7BlinkID29DocumentAnonymizationSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentAnonymizationSettings(const DocumentAnonymizationSettings &other) noexcept {
    auto metadata = _impl::$s7BlinkID29DocumentAnonymizationSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentAnonymizationSettings &operator =(const DocumentAnonymizationSettings &other) noexcept {
    auto metadata = _impl::$s7BlinkID29DocumentAnonymizationSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DocumentAnonymizationSettings &operator =(DocumentAnonymizationSettings &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DocumentAnonymizationSettings(DocumentAnonymizationSettings &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK DocumentFilter getDocumentFilter() const SWIFT_SYMBOL("s:7BlinkID29DocumentAnonymizationSettingsV14documentFilterAA0cG0Vvp");
  SWIFT_INLINE_THUNK void setDocumentFilter(const DocumentFilter& value) SWIFT_SYMBOL("s:7BlinkID29DocumentAnonymizationSettingsV14documentFilterAA0cG0Vvp");
  SWIFT_INLINE_THUNK swift::Array<FieldType> getFields() const SWIFT_SYMBOL("s:7BlinkID29DocumentAnonymizationSettingsV6fieldsSayAA9FieldTypeOGvp");
  SWIFT_INLINE_THUNK void setFields(const swift::Array<FieldType>& value) SWIFT_SYMBOL("s:7BlinkID29DocumentAnonymizationSettingsV6fieldsSayAA9FieldTypeOGvp");
  SWIFT_INLINE_THUNK swift::Optional<DocumentNumberAnonymizationSettings> getDocumentNumberAnonymizationSettings() const SWIFT_SYMBOL("s:7BlinkID29DocumentAnonymizationSettingsV014documentNumberdE0AA0cgdE0VSgvp");
  SWIFT_INLINE_THUNK void setDocumentNumberAnonymizationSettings(const swift::Optional<DocumentNumberAnonymizationSettings>& value) SWIFT_SYMBOL("s:7BlinkID29DocumentAnonymizationSettingsV014documentNumberdE0AA0cgdE0VSgvp");
  static SWIFT_INLINE_THUNK DocumentAnonymizationSettings init(const DocumentFilter& documentFilter, const swift::Array<FieldType>& fields, const swift::Optional<DocumentNumberAnonymizationSettings>& documentNumberAnonymizationSettings) SWIFT_SYMBOL("s:7BlinkID29DocumentAnonymizationSettingsV14documentFilter6fields0f6NumberdE0AcA0cG0V_SayAA9FieldTypeOGAA0cidE0VSgtcfc");
private:
  SWIFT_INLINE_THUNK DocumentAnonymizationSettings(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DocumentAnonymizationSettings _make() noexcept {
    auto metadata = _impl::$s7BlinkID29DocumentAnonymizationSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DocumentAnonymizationSettings(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DocumentAnonymizationSettings;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID29DocumentAnonymizationSettingsVD;
  static inline constexpr $s7BlinkID29DocumentAnonymizationSettingsVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DocumentAnonymizationSettings {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DocumentAnonymizationSettings &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DocumentAnonymizationSettings &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DocumentAnonymizationSettings returnNewValue(T callable) {
    auto result = DocumentAnonymizationSettings::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID29DocumentAnonymizationSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::DocumentAnonymizationSettings> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID29DocumentAnonymizationSettingsVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::DocumentAnonymizationSettings> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::DocumentAnonymizationSettings> = true;
template<>
struct implClassFor<BlinkID::DocumentAnonymizationSettings> { using type = BlinkID::_impl::_impl_DocumentAnonymizationSettings; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID6RegionO") Region;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::Region> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO") DocumentType;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::DocumentType> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_DocumentFilter;

// Type metadata accessor for DocumentFilter
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID14DocumentFilterVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID14DocumentFilterV") DocumentFilter final {
public:
  SWIFT_INLINE_THUNK ~DocumentFilter() noexcept {
    auto metadata = _impl::$s7BlinkID14DocumentFilterVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentFilter(const DocumentFilter &other) noexcept {
    auto metadata = _impl::$s7BlinkID14DocumentFilterVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentFilter &operator =(const DocumentFilter &other) noexcept {
    auto metadata = _impl::$s7BlinkID14DocumentFilterVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DocumentFilter &operator =(DocumentFilter &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DocumentFilter(DocumentFilter &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Optional<Country> getCountry() const SWIFT_SYMBOL("s:7BlinkID14DocumentFilterV7countryAA7CountryOSgvp");
  SWIFT_INLINE_THUNK void setCountry(const swift::Optional<Country>& value) SWIFT_SYMBOL("s:7BlinkID14DocumentFilterV7countryAA7CountryOSgvp");
  SWIFT_INLINE_THUNK swift::Optional<Region> getRegion() const SWIFT_SYMBOL("s:7BlinkID14DocumentFilterV6regionAA6RegionOSgvp");
  SWIFT_INLINE_THUNK void setRegion(const swift::Optional<Region>& value) SWIFT_SYMBOL("s:7BlinkID14DocumentFilterV6regionAA6RegionOSgvp");
  SWIFT_INLINE_THUNK swift::Optional<DocumentType> getDocumentType() const SWIFT_SYMBOL("s:7BlinkID14DocumentFilterV12documentTypeAA0cF0OSgvp");
  SWIFT_INLINE_THUNK void setDocumentType(const swift::Optional<DocumentType>& value) SWIFT_SYMBOL("s:7BlinkID14DocumentFilterV12documentTypeAA0cF0OSgvp");
  static SWIFT_INLINE_THUNK DocumentFilter init(const swift::Optional<Country>& country, const swift::Optional<Region>& region, const swift::Optional<DocumentType>& documentType) SWIFT_SYMBOL("s:7BlinkID14DocumentFilterV7country6region12documentTypeAcA7CountryOSg_AA6RegionOSgAA0cH0OSgtcfc");
private:
  SWIFT_INLINE_THUNK DocumentFilter(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DocumentFilter _make() noexcept {
    auto metadata = _impl::$s7BlinkID14DocumentFilterVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DocumentFilter(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DocumentFilter;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID14DocumentFilterVD;
  static inline constexpr $s7BlinkID14DocumentFilterVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DocumentFilter {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DocumentFilter &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DocumentFilter &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DocumentFilter returnNewValue(T callable) {
    auto result = DocumentFilter::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID14DocumentFilterVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::DocumentFilter> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID14DocumentFilterVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::DocumentFilter> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::DocumentFilter> = true;
template<>
struct implClassFor<BlinkID::DocumentFilter> { using type = BlinkID::_impl::_impl_DocumentFilter; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID24DocumentImageColorStatusO") DocumentImageColorStatus;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::DocumentImageColorStatus> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
/// The color status determined from scanned image.
namespace _impl {

class _impl_DocumentImageColorStatus;

// Type metadata accessor for DocumentImageColorStatus
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID24DocumentImageColorStatusOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum DocumentImageColorStatus
extern "C" {
extern unsigned $s7BlinkID24DocumentImageColorStatusO12notAvailableyA2CmFWC;
extern unsigned $s7BlinkID24DocumentImageColorStatusO13blackAndWhiteyA2CmFWC;
extern unsigned $s7BlinkID24DocumentImageColorStatusO5coloryA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID24DocumentImageColorStatusO") DocumentImageColorStatus final {
public:
  SWIFT_INLINE_THUNK ~DocumentImageColorStatus() noexcept {
    auto metadata = _impl::$s7BlinkID24DocumentImageColorStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentImageColorStatus(const DocumentImageColorStatus &other) noexcept {
    auto metadata = _impl::$s7BlinkID24DocumentImageColorStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentImageColorStatus &operator =(const DocumentImageColorStatus &other) noexcept {
    auto metadata = _impl::$s7BlinkID24DocumentImageColorStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DocumentImageColorStatus &operator =(DocumentImageColorStatus &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DocumentImageColorStatus(DocumentImageColorStatus &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    notAvailable SWIFT_SYMBOL("s:7BlinkID24DocumentImageColorStatusO12notAvailableyA2CmF"),
    blackAndWhite SWIFT_SYMBOL("s:7BlinkID24DocumentImageColorStatusO13blackAndWhiteyA2CmF"),
    color SWIFT_SYMBOL("s:7BlinkID24DocumentImageColorStatusO5coloryA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_notAvailable {  // impl struct for case notAvailable
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::notAvailable;
    }
    SWIFT_INLINE_THUNK DocumentImageColorStatus operator()() const;
  } notAvailable SWIFT_SYMBOL("s:7BlinkID24DocumentImageColorStatusO12notAvailableyA2CmF");
  SWIFT_INLINE_THUNK bool isNotAvailable() const;

  inline const static struct _impl_blackAndWhite {  // impl struct for case blackAndWhite
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::blackAndWhite;
    }
    SWIFT_INLINE_THUNK DocumentImageColorStatus operator()() const;
  } blackAndWhite SWIFT_SYMBOL("s:7BlinkID24DocumentImageColorStatusO13blackAndWhiteyA2CmF");
  SWIFT_INLINE_THUNK bool isBlackAndWhite() const;

  inline const static struct _impl_color {  // impl struct for case color
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::color;
    }
    SWIFT_INLINE_THUNK DocumentImageColorStatus operator()() const;
  } color SWIFT_SYMBOL("s:7BlinkID24DocumentImageColorStatusO5coloryA2CmF");
  SWIFT_INLINE_THUNK bool isColor() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID24DocumentImageColorStatusO12notAvailableyA2CmFWC) return cases::notAvailable;
    if (tag == _impl::$s7BlinkID24DocumentImageColorStatusO13blackAndWhiteyA2CmFWC) return cases::blackAndWhite;
    if (tag == _impl::$s7BlinkID24DocumentImageColorStatusO5coloryA2CmFWC) return cases::color;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<DocumentImageColorStatus> init(swift::Int rawValue) SWIFT_SYMBOL("s:7BlinkID24DocumentImageColorStatusO8rawValueACSgSi_tcfc");
  SWIFT_INLINE_THUNK swift::Int getRawValue() const SWIFT_SYMBOL("s:7BlinkID24DocumentImageColorStatusO8rawValueSivp");
private:
  SWIFT_INLINE_THUNK DocumentImageColorStatus(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DocumentImageColorStatus _make() noexcept {
    auto metadata = _impl::$s7BlinkID24DocumentImageColorStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DocumentImageColorStatus(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID24DocumentImageColorStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID24DocumentImageColorStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID24DocumentImageColorStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DocumentImageColorStatus;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID24DocumentImageColorStatusOD;
  static inline constexpr $s7BlinkID24DocumentImageColorStatusOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DocumentImageColorStatus {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DocumentImageColorStatus &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DocumentImageColorStatus &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DocumentImageColorStatus returnNewValue(T callable) {
    auto result = DocumentImageColorStatus::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID24DocumentImageColorStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::DocumentImageColorStatus> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID24DocumentImageColorStatusOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::DocumentImageColorStatus> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::DocumentImageColorStatus> = true;
template<>
struct implClassFor<BlinkID::DocumentImageColorStatus> { using type = BlinkID::_impl::_impl_DocumentImageColorStatus; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

namespace _impl {

class _impl_DocumentNumberAnonymizationSettings;

// Type metadata accessor for DocumentNumberAnonymizationSettings
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID35DocumentNumberAnonymizationSettingsVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID35DocumentNumberAnonymizationSettingsV") DocumentNumberAnonymizationSettings final {
public:
  SWIFT_INLINE_THUNK ~DocumentNumberAnonymizationSettings() noexcept {
    auto metadata = _impl::$s7BlinkID35DocumentNumberAnonymizationSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentNumberAnonymizationSettings(const DocumentNumberAnonymizationSettings &other) noexcept {
    auto metadata = _impl::$s7BlinkID35DocumentNumberAnonymizationSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentNumberAnonymizationSettings &operator =(const DocumentNumberAnonymizationSettings &other) noexcept {
    auto metadata = _impl::$s7BlinkID35DocumentNumberAnonymizationSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DocumentNumberAnonymizationSettings &operator =(DocumentNumberAnonymizationSettings &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DocumentNumberAnonymizationSettings(DocumentNumberAnonymizationSettings &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Int getPrefixDigitsVisible() const SWIFT_SYMBOL("s:7BlinkID35DocumentNumberAnonymizationSettingsV19prefixDigitsVisibleSivp");
  SWIFT_INLINE_THUNK void setPrefixDigitsVisible(swift::Int value) SWIFT_SYMBOL("s:7BlinkID35DocumentNumberAnonymizationSettingsV19prefixDigitsVisibleSivp");
  SWIFT_INLINE_THUNK swift::Int getSuffixDigitsVisible() const SWIFT_SYMBOL("s:7BlinkID35DocumentNumberAnonymizationSettingsV19suffixDigitsVisibleSivp");
  SWIFT_INLINE_THUNK void setSuffixDigitsVisible(swift::Int value) SWIFT_SYMBOL("s:7BlinkID35DocumentNumberAnonymizationSettingsV19suffixDigitsVisibleSivp");
  static SWIFT_INLINE_THUNK DocumentNumberAnonymizationSettings init(swift::Int prefixDigitsVisible, swift::Int suffixDigitsVisible) SWIFT_SYMBOL("s:7BlinkID35DocumentNumberAnonymizationSettingsV19prefixDigitsVisible06suffixhI0ACSi_Sitcfc");
private:
  SWIFT_INLINE_THUNK DocumentNumberAnonymizationSettings(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DocumentNumberAnonymizationSettings _make() noexcept {
    auto metadata = _impl::$s7BlinkID35DocumentNumberAnonymizationSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DocumentNumberAnonymizationSettings(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DocumentNumberAnonymizationSettings;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID35DocumentNumberAnonymizationSettingsVD;
  static inline constexpr $s7BlinkID35DocumentNumberAnonymizationSettingsVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DocumentNumberAnonymizationSettings {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DocumentNumberAnonymizationSettings &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DocumentNumberAnonymizationSettings &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DocumentNumberAnonymizationSettings returnNewValue(T callable) {
    auto result = DocumentNumberAnonymizationSettings::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID35DocumentNumberAnonymizationSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::DocumentNumberAnonymizationSettings> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID35DocumentNumberAnonymizationSettingsVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::DocumentNumberAnonymizationSettings> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::DocumentNumberAnonymizationSettings> = true;
template<>
struct implClassFor<BlinkID::DocumentNumberAnonymizationSettings> { using type = BlinkID::_impl::_impl_DocumentNumberAnonymizationSettings; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID19DocumentOrientationO") DocumentOrientation;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::DocumentOrientation> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
/// Defines possible card orientations.
namespace _impl {

class _impl_DocumentOrientation;

// Type metadata accessor for DocumentOrientation
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID19DocumentOrientationOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum DocumentOrientation
extern "C" {
extern unsigned $s7BlinkID19DocumentOrientationO10horizontalyA2CmFWC;
extern unsigned $s7BlinkID19DocumentOrientationO8verticalyA2CmFWC;
extern unsigned $s7BlinkID19DocumentOrientationO12notAvailableyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID19DocumentOrientationO") DocumentOrientation final {
public:
  SWIFT_INLINE_THUNK ~DocumentOrientation() noexcept {
    auto metadata = _impl::$s7BlinkID19DocumentOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentOrientation(const DocumentOrientation &other) noexcept {
    auto metadata = _impl::$s7BlinkID19DocumentOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentOrientation &operator =(const DocumentOrientation &other) noexcept {
    auto metadata = _impl::$s7BlinkID19DocumentOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DocumentOrientation &operator =(DocumentOrientation &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DocumentOrientation(DocumentOrientation &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    horizontal SWIFT_SYMBOL("s:7BlinkID19DocumentOrientationO10horizontalyA2CmF"),
    vertical SWIFT_SYMBOL("s:7BlinkID19DocumentOrientationO8verticalyA2CmF"),
    notAvailable SWIFT_SYMBOL("s:7BlinkID19DocumentOrientationO12notAvailableyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_horizontal {  // impl struct for case horizontal
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::horizontal;
    }
    SWIFT_INLINE_THUNK DocumentOrientation operator()() const;
  } horizontal SWIFT_SYMBOL("s:7BlinkID19DocumentOrientationO10horizontalyA2CmF");
  SWIFT_INLINE_THUNK bool isHorizontal() const;

  inline const static struct _impl_vertical {  // impl struct for case vertical
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::vertical;
    }
    SWIFT_INLINE_THUNK DocumentOrientation operator()() const;
  } vertical SWIFT_SYMBOL("s:7BlinkID19DocumentOrientationO8verticalyA2CmF");
  SWIFT_INLINE_THUNK bool isVertical() const;

  inline const static struct _impl_notAvailable {  // impl struct for case notAvailable
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::notAvailable;
    }
    SWIFT_INLINE_THUNK DocumentOrientation operator()() const;
  } notAvailable SWIFT_SYMBOL("s:7BlinkID19DocumentOrientationO12notAvailableyA2CmF");
  SWIFT_INLINE_THUNK bool isNotAvailable() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID19DocumentOrientationO10horizontalyA2CmFWC) return cases::horizontal;
    if (tag == _impl::$s7BlinkID19DocumentOrientationO8verticalyA2CmFWC) return cases::vertical;
    if (tag == _impl::$s7BlinkID19DocumentOrientationO12notAvailableyA2CmFWC) return cases::notAvailable;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<DocumentOrientation> init(swift::Int rawValue) SWIFT_SYMBOL("s:7BlinkID19DocumentOrientationO8rawValueACSgSi_tcfc");
  SWIFT_INLINE_THUNK swift::Int getRawValue() const SWIFT_SYMBOL("s:7BlinkID19DocumentOrientationO8rawValueSivp");
private:
  SWIFT_INLINE_THUNK DocumentOrientation(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DocumentOrientation _make() noexcept {
    auto metadata = _impl::$s7BlinkID19DocumentOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DocumentOrientation(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID19DocumentOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID19DocumentOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID19DocumentOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DocumentOrientation;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID19DocumentOrientationOD;
  static inline constexpr $s7BlinkID19DocumentOrientationOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DocumentOrientation {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DocumentOrientation &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DocumentOrientation &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DocumentOrientation returnNewValue(T callable) {
    auto result = DocumentOrientation::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID19DocumentOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::DocumentOrientation> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID19DocumentOrientationOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::DocumentOrientation> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::DocumentOrientation> = true;
template<>
struct implClassFor<BlinkID::DocumentOrientation> { using type = BlinkID::_impl::_impl_DocumentOrientation; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID16DocumentRotationO") DocumentRotation;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::DocumentRotation> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
/// Represents the rotation of the document.
namespace _impl {

class _impl_DocumentRotation;

// Type metadata accessor for DocumentRotation
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID16DocumentRotationOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum DocumentRotation
extern "C" {
extern unsigned $s7BlinkID16DocumentRotationO12notAvailableyA2CmFWC;
extern unsigned $s7BlinkID16DocumentRotationO4zeroyA2CmFWC;
extern unsigned $s7BlinkID16DocumentRotationO11clockwise90yA2CmFWC;
extern unsigned $s7BlinkID16DocumentRotationO18counterClockwise90yA2CmFWC;
extern unsigned $s7BlinkID16DocumentRotationO10upsideDownyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID16DocumentRotationO") DocumentRotation final {
public:
  SWIFT_INLINE_THUNK ~DocumentRotation() noexcept {
    auto metadata = _impl::$s7BlinkID16DocumentRotationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentRotation(const DocumentRotation &other) noexcept {
    auto metadata = _impl::$s7BlinkID16DocumentRotationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentRotation &operator =(const DocumentRotation &other) noexcept {
    auto metadata = _impl::$s7BlinkID16DocumentRotationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DocumentRotation &operator =(DocumentRotation &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DocumentRotation(DocumentRotation &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    notAvailable SWIFT_SYMBOL("s:7BlinkID16DocumentRotationO12notAvailableyA2CmF"),
    zero SWIFT_SYMBOL("s:7BlinkID16DocumentRotationO4zeroyA2CmF"),
    clockwise90 SWIFT_SYMBOL("s:7BlinkID16DocumentRotationO11clockwise90yA2CmF"),
    counterClockwise90 SWIFT_SYMBOL("s:7BlinkID16DocumentRotationO18counterClockwise90yA2CmF"),
    upsideDown SWIFT_SYMBOL("s:7BlinkID16DocumentRotationO10upsideDownyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_notAvailable {  // impl struct for case notAvailable
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::notAvailable;
    }
    SWIFT_INLINE_THUNK DocumentRotation operator()() const;
  } notAvailable SWIFT_SYMBOL("s:7BlinkID16DocumentRotationO12notAvailableyA2CmF");
  SWIFT_INLINE_THUNK bool isNotAvailable() const;

  inline const static struct _impl_zero {  // impl struct for case zero
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::zero;
    }
    SWIFT_INLINE_THUNK DocumentRotation operator()() const;
  } zero SWIFT_SYMBOL("s:7BlinkID16DocumentRotationO4zeroyA2CmF");
  SWIFT_INLINE_THUNK bool isZero() const;

  inline const static struct _impl_clockwise90 {  // impl struct for case clockwise90
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::clockwise90;
    }
    SWIFT_INLINE_THUNK DocumentRotation operator()() const;
  } clockwise90 SWIFT_SYMBOL("s:7BlinkID16DocumentRotationO11clockwise90yA2CmF");
  SWIFT_INLINE_THUNK bool isClockwise90() const;

  inline const static struct _impl_counterClockwise90 {  // impl struct for case counterClockwise90
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::counterClockwise90;
    }
    SWIFT_INLINE_THUNK DocumentRotation operator()() const;
  } counterClockwise90 SWIFT_SYMBOL("s:7BlinkID16DocumentRotationO18counterClockwise90yA2CmF");
  SWIFT_INLINE_THUNK bool isCounterClockwise90() const;

  inline const static struct _impl_upsideDown {  // impl struct for case upsideDown
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::upsideDown;
    }
    SWIFT_INLINE_THUNK DocumentRotation operator()() const;
  } upsideDown SWIFT_SYMBOL("s:7BlinkID16DocumentRotationO10upsideDownyA2CmF");
  SWIFT_INLINE_THUNK bool isUpsideDown() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID16DocumentRotationO12notAvailableyA2CmFWC) return cases::notAvailable;
    if (tag == _impl::$s7BlinkID16DocumentRotationO4zeroyA2CmFWC) return cases::zero;
    if (tag == _impl::$s7BlinkID16DocumentRotationO11clockwise90yA2CmFWC) return cases::clockwise90;
    if (tag == _impl::$s7BlinkID16DocumentRotationO18counterClockwise90yA2CmFWC) return cases::counterClockwise90;
    if (tag == _impl::$s7BlinkID16DocumentRotationO10upsideDownyA2CmFWC) return cases::upsideDown;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<DocumentRotation> init(swift::Int rawValue) SWIFT_SYMBOL("s:7BlinkID16DocumentRotationO8rawValueACSgSi_tcfc");
  SWIFT_INLINE_THUNK swift::Int getRawValue() const SWIFT_SYMBOL("s:7BlinkID16DocumentRotationO8rawValueSivp");
private:
  SWIFT_INLINE_THUNK DocumentRotation(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DocumentRotation _make() noexcept {
    auto metadata = _impl::$s7BlinkID16DocumentRotationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DocumentRotation(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID16DocumentRotationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID16DocumentRotationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID16DocumentRotationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DocumentRotation;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID16DocumentRotationOD;
  static inline constexpr $s7BlinkID16DocumentRotationOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DocumentRotation {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DocumentRotation &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DocumentRotation &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DocumentRotation returnNewValue(T callable) {
    auto result = DocumentRotation::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID16DocumentRotationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::DocumentRotation> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID16DocumentRotationOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::DocumentRotation> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::DocumentRotation> = true;
template<>
struct implClassFor<BlinkID::DocumentRotation> { using type = BlinkID::_impl::_impl_DocumentRotation; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID13DocumentRulesV") DocumentRules;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::DocumentRules> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_DocumentRules;

// Type metadata accessor for DocumentRules
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID13DocumentRulesVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID13DocumentRulesV") DocumentRules final {
public:
  SWIFT_INLINE_THUNK ~DocumentRules() noexcept {
    auto metadata = _impl::$s7BlinkID13DocumentRulesVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentRules(const DocumentRules &other) noexcept {
    auto metadata = _impl::$s7BlinkID13DocumentRulesVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentRules &operator =(const DocumentRules &other) noexcept {
    auto metadata = _impl::$s7BlinkID13DocumentRulesVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DocumentRules &operator =(DocumentRules &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DocumentRules(DocumentRules &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK DocumentFilter getDocumentFilter() const SWIFT_SYMBOL("s:7BlinkID13DocumentRulesV14documentFilterAA0cF0Vvp");
  SWIFT_INLINE_THUNK void setDocumentFilter(const DocumentFilter& value) SWIFT_SYMBOL("s:7BlinkID13DocumentRulesV14documentFilterAA0cF0Vvp");
  SWIFT_INLINE_THUNK swift::Array<DetailedFieldType> getFields() const SWIFT_SYMBOL("s:7BlinkID13DocumentRulesV6fieldsSayAA17DetailedFieldTypeVGvp");
  SWIFT_INLINE_THUNK void setFields(const swift::Array<DetailedFieldType>& value) SWIFT_SYMBOL("s:7BlinkID13DocumentRulesV6fieldsSayAA17DetailedFieldTypeVGvp");
  static SWIFT_INLINE_THUNK DocumentRules init(const DocumentFilter& documentFilter, const swift::Array<DetailedFieldType>& fields) SWIFT_SYMBOL("s:7BlinkID13DocumentRulesV14documentFilter6fieldsAcA0cF0V_SayAA17DetailedFieldTypeVGtcfc");
private:
  SWIFT_INLINE_THUNK DocumentRules(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DocumentRules _make() noexcept {
    auto metadata = _impl::$s7BlinkID13DocumentRulesVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DocumentRules(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DocumentRules;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID13DocumentRulesVD;
  static inline constexpr $s7BlinkID13DocumentRulesVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DocumentRules {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DocumentRules &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DocumentRules &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DocumentRules returnNewValue(T callable) {
    auto result = DocumentRules::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID13DocumentRulesVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::DocumentRules> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID13DocumentRulesVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::DocumentRules> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::DocumentRules> = true;
template<>
struct implClassFor<BlinkID::DocumentRules> { using type = BlinkID::_impl::_impl_DocumentRules; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

/// Document type.
namespace _impl {

class _impl_DocumentType;

// Type metadata accessor for DocumentType
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID12DocumentTypeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum DocumentType
extern "C" {
extern unsigned $s7BlinkID12DocumentTypeO4noneyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO10consularIdyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO2dlyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO20dlPublicServicesCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO14employmentPassyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO7finCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO2idyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO14multipurposeIdyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO5myKadyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO5myKidyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO4myPRyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO9myTenterayA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO7panCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO14professionalIdyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO18publicServicesCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO15residencePermityA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO10residentIdyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO24temporaryResidencePermityA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO7voterIdyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO10workPermityA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO4iKadyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO10militaryIdyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO5myKasyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO18socialSecurityCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO19healthInsuranceCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO8passportyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO5sPassyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO11addressCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO7alienIdyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO13alienPassportyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO9greenCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO8minorsIdyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO8postalIdyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO14professionalDlyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO5taxIdyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO12weaponPermityA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO4visayA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO18borderCrossingCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO10driverCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO15globalEntryCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO7mypolisyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO9nexusCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO12passportCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO14proofOfAgeCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO9refugeeIdyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO8tribalIdyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO9veteranIdyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO22citizenshipCertificateyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO12myNumberCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO16consularPassportyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO14minorsPassportyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO24minorsPublicServicesCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO20drivingPrivilegeCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO13asylumRequestyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO23driverQualificationCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO13provisionalDlyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO15refugeePassportyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO9specialIdyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO19uniformedServicesIdyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO13immigrantVisayA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO15consularVoterIdyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO8twicCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO15exitEntryPermityA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO26mainlandTravelPermitTaiwanyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO12nbiClearanceyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO19proofOfRegistrationyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO25temporaryProtectionPermityA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO17afghanCitizenCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO3eidyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO4passyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO5sisIdyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO8asicCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO10bidoonCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO26interimHealthInsuranceCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO10nonVoterIdyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO29reciprocalHealthInsuranceCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO19vehicleRegistrationyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO9esaadCardyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO23registrationCertificateyA2CmFWC;
extern unsigned $s7BlinkID12DocumentTypeO18medicalMarijuanaIdyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO") DocumentType final {
public:
  SWIFT_INLINE_THUNK ~DocumentType() noexcept {
    auto metadata = _impl::$s7BlinkID12DocumentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentType(const DocumentType &other) noexcept {
    auto metadata = _impl::$s7BlinkID12DocumentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DocumentType &operator =(const DocumentType &other) noexcept {
    auto metadata = _impl::$s7BlinkID12DocumentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DocumentType &operator =(DocumentType &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DocumentType(DocumentType &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    none SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO4noneyA2CmF"),
    consularId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO10consularIdyA2CmF"),
    dl SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO2dlyA2CmF"),
    dlPublicServicesCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO20dlPublicServicesCardyA2CmF"),
    employmentPass SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO14employmentPassyA2CmF"),
    finCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO7finCardyA2CmF"),
    id SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO2idyA2CmF"),
    multipurposeId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO14multipurposeIdyA2CmF"),
    myKad SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO5myKadyA2CmF"),
    myKid SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO5myKidyA2CmF"),
    myPR SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO4myPRyA2CmF"),
    myTentera SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO9myTenterayA2CmF"),
    panCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO7panCardyA2CmF"),
    professionalId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO14professionalIdyA2CmF"),
    publicServicesCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO18publicServicesCardyA2CmF"),
    residencePermit SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO15residencePermityA2CmF"),
    residentId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO10residentIdyA2CmF"),
    temporaryResidencePermit SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO24temporaryResidencePermityA2CmF"),
    voterId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO7voterIdyA2CmF"),
    workPermit SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO10workPermityA2CmF"),
    iKad SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO4iKadyA2CmF"),
    militaryId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO10militaryIdyA2CmF"),
    myKas SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO5myKasyA2CmF"),
    socialSecurityCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO18socialSecurityCardyA2CmF"),
    healthInsuranceCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO19healthInsuranceCardyA2CmF"),
    passport SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO8passportyA2CmF"),
    sPass SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO5sPassyA2CmF"),
    addressCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO11addressCardyA2CmF"),
    alienId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO7alienIdyA2CmF"),
    alienPassport SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO13alienPassportyA2CmF"),
    greenCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO9greenCardyA2CmF"),
    minorsId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO8minorsIdyA2CmF"),
    postalId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO8postalIdyA2CmF"),
    professionalDl SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO14professionalDlyA2CmF"),
    taxId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO5taxIdyA2CmF"),
    weaponPermit SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO12weaponPermityA2CmF"),
    visa SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO4visayA2CmF"),
    borderCrossingCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO18borderCrossingCardyA2CmF"),
    driverCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO10driverCardyA2CmF"),
    globalEntryCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO15globalEntryCardyA2CmF"),
    mypolis SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO7mypolisyA2CmF"),
    nexusCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO9nexusCardyA2CmF"),
    passportCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO12passportCardyA2CmF"),
    proofOfAgeCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO14proofOfAgeCardyA2CmF"),
    refugeeId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO9refugeeIdyA2CmF"),
    tribalId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO8tribalIdyA2CmF"),
    veteranId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO9veteranIdyA2CmF"),
    citizenshipCertificate SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO22citizenshipCertificateyA2CmF"),
    myNumberCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO12myNumberCardyA2CmF"),
    consularPassport SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO16consularPassportyA2CmF"),
    minorsPassport SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO14minorsPassportyA2CmF"),
    minorsPublicServicesCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO24minorsPublicServicesCardyA2CmF"),
    drivingPrivilegeCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO20drivingPrivilegeCardyA2CmF"),
    asylumRequest SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO13asylumRequestyA2CmF"),
    driverQualificationCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO23driverQualificationCardyA2CmF"),
    provisionalDl SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO13provisionalDlyA2CmF"),
    refugeePassport SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO15refugeePassportyA2CmF"),
    specialId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO9specialIdyA2CmF"),
    uniformedServicesId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO19uniformedServicesIdyA2CmF"),
    immigrantVisa SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO13immigrantVisayA2CmF"),
    consularVoterId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO15consularVoterIdyA2CmF"),
    twicCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO8twicCardyA2CmF"),
    exitEntryPermit SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO15exitEntryPermityA2CmF"),
    mainlandTravelPermitTaiwan SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO26mainlandTravelPermitTaiwanyA2CmF"),
    nbiClearance SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO12nbiClearanceyA2CmF"),
    proofOfRegistration SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO19proofOfRegistrationyA2CmF"),
    temporaryProtectionPermit SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO25temporaryProtectionPermityA2CmF"),
    afghanCitizenCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO17afghanCitizenCardyA2CmF"),
    eid SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO3eidyA2CmF"),
    pass SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO4passyA2CmF"),
    sisId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO5sisIdyA2CmF"),
    asicCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO8asicCardyA2CmF"),
    bidoonCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO10bidoonCardyA2CmF"),
    interimHealthInsuranceCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO26interimHealthInsuranceCardyA2CmF"),
    nonVoterId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO10nonVoterIdyA2CmF"),
    reciprocalHealthInsuranceCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO29reciprocalHealthInsuranceCardyA2CmF"),
    vehicleRegistration SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO19vehicleRegistrationyA2CmF"),
    esaadCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO9esaadCardyA2CmF"),
    registrationCertificate SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO23registrationCertificateyA2CmF"),
    medicalMarijuanaId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO18medicalMarijuanaIdyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_none {  // impl struct for case none
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::none;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } none SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO4noneyA2CmF");
  SWIFT_INLINE_THUNK bool isNone() const;

  inline const static struct _impl_consularId {  // impl struct for case consularId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::consularId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } consularId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO10consularIdyA2CmF");
  SWIFT_INLINE_THUNK bool isConsularId() const;

  inline const static struct _impl_dl {  // impl struct for case dl
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dl;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } dl SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO2dlyA2CmF");
  SWIFT_INLINE_THUNK bool isDl() const;

  inline const static struct _impl_dlPublicServicesCard {  // impl struct for case dlPublicServicesCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dlPublicServicesCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } dlPublicServicesCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO20dlPublicServicesCardyA2CmF");
  SWIFT_INLINE_THUNK bool isDlPublicServicesCard() const;

  inline const static struct _impl_employmentPass {  // impl struct for case employmentPass
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::employmentPass;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } employmentPass SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO14employmentPassyA2CmF");
  SWIFT_INLINE_THUNK bool isEmploymentPass() const;

  inline const static struct _impl_finCard {  // impl struct for case finCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::finCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } finCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO7finCardyA2CmF");
  SWIFT_INLINE_THUNK bool isFinCard() const;

  inline const static struct _impl_id {  // impl struct for case id
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::id;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } id SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO2idyA2CmF");
  SWIFT_INLINE_THUNK bool isId() const;

  inline const static struct _impl_multipurposeId {  // impl struct for case multipurposeId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::multipurposeId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } multipurposeId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO14multipurposeIdyA2CmF");
  SWIFT_INLINE_THUNK bool isMultipurposeId() const;

  inline const static struct _impl_myKad {  // impl struct for case myKad
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::myKad;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } myKad SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO5myKadyA2CmF");
  SWIFT_INLINE_THUNK bool isMyKad() const;

  inline const static struct _impl_myKid {  // impl struct for case myKid
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::myKid;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } myKid SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO5myKidyA2CmF");
  SWIFT_INLINE_THUNK bool isMyKid() const;

  inline const static struct _impl_myPR {  // impl struct for case myPR
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::myPR;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } myPR SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO4myPRyA2CmF");
  SWIFT_INLINE_THUNK bool isMyPR() const;

  inline const static struct _impl_myTentera {  // impl struct for case myTentera
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::myTentera;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } myTentera SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO9myTenterayA2CmF");
  SWIFT_INLINE_THUNK bool isMyTentera() const;

  inline const static struct _impl_panCard {  // impl struct for case panCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::panCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } panCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO7panCardyA2CmF");
  SWIFT_INLINE_THUNK bool isPanCard() const;

  inline const static struct _impl_professionalId {  // impl struct for case professionalId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::professionalId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } professionalId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO14professionalIdyA2CmF");
  SWIFT_INLINE_THUNK bool isProfessionalId() const;

  inline const static struct _impl_publicServicesCard {  // impl struct for case publicServicesCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::publicServicesCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } publicServicesCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO18publicServicesCardyA2CmF");
  SWIFT_INLINE_THUNK bool isPublicServicesCard() const;

  inline const static struct _impl_residencePermit {  // impl struct for case residencePermit
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::residencePermit;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } residencePermit SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO15residencePermityA2CmF");
  SWIFT_INLINE_THUNK bool isResidencePermit() const;

  inline const static struct _impl_residentId {  // impl struct for case residentId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::residentId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } residentId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO10residentIdyA2CmF");
  SWIFT_INLINE_THUNK bool isResidentId() const;

  inline const static struct _impl_temporaryResidencePermit {  // impl struct for case temporaryResidencePermit
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::temporaryResidencePermit;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } temporaryResidencePermit SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO24temporaryResidencePermityA2CmF");
  SWIFT_INLINE_THUNK bool isTemporaryResidencePermit() const;

  inline const static struct _impl_voterId {  // impl struct for case voterId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::voterId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } voterId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO7voterIdyA2CmF");
  SWIFT_INLINE_THUNK bool isVoterId() const;

  inline const static struct _impl_workPermit {  // impl struct for case workPermit
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::workPermit;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } workPermit SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO10workPermityA2CmF");
  SWIFT_INLINE_THUNK bool isWorkPermit() const;

  inline const static struct _impl_iKad {  // impl struct for case iKad
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::iKad;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } iKad SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO4iKadyA2CmF");
  SWIFT_INLINE_THUNK bool isIKad() const;

  inline const static struct _impl_militaryId {  // impl struct for case militaryId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::militaryId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } militaryId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO10militaryIdyA2CmF");
  SWIFT_INLINE_THUNK bool isMilitaryId() const;

  inline const static struct _impl_myKas {  // impl struct for case myKas
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::myKas;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } myKas SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO5myKasyA2CmF");
  SWIFT_INLINE_THUNK bool isMyKas() const;

  inline const static struct _impl_socialSecurityCard {  // impl struct for case socialSecurityCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::socialSecurityCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } socialSecurityCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO18socialSecurityCardyA2CmF");
  SWIFT_INLINE_THUNK bool isSocialSecurityCard() const;

  inline const static struct _impl_healthInsuranceCard {  // impl struct for case healthInsuranceCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::healthInsuranceCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } healthInsuranceCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO19healthInsuranceCardyA2CmF");
  SWIFT_INLINE_THUNK bool isHealthInsuranceCard() const;

  inline const static struct _impl_passport {  // impl struct for case passport
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::passport;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } passport SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO8passportyA2CmF");
  SWIFT_INLINE_THUNK bool isPassport() const;

  inline const static struct _impl_sPass {  // impl struct for case sPass
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sPass;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } sPass SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO5sPassyA2CmF");
  SWIFT_INLINE_THUNK bool isSPass() const;

  inline const static struct _impl_addressCard {  // impl struct for case addressCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::addressCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } addressCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO11addressCardyA2CmF");
  SWIFT_INLINE_THUNK bool isAddressCard() const;

  inline const static struct _impl_alienId {  // impl struct for case alienId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::alienId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } alienId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO7alienIdyA2CmF");
  SWIFT_INLINE_THUNK bool isAlienId() const;

  inline const static struct _impl_alienPassport {  // impl struct for case alienPassport
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::alienPassport;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } alienPassport SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO13alienPassportyA2CmF");
  SWIFT_INLINE_THUNK bool isAlienPassport() const;

  inline const static struct _impl_greenCard {  // impl struct for case greenCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::greenCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } greenCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO9greenCardyA2CmF");
  SWIFT_INLINE_THUNK bool isGreenCard() const;

  inline const static struct _impl_minorsId {  // impl struct for case minorsId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::minorsId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } minorsId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO8minorsIdyA2CmF");
  SWIFT_INLINE_THUNK bool isMinorsId() const;

  inline const static struct _impl_postalId {  // impl struct for case postalId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::postalId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } postalId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO8postalIdyA2CmF");
  SWIFT_INLINE_THUNK bool isPostalId() const;

  inline const static struct _impl_professionalDl {  // impl struct for case professionalDl
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::professionalDl;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } professionalDl SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO14professionalDlyA2CmF");
  SWIFT_INLINE_THUNK bool isProfessionalDl() const;

  inline const static struct _impl_taxId {  // impl struct for case taxId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::taxId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } taxId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO5taxIdyA2CmF");
  SWIFT_INLINE_THUNK bool isTaxId() const;

  inline const static struct _impl_weaponPermit {  // impl struct for case weaponPermit
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::weaponPermit;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } weaponPermit SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO12weaponPermityA2CmF");
  SWIFT_INLINE_THUNK bool isWeaponPermit() const;

  inline const static struct _impl_visa {  // impl struct for case visa
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::visa;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } visa SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO4visayA2CmF");
  SWIFT_INLINE_THUNK bool isVisa() const;

  inline const static struct _impl_borderCrossingCard {  // impl struct for case borderCrossingCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::borderCrossingCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } borderCrossingCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO18borderCrossingCardyA2CmF");
  SWIFT_INLINE_THUNK bool isBorderCrossingCard() const;

  inline const static struct _impl_driverCard {  // impl struct for case driverCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::driverCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } driverCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO10driverCardyA2CmF");
  SWIFT_INLINE_THUNK bool isDriverCard() const;

  inline const static struct _impl_globalEntryCard {  // impl struct for case globalEntryCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::globalEntryCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } globalEntryCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO15globalEntryCardyA2CmF");
  SWIFT_INLINE_THUNK bool isGlobalEntryCard() const;

  inline const static struct _impl_mypolis {  // impl struct for case mypolis
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mypolis;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } mypolis SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO7mypolisyA2CmF");
  SWIFT_INLINE_THUNK bool isMypolis() const;

  inline const static struct _impl_nexusCard {  // impl struct for case nexusCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nexusCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } nexusCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO9nexusCardyA2CmF");
  SWIFT_INLINE_THUNK bool isNexusCard() const;

  inline const static struct _impl_passportCard {  // impl struct for case passportCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::passportCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } passportCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO12passportCardyA2CmF");
  SWIFT_INLINE_THUNK bool isPassportCard() const;

  inline const static struct _impl_proofOfAgeCard {  // impl struct for case proofOfAgeCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::proofOfAgeCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } proofOfAgeCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO14proofOfAgeCardyA2CmF");
  SWIFT_INLINE_THUNK bool isProofOfAgeCard() const;

  inline const static struct _impl_refugeeId {  // impl struct for case refugeeId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::refugeeId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } refugeeId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO9refugeeIdyA2CmF");
  SWIFT_INLINE_THUNK bool isRefugeeId() const;

  inline const static struct _impl_tribalId {  // impl struct for case tribalId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tribalId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } tribalId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO8tribalIdyA2CmF");
  SWIFT_INLINE_THUNK bool isTribalId() const;

  inline const static struct _impl_veteranId {  // impl struct for case veteranId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::veteranId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } veteranId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO9veteranIdyA2CmF");
  SWIFT_INLINE_THUNK bool isVeteranId() const;

  inline const static struct _impl_citizenshipCertificate {  // impl struct for case citizenshipCertificate
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::citizenshipCertificate;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } citizenshipCertificate SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO22citizenshipCertificateyA2CmF");
  SWIFT_INLINE_THUNK bool isCitizenshipCertificate() const;

  inline const static struct _impl_myNumberCard {  // impl struct for case myNumberCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::myNumberCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } myNumberCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO12myNumberCardyA2CmF");
  SWIFT_INLINE_THUNK bool isMyNumberCard() const;

  inline const static struct _impl_consularPassport {  // impl struct for case consularPassport
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::consularPassport;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } consularPassport SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO16consularPassportyA2CmF");
  SWIFT_INLINE_THUNK bool isConsularPassport() const;

  inline const static struct _impl_minorsPassport {  // impl struct for case minorsPassport
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::minorsPassport;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } minorsPassport SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO14minorsPassportyA2CmF");
  SWIFT_INLINE_THUNK bool isMinorsPassport() const;

  inline const static struct _impl_minorsPublicServicesCard {  // impl struct for case minorsPublicServicesCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::minorsPublicServicesCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } minorsPublicServicesCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO24minorsPublicServicesCardyA2CmF");
  SWIFT_INLINE_THUNK bool isMinorsPublicServicesCard() const;

  inline const static struct _impl_drivingPrivilegeCard {  // impl struct for case drivingPrivilegeCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::drivingPrivilegeCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } drivingPrivilegeCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO20drivingPrivilegeCardyA2CmF");
  SWIFT_INLINE_THUNK bool isDrivingPrivilegeCard() const;

  inline const static struct _impl_asylumRequest {  // impl struct for case asylumRequest
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::asylumRequest;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } asylumRequest SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO13asylumRequestyA2CmF");
  SWIFT_INLINE_THUNK bool isAsylumRequest() const;

  inline const static struct _impl_driverQualificationCard {  // impl struct for case driverQualificationCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::driverQualificationCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } driverQualificationCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO23driverQualificationCardyA2CmF");
  SWIFT_INLINE_THUNK bool isDriverQualificationCard() const;

  inline const static struct _impl_provisionalDl {  // impl struct for case provisionalDl
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::provisionalDl;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } provisionalDl SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO13provisionalDlyA2CmF");
  SWIFT_INLINE_THUNK bool isProvisionalDl() const;

  inline const static struct _impl_refugeePassport {  // impl struct for case refugeePassport
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::refugeePassport;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } refugeePassport SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO15refugeePassportyA2CmF");
  SWIFT_INLINE_THUNK bool isRefugeePassport() const;

  inline const static struct _impl_specialId {  // impl struct for case specialId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::specialId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } specialId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO9specialIdyA2CmF");
  SWIFT_INLINE_THUNK bool isSpecialId() const;

  inline const static struct _impl_uniformedServicesId {  // impl struct for case uniformedServicesId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::uniformedServicesId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } uniformedServicesId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO19uniformedServicesIdyA2CmF");
  SWIFT_INLINE_THUNK bool isUniformedServicesId() const;

  inline const static struct _impl_immigrantVisa {  // impl struct for case immigrantVisa
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::immigrantVisa;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } immigrantVisa SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO13immigrantVisayA2CmF");
  SWIFT_INLINE_THUNK bool isImmigrantVisa() const;

  inline const static struct _impl_consularVoterId {  // impl struct for case consularVoterId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::consularVoterId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } consularVoterId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO15consularVoterIdyA2CmF");
  SWIFT_INLINE_THUNK bool isConsularVoterId() const;

  inline const static struct _impl_twicCard {  // impl struct for case twicCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::twicCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } twicCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO8twicCardyA2CmF");
  SWIFT_INLINE_THUNK bool isTwicCard() const;

  inline const static struct _impl_exitEntryPermit {  // impl struct for case exitEntryPermit
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::exitEntryPermit;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } exitEntryPermit SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO15exitEntryPermityA2CmF");
  SWIFT_INLINE_THUNK bool isExitEntryPermit() const;

  inline const static struct _impl_mainlandTravelPermitTaiwan {  // impl struct for case mainlandTravelPermitTaiwan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mainlandTravelPermitTaiwan;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } mainlandTravelPermitTaiwan SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO26mainlandTravelPermitTaiwanyA2CmF");
  SWIFT_INLINE_THUNK bool isMainlandTravelPermitTaiwan() const;

  inline const static struct _impl_nbiClearance {  // impl struct for case nbiClearance
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nbiClearance;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } nbiClearance SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO12nbiClearanceyA2CmF");
  SWIFT_INLINE_THUNK bool isNbiClearance() const;

  inline const static struct _impl_proofOfRegistration {  // impl struct for case proofOfRegistration
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::proofOfRegistration;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } proofOfRegistration SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO19proofOfRegistrationyA2CmF");
  SWIFT_INLINE_THUNK bool isProofOfRegistration() const;

  inline const static struct _impl_temporaryProtectionPermit {  // impl struct for case temporaryProtectionPermit
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::temporaryProtectionPermit;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } temporaryProtectionPermit SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO25temporaryProtectionPermityA2CmF");
  SWIFT_INLINE_THUNK bool isTemporaryProtectionPermit() const;

  inline const static struct _impl_afghanCitizenCard {  // impl struct for case afghanCitizenCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::afghanCitizenCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } afghanCitizenCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO17afghanCitizenCardyA2CmF");
  SWIFT_INLINE_THUNK bool isAfghanCitizenCard() const;

  inline const static struct _impl_eid {  // impl struct for case eid
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::eid;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } eid SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO3eidyA2CmF");
  SWIFT_INLINE_THUNK bool isEid() const;

  inline const static struct _impl_pass {  // impl struct for case pass
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::pass;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } pass SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO4passyA2CmF");
  SWIFT_INLINE_THUNK bool isPass() const;

  inline const static struct _impl_sisId {  // impl struct for case sisId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sisId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } sisId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO5sisIdyA2CmF");
  SWIFT_INLINE_THUNK bool isSisId() const;

  inline const static struct _impl_asicCard {  // impl struct for case asicCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::asicCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } asicCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO8asicCardyA2CmF");
  SWIFT_INLINE_THUNK bool isAsicCard() const;

  inline const static struct _impl_bidoonCard {  // impl struct for case bidoonCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bidoonCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } bidoonCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO10bidoonCardyA2CmF");
  SWIFT_INLINE_THUNK bool isBidoonCard() const;

  inline const static struct _impl_interimHealthInsuranceCard {  // impl struct for case interimHealthInsuranceCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::interimHealthInsuranceCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } interimHealthInsuranceCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO26interimHealthInsuranceCardyA2CmF");
  SWIFT_INLINE_THUNK bool isInterimHealthInsuranceCard() const;

  inline const static struct _impl_nonVoterId {  // impl struct for case nonVoterId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nonVoterId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } nonVoterId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO10nonVoterIdyA2CmF");
  SWIFT_INLINE_THUNK bool isNonVoterId() const;

  inline const static struct _impl_reciprocalHealthInsuranceCard {  // impl struct for case reciprocalHealthInsuranceCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::reciprocalHealthInsuranceCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } reciprocalHealthInsuranceCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO29reciprocalHealthInsuranceCardyA2CmF");
  SWIFT_INLINE_THUNK bool isReciprocalHealthInsuranceCard() const;

  inline const static struct _impl_vehicleRegistration {  // impl struct for case vehicleRegistration
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::vehicleRegistration;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } vehicleRegistration SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO19vehicleRegistrationyA2CmF");
  SWIFT_INLINE_THUNK bool isVehicleRegistration() const;

  inline const static struct _impl_esaadCard {  // impl struct for case esaadCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::esaadCard;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } esaadCard SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO9esaadCardyA2CmF");
  SWIFT_INLINE_THUNK bool isEsaadCard() const;

  inline const static struct _impl_registrationCertificate {  // impl struct for case registrationCertificate
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::registrationCertificate;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } registrationCertificate SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO23registrationCertificateyA2CmF");
  SWIFT_INLINE_THUNK bool isRegistrationCertificate() const;

  inline const static struct _impl_medicalMarijuanaId {  // impl struct for case medicalMarijuanaId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::medicalMarijuanaId;
    }
    SWIFT_INLINE_THUNK DocumentType operator()() const;
  } medicalMarijuanaId SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO18medicalMarijuanaIdyA2CmF");
  SWIFT_INLINE_THUNK bool isMedicalMarijuanaId() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID12DocumentTypeO4noneyA2CmFWC) return cases::none;
    if (tag == _impl::$s7BlinkID12DocumentTypeO10consularIdyA2CmFWC) return cases::consularId;
    if (tag == _impl::$s7BlinkID12DocumentTypeO2dlyA2CmFWC) return cases::dl;
    if (tag == _impl::$s7BlinkID12DocumentTypeO20dlPublicServicesCardyA2CmFWC) return cases::dlPublicServicesCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO14employmentPassyA2CmFWC) return cases::employmentPass;
    if (tag == _impl::$s7BlinkID12DocumentTypeO7finCardyA2CmFWC) return cases::finCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO2idyA2CmFWC) return cases::id;
    if (tag == _impl::$s7BlinkID12DocumentTypeO14multipurposeIdyA2CmFWC) return cases::multipurposeId;
    if (tag == _impl::$s7BlinkID12DocumentTypeO5myKadyA2CmFWC) return cases::myKad;
    if (tag == _impl::$s7BlinkID12DocumentTypeO5myKidyA2CmFWC) return cases::myKid;
    if (tag == _impl::$s7BlinkID12DocumentTypeO4myPRyA2CmFWC) return cases::myPR;
    if (tag == _impl::$s7BlinkID12DocumentTypeO9myTenterayA2CmFWC) return cases::myTentera;
    if (tag == _impl::$s7BlinkID12DocumentTypeO7panCardyA2CmFWC) return cases::panCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO14professionalIdyA2CmFWC) return cases::professionalId;
    if (tag == _impl::$s7BlinkID12DocumentTypeO18publicServicesCardyA2CmFWC) return cases::publicServicesCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO15residencePermityA2CmFWC) return cases::residencePermit;
    if (tag == _impl::$s7BlinkID12DocumentTypeO10residentIdyA2CmFWC) return cases::residentId;
    if (tag == _impl::$s7BlinkID12DocumentTypeO24temporaryResidencePermityA2CmFWC) return cases::temporaryResidencePermit;
    if (tag == _impl::$s7BlinkID12DocumentTypeO7voterIdyA2CmFWC) return cases::voterId;
    if (tag == _impl::$s7BlinkID12DocumentTypeO10workPermityA2CmFWC) return cases::workPermit;
    if (tag == _impl::$s7BlinkID12DocumentTypeO4iKadyA2CmFWC) return cases::iKad;
    if (tag == _impl::$s7BlinkID12DocumentTypeO10militaryIdyA2CmFWC) return cases::militaryId;
    if (tag == _impl::$s7BlinkID12DocumentTypeO5myKasyA2CmFWC) return cases::myKas;
    if (tag == _impl::$s7BlinkID12DocumentTypeO18socialSecurityCardyA2CmFWC) return cases::socialSecurityCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO19healthInsuranceCardyA2CmFWC) return cases::healthInsuranceCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO8passportyA2CmFWC) return cases::passport;
    if (tag == _impl::$s7BlinkID12DocumentTypeO5sPassyA2CmFWC) return cases::sPass;
    if (tag == _impl::$s7BlinkID12DocumentTypeO11addressCardyA2CmFWC) return cases::addressCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO7alienIdyA2CmFWC) return cases::alienId;
    if (tag == _impl::$s7BlinkID12DocumentTypeO13alienPassportyA2CmFWC) return cases::alienPassport;
    if (tag == _impl::$s7BlinkID12DocumentTypeO9greenCardyA2CmFWC) return cases::greenCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO8minorsIdyA2CmFWC) return cases::minorsId;
    if (tag == _impl::$s7BlinkID12DocumentTypeO8postalIdyA2CmFWC) return cases::postalId;
    if (tag == _impl::$s7BlinkID12DocumentTypeO14professionalDlyA2CmFWC) return cases::professionalDl;
    if (tag == _impl::$s7BlinkID12DocumentTypeO5taxIdyA2CmFWC) return cases::taxId;
    if (tag == _impl::$s7BlinkID12DocumentTypeO12weaponPermityA2CmFWC) return cases::weaponPermit;
    if (tag == _impl::$s7BlinkID12DocumentTypeO4visayA2CmFWC) return cases::visa;
    if (tag == _impl::$s7BlinkID12DocumentTypeO18borderCrossingCardyA2CmFWC) return cases::borderCrossingCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO10driverCardyA2CmFWC) return cases::driverCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO15globalEntryCardyA2CmFWC) return cases::globalEntryCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO7mypolisyA2CmFWC) return cases::mypolis;
    if (tag == _impl::$s7BlinkID12DocumentTypeO9nexusCardyA2CmFWC) return cases::nexusCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO12passportCardyA2CmFWC) return cases::passportCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO14proofOfAgeCardyA2CmFWC) return cases::proofOfAgeCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO9refugeeIdyA2CmFWC) return cases::refugeeId;
    if (tag == _impl::$s7BlinkID12DocumentTypeO8tribalIdyA2CmFWC) return cases::tribalId;
    if (tag == _impl::$s7BlinkID12DocumentTypeO9veteranIdyA2CmFWC) return cases::veteranId;
    if (tag == _impl::$s7BlinkID12DocumentTypeO22citizenshipCertificateyA2CmFWC) return cases::citizenshipCertificate;
    if (tag == _impl::$s7BlinkID12DocumentTypeO12myNumberCardyA2CmFWC) return cases::myNumberCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO16consularPassportyA2CmFWC) return cases::consularPassport;
    if (tag == _impl::$s7BlinkID12DocumentTypeO14minorsPassportyA2CmFWC) return cases::minorsPassport;
    if (tag == _impl::$s7BlinkID12DocumentTypeO24minorsPublicServicesCardyA2CmFWC) return cases::minorsPublicServicesCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO20drivingPrivilegeCardyA2CmFWC) return cases::drivingPrivilegeCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO13asylumRequestyA2CmFWC) return cases::asylumRequest;
    if (tag == _impl::$s7BlinkID12DocumentTypeO23driverQualificationCardyA2CmFWC) return cases::driverQualificationCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO13provisionalDlyA2CmFWC) return cases::provisionalDl;
    if (tag == _impl::$s7BlinkID12DocumentTypeO15refugeePassportyA2CmFWC) return cases::refugeePassport;
    if (tag == _impl::$s7BlinkID12DocumentTypeO9specialIdyA2CmFWC) return cases::specialId;
    if (tag == _impl::$s7BlinkID12DocumentTypeO19uniformedServicesIdyA2CmFWC) return cases::uniformedServicesId;
    if (tag == _impl::$s7BlinkID12DocumentTypeO13immigrantVisayA2CmFWC) return cases::immigrantVisa;
    if (tag == _impl::$s7BlinkID12DocumentTypeO15consularVoterIdyA2CmFWC) return cases::consularVoterId;
    if (tag == _impl::$s7BlinkID12DocumentTypeO8twicCardyA2CmFWC) return cases::twicCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO15exitEntryPermityA2CmFWC) return cases::exitEntryPermit;
    if (tag == _impl::$s7BlinkID12DocumentTypeO26mainlandTravelPermitTaiwanyA2CmFWC) return cases::mainlandTravelPermitTaiwan;
    if (tag == _impl::$s7BlinkID12DocumentTypeO12nbiClearanceyA2CmFWC) return cases::nbiClearance;
    if (tag == _impl::$s7BlinkID12DocumentTypeO19proofOfRegistrationyA2CmFWC) return cases::proofOfRegistration;
    if (tag == _impl::$s7BlinkID12DocumentTypeO25temporaryProtectionPermityA2CmFWC) return cases::temporaryProtectionPermit;
    if (tag == _impl::$s7BlinkID12DocumentTypeO17afghanCitizenCardyA2CmFWC) return cases::afghanCitizenCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO3eidyA2CmFWC) return cases::eid;
    if (tag == _impl::$s7BlinkID12DocumentTypeO4passyA2CmFWC) return cases::pass;
    if (tag == _impl::$s7BlinkID12DocumentTypeO5sisIdyA2CmFWC) return cases::sisId;
    if (tag == _impl::$s7BlinkID12DocumentTypeO8asicCardyA2CmFWC) return cases::asicCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO10bidoonCardyA2CmFWC) return cases::bidoonCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO26interimHealthInsuranceCardyA2CmFWC) return cases::interimHealthInsuranceCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO10nonVoterIdyA2CmFWC) return cases::nonVoterId;
    if (tag == _impl::$s7BlinkID12DocumentTypeO29reciprocalHealthInsuranceCardyA2CmFWC) return cases::reciprocalHealthInsuranceCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO19vehicleRegistrationyA2CmFWC) return cases::vehicleRegistration;
    if (tag == _impl::$s7BlinkID12DocumentTypeO9esaadCardyA2CmFWC) return cases::esaadCard;
    if (tag == _impl::$s7BlinkID12DocumentTypeO23registrationCertificateyA2CmFWC) return cases::registrationCertificate;
    if (tag == _impl::$s7BlinkID12DocumentTypeO18medicalMarijuanaIdyA2CmFWC) return cases::medicalMarijuanaId;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<DocumentType> init(const swift::String& rawValue) SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:7BlinkID12DocumentTypeO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK DocumentType(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DocumentType _make() noexcept {
    auto metadata = _impl::$s7BlinkID12DocumentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DocumentType(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID12DocumentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID12DocumentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID12DocumentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DocumentType;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID12DocumentTypeOD;
  static inline constexpr $s7BlinkID12DocumentTypeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_DocumentType {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DocumentType &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DocumentType &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DocumentType returnNewValue(T callable) {
    auto result = DocumentType::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID12DocumentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::DocumentType> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID12DocumentTypeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::DocumentType> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::DocumentType> = true;
template<>
struct implClassFor<BlinkID::DocumentType> { using type = BlinkID::_impl::_impl_DocumentType; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {


template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:7BlinkID16VehicleClassInfoV") VehicleClassInfo;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
static inline const constexpr bool isUsableInGenericContext<BlinkID::VehicleClassInfo<T_0_0>> = isUsableInGenericContext<T_0_0>;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_DriverLicenseDetailedInfo;

static_assert(1 <= 3, "unsupported generic requirement list for metadata func");
// Type metadata accessor for DriverLicenseDetailedInfo
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID25DriverLicenseDetailedInfoVMa(swift::_impl::MetadataRequestTy, void * _Nonnull) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:7BlinkID25DriverLicenseDetailedInfoV") DriverLicenseDetailedInfo final {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK ~DriverLicenseDetailedInfo() noexcept {
    auto metadata = _impl::$s7BlinkID25DriverLicenseDetailedInfoVMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK DriverLicenseDetailedInfo(const DriverLicenseDetailedInfo &other) noexcept {
    auto metadata = _impl::$s7BlinkID25DriverLicenseDetailedInfoVMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK DriverLicenseDetailedInfo &operator =(const DriverLicenseDetailedInfo &other) noexcept {
    auto metadata = _impl::$s7BlinkID25DriverLicenseDetailedInfoVMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK DriverLicenseDetailedInfo &operator =(DriverLicenseDetailedInfo &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER DriverLicenseDetailedInfo(DriverLicenseDetailedInfo &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Optional<T_0_0> getRestrictions() const SWIFT_SYMBOL("s:7BlinkID25DriverLicenseDetailedInfoV12restrictionsxSgvp");
  SWIFT_INLINE_THUNK swift::Optional<T_0_0> getEndorsements() const SWIFT_SYMBOL("s:7BlinkID25DriverLicenseDetailedInfoV12endorsementsxSgvp");
  SWIFT_INLINE_THUNK swift::Optional<T_0_0> getVehicleClass() const SWIFT_SYMBOL("s:7BlinkID25DriverLicenseDetailedInfoV12vehicleClassxSgvp");
  SWIFT_INLINE_THUNK swift::Optional<T_0_0> getConditions() const SWIFT_SYMBOL("s:7BlinkID25DriverLicenseDetailedInfoV10conditionsxSgvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::Array<VehicleClassInfo<T_0_0>>> getVehicleClassesInfo() const SWIFT_SYMBOL("s:7BlinkID25DriverLicenseDetailedInfoV014vehicleClassesF0SayAA012VehicleClassF0VyxGGSgvp");
private:
  SWIFT_INLINE_THUNK DriverLicenseDetailedInfo(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK DriverLicenseDetailedInfo _make() noexcept {
    auto metadata = _impl::$s7BlinkID25DriverLicenseDetailedInfoVMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return DriverLicenseDetailedInfo(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_DriverLicenseDetailedInfo<T_0_0>;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID25DriverLicenseDetailedInfoVyxGD;
  static inline constexpr $s7BlinkID25DriverLicenseDetailedInfoVyxGD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_DriverLicenseDetailedInfo {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(DriverLicenseDetailedInfo<T_0_0> &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const DriverLicenseDetailedInfo<T_0_0> &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER DriverLicenseDetailedInfo<T_0_0> returnNewValue(T callable) {
    auto result = DriverLicenseDetailedInfo<T_0_0>::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID25DriverLicenseDetailedInfoVMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
struct TypeMetadataTrait<BlinkID::DriverLicenseDetailedInfo<T_0_0>> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID25DriverLicenseDetailedInfoVMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata())._0;
  }
};
namespace _impl{
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
static inline const constexpr bool isOpaqueLayout<BlinkID::DriverLicenseDetailedInfo<T_0_0>> = true;
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

namespace _impl {

class _impl_FieldState;

// Type metadata accessor for FieldState
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID10FieldStateVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID10FieldStateV") FieldState final {
public:
  SWIFT_INLINE_THUNK ~FieldState() noexcept {
    auto metadata = _impl::$s7BlinkID10FieldStateVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK FieldState(const FieldState &other) noexcept {
    auto metadata = _impl::$s7BlinkID10FieldStateVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK FieldState &operator =(const FieldState &other) noexcept {
    auto metadata = _impl::$s7BlinkID10FieldStateVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK FieldState &operator =(FieldState &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER FieldState(FieldState &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK DataMatchFieldType getFieldType() const SWIFT_SYMBOL("s:7BlinkID10FieldStateV9fieldTypeAA09DataMatchcF0Ovp");
  SWIFT_INLINE_THUNK DataMatchState getState() const SWIFT_SYMBOL("s:7BlinkID10FieldStateV5stateAA09DataMatchD0Ovp");
private:
  SWIFT_INLINE_THUNK FieldState(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK FieldState _make() noexcept {
    auto metadata = _impl::$s7BlinkID10FieldStateVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return FieldState(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_FieldState;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID10FieldStateVD;
  static inline constexpr $s7BlinkID10FieldStateVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_FieldState {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(FieldState &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const FieldState &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER FieldState returnNewValue(T callable) {
    auto result = FieldState::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID10FieldStateVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::FieldState> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID10FieldStateVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::FieldState> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::FieldState> = true;
template<>
struct implClassFor<BlinkID::FieldState> { using type = BlinkID::_impl::_impl_FieldState; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

namespace _impl {

class _impl_FieldType;

// Type metadata accessor for FieldType
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID9FieldTypeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum FieldType
extern "C" {
extern unsigned $s7BlinkID9FieldTypeO28additionalAddressInformationyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO25additionalNameInformationyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO36additionalOptionalAddressInformationyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO26additionalPersonalIdNumberyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO7addressyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO18classEffectiveDateyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO15classExpiryDateyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO10conditionsyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO11dateOfBirthyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO12dateOfExpiryyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO11dateOfIssueyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO24documentAdditionalNumberyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO32documentOptionalAdditionalNumberyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO14documentNumberyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO8employeryA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO12endorsementsyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO11fathersNameyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO9firstNameyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO8fullNameyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO16issuingAuthorityyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO8lastNameyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO07licenceD0yA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO13localizedNameyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO13maritalStatusyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO11mothersNameyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO3mrzyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO11nationalityyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO16personalIdNumberyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO12placeOfBirthyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO10professionyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO4raceyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO8religionyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO17residentialStatusyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO12restrictionsyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO3sexyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO12vehicleClassyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO05bloodD0yA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO7sponsoryA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO04visaD0yA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO15documentSubtypeyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO7remarksyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO015residencePermitD0yA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO17manufacturingYearyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO07vehicleD0yA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO20dependentDateOfBirthyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO12dependentSexyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO23dependentDocumentNumberyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO17dependentFullNameyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO19eligibilityCategoryyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO24specificDocumentValidityyA2CmFWC;
extern unsigned $s7BlinkID9FieldTypeO12vehicleOwneryA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID9FieldTypeO") FieldType final {
public:
  SWIFT_INLINE_THUNK ~FieldType() noexcept {
    auto metadata = _impl::$s7BlinkID9FieldTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK FieldType(const FieldType &other) noexcept {
    auto metadata = _impl::$s7BlinkID9FieldTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK FieldType &operator =(const FieldType &other) noexcept {
    auto metadata = _impl::$s7BlinkID9FieldTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK FieldType &operator =(FieldType &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER FieldType(FieldType &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    additionalAddressInformation SWIFT_SYMBOL("s:7BlinkID9FieldTypeO28additionalAddressInformationyA2CmF"),
    additionalNameInformation SWIFT_SYMBOL("s:7BlinkID9FieldTypeO25additionalNameInformationyA2CmF"),
    additionalOptionalAddressInformation SWIFT_SYMBOL("s:7BlinkID9FieldTypeO36additionalOptionalAddressInformationyA2CmF"),
    additionalPersonalIdNumber SWIFT_SYMBOL("s:7BlinkID9FieldTypeO26additionalPersonalIdNumberyA2CmF"),
    address SWIFT_SYMBOL("s:7BlinkID9FieldTypeO7addressyA2CmF"),
    classEffectiveDate SWIFT_SYMBOL("s:7BlinkID9FieldTypeO18classEffectiveDateyA2CmF"),
    classExpiryDate SWIFT_SYMBOL("s:7BlinkID9FieldTypeO15classExpiryDateyA2CmF"),
    conditions SWIFT_SYMBOL("s:7BlinkID9FieldTypeO10conditionsyA2CmF"),
    dateOfBirth SWIFT_SYMBOL("s:7BlinkID9FieldTypeO11dateOfBirthyA2CmF"),
    dateOfExpiry SWIFT_SYMBOL("s:7BlinkID9FieldTypeO12dateOfExpiryyA2CmF"),
    dateOfIssue SWIFT_SYMBOL("s:7BlinkID9FieldTypeO11dateOfIssueyA2CmF"),
    documentAdditionalNumber SWIFT_SYMBOL("s:7BlinkID9FieldTypeO24documentAdditionalNumberyA2CmF"),
    documentOptionalAdditionalNumber SWIFT_SYMBOL("s:7BlinkID9FieldTypeO32documentOptionalAdditionalNumberyA2CmF"),
    documentNumber SWIFT_SYMBOL("s:7BlinkID9FieldTypeO14documentNumberyA2CmF"),
    employer SWIFT_SYMBOL("s:7BlinkID9FieldTypeO8employeryA2CmF"),
    endorsements SWIFT_SYMBOL("s:7BlinkID9FieldTypeO12endorsementsyA2CmF"),
    fathersName SWIFT_SYMBOL("s:7BlinkID9FieldTypeO11fathersNameyA2CmF"),
    firstName SWIFT_SYMBOL("s:7BlinkID9FieldTypeO9firstNameyA2CmF"),
    fullName SWIFT_SYMBOL("s:7BlinkID9FieldTypeO8fullNameyA2CmF"),
    issuingAuthority SWIFT_SYMBOL("s:7BlinkID9FieldTypeO16issuingAuthorityyA2CmF"),
    lastName SWIFT_SYMBOL("s:7BlinkID9FieldTypeO8lastNameyA2CmF"),
    licenceType SWIFT_SYMBOL("s:7BlinkID9FieldTypeO07licenceD0yA2CmF"),
    localizedName SWIFT_SYMBOL("s:7BlinkID9FieldTypeO13localizedNameyA2CmF"),
    maritalStatus SWIFT_SYMBOL("s:7BlinkID9FieldTypeO13maritalStatusyA2CmF"),
    mothersName SWIFT_SYMBOL("s:7BlinkID9FieldTypeO11mothersNameyA2CmF"),
    mrz SWIFT_SYMBOL("s:7BlinkID9FieldTypeO3mrzyA2CmF"),
    nationality SWIFT_SYMBOL("s:7BlinkID9FieldTypeO11nationalityyA2CmF"),
    personalIdNumber SWIFT_SYMBOL("s:7BlinkID9FieldTypeO16personalIdNumberyA2CmF"),
    placeOfBirth SWIFT_SYMBOL("s:7BlinkID9FieldTypeO12placeOfBirthyA2CmF"),
    profession SWIFT_SYMBOL("s:7BlinkID9FieldTypeO10professionyA2CmF"),
    race SWIFT_SYMBOL("s:7BlinkID9FieldTypeO4raceyA2CmF"),
    religion SWIFT_SYMBOL("s:7BlinkID9FieldTypeO8religionyA2CmF"),
    residentialStatus SWIFT_SYMBOL("s:7BlinkID9FieldTypeO17residentialStatusyA2CmF"),
    restrictions SWIFT_SYMBOL("s:7BlinkID9FieldTypeO12restrictionsyA2CmF"),
    sex SWIFT_SYMBOL("s:7BlinkID9FieldTypeO3sexyA2CmF"),
    vehicleClass SWIFT_SYMBOL("s:7BlinkID9FieldTypeO12vehicleClassyA2CmF"),
    bloodType SWIFT_SYMBOL("s:7BlinkID9FieldTypeO05bloodD0yA2CmF"),
    sponsor SWIFT_SYMBOL("s:7BlinkID9FieldTypeO7sponsoryA2CmF"),
    visaType SWIFT_SYMBOL("s:7BlinkID9FieldTypeO04visaD0yA2CmF"),
    documentSubtype SWIFT_SYMBOL("s:7BlinkID9FieldTypeO15documentSubtypeyA2CmF"),
    remarks SWIFT_SYMBOL("s:7BlinkID9FieldTypeO7remarksyA2CmF"),
    residencePermitType SWIFT_SYMBOL("s:7BlinkID9FieldTypeO015residencePermitD0yA2CmF"),
    manufacturingYear SWIFT_SYMBOL("s:7BlinkID9FieldTypeO17manufacturingYearyA2CmF"),
    vehicleType SWIFT_SYMBOL("s:7BlinkID9FieldTypeO07vehicleD0yA2CmF"),
    dependentDateOfBirth SWIFT_SYMBOL("s:7BlinkID9FieldTypeO20dependentDateOfBirthyA2CmF"),
    dependentSex SWIFT_SYMBOL("s:7BlinkID9FieldTypeO12dependentSexyA2CmF"),
    dependentDocumentNumber SWIFT_SYMBOL("s:7BlinkID9FieldTypeO23dependentDocumentNumberyA2CmF"),
    dependentFullName SWIFT_SYMBOL("s:7BlinkID9FieldTypeO17dependentFullNameyA2CmF"),
    eligibilityCategory SWIFT_SYMBOL("s:7BlinkID9FieldTypeO19eligibilityCategoryyA2CmF"),
    specificDocumentValidity SWIFT_SYMBOL("s:7BlinkID9FieldTypeO24specificDocumentValidityyA2CmF"),
    vehicleOwner SWIFT_SYMBOL("s:7BlinkID9FieldTypeO12vehicleOwneryA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_additionalAddressInformation {  // impl struct for case additionalAddressInformation
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::additionalAddressInformation;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } additionalAddressInformation SWIFT_SYMBOL("s:7BlinkID9FieldTypeO28additionalAddressInformationyA2CmF");
  SWIFT_INLINE_THUNK bool isAdditionalAddressInformation() const;

  inline const static struct _impl_additionalNameInformation {  // impl struct for case additionalNameInformation
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::additionalNameInformation;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } additionalNameInformation SWIFT_SYMBOL("s:7BlinkID9FieldTypeO25additionalNameInformationyA2CmF");
  SWIFT_INLINE_THUNK bool isAdditionalNameInformation() const;

  inline const static struct _impl_additionalOptionalAddressInformation {  // impl struct for case additionalOptionalAddressInformation
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::additionalOptionalAddressInformation;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } additionalOptionalAddressInformation SWIFT_SYMBOL("s:7BlinkID9FieldTypeO36additionalOptionalAddressInformationyA2CmF");
  SWIFT_INLINE_THUNK bool isAdditionalOptionalAddressInformation() const;

  inline const static struct _impl_additionalPersonalIdNumber {  // impl struct for case additionalPersonalIdNumber
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::additionalPersonalIdNumber;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } additionalPersonalIdNumber SWIFT_SYMBOL("s:7BlinkID9FieldTypeO26additionalPersonalIdNumberyA2CmF");
  SWIFT_INLINE_THUNK bool isAdditionalPersonalIdNumber() const;

  inline const static struct _impl_address {  // impl struct for case address
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::address;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } address SWIFT_SYMBOL("s:7BlinkID9FieldTypeO7addressyA2CmF");
  SWIFT_INLINE_THUNK bool isAddress() const;

  inline const static struct _impl_classEffectiveDate {  // impl struct for case classEffectiveDate
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::classEffectiveDate;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } classEffectiveDate SWIFT_SYMBOL("s:7BlinkID9FieldTypeO18classEffectiveDateyA2CmF");
  SWIFT_INLINE_THUNK bool isClassEffectiveDate() const;

  inline const static struct _impl_classExpiryDate {  // impl struct for case classExpiryDate
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::classExpiryDate;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } classExpiryDate SWIFT_SYMBOL("s:7BlinkID9FieldTypeO15classExpiryDateyA2CmF");
  SWIFT_INLINE_THUNK bool isClassExpiryDate() const;

  inline const static struct _impl_conditions {  // impl struct for case conditions
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::conditions;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } conditions SWIFT_SYMBOL("s:7BlinkID9FieldTypeO10conditionsyA2CmF");
  SWIFT_INLINE_THUNK bool isConditions() const;

  inline const static struct _impl_dateOfBirth {  // impl struct for case dateOfBirth
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dateOfBirth;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } dateOfBirth SWIFT_SYMBOL("s:7BlinkID9FieldTypeO11dateOfBirthyA2CmF");
  SWIFT_INLINE_THUNK bool isDateOfBirth() const;

  inline const static struct _impl_dateOfExpiry {  // impl struct for case dateOfExpiry
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dateOfExpiry;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } dateOfExpiry SWIFT_SYMBOL("s:7BlinkID9FieldTypeO12dateOfExpiryyA2CmF");
  SWIFT_INLINE_THUNK bool isDateOfExpiry() const;

  inline const static struct _impl_dateOfIssue {  // impl struct for case dateOfIssue
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dateOfIssue;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } dateOfIssue SWIFT_SYMBOL("s:7BlinkID9FieldTypeO11dateOfIssueyA2CmF");
  SWIFT_INLINE_THUNK bool isDateOfIssue() const;

  inline const static struct _impl_documentAdditionalNumber {  // impl struct for case documentAdditionalNumber
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::documentAdditionalNumber;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } documentAdditionalNumber SWIFT_SYMBOL("s:7BlinkID9FieldTypeO24documentAdditionalNumberyA2CmF");
  SWIFT_INLINE_THUNK bool isDocumentAdditionalNumber() const;

  inline const static struct _impl_documentOptionalAdditionalNumber {  // impl struct for case documentOptionalAdditionalNumber
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::documentOptionalAdditionalNumber;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } documentOptionalAdditionalNumber SWIFT_SYMBOL("s:7BlinkID9FieldTypeO32documentOptionalAdditionalNumberyA2CmF");
  SWIFT_INLINE_THUNK bool isDocumentOptionalAdditionalNumber() const;

  inline const static struct _impl_documentNumber {  // impl struct for case documentNumber
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::documentNumber;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } documentNumber SWIFT_SYMBOL("s:7BlinkID9FieldTypeO14documentNumberyA2CmF");
  SWIFT_INLINE_THUNK bool isDocumentNumber() const;

  inline const static struct _impl_employer {  // impl struct for case employer
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::employer;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } employer SWIFT_SYMBOL("s:7BlinkID9FieldTypeO8employeryA2CmF");
  SWIFT_INLINE_THUNK bool isEmployer() const;

  inline const static struct _impl_endorsements {  // impl struct for case endorsements
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::endorsements;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } endorsements SWIFT_SYMBOL("s:7BlinkID9FieldTypeO12endorsementsyA2CmF");
  SWIFT_INLINE_THUNK bool isEndorsements() const;

  inline const static struct _impl_fathersName {  // impl struct for case fathersName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::fathersName;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } fathersName SWIFT_SYMBOL("s:7BlinkID9FieldTypeO11fathersNameyA2CmF");
  SWIFT_INLINE_THUNK bool isFathersName() const;

  inline const static struct _impl_firstName {  // impl struct for case firstName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::firstName;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } firstName SWIFT_SYMBOL("s:7BlinkID9FieldTypeO9firstNameyA2CmF");
  SWIFT_INLINE_THUNK bool isFirstName() const;

  inline const static struct _impl_fullName {  // impl struct for case fullName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::fullName;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } fullName SWIFT_SYMBOL("s:7BlinkID9FieldTypeO8fullNameyA2CmF");
  SWIFT_INLINE_THUNK bool isFullName() const;

  inline const static struct _impl_issuingAuthority {  // impl struct for case issuingAuthority
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::issuingAuthority;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } issuingAuthority SWIFT_SYMBOL("s:7BlinkID9FieldTypeO16issuingAuthorityyA2CmF");
  SWIFT_INLINE_THUNK bool isIssuingAuthority() const;

  inline const static struct _impl_lastName {  // impl struct for case lastName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::lastName;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } lastName SWIFT_SYMBOL("s:7BlinkID9FieldTypeO8lastNameyA2CmF");
  SWIFT_INLINE_THUNK bool isLastName() const;

  inline const static struct _impl_licenceType {  // impl struct for case licenceType
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::licenceType;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } licenceType SWIFT_SYMBOL("s:7BlinkID9FieldTypeO07licenceD0yA2CmF");
  SWIFT_INLINE_THUNK bool isLicenceType() const;

  inline const static struct _impl_localizedName {  // impl struct for case localizedName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::localizedName;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } localizedName SWIFT_SYMBOL("s:7BlinkID9FieldTypeO13localizedNameyA2CmF");
  SWIFT_INLINE_THUNK bool isLocalizedName() const;

  inline const static struct _impl_maritalStatus {  // impl struct for case maritalStatus
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::maritalStatus;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } maritalStatus SWIFT_SYMBOL("s:7BlinkID9FieldTypeO13maritalStatusyA2CmF");
  SWIFT_INLINE_THUNK bool isMaritalStatus() const;

  inline const static struct _impl_mothersName {  // impl struct for case mothersName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mothersName;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } mothersName SWIFT_SYMBOL("s:7BlinkID9FieldTypeO11mothersNameyA2CmF");
  SWIFT_INLINE_THUNK bool isMothersName() const;

  inline const static struct _impl_mrz {  // impl struct for case mrz
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mrz;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } mrz SWIFT_SYMBOL("s:7BlinkID9FieldTypeO3mrzyA2CmF");
  SWIFT_INLINE_THUNK bool isMrz() const;

  inline const static struct _impl_nationality {  // impl struct for case nationality
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nationality;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } nationality SWIFT_SYMBOL("s:7BlinkID9FieldTypeO11nationalityyA2CmF");
  SWIFT_INLINE_THUNK bool isNationality() const;

  inline const static struct _impl_personalIdNumber {  // impl struct for case personalIdNumber
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::personalIdNumber;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } personalIdNumber SWIFT_SYMBOL("s:7BlinkID9FieldTypeO16personalIdNumberyA2CmF");
  SWIFT_INLINE_THUNK bool isPersonalIdNumber() const;

  inline const static struct _impl_placeOfBirth {  // impl struct for case placeOfBirth
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::placeOfBirth;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } placeOfBirth SWIFT_SYMBOL("s:7BlinkID9FieldTypeO12placeOfBirthyA2CmF");
  SWIFT_INLINE_THUNK bool isPlaceOfBirth() const;

  inline const static struct _impl_profession {  // impl struct for case profession
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::profession;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } profession SWIFT_SYMBOL("s:7BlinkID9FieldTypeO10professionyA2CmF");
  SWIFT_INLINE_THUNK bool isProfession() const;

  inline const static struct _impl_race {  // impl struct for case race
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::race;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } race SWIFT_SYMBOL("s:7BlinkID9FieldTypeO4raceyA2CmF");
  SWIFT_INLINE_THUNK bool isRace() const;

  inline const static struct _impl_religion {  // impl struct for case religion
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::religion;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } religion SWIFT_SYMBOL("s:7BlinkID9FieldTypeO8religionyA2CmF");
  SWIFT_INLINE_THUNK bool isReligion() const;

  inline const static struct _impl_residentialStatus {  // impl struct for case residentialStatus
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::residentialStatus;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } residentialStatus SWIFT_SYMBOL("s:7BlinkID9FieldTypeO17residentialStatusyA2CmF");
  SWIFT_INLINE_THUNK bool isResidentialStatus() const;

  inline const static struct _impl_restrictions {  // impl struct for case restrictions
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::restrictions;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } restrictions SWIFT_SYMBOL("s:7BlinkID9FieldTypeO12restrictionsyA2CmF");
  SWIFT_INLINE_THUNK bool isRestrictions() const;

  inline const static struct _impl_sex {  // impl struct for case sex
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sex;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } sex SWIFT_SYMBOL("s:7BlinkID9FieldTypeO3sexyA2CmF");
  SWIFT_INLINE_THUNK bool isSex() const;

  inline const static struct _impl_vehicleClass {  // impl struct for case vehicleClass
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::vehicleClass;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } vehicleClass SWIFT_SYMBOL("s:7BlinkID9FieldTypeO12vehicleClassyA2CmF");
  SWIFT_INLINE_THUNK bool isVehicleClass() const;

  inline const static struct _impl_bloodType {  // impl struct for case bloodType
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bloodType;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } bloodType SWIFT_SYMBOL("s:7BlinkID9FieldTypeO05bloodD0yA2CmF");
  SWIFT_INLINE_THUNK bool isBloodType() const;

  inline const static struct _impl_sponsor {  // impl struct for case sponsor
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sponsor;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } sponsor SWIFT_SYMBOL("s:7BlinkID9FieldTypeO7sponsoryA2CmF");
  SWIFT_INLINE_THUNK bool isSponsor() const;

  inline const static struct _impl_visaType {  // impl struct for case visaType
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::visaType;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } visaType SWIFT_SYMBOL("s:7BlinkID9FieldTypeO04visaD0yA2CmF");
  SWIFT_INLINE_THUNK bool isVisaType() const;

  inline const static struct _impl_documentSubtype {  // impl struct for case documentSubtype
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::documentSubtype;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } documentSubtype SWIFT_SYMBOL("s:7BlinkID9FieldTypeO15documentSubtypeyA2CmF");
  SWIFT_INLINE_THUNK bool isDocumentSubtype() const;

  inline const static struct _impl_remarks {  // impl struct for case remarks
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::remarks;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } remarks SWIFT_SYMBOL("s:7BlinkID9FieldTypeO7remarksyA2CmF");
  SWIFT_INLINE_THUNK bool isRemarks() const;

  inline const static struct _impl_residencePermitType {  // impl struct for case residencePermitType
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::residencePermitType;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } residencePermitType SWIFT_SYMBOL("s:7BlinkID9FieldTypeO015residencePermitD0yA2CmF");
  SWIFT_INLINE_THUNK bool isResidencePermitType() const;

  inline const static struct _impl_manufacturingYear {  // impl struct for case manufacturingYear
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::manufacturingYear;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } manufacturingYear SWIFT_SYMBOL("s:7BlinkID9FieldTypeO17manufacturingYearyA2CmF");
  SWIFT_INLINE_THUNK bool isManufacturingYear() const;

  inline const static struct _impl_vehicleType {  // impl struct for case vehicleType
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::vehicleType;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } vehicleType SWIFT_SYMBOL("s:7BlinkID9FieldTypeO07vehicleD0yA2CmF");
  SWIFT_INLINE_THUNK bool isVehicleType() const;

  inline const static struct _impl_dependentDateOfBirth {  // impl struct for case dependentDateOfBirth
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dependentDateOfBirth;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } dependentDateOfBirth SWIFT_SYMBOL("s:7BlinkID9FieldTypeO20dependentDateOfBirthyA2CmF");
  SWIFT_INLINE_THUNK bool isDependentDateOfBirth() const;

  inline const static struct _impl_dependentSex {  // impl struct for case dependentSex
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dependentSex;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } dependentSex SWIFT_SYMBOL("s:7BlinkID9FieldTypeO12dependentSexyA2CmF");
  SWIFT_INLINE_THUNK bool isDependentSex() const;

  inline const static struct _impl_dependentDocumentNumber {  // impl struct for case dependentDocumentNumber
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dependentDocumentNumber;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } dependentDocumentNumber SWIFT_SYMBOL("s:7BlinkID9FieldTypeO23dependentDocumentNumberyA2CmF");
  SWIFT_INLINE_THUNK bool isDependentDocumentNumber() const;

  inline const static struct _impl_dependentFullName {  // impl struct for case dependentFullName
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::dependentFullName;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } dependentFullName SWIFT_SYMBOL("s:7BlinkID9FieldTypeO17dependentFullNameyA2CmF");
  SWIFT_INLINE_THUNK bool isDependentFullName() const;

  inline const static struct _impl_eligibilityCategory {  // impl struct for case eligibilityCategory
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::eligibilityCategory;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } eligibilityCategory SWIFT_SYMBOL("s:7BlinkID9FieldTypeO19eligibilityCategoryyA2CmF");
  SWIFT_INLINE_THUNK bool isEligibilityCategory() const;

  inline const static struct _impl_specificDocumentValidity {  // impl struct for case specificDocumentValidity
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::specificDocumentValidity;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } specificDocumentValidity SWIFT_SYMBOL("s:7BlinkID9FieldTypeO24specificDocumentValidityyA2CmF");
  SWIFT_INLINE_THUNK bool isSpecificDocumentValidity() const;

  inline const static struct _impl_vehicleOwner {  // impl struct for case vehicleOwner
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::vehicleOwner;
    }
    SWIFT_INLINE_THUNK FieldType operator()() const;
  } vehicleOwner SWIFT_SYMBOL("s:7BlinkID9FieldTypeO12vehicleOwneryA2CmF");
  SWIFT_INLINE_THUNK bool isVehicleOwner() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID9FieldTypeO28additionalAddressInformationyA2CmFWC) return cases::additionalAddressInformation;
    if (tag == _impl::$s7BlinkID9FieldTypeO25additionalNameInformationyA2CmFWC) return cases::additionalNameInformation;
    if (tag == _impl::$s7BlinkID9FieldTypeO36additionalOptionalAddressInformationyA2CmFWC) return cases::additionalOptionalAddressInformation;
    if (tag == _impl::$s7BlinkID9FieldTypeO26additionalPersonalIdNumberyA2CmFWC) return cases::additionalPersonalIdNumber;
    if (tag == _impl::$s7BlinkID9FieldTypeO7addressyA2CmFWC) return cases::address;
    if (tag == _impl::$s7BlinkID9FieldTypeO18classEffectiveDateyA2CmFWC) return cases::classEffectiveDate;
    if (tag == _impl::$s7BlinkID9FieldTypeO15classExpiryDateyA2CmFWC) return cases::classExpiryDate;
    if (tag == _impl::$s7BlinkID9FieldTypeO10conditionsyA2CmFWC) return cases::conditions;
    if (tag == _impl::$s7BlinkID9FieldTypeO11dateOfBirthyA2CmFWC) return cases::dateOfBirth;
    if (tag == _impl::$s7BlinkID9FieldTypeO12dateOfExpiryyA2CmFWC) return cases::dateOfExpiry;
    if (tag == _impl::$s7BlinkID9FieldTypeO11dateOfIssueyA2CmFWC) return cases::dateOfIssue;
    if (tag == _impl::$s7BlinkID9FieldTypeO24documentAdditionalNumberyA2CmFWC) return cases::documentAdditionalNumber;
    if (tag == _impl::$s7BlinkID9FieldTypeO32documentOptionalAdditionalNumberyA2CmFWC) return cases::documentOptionalAdditionalNumber;
    if (tag == _impl::$s7BlinkID9FieldTypeO14documentNumberyA2CmFWC) return cases::documentNumber;
    if (tag == _impl::$s7BlinkID9FieldTypeO8employeryA2CmFWC) return cases::employer;
    if (tag == _impl::$s7BlinkID9FieldTypeO12endorsementsyA2CmFWC) return cases::endorsements;
    if (tag == _impl::$s7BlinkID9FieldTypeO11fathersNameyA2CmFWC) return cases::fathersName;
    if (tag == _impl::$s7BlinkID9FieldTypeO9firstNameyA2CmFWC) return cases::firstName;
    if (tag == _impl::$s7BlinkID9FieldTypeO8fullNameyA2CmFWC) return cases::fullName;
    if (tag == _impl::$s7BlinkID9FieldTypeO16issuingAuthorityyA2CmFWC) return cases::issuingAuthority;
    if (tag == _impl::$s7BlinkID9FieldTypeO8lastNameyA2CmFWC) return cases::lastName;
    if (tag == _impl::$s7BlinkID9FieldTypeO07licenceD0yA2CmFWC) return cases::licenceType;
    if (tag == _impl::$s7BlinkID9FieldTypeO13localizedNameyA2CmFWC) return cases::localizedName;
    if (tag == _impl::$s7BlinkID9FieldTypeO13maritalStatusyA2CmFWC) return cases::maritalStatus;
    if (tag == _impl::$s7BlinkID9FieldTypeO11mothersNameyA2CmFWC) return cases::mothersName;
    if (tag == _impl::$s7BlinkID9FieldTypeO3mrzyA2CmFWC) return cases::mrz;
    if (tag == _impl::$s7BlinkID9FieldTypeO11nationalityyA2CmFWC) return cases::nationality;
    if (tag == _impl::$s7BlinkID9FieldTypeO16personalIdNumberyA2CmFWC) return cases::personalIdNumber;
    if (tag == _impl::$s7BlinkID9FieldTypeO12placeOfBirthyA2CmFWC) return cases::placeOfBirth;
    if (tag == _impl::$s7BlinkID9FieldTypeO10professionyA2CmFWC) return cases::profession;
    if (tag == _impl::$s7BlinkID9FieldTypeO4raceyA2CmFWC) return cases::race;
    if (tag == _impl::$s7BlinkID9FieldTypeO8religionyA2CmFWC) return cases::religion;
    if (tag == _impl::$s7BlinkID9FieldTypeO17residentialStatusyA2CmFWC) return cases::residentialStatus;
    if (tag == _impl::$s7BlinkID9FieldTypeO12restrictionsyA2CmFWC) return cases::restrictions;
    if (tag == _impl::$s7BlinkID9FieldTypeO3sexyA2CmFWC) return cases::sex;
    if (tag == _impl::$s7BlinkID9FieldTypeO12vehicleClassyA2CmFWC) return cases::vehicleClass;
    if (tag == _impl::$s7BlinkID9FieldTypeO05bloodD0yA2CmFWC) return cases::bloodType;
    if (tag == _impl::$s7BlinkID9FieldTypeO7sponsoryA2CmFWC) return cases::sponsor;
    if (tag == _impl::$s7BlinkID9FieldTypeO04visaD0yA2CmFWC) return cases::visaType;
    if (tag == _impl::$s7BlinkID9FieldTypeO15documentSubtypeyA2CmFWC) return cases::documentSubtype;
    if (tag == _impl::$s7BlinkID9FieldTypeO7remarksyA2CmFWC) return cases::remarks;
    if (tag == _impl::$s7BlinkID9FieldTypeO015residencePermitD0yA2CmFWC) return cases::residencePermitType;
    if (tag == _impl::$s7BlinkID9FieldTypeO17manufacturingYearyA2CmFWC) return cases::manufacturingYear;
    if (tag == _impl::$s7BlinkID9FieldTypeO07vehicleD0yA2CmFWC) return cases::vehicleType;
    if (tag == _impl::$s7BlinkID9FieldTypeO20dependentDateOfBirthyA2CmFWC) return cases::dependentDateOfBirth;
    if (tag == _impl::$s7BlinkID9FieldTypeO12dependentSexyA2CmFWC) return cases::dependentSex;
    if (tag == _impl::$s7BlinkID9FieldTypeO23dependentDocumentNumberyA2CmFWC) return cases::dependentDocumentNumber;
    if (tag == _impl::$s7BlinkID9FieldTypeO17dependentFullNameyA2CmFWC) return cases::dependentFullName;
    if (tag == _impl::$s7BlinkID9FieldTypeO19eligibilityCategoryyA2CmFWC) return cases::eligibilityCategory;
    if (tag == _impl::$s7BlinkID9FieldTypeO24specificDocumentValidityyA2CmFWC) return cases::specificDocumentValidity;
    if (tag == _impl::$s7BlinkID9FieldTypeO12vehicleOwneryA2CmFWC) return cases::vehicleOwner;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<FieldType> init(const swift::String& rawValue) SWIFT_SYMBOL("s:7BlinkID9FieldTypeO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:7BlinkID9FieldTypeO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK FieldType(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK FieldType _make() noexcept {
    auto metadata = _impl::$s7BlinkID9FieldTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return FieldType(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID9FieldTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID9FieldTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID9FieldTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_FieldType;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID9FieldTypeOD;
  static inline constexpr $s7BlinkID9FieldTypeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_FieldType {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(FieldType &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const FieldType &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER FieldType returnNewValue(T callable) {
    auto result = FieldType::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID9FieldTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::FieldType> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID9FieldTypeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::FieldType> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::FieldType> = true;
template<>
struct implClassFor<BlinkID::FieldType> { using type = BlinkID::_impl::_impl_FieldType; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {



class SWIFT_SYMBOL("s:7BlinkID0A5IDSDKV13ProcessResultV") ProcessResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::ProcessResult> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID12SessionErrorO") SessionError;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::SessionError> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID18FrameProcessResultV") FrameProcessResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::FrameProcessResult> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_FrameProcessResult;

// Type metadata accessor for FrameProcessResult
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID18FrameProcessResultVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID18FrameProcessResultV") FrameProcessResult final {
public:
  SWIFT_INLINE_THUNK ~FrameProcessResult() noexcept {
    auto metadata = _impl::$s7BlinkID18FrameProcessResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK FrameProcessResult(const FrameProcessResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID18FrameProcessResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK FrameProcessResult &operator =(const FrameProcessResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID18FrameProcessResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK FrameProcessResult &operator =(FrameProcessResult &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER FrameProcessResult(FrameProcessResult &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Optional<SessionError> getSessionError() const SWIFT_SYMBOL("s:7BlinkID18FrameProcessResultV12sessionErrorAA07SessionG0OSgvp");
private:
  SWIFT_INLINE_THUNK FrameProcessResult(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK FrameProcessResult _make() noexcept {
    auto metadata = _impl::$s7BlinkID18FrameProcessResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return FrameProcessResult(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_FrameProcessResult;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID18FrameProcessResultVD;
  static inline constexpr $s7BlinkID18FrameProcessResultVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_FrameProcessResult {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(FrameProcessResult &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const FrameProcessResult &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER FrameProcessResult returnNewValue(T callable) {
    auto result = FrameProcessResult::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID18FrameProcessResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::FrameProcessResult> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID18FrameProcessResultVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::FrameProcessResult> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::FrameProcessResult> = true;
template<>
struct implClassFor<BlinkID::FrameProcessResult> { using type = BlinkID::_impl::_impl_FrameProcessResult; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID28ImageAnalysisDetectionStatusO") ImageAnalysisDetectionStatus;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::ImageAnalysisDetectionStatus> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
/// Detection status determined from the scanned image.
namespace _impl {

class _impl_ImageAnalysisDetectionStatus;

// Type metadata accessor for ImageAnalysisDetectionStatus
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID28ImageAnalysisDetectionStatusOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum ImageAnalysisDetectionStatus
extern "C" {
extern unsigned $s7BlinkID28ImageAnalysisDetectionStatusO12notAvailableyA2CmFWC;
extern unsigned $s7BlinkID28ImageAnalysisDetectionStatusO11notDetectedyA2CmFWC;
extern unsigned $s7BlinkID28ImageAnalysisDetectionStatusO8detectedyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID28ImageAnalysisDetectionStatusO") ImageAnalysisDetectionStatus final {
public:
  SWIFT_INLINE_THUNK ~ImageAnalysisDetectionStatus() noexcept {
    auto metadata = _impl::$s7BlinkID28ImageAnalysisDetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus(const ImageAnalysisDetectionStatus &other) noexcept {
    auto metadata = _impl::$s7BlinkID28ImageAnalysisDetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus &operator =(const ImageAnalysisDetectionStatus &other) noexcept {
    auto metadata = _impl::$s7BlinkID28ImageAnalysisDetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus &operator =(ImageAnalysisDetectionStatus &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ImageAnalysisDetectionStatus(ImageAnalysisDetectionStatus &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    notAvailable SWIFT_SYMBOL("s:7BlinkID28ImageAnalysisDetectionStatusO12notAvailableyA2CmF"),
    notDetected SWIFT_SYMBOL("s:7BlinkID28ImageAnalysisDetectionStatusO11notDetectedyA2CmF"),
    detected SWIFT_SYMBOL("s:7BlinkID28ImageAnalysisDetectionStatusO8detectedyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_notAvailable {  // impl struct for case notAvailable
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::notAvailable;
    }
    SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus operator()() const;
  } notAvailable SWIFT_SYMBOL("s:7BlinkID28ImageAnalysisDetectionStatusO12notAvailableyA2CmF");
  SWIFT_INLINE_THUNK bool isNotAvailable() const;

  inline const static struct _impl_notDetected {  // impl struct for case notDetected
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::notDetected;
    }
    SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus operator()() const;
  } notDetected SWIFT_SYMBOL("s:7BlinkID28ImageAnalysisDetectionStatusO11notDetectedyA2CmF");
  SWIFT_INLINE_THUNK bool isNotDetected() const;

  inline const static struct _impl_detected {  // impl struct for case detected
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::detected;
    }
    SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus operator()() const;
  } detected SWIFT_SYMBOL("s:7BlinkID28ImageAnalysisDetectionStatusO8detectedyA2CmF");
  SWIFT_INLINE_THUNK bool isDetected() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID28ImageAnalysisDetectionStatusO12notAvailableyA2CmFWC) return cases::notAvailable;
    if (tag == _impl::$s7BlinkID28ImageAnalysisDetectionStatusO11notDetectedyA2CmFWC) return cases::notDetected;
    if (tag == _impl::$s7BlinkID28ImageAnalysisDetectionStatusO8detectedyA2CmFWC) return cases::detected;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<ImageAnalysisDetectionStatus> init(swift::Int rawValue) SWIFT_SYMBOL("s:7BlinkID28ImageAnalysisDetectionStatusO8rawValueACSgSi_tcfc");
  SWIFT_INLINE_THUNK swift::Int getRawValue() const SWIFT_SYMBOL("s:7BlinkID28ImageAnalysisDetectionStatusO8rawValueSivp");
private:
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus _make() noexcept {
    auto metadata = _impl::$s7BlinkID28ImageAnalysisDetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ImageAnalysisDetectionStatus(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID28ImageAnalysisDetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID28ImageAnalysisDetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID28ImageAnalysisDetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ImageAnalysisDetectionStatus;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID28ImageAnalysisDetectionStatusOD;
  static inline constexpr $s7BlinkID28ImageAnalysisDetectionStatusOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ImageAnalysisDetectionStatus {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ImageAnalysisDetectionStatus &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ImageAnalysisDetectionStatus &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ImageAnalysisDetectionStatus returnNewValue(T callable) {
    auto result = ImageAnalysisDetectionStatus::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID28ImageAnalysisDetectionStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::ImageAnalysisDetectionStatus> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID28ImageAnalysisDetectionStatusOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::ImageAnalysisDetectionStatus> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::ImageAnalysisDetectionStatus> = true;
template<>
struct implClassFor<BlinkID::ImageAnalysisDetectionStatus> { using type = BlinkID::_impl::_impl_ImageAnalysisDetectionStatus; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID27ImageAnalysisLightingStatusO") ImageAnalysisLightingStatus;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::ImageAnalysisLightingStatus> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
/// Defines possible lighting statuses.
namespace _impl {

class _impl_ImageAnalysisLightingStatus;

// Type metadata accessor for ImageAnalysisLightingStatus
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID27ImageAnalysisLightingStatusOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum ImageAnalysisLightingStatus
extern "C" {
extern unsigned $s7BlinkID27ImageAnalysisLightingStatusO12notAvailableyA2CmFWC;
extern unsigned $s7BlinkID27ImageAnalysisLightingStatusO9tooBrightyA2CmFWC;
extern unsigned $s7BlinkID27ImageAnalysisLightingStatusO7tooDarkyA2CmFWC;
extern unsigned $s7BlinkID27ImageAnalysisLightingStatusO6normalyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID27ImageAnalysisLightingStatusO") ImageAnalysisLightingStatus final {
public:
  SWIFT_INLINE_THUNK ~ImageAnalysisLightingStatus() noexcept {
    auto metadata = _impl::$s7BlinkID27ImageAnalysisLightingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ImageAnalysisLightingStatus(const ImageAnalysisLightingStatus &other) noexcept {
    auto metadata = _impl::$s7BlinkID27ImageAnalysisLightingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ImageAnalysisLightingStatus &operator =(const ImageAnalysisLightingStatus &other) noexcept {
    auto metadata = _impl::$s7BlinkID27ImageAnalysisLightingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ImageAnalysisLightingStatus &operator =(ImageAnalysisLightingStatus &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ImageAnalysisLightingStatus(ImageAnalysisLightingStatus &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    notAvailable SWIFT_SYMBOL("s:7BlinkID27ImageAnalysisLightingStatusO12notAvailableyA2CmF"),
    tooBright SWIFT_SYMBOL("s:7BlinkID27ImageAnalysisLightingStatusO9tooBrightyA2CmF"),
    tooDark SWIFT_SYMBOL("s:7BlinkID27ImageAnalysisLightingStatusO7tooDarkyA2CmF"),
    normal SWIFT_SYMBOL("s:7BlinkID27ImageAnalysisLightingStatusO6normalyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_notAvailable {  // impl struct for case notAvailable
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::notAvailable;
    }
    SWIFT_INLINE_THUNK ImageAnalysisLightingStatus operator()() const;
  } notAvailable SWIFT_SYMBOL("s:7BlinkID27ImageAnalysisLightingStatusO12notAvailableyA2CmF");
  SWIFT_INLINE_THUNK bool isNotAvailable() const;

  inline const static struct _impl_tooBright {  // impl struct for case tooBright
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tooBright;
    }
    SWIFT_INLINE_THUNK ImageAnalysisLightingStatus operator()() const;
  } tooBright SWIFT_SYMBOL("s:7BlinkID27ImageAnalysisLightingStatusO9tooBrightyA2CmF");
  SWIFT_INLINE_THUNK bool isTooBright() const;

  inline const static struct _impl_tooDark {  // impl struct for case tooDark
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tooDark;
    }
    SWIFT_INLINE_THUNK ImageAnalysisLightingStatus operator()() const;
  } tooDark SWIFT_SYMBOL("s:7BlinkID27ImageAnalysisLightingStatusO7tooDarkyA2CmF");
  SWIFT_INLINE_THUNK bool isTooDark() const;

  inline const static struct _impl_normal {  // impl struct for case normal
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::normal;
    }
    SWIFT_INLINE_THUNK ImageAnalysisLightingStatus operator()() const;
  } normal SWIFT_SYMBOL("s:7BlinkID27ImageAnalysisLightingStatusO6normalyA2CmF");
  SWIFT_INLINE_THUNK bool isNormal() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID27ImageAnalysisLightingStatusO12notAvailableyA2CmFWC) return cases::notAvailable;
    if (tag == _impl::$s7BlinkID27ImageAnalysisLightingStatusO9tooBrightyA2CmFWC) return cases::tooBright;
    if (tag == _impl::$s7BlinkID27ImageAnalysisLightingStatusO7tooDarkyA2CmFWC) return cases::tooDark;
    if (tag == _impl::$s7BlinkID27ImageAnalysisLightingStatusO6normalyA2CmFWC) return cases::normal;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:7BlinkID27ImageAnalysisLightingStatusO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK ImageAnalysisLightingStatus(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ImageAnalysisLightingStatus _make() noexcept {
    auto metadata = _impl::$s7BlinkID27ImageAnalysisLightingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ImageAnalysisLightingStatus(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID27ImageAnalysisLightingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID27ImageAnalysisLightingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID27ImageAnalysisLightingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ImageAnalysisLightingStatus;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID27ImageAnalysisLightingStatusOD;
  static inline constexpr $s7BlinkID27ImageAnalysisLightingStatusOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ImageAnalysisLightingStatus {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ImageAnalysisLightingStatus &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ImageAnalysisLightingStatus &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ImageAnalysisLightingStatus returnNewValue(T callable) {
    auto result = ImageAnalysisLightingStatus::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID27ImageAnalysisLightingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::ImageAnalysisLightingStatus> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID27ImageAnalysisLightingStatusOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::ImageAnalysisLightingStatus> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::ImageAnalysisLightingStatus> = true;
template<>
struct implClassFor<BlinkID::ImageAnalysisLightingStatus> { using type = BlinkID::_impl::_impl_ImageAnalysisLightingStatus; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID19ImageExtractionTypeO") ImageExtractionType;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::ImageExtractionType> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
/// Represents the types of images that can be extracted from the document.
namespace _impl {

class _impl_ImageExtractionType;

// Type metadata accessor for ImageExtractionType
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID19ImageExtractionTypeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum ImageExtractionType
extern "C" {
extern unsigned $s7BlinkID19ImageExtractionTypeO12fullDocumentyA2CmFWC;
extern unsigned $s7BlinkID19ImageExtractionTypeO4faceyA2CmFWC;
extern unsigned $s7BlinkID19ImageExtractionTypeO9signatureyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID19ImageExtractionTypeO") ImageExtractionType final {
public:
  SWIFT_INLINE_THUNK ~ImageExtractionType() noexcept {
    auto metadata = _impl::$s7BlinkID19ImageExtractionTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ImageExtractionType(const ImageExtractionType &other) noexcept {
    auto metadata = _impl::$s7BlinkID19ImageExtractionTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ImageExtractionType &operator =(const ImageExtractionType &other) noexcept {
    auto metadata = _impl::$s7BlinkID19ImageExtractionTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ImageExtractionType &operator =(ImageExtractionType &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ImageExtractionType(ImageExtractionType &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    fullDocument SWIFT_SYMBOL("s:7BlinkID19ImageExtractionTypeO12fullDocumentyA2CmF"),
    face SWIFT_SYMBOL("s:7BlinkID19ImageExtractionTypeO4faceyA2CmF"),
    signature SWIFT_SYMBOL("s:7BlinkID19ImageExtractionTypeO9signatureyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_fullDocument {  // impl struct for case fullDocument
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::fullDocument;
    }
    SWIFT_INLINE_THUNK ImageExtractionType operator()() const;
  } fullDocument SWIFT_SYMBOL("s:7BlinkID19ImageExtractionTypeO12fullDocumentyA2CmF");
  SWIFT_INLINE_THUNK bool isFullDocument() const;

  inline const static struct _impl_face {  // impl struct for case face
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::face;
    }
    SWIFT_INLINE_THUNK ImageExtractionType operator()() const;
  } face SWIFT_SYMBOL("s:7BlinkID19ImageExtractionTypeO4faceyA2CmF");
  SWIFT_INLINE_THUNK bool isFace() const;

  inline const static struct _impl_signature {  // impl struct for case signature
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::signature;
    }
    SWIFT_INLINE_THUNK ImageExtractionType operator()() const;
  } signature SWIFT_SYMBOL("s:7BlinkID19ImageExtractionTypeO9signatureyA2CmF");
  SWIFT_INLINE_THUNK bool isSignature() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID19ImageExtractionTypeO12fullDocumentyA2CmFWC) return cases::fullDocument;
    if (tag == _impl::$s7BlinkID19ImageExtractionTypeO4faceyA2CmFWC) return cases::face;
    if (tag == _impl::$s7BlinkID19ImageExtractionTypeO9signatureyA2CmFWC) return cases::signature;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:7BlinkID19ImageExtractionTypeO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK ImageExtractionType(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ImageExtractionType _make() noexcept {
    auto metadata = _impl::$s7BlinkID19ImageExtractionTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ImageExtractionType(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID19ImageExtractionTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID19ImageExtractionTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID19ImageExtractionTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ImageExtractionType;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID19ImageExtractionTypeOD;
  static inline constexpr $s7BlinkID19ImageExtractionTypeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ImageExtractionType {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ImageExtractionType &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ImageExtractionType &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ImageExtractionType returnNewValue(T callable) {
    auto result = ImageExtractionType::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID19ImageExtractionTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::ImageExtractionType> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID19ImageExtractionTypeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::ImageExtractionType> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::ImageExtractionType> = true;
template<>
struct implClassFor<BlinkID::ImageExtractionType> { using type = BlinkID::_impl::_impl_ImageExtractionType; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID16ImageOrientationO") ImageOrientation;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::ImageOrientation> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
/// Represents the orientation of an image in the document verification process.
/// This enum defines the possible orientations of captured images, including
/// both standard and mirrored orientations.
namespace _impl {

class _impl_ImageOrientation;

// Type metadata accessor for ImageOrientation
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID16ImageOrientationOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum ImageOrientation
extern "C" {
extern unsigned $s7BlinkID16ImageOrientationO2upyA2CmFWC;
extern unsigned $s7BlinkID16ImageOrientationO4downyA2CmFWC;
extern unsigned $s7BlinkID16ImageOrientationO4leftyA2CmFWC;
extern unsigned $s7BlinkID16ImageOrientationO5rightyA2CmFWC;
extern unsigned $s7BlinkID16ImageOrientationO10upMirroredyA2CmFWC;
extern unsigned $s7BlinkID16ImageOrientationO12downMirroredyA2CmFWC;
extern unsigned $s7BlinkID16ImageOrientationO12leftMirroredyA2CmFWC;
extern unsigned $s7BlinkID16ImageOrientationO13rightMirroredyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID16ImageOrientationO") ImageOrientation final {
public:
  SWIFT_INLINE_THUNK ~ImageOrientation() noexcept {
    auto metadata = _impl::$s7BlinkID16ImageOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ImageOrientation(const ImageOrientation &other) noexcept {
    auto metadata = _impl::$s7BlinkID16ImageOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ImageOrientation &operator =(const ImageOrientation &other) noexcept {
    auto metadata = _impl::$s7BlinkID16ImageOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ImageOrientation &operator =(ImageOrientation &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ImageOrientation(ImageOrientation &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    up SWIFT_SYMBOL("s:7BlinkID16ImageOrientationO2upyA2CmF"),
    down SWIFT_SYMBOL("s:7BlinkID16ImageOrientationO4downyA2CmF"),
    left SWIFT_SYMBOL("s:7BlinkID16ImageOrientationO4leftyA2CmF"),
    right SWIFT_SYMBOL("s:7BlinkID16ImageOrientationO5rightyA2CmF"),
    upMirrored SWIFT_SYMBOL("s:7BlinkID16ImageOrientationO10upMirroredyA2CmF"),
    downMirrored SWIFT_SYMBOL("s:7BlinkID16ImageOrientationO12downMirroredyA2CmF"),
    leftMirrored SWIFT_SYMBOL("s:7BlinkID16ImageOrientationO12leftMirroredyA2CmF"),
    rightMirrored SWIFT_SYMBOL("s:7BlinkID16ImageOrientationO13rightMirroredyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_up {  // impl struct for case up
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::up;
    }
    SWIFT_INLINE_THUNK ImageOrientation operator()() const;
  } up SWIFT_SYMBOL("s:7BlinkID16ImageOrientationO2upyA2CmF");
  SWIFT_INLINE_THUNK bool isUp() const;

  inline const static struct _impl_down {  // impl struct for case down
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::down;
    }
    SWIFT_INLINE_THUNK ImageOrientation operator()() const;
  } down SWIFT_SYMBOL("s:7BlinkID16ImageOrientationO4downyA2CmF");
  SWIFT_INLINE_THUNK bool isDown() const;

  inline const static struct _impl_left {  // impl struct for case left
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::left;
    }
    SWIFT_INLINE_THUNK ImageOrientation operator()() const;
  } left SWIFT_SYMBOL("s:7BlinkID16ImageOrientationO4leftyA2CmF");
  SWIFT_INLINE_THUNK bool isLeft() const;

  inline const static struct _impl_right {  // impl struct for case right
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::right;
    }
    SWIFT_INLINE_THUNK ImageOrientation operator()() const;
  } right SWIFT_SYMBOL("s:7BlinkID16ImageOrientationO5rightyA2CmF");
  SWIFT_INLINE_THUNK bool isRight() const;

  inline const static struct _impl_upMirrored {  // impl struct for case upMirrored
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::upMirrored;
    }
    SWIFT_INLINE_THUNK ImageOrientation operator()() const;
  } upMirrored SWIFT_SYMBOL("s:7BlinkID16ImageOrientationO10upMirroredyA2CmF");
  SWIFT_INLINE_THUNK bool isUpMirrored() const;

  inline const static struct _impl_downMirrored {  // impl struct for case downMirrored
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::downMirrored;
    }
    SWIFT_INLINE_THUNK ImageOrientation operator()() const;
  } downMirrored SWIFT_SYMBOL("s:7BlinkID16ImageOrientationO12downMirroredyA2CmF");
  SWIFT_INLINE_THUNK bool isDownMirrored() const;

  inline const static struct _impl_leftMirrored {  // impl struct for case leftMirrored
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::leftMirrored;
    }
    SWIFT_INLINE_THUNK ImageOrientation operator()() const;
  } leftMirrored SWIFT_SYMBOL("s:7BlinkID16ImageOrientationO12leftMirroredyA2CmF");
  SWIFT_INLINE_THUNK bool isLeftMirrored() const;

  inline const static struct _impl_rightMirrored {  // impl struct for case rightMirrored
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::rightMirrored;
    }
    SWIFT_INLINE_THUNK ImageOrientation operator()() const;
  } rightMirrored SWIFT_SYMBOL("s:7BlinkID16ImageOrientationO13rightMirroredyA2CmF");
  SWIFT_INLINE_THUNK bool isRightMirrored() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID16ImageOrientationO2upyA2CmFWC) return cases::up;
    if (tag == _impl::$s7BlinkID16ImageOrientationO4downyA2CmFWC) return cases::down;
    if (tag == _impl::$s7BlinkID16ImageOrientationO4leftyA2CmFWC) return cases::left;
    if (tag == _impl::$s7BlinkID16ImageOrientationO5rightyA2CmFWC) return cases::right;
    if (tag == _impl::$s7BlinkID16ImageOrientationO10upMirroredyA2CmFWC) return cases::upMirrored;
    if (tag == _impl::$s7BlinkID16ImageOrientationO12downMirroredyA2CmFWC) return cases::downMirrored;
    if (tag == _impl::$s7BlinkID16ImageOrientationO12leftMirroredyA2CmFWC) return cases::leftMirrored;
    if (tag == _impl::$s7BlinkID16ImageOrientationO13rightMirroredyA2CmFWC) return cases::rightMirrored;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:7BlinkID16ImageOrientationO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK ImageOrientation(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ImageOrientation _make() noexcept {
    auto metadata = _impl::$s7BlinkID16ImageOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ImageOrientation(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID16ImageOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID16ImageOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID16ImageOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ImageOrientation;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID16ImageOrientationOD;
  static inline constexpr $s7BlinkID16ImageOrientationOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ImageOrientation {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ImageOrientation &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ImageOrientation &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ImageOrientation returnNewValue(T callable) {
    auto result = ImageOrientation::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID16ImageOrientationOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::ImageOrientation> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID16ImageOrientationOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::ImageOrientation> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::ImageOrientation> = true;
template<>
struct implClassFor<BlinkID::ImageOrientation> { using type = BlinkID::_impl::_impl_ImageOrientation; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {


/// A class representing an input image for document verification.
/// This class wraps either a UIImage or camera frame and prepares it for
/// processing by the document verification system. It handles proper
/// orientation and region of interest settings.
/// Example usage:
/// \code
/// // Create from UIImage
/// let inputImage1 = InputImage(
///     uiImage: documentImage,
///     regionOfInterest: RegionOfInterest(x: 0, y: 0, width: 1.0, height: 1.0)
/// )
///
/// // Create from camera frame
/// let inputImage2 = InputImage(cameraFrame: cameraFrame)
///
/// \endcode
class SWIFT_SYMBOL("s:7BlinkID10InputImageC") InputImage;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::InputImage> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_InputImage;
// Type metadata accessor for InputImage
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID10InputImageCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID10InputImageC") InputImage final : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
/// Creates an input image from a UIImage.
/// \param uiImage The source UIImage
///
/// \param regionOfInterest Optional region of interest within the image
///
  static SWIFT_INLINE_THUNK InputImage init(UIImage *_Nonnull uiImage, const RegionOfInterest& regionOfInterest) SWIFT_SYMBOL("s:7BlinkID10InputImageC02uiD016regionOfInterestACSo7UIImageC_AA06RegiongH0Vtcfc");
/// Creates an input image from a camera frame.
/// \param cameraFrame The source camera frame containing image data
///
  static SWIFT_INLINE_THUNK InputImage init(const CameraFrame& cameraFrame) SWIFT_SYMBOL("s:7BlinkID10InputImageC11cameraFrameAcA06CameraF0V_tcfc");
protected:
  SWIFT_INLINE_THUNK InputImage(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_InputImage;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID10InputImageCD;
  static inline constexpr $s7BlinkID10InputImageCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_InputImage {
public:
static SWIFT_INLINE_THUNK InputImage makeRetained(void * _Nonnull ptr) noexcept { return InputImage(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::InputImage> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID10InputImageCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<BlinkID::InputImage> { using type = BlinkID::_impl::_impl_InputImage; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO") ProcessingStatus;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::ProcessingStatus> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID13QuadrilateralV") Quadrilateral;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::Quadrilateral> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
class SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV") InputImageAnalysisResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::InputImageAnalysisResult> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_InputImageAnalysisResult;

// Type metadata accessor for InputImageAnalysisResult
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID24InputImageAnalysisResultVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV") InputImageAnalysisResult final {
public:
  SWIFT_INLINE_THUNK ~InputImageAnalysisResult() noexcept {
    auto metadata = _impl::$s7BlinkID24InputImageAnalysisResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK InputImageAnalysisResult(const InputImageAnalysisResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID24InputImageAnalysisResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK InputImageAnalysisResult &operator =(const InputImageAnalysisResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID24InputImageAnalysisResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK InputImageAnalysisResult &operator =(InputImageAnalysisResult &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER InputImageAnalysisResult(InputImageAnalysisResult &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK ProcessingStatus getProcessingStatus() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV16processingStatusAA010ProcessingH0Ovp");
  SWIFT_INLINE_THUNK swift::Array<FieldType> getMissingMandatoryFields() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV22missingMandatoryFieldsSayAA9FieldTypeOGvp");
  SWIFT_INLINE_THUNK swift::Array<FieldType> getExtractedFields() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV15extractedFieldsSayAA9FieldTypeOGvp");
  SWIFT_INLINE_THUNK swift::Array<FieldType> getInvalidCharacterFields() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV22invalidCharacterFieldsSayAA9FieldTypeOGvp");
  SWIFT_INLINE_THUNK swift::Array<FieldType> getExtraPresentFields() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV18extraPresentFieldsSayAA9FieldTypeOGvp");
  SWIFT_INLINE_THUNK swift::Array<ImageExtractionType> getImageExtractionFailures() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV23imageExtractionFailuresSayAA0dH4TypeOGvp");
  SWIFT_INLINE_THUNK ScanningSide getScanningSide() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV12scanningSideAA08ScanningH0Ovp");
  SWIFT_INLINE_THUNK DetectionStatus getDocumentDetectionStatus() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV23documentDetectionStatusAA0hI0Ovp");
  SWIFT_INLINE_THUNK swift::Optional<Quadrilateral> getDocumentLocation() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV16documentLocationAA13QuadrilateralVSgvp");
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus getBlurDetectionStatus() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV19blurDetectionStatusAA0dehI0Ovp");
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus getGlareDetectionStatus() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV20glareDetectionStatusAA0dehI0Ovp");
  SWIFT_INLINE_THUNK DocumentImageColorStatus getDocumentColorStatus() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV19documentColorStatusAA08DocumentdhI0Ovp");
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus getDocumentMoireStatus() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV19documentMoireStatusAA0de9DetectionI0Ovp");
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus getFaceDetectionStatus() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV19faceDetectionStatusAA0dehI0Ovp");
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus getMrzDetectionStatus() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV18mrzDetectionStatusAA0dehI0Ovp");
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus getBarcodeDetectionStatus() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV22barcodeDetectionStatusAA0dehI0Ovp");
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus getRealIDDetectionStatus() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV21realIDDetectionStatusAA0de9DetectionI0Ovp");
  SWIFT_INLINE_THUNK ImageAnalysisLightingStatus getDocumentLightingStatus() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV22documentLightingStatusAA0dehI0Ovp");
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus getDocumentHandOcclusionStatus() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV27documentHandOcclusionStatusAA0de9DetectionJ0Ovp");
  SWIFT_INLINE_THUNK DocumentOrientation getDocumentOrientation() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV19documentOrientationAA08DocumentH0Ovp");
  SWIFT_INLINE_THUNK DocumentRotation getDocumentRotation() const SWIFT_SYMBOL("s:7BlinkID24InputImageAnalysisResultV16documentRotationAA08DocumentH0Ovp");
private:
  SWIFT_INLINE_THUNK InputImageAnalysisResult(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK InputImageAnalysisResult _make() noexcept {
    auto metadata = _impl::$s7BlinkID24InputImageAnalysisResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return InputImageAnalysisResult(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_InputImageAnalysisResult;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID24InputImageAnalysisResultVD;
  static inline constexpr $s7BlinkID24InputImageAnalysisResultVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_InputImageAnalysisResult {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(InputImageAnalysisResult &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const InputImageAnalysisResult &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER InputImageAnalysisResult returnNewValue(T callable) {
    auto result = InputImageAnalysisResult::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID24InputImageAnalysisResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::InputImageAnalysisResult> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID24InputImageAnalysisResultVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::InputImageAnalysisResult> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::InputImageAnalysisResult> = true;
template<>
struct implClassFor<BlinkID::InputImageAnalysisResult> { using type = BlinkID::_impl::_impl_InputImageAnalysisResult; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

namespace _impl {

class _impl_InputImageResult;

// Type metadata accessor for InputImageResult
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID16InputImageResultVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID16InputImageResultV") InputImageResult final {
public:
  SWIFT_INLINE_THUNK ~InputImageResult() noexcept {
    auto metadata = _impl::$s7BlinkID16InputImageResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK InputImageResult(const InputImageResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID16InputImageResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK InputImageResult &operator =(const InputImageResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID16InputImageResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK InputImageResult &operator =(InputImageResult &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER InputImageResult(InputImageResult &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK UIImage *_Nullable getUiImage() const SWIFT_SYMBOL("s:7BlinkID16InputImageResultV02uiD0So7UIImageCSgvp");
private:
  SWIFT_INLINE_THUNK InputImageResult(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK InputImageResult _make() noexcept {
    auto metadata = _impl::$s7BlinkID16InputImageResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return InputImageResult(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_InputImageResult;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID16InputImageResultVD;
  static inline constexpr $s7BlinkID16InputImageResultVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_InputImageResult {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(InputImageResult &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const InputImageResult &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER InputImageResult returnNewValue(T callable) {
    auto result = InputImageResult::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID16InputImageResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::InputImageResult> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID16InputImageResultVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::InputImageResult> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::InputImageResult> = true;
template<>
struct implClassFor<BlinkID::InputImageResult> { using type = BlinkID::_impl::_impl_InputImageResult; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

/// Represents the source type of an image.
/// This enum class is used to indicate whether an image was obtained
/// from a video stream or a single-source input such as a standalone photo.
namespace _impl {

class _impl_InputImageSource;

// Type metadata accessor for InputImageSource
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID16InputImageSourceOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum InputImageSource
extern "C" {
extern unsigned $s7BlinkID16InputImageSourceO5videoyA2CmFWC;
extern unsigned $s7BlinkID16InputImageSourceO5photoyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID16InputImageSourceO") InputImageSource final {
public:
  SWIFT_INLINE_THUNK ~InputImageSource() noexcept {
    auto metadata = _impl::$s7BlinkID16InputImageSourceOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK InputImageSource(const InputImageSource &other) noexcept {
    auto metadata = _impl::$s7BlinkID16InputImageSourceOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK InputImageSource &operator =(const InputImageSource &other) noexcept {
    auto metadata = _impl::$s7BlinkID16InputImageSourceOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK InputImageSource &operator =(InputImageSource &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER InputImageSource(InputImageSource &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    video SWIFT_SYMBOL("s:7BlinkID16InputImageSourceO5videoyA2CmF"),
    photo SWIFT_SYMBOL("s:7BlinkID16InputImageSourceO5photoyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_video {  // impl struct for case video
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::video;
    }
    SWIFT_INLINE_THUNK InputImageSource operator()() const;
  } video SWIFT_SYMBOL("s:7BlinkID16InputImageSourceO5videoyA2CmF");
  SWIFT_INLINE_THUNK bool isVideo() const;

  inline const static struct _impl_photo {  // impl struct for case photo
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::photo;
    }
    SWIFT_INLINE_THUNK InputImageSource operator()() const;
  } photo SWIFT_SYMBOL("s:7BlinkID16InputImageSourceO5photoyA2CmF");
  SWIFT_INLINE_THUNK bool isPhoto() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID16InputImageSourceO5videoyA2CmFWC) return cases::video;
    if (tag == _impl::$s7BlinkID16InputImageSourceO5photoyA2CmFWC) return cases::photo;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:7BlinkID16InputImageSourceO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK InputImageSource(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK InputImageSource _make() noexcept {
    auto metadata = _impl::$s7BlinkID16InputImageSourceOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return InputImageSource(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID16InputImageSourceOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID16InputImageSourceOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID16InputImageSourceOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_InputImageSource;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID16InputImageSourceOD;
  static inline constexpr $s7BlinkID16InputImageSourceOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_InputImageSource {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(InputImageSource &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const InputImageSource &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER InputImageSource returnNewValue(T callable) {
    auto result = InputImageSource::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID16InputImageSourceOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::InputImageSource> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID16InputImageSourceOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::InputImageSource> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::InputImageSource> = true;
template<>
struct implClassFor<BlinkID::InputImageSource> { using type = BlinkID::_impl::_impl_InputImageSource; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID22InvalidLicenseKeyErrorV") InvalidLicenseKeyError;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::InvalidLicenseKeyError> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_InvalidLicenseKeyError;

// Type metadata accessor for InvalidLicenseKeyError
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID22InvalidLicenseKeyErrorVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID22InvalidLicenseKeyErrorV") InvalidLicenseKeyError final {
public:
  SWIFT_INLINE_THUNK ~InvalidLicenseKeyError() noexcept {
    auto metadata = _impl::$s7BlinkID22InvalidLicenseKeyErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK InvalidLicenseKeyError(const InvalidLicenseKeyError &other) noexcept {
    auto metadata = _impl::$s7BlinkID22InvalidLicenseKeyErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK InvalidLicenseKeyError &operator =(const InvalidLicenseKeyError &other) noexcept {
    auto metadata = _impl::$s7BlinkID22InvalidLicenseKeyErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK InvalidLicenseKeyError &operator =(InvalidLicenseKeyError &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER InvalidLicenseKeyError(InvalidLicenseKeyError &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getMessage() const SWIFT_SYMBOL("s:7BlinkID22InvalidLicenseKeyErrorV7messageSSvp");
private:
  SWIFT_INLINE_THUNK InvalidLicenseKeyError(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK InvalidLicenseKeyError _make() noexcept {
    auto metadata = _impl::$s7BlinkID22InvalidLicenseKeyErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return InvalidLicenseKeyError(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_InvalidLicenseKeyError;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID22InvalidLicenseKeyErrorVD;
  static inline constexpr $s7BlinkID22InvalidLicenseKeyErrorVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_InvalidLicenseKeyError {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(InvalidLicenseKeyError &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const InvalidLicenseKeyError &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER InvalidLicenseKeyError returnNewValue(T callable) {
    auto result = InvalidLicenseKeyError::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID22InvalidLicenseKeyErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::InvalidLicenseKeyError> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID22InvalidLicenseKeyErrorVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::InvalidLicenseKeyError> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::InvalidLicenseKeyError> = true;
template<>
struct implClassFor<BlinkID::InvalidLicenseKeyError> { using type = BlinkID::_impl::_impl_InvalidLicenseKeyError; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {


class SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO") MRZDocumentType;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::MRZDocumentType> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
/// Represents the document type.
namespace _impl {

class _impl_MRZDocumentType;

// Type metadata accessor for MRZDocumentType
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID15MRZDocumentTypeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum MRZDocumentType
extern "C" {
extern unsigned $s7BlinkID15MRZDocumentTypeO7unknownyA2CmFWC;
extern unsigned $s7BlinkID15MRZDocumentTypeO12identityCardyA2CmFWC;
extern unsigned $s7BlinkID15MRZDocumentTypeO8passportyA2CmFWC;
extern unsigned $s7BlinkID15MRZDocumentTypeO4visayA2CmFWC;
extern unsigned $s7BlinkID15MRZDocumentTypeO9greenCardyA2CmFWC;
extern unsigned $s7BlinkID15MRZDocumentTypeO13mysPassIMM13PyA2CmFWC;
extern unsigned $s7BlinkID15MRZDocumentTypeO13driverLicenseyA2CmFWC;
extern unsigned $s7BlinkID15MRZDocumentTypeO22internalTravelDocumentyA2CmFWC;
extern unsigned $s7BlinkID15MRZDocumentTypeO18borderCrossingCardyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO") MRZDocumentType final {
public:
  SWIFT_INLINE_THUNK ~MRZDocumentType() noexcept {
    auto metadata = _impl::$s7BlinkID15MRZDocumentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK MRZDocumentType(const MRZDocumentType &other) noexcept {
    auto metadata = _impl::$s7BlinkID15MRZDocumentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK MRZDocumentType &operator =(const MRZDocumentType &other) noexcept {
    auto metadata = _impl::$s7BlinkID15MRZDocumentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK MRZDocumentType &operator =(MRZDocumentType &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER MRZDocumentType(MRZDocumentType &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    unknown SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO7unknownyA2CmF"),
    identityCard SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO12identityCardyA2CmF"),
    passport SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO8passportyA2CmF"),
    visa SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO4visayA2CmF"),
    greenCard SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO9greenCardyA2CmF"),
    mysPassIMM13P SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO13mysPassIMM13PyA2CmF"),
    driverLicense SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO13driverLicenseyA2CmF"),
    internalTravelDocument SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO22internalTravelDocumentyA2CmF"),
    borderCrossingCard SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO18borderCrossingCardyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_unknown {  // impl struct for case unknown
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknown;
    }
    SWIFT_INLINE_THUNK MRZDocumentType operator()() const;
  } unknown SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO7unknownyA2CmF");
  SWIFT_INLINE_THUNK bool isUnknown() const;

  inline const static struct _impl_identityCard {  // impl struct for case identityCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::identityCard;
    }
    SWIFT_INLINE_THUNK MRZDocumentType operator()() const;
  } identityCard SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO12identityCardyA2CmF");
  SWIFT_INLINE_THUNK bool isIdentityCard() const;

  inline const static struct _impl_passport {  // impl struct for case passport
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::passport;
    }
    SWIFT_INLINE_THUNK MRZDocumentType operator()() const;
  } passport SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO8passportyA2CmF");
  SWIFT_INLINE_THUNK bool isPassport() const;

  inline const static struct _impl_visa {  // impl struct for case visa
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::visa;
    }
    SWIFT_INLINE_THUNK MRZDocumentType operator()() const;
  } visa SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO4visayA2CmF");
  SWIFT_INLINE_THUNK bool isVisa() const;

  inline const static struct _impl_greenCard {  // impl struct for case greenCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::greenCard;
    }
    SWIFT_INLINE_THUNK MRZDocumentType operator()() const;
  } greenCard SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO9greenCardyA2CmF");
  SWIFT_INLINE_THUNK bool isGreenCard() const;

  inline const static struct _impl_mysPassIMM13P {  // impl struct for case mysPassIMM13P
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mysPassIMM13P;
    }
    SWIFT_INLINE_THUNK MRZDocumentType operator()() const;
  } mysPassIMM13P SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO13mysPassIMM13PyA2CmF");
  SWIFT_INLINE_THUNK bool isMysPassIMM13P() const;

  inline const static struct _impl_driverLicense {  // impl struct for case driverLicense
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::driverLicense;
    }
    SWIFT_INLINE_THUNK MRZDocumentType operator()() const;
  } driverLicense SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO13driverLicenseyA2CmF");
  SWIFT_INLINE_THUNK bool isDriverLicense() const;

  inline const static struct _impl_internalTravelDocument {  // impl struct for case internalTravelDocument
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::internalTravelDocument;
    }
    SWIFT_INLINE_THUNK MRZDocumentType operator()() const;
  } internalTravelDocument SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO22internalTravelDocumentyA2CmF");
  SWIFT_INLINE_THUNK bool isInternalTravelDocument() const;

  inline const static struct _impl_borderCrossingCard {  // impl struct for case borderCrossingCard
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::borderCrossingCard;
    }
    SWIFT_INLINE_THUNK MRZDocumentType operator()() const;
  } borderCrossingCard SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO18borderCrossingCardyA2CmF");
  SWIFT_INLINE_THUNK bool isBorderCrossingCard() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID15MRZDocumentTypeO7unknownyA2CmFWC) return cases::unknown;
    if (tag == _impl::$s7BlinkID15MRZDocumentTypeO12identityCardyA2CmFWC) return cases::identityCard;
    if (tag == _impl::$s7BlinkID15MRZDocumentTypeO8passportyA2CmFWC) return cases::passport;
    if (tag == _impl::$s7BlinkID15MRZDocumentTypeO4visayA2CmFWC) return cases::visa;
    if (tag == _impl::$s7BlinkID15MRZDocumentTypeO9greenCardyA2CmFWC) return cases::greenCard;
    if (tag == _impl::$s7BlinkID15MRZDocumentTypeO13mysPassIMM13PyA2CmFWC) return cases::mysPassIMM13P;
    if (tag == _impl::$s7BlinkID15MRZDocumentTypeO13driverLicenseyA2CmFWC) return cases::driverLicense;
    if (tag == _impl::$s7BlinkID15MRZDocumentTypeO22internalTravelDocumentyA2CmFWC) return cases::internalTravelDocument;
    if (tag == _impl::$s7BlinkID15MRZDocumentTypeO18borderCrossingCardyA2CmFWC) return cases::borderCrossingCard;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:7BlinkID15MRZDocumentTypeO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK MRZDocumentType(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK MRZDocumentType _make() noexcept {
    auto metadata = _impl::$s7BlinkID15MRZDocumentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return MRZDocumentType(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID15MRZDocumentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID15MRZDocumentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID15MRZDocumentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_MRZDocumentType;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID15MRZDocumentTypeOD;
  static inline constexpr $s7BlinkID15MRZDocumentTypeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_MRZDocumentType {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(MRZDocumentType &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const MRZDocumentType &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER MRZDocumentType returnNewValue(T callable) {
    auto result = MRZDocumentType::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID15MRZDocumentTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::MRZDocumentType> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID15MRZDocumentTypeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::MRZDocumentType> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::MRZDocumentType> = true;
template<>
struct implClassFor<BlinkID::MRZDocumentType> { using type = BlinkID::_impl::_impl_MRZDocumentType; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID9MRZResultV") MRZResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::MRZResult> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_MRZResult;

// Type metadata accessor for MRZResult
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID9MRZResultVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID9MRZResultV") MRZResult final {
public:
  SWIFT_INLINE_THUNK ~MRZResult() noexcept {
    auto metadata = _impl::$s7BlinkID9MRZResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK MRZResult(const MRZResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID9MRZResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK MRZResult &operator =(const MRZResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID9MRZResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK MRZResult &operator =(MRZResult &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER MRZResult(MRZResult &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getRawMRZString() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV12rawMRZStringSSvp");
  SWIFT_INLINE_THUNK swift::String getDocumentCode() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV12documentCodeSSvp");
  SWIFT_INLINE_THUNK swift::String getIssuer() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV6issuerSSvp");
  SWIFT_INLINE_THUNK swift::String getDocumentNumber() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV14documentNumberSSvp");
  SWIFT_INLINE_THUNK swift::String getOpt1() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV4opt1SSvp");
  SWIFT_INLINE_THUNK swift::String getOpt2() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV4opt2SSvp");
  SWIFT_INLINE_THUNK swift::String getGender() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV6genderSSvp");
  SWIFT_INLINE_THUNK swift::String getNationality() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV11nationalitySSvp");
  SWIFT_INLINE_THUNK swift::String getPrimaryID() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV07primaryB0SSvp");
  SWIFT_INLINE_THUNK swift::String getSecondaryID() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV09secondaryB0SSvp");
  SWIFT_INLINE_THUNK swift::String getIssuerName() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV10issuerNameSSvp");
  SWIFT_INLINE_THUNK swift::String getNationalityName() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV15nationalityNameSSvp");
  SWIFT_INLINE_THUNK bool getVerified() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV8verifiedSbvp");
  SWIFT_INLINE_THUNK DateResult<swift::String> getDateOfBirth() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV11dateOfBirthAA10DateResultVySSGvp");
  SWIFT_INLINE_THUNK DateResult<swift::String> getDateOfExpiry() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV12dateOfExpiryAA10DateResultVySSGvp");
  SWIFT_INLINE_THUNK MRZDocumentType getDocumentType() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV12documentTypeAA011MRZDocumentE0Ovp");
  SWIFT_INLINE_THUNK swift::String getSanitizedOpt1() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV13sanitizedOpt1SSvp");
  SWIFT_INLINE_THUNK swift::String getSanitizedOpt2() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV13sanitizedOpt2SSvp");
  SWIFT_INLINE_THUNK swift::String getSanitizedNationality() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV20sanitizedNationalitySSvp");
  SWIFT_INLINE_THUNK swift::String getSanitizedIssuer() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV15sanitizedIssuerSSvp");
  SWIFT_INLINE_THUNK swift::String getSanitizedDocumentCode() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV21sanitizedDocumentCodeSSvp");
  SWIFT_INLINE_THUNK swift::String getSanitizedDocumentNumber() const SWIFT_SYMBOL("s:7BlinkID9MRZResultV23sanitizedDocumentNumberSSvp");
private:
  SWIFT_INLINE_THUNK MRZResult(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK MRZResult _make() noexcept {
    auto metadata = _impl::$s7BlinkID9MRZResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return MRZResult(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_MRZResult;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID9MRZResultVD;
  static inline constexpr $s7BlinkID9MRZResultVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_MRZResult {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(MRZResult &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const MRZResult &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER MRZResult returnNewValue(T callable) {
    auto result = MRZResult::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID9MRZResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::MRZResult> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID9MRZResultVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::MRZResult> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::MRZResult> = true;
template<>
struct implClassFor<BlinkID::MRZResult> { using type = BlinkID::_impl::_impl_MRZResult; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID18MemoryReserveErrorV") MemoryReserveError;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::MemoryReserveError> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_MemoryReserveError;

// Type metadata accessor for MemoryReserveError
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID18MemoryReserveErrorVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID18MemoryReserveErrorV") MemoryReserveError final {
public:
  SWIFT_INLINE_THUNK ~MemoryReserveError() noexcept {
    auto metadata = _impl::$s7BlinkID18MemoryReserveErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK MemoryReserveError(const MemoryReserveError &other) noexcept {
    auto metadata = _impl::$s7BlinkID18MemoryReserveErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK MemoryReserveError &operator =(const MemoryReserveError &other) noexcept {
    auto metadata = _impl::$s7BlinkID18MemoryReserveErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK MemoryReserveError &operator =(MemoryReserveError &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER MemoryReserveError(MemoryReserveError &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Int getMinRequiredMemory() const SWIFT_SYMBOL("s:7BlinkID18MemoryReserveErrorV011minRequiredC0Sivp");
  static SWIFT_INLINE_THUNK MemoryReserveError init(swift::Int minRequiredMemory) SWIFT_SYMBOL("s:7BlinkID18MemoryReserveErrorV011minRequiredC0ACSi_tcfc");
private:
  SWIFT_INLINE_THUNK MemoryReserveError(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK MemoryReserveError _make() noexcept {
    auto metadata = _impl::$s7BlinkID18MemoryReserveErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return MemoryReserveError(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_MemoryReserveError;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID18MemoryReserveErrorVD;
  static inline constexpr $s7BlinkID18MemoryReserveErrorVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_MemoryReserveError {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(MemoryReserveError &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const MemoryReserveError &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER MemoryReserveError returnNewValue(T callable) {
    auto result = MemoryReserveError::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID18MemoryReserveErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::MemoryReserveError> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID18MemoryReserveErrorVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::MemoryReserveError> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::MemoryReserveError> = true;
template<>
struct implClassFor<BlinkID::MemoryReserveError> { using type = BlinkID::_impl::_impl_MemoryReserveError; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID13MissingBundleV") MissingBundle;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::MissingBundle> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_MissingBundle;

// Type metadata accessor for MissingBundle
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID13MissingBundleVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID13MissingBundleV") MissingBundle final {
public:
  SWIFT_INLINE_THUNK ~MissingBundle() noexcept {
    auto metadata = _impl::$s7BlinkID13MissingBundleVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK MissingBundle(const MissingBundle &other) noexcept {
    auto metadata = _impl::$s7BlinkID13MissingBundleVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK MissingBundle &operator =(const MissingBundle &other) noexcept {
    auto metadata = _impl::$s7BlinkID13MissingBundleVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK MissingBundle &operator =(MissingBundle &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER MissingBundle(MissingBundle &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getMessage() const SWIFT_SYMBOL("s:7BlinkID13MissingBundleV7messageSSvp");
private:
  SWIFT_INLINE_THUNK MissingBundle(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK MissingBundle _make() noexcept {
    auto metadata = _impl::$s7BlinkID13MissingBundleVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return MissingBundle(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_MissingBundle;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID13MissingBundleVD;
  static inline constexpr $s7BlinkID13MissingBundleVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_MissingBundle {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(MissingBundle &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const MissingBundle &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER MissingBundle returnNewValue(T callable) {
    auto result = MissingBundle::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID13MissingBundleVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::MissingBundle> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID13MissingBundleVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::MissingBundle> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::MissingBundle> = true;
template<>
struct implClassFor<BlinkID::MissingBundle> { using type = BlinkID::_impl::_impl_MissingBundle; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID16MissingResourcesV") MissingResources;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::MissingResources> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_MissingResources;

// Type metadata accessor for MissingResources
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID16MissingResourcesVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID16MissingResourcesV") MissingResources final {
public:
  SWIFT_INLINE_THUNK ~MissingResources() noexcept {
    auto metadata = _impl::$s7BlinkID16MissingResourcesVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK MissingResources(const MissingResources &other) noexcept {
    auto metadata = _impl::$s7BlinkID16MissingResourcesVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK MissingResources &operator =(const MissingResources &other) noexcept {
    auto metadata = _impl::$s7BlinkID16MissingResourcesVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK MissingResources &operator =(MissingResources &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER MissingResources(MissingResources &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
private:
  SWIFT_INLINE_THUNK MissingResources(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK MissingResources _make() noexcept {
    auto metadata = _impl::$s7BlinkID16MissingResourcesVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return MissingResources(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_MissingResources;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID16MissingResourcesVD;
  static inline constexpr $s7BlinkID16MissingResourcesVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_MissingResources {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(MissingResources &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const MissingResources &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER MissingResources returnNewValue(T callable) {
    auto result = MissingResources::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID16MissingResourcesVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::MissingResources> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID16MissingResourcesVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::MissingResources> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::MissingResources> = true;
template<>
struct implClassFor<BlinkID::MissingResources> { using type = BlinkID::_impl::_impl_MissingResources; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID14ModelLoadErrorO") ModelLoadError;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::ModelLoadError> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
/// Represents specific errors that can occur during model loading.
/// This enum defines the possible failure modes when loading SDK models
/// and resources.
namespace _impl {

class _impl_ModelLoadError;

// Type metadata accessor for ModelLoadError
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID14ModelLoadErrorOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum ModelLoadError
extern "C" {
extern unsigned $s7BlinkID14ModelLoadErrorO11missingFileyA2CmFWC;
extern unsigned $s7BlinkID14ModelLoadErrorO11invalidFileyA2CmFWC;
extern unsigned $s7BlinkID14ModelLoadErrorO14invalidLicenseyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID14ModelLoadErrorO") ModelLoadError final {
public:
  SWIFT_INLINE_THUNK ~ModelLoadError() noexcept {
    auto metadata = _impl::$s7BlinkID14ModelLoadErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ModelLoadError(const ModelLoadError &other) noexcept {
    auto metadata = _impl::$s7BlinkID14ModelLoadErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ModelLoadError &operator =(const ModelLoadError &other) noexcept {
    auto metadata = _impl::$s7BlinkID14ModelLoadErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ModelLoadError &operator =(ModelLoadError &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ModelLoadError(ModelLoadError &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    missingFile SWIFT_SYMBOL("s:7BlinkID14ModelLoadErrorO11missingFileyA2CmF"),
    invalidFile SWIFT_SYMBOL("s:7BlinkID14ModelLoadErrorO11invalidFileyA2CmF"),
    invalidLicense SWIFT_SYMBOL("s:7BlinkID14ModelLoadErrorO14invalidLicenseyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_missingFile {  // impl struct for case missingFile
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::missingFile;
    }
    SWIFT_INLINE_THUNK ModelLoadError operator()() const;
  } missingFile SWIFT_SYMBOL("s:7BlinkID14ModelLoadErrorO11missingFileyA2CmF");
  SWIFT_INLINE_THUNK bool isMissingFile() const;

  inline const static struct _impl_invalidFile {  // impl struct for case invalidFile
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::invalidFile;
    }
    SWIFT_INLINE_THUNK ModelLoadError operator()() const;
  } invalidFile SWIFT_SYMBOL("s:7BlinkID14ModelLoadErrorO11invalidFileyA2CmF");
  SWIFT_INLINE_THUNK bool isInvalidFile() const;

  inline const static struct _impl_invalidLicense {  // impl struct for case invalidLicense
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::invalidLicense;
    }
    SWIFT_INLINE_THUNK ModelLoadError operator()() const;
  } invalidLicense SWIFT_SYMBOL("s:7BlinkID14ModelLoadErrorO14invalidLicenseyA2CmF");
  SWIFT_INLINE_THUNK bool isInvalidLicense() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID14ModelLoadErrorO11missingFileyA2CmFWC) return cases::missingFile;
    if (tag == _impl::$s7BlinkID14ModelLoadErrorO11invalidFileyA2CmFWC) return cases::invalidFile;
    if (tag == _impl::$s7BlinkID14ModelLoadErrorO14invalidLicenseyA2CmFWC) return cases::invalidLicense;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Optional<swift::String> getErrorDescription() const SWIFT_SYMBOL("s:7BlinkID14ModelLoadErrorO16errorDescriptionSSSgvp");
  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:7BlinkID14ModelLoadErrorO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK ModelLoadError(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ModelLoadError _make() noexcept {
    auto metadata = _impl::$s7BlinkID14ModelLoadErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ModelLoadError(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID14ModelLoadErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID14ModelLoadErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID14ModelLoadErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ModelLoadError;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID14ModelLoadErrorOD;
  static inline constexpr $s7BlinkID14ModelLoadErrorOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ModelLoadError {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ModelLoadError &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ModelLoadError &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ModelLoadError returnNewValue(T callable) {
    auto result = ModelLoadError::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID14ModelLoadErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::ModelLoadError> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID14ModelLoadErrorOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::ModelLoadError> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::ModelLoadError> = true;
template<>
struct implClassFor<BlinkID::ModelLoadError> { using type = BlinkID::_impl::_impl_ModelLoadError; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {



class SWIFT_SYMBOL("s:7BlinkID5PointV") Point;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::Point> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_Point;

// Type metadata accessor for Point
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID5PointVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID5PointV") Point final {
public:
  SWIFT_INLINE_THUNK ~Point() noexcept {
    auto metadata = _impl::$s7BlinkID5PointVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK Point(const Point &other) noexcept {
    auto metadata = _impl::$s7BlinkID5PointVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK Point &operator =(const Point &other) noexcept {
    auto metadata = _impl::$s7BlinkID5PointVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK Point &operator =(Point &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER Point(Point &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK int32_t getX() const SWIFT_SYMBOL("s:7BlinkID5PointV1xs5Int32Vvp");
  SWIFT_INLINE_THUNK int32_t getY() const SWIFT_SYMBOL("s:7BlinkID5PointV1ys5Int32Vvp");
private:
  SWIFT_INLINE_THUNK Point(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK Point _make() noexcept {
    auto metadata = _impl::$s7BlinkID5PointVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return Point(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_Point;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID5PointVD;
  static inline constexpr $s7BlinkID5PointVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_Point {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(Point &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const Point &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER Point returnNewValue(T callable) {
    auto result = Point::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID5PointVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::Point> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID5PointVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::Point> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::Point> = true;
template<>
struct implClassFor<BlinkID::Point> { using type = BlinkID::_impl::_impl_Point; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {


/// A global actor that provides isolated execution context for processing operations.
/// The <code>ProcessingActor</code> ensures thread-safe access to shared resources and maintains
/// data consistency across concurrent operations. Execute operations in a sequential, thread-safe manner.
class SWIFT_SYMBOL("s:7BlinkID15ProcessingActorC") ProcessingActor;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::ProcessingActor> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_ProcessingActor;
// Type metadata accessor for ProcessingActor
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID15ProcessingActorCMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID15ProcessingActorC") ProcessingActor : public swift::_impl::RefCountedClass {
public:
  using RefCountedClass::RefCountedClass;
  using RefCountedClass::operator=;
protected:
  SWIFT_INLINE_THUNK ProcessingActor(void * _Nonnull ptr) noexcept : RefCountedClass(ptr) {}
private:
  friend class _impl::_impl_ProcessingActor;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID15ProcessingActorCD;
  static inline constexpr $s7BlinkID15ProcessingActorCD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ProcessingActor {
public:
static SWIFT_INLINE_THUNK ProcessingActor makeRetained(void * _Nonnull ptr) noexcept { return ProcessingActor(ptr); }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::ProcessingActor> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID15ProcessingActorCMa(0)._0;
  }
};
namespace _impl{
template<>
struct implClassFor<BlinkID::ProcessingActor> { using type = BlinkID::_impl::_impl_ProcessingActor; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

/// Detailed information about the recognition process.
namespace _impl {

class _impl_ProcessingStatus;

// Type metadata accessor for ProcessingStatus
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID16ProcessingStatusOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum ProcessingStatus
extern "C" {
extern unsigned $s7BlinkID16ProcessingStatusO7successyA2CmFWC;
extern unsigned $s7BlinkID16ProcessingStatusO15detectionFailedyA2CmFWC;
extern unsigned $s7BlinkID16ProcessingStatusO24imagePreprocessingFailedyA2CmFWC;
extern unsigned $s7BlinkID16ProcessingStatusO19stabilityTestFailedyA2CmFWC;
extern unsigned $s7BlinkID16ProcessingStatusO17scanningWrongSideyA2CmFWC;
extern unsigned $s7BlinkID16ProcessingStatusO25fieldIdentificationFailedyA2CmFWC;
extern unsigned $s7BlinkID16ProcessingStatusO21mandatoryFieldMissingyA2CmFWC;
extern unsigned $s7BlinkID16ProcessingStatusO22invalidCharactersFoundyA2CmFWC;
extern unsigned $s7BlinkID16ProcessingStatusO17imageReturnFailedyA2CmFWC;
extern unsigned $s7BlinkID16ProcessingStatusO24barcodeRecognitionFailedyA2CmFWC;
extern unsigned $s7BlinkID16ProcessingStatusO16mrzParsingFailedyA2CmFWC;
extern unsigned $s7BlinkID16ProcessingStatusO16documentFilteredyA2CmFWC;
extern unsigned $s7BlinkID16ProcessingStatusO19unsupportedDocumentyA2CmFWC;
extern unsigned $s7BlinkID16ProcessingStatusO17awaitingOtherSideyA2CmFWC;
extern unsigned $s7BlinkID16ProcessingStatusO10notScannedyA2CmFWC;
extern unsigned $s7BlinkID16ProcessingStatusO22barcodeDetectionFailedyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO") ProcessingStatus final {
public:
  SWIFT_INLINE_THUNK ~ProcessingStatus() noexcept {
    auto metadata = _impl::$s7BlinkID16ProcessingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ProcessingStatus(const ProcessingStatus &other) noexcept {
    auto metadata = _impl::$s7BlinkID16ProcessingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ProcessingStatus &operator =(const ProcessingStatus &other) noexcept {
    auto metadata = _impl::$s7BlinkID16ProcessingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ProcessingStatus &operator =(ProcessingStatus &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ProcessingStatus(ProcessingStatus &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    success SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO7successyA2CmF"),
    detectionFailed SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO15detectionFailedyA2CmF"),
    imagePreprocessingFailed SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO24imagePreprocessingFailedyA2CmF"),
    stabilityTestFailed SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO19stabilityTestFailedyA2CmF"),
    scanningWrongSide SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO17scanningWrongSideyA2CmF"),
    fieldIdentificationFailed SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO25fieldIdentificationFailedyA2CmF"),
    mandatoryFieldMissing SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO21mandatoryFieldMissingyA2CmF"),
    invalidCharactersFound SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO22invalidCharactersFoundyA2CmF"),
    imageReturnFailed SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO17imageReturnFailedyA2CmF"),
    barcodeRecognitionFailed SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO24barcodeRecognitionFailedyA2CmF"),
    mrzParsingFailed SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO16mrzParsingFailedyA2CmF"),
    documentFiltered SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO16documentFilteredyA2CmF"),
    unsupportedDocument SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO19unsupportedDocumentyA2CmF"),
    awaitingOtherSide SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO17awaitingOtherSideyA2CmF"),
    notScanned SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO10notScannedyA2CmF"),
    barcodeDetectionFailed SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO22barcodeDetectionFailedyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_success {  // impl struct for case success
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::success;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } success SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO7successyA2CmF");
  SWIFT_INLINE_THUNK bool isSuccess() const;

  inline const static struct _impl_detectionFailed {  // impl struct for case detectionFailed
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::detectionFailed;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } detectionFailed SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO15detectionFailedyA2CmF");
  SWIFT_INLINE_THUNK bool isDetectionFailed() const;

  inline const static struct _impl_imagePreprocessingFailed {  // impl struct for case imagePreprocessingFailed
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::imagePreprocessingFailed;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } imagePreprocessingFailed SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO24imagePreprocessingFailedyA2CmF");
  SWIFT_INLINE_THUNK bool isImagePreprocessingFailed() const;

  inline const static struct _impl_stabilityTestFailed {  // impl struct for case stabilityTestFailed
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::stabilityTestFailed;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } stabilityTestFailed SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO19stabilityTestFailedyA2CmF");
  SWIFT_INLINE_THUNK bool isStabilityTestFailed() const;

  inline const static struct _impl_scanningWrongSide {  // impl struct for case scanningWrongSide
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::scanningWrongSide;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } scanningWrongSide SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO17scanningWrongSideyA2CmF");
  SWIFT_INLINE_THUNK bool isScanningWrongSide() const;

  inline const static struct _impl_fieldIdentificationFailed {  // impl struct for case fieldIdentificationFailed
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::fieldIdentificationFailed;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } fieldIdentificationFailed SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO25fieldIdentificationFailedyA2CmF");
  SWIFT_INLINE_THUNK bool isFieldIdentificationFailed() const;

  inline const static struct _impl_mandatoryFieldMissing {  // impl struct for case mandatoryFieldMissing
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mandatoryFieldMissing;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } mandatoryFieldMissing SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO21mandatoryFieldMissingyA2CmF");
  SWIFT_INLINE_THUNK bool isMandatoryFieldMissing() const;

  inline const static struct _impl_invalidCharactersFound {  // impl struct for case invalidCharactersFound
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::invalidCharactersFound;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } invalidCharactersFound SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO22invalidCharactersFoundyA2CmF");
  SWIFT_INLINE_THUNK bool isInvalidCharactersFound() const;

  inline const static struct _impl_imageReturnFailed {  // impl struct for case imageReturnFailed
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::imageReturnFailed;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } imageReturnFailed SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO17imageReturnFailedyA2CmF");
  SWIFT_INLINE_THUNK bool isImageReturnFailed() const;

  inline const static struct _impl_barcodeRecognitionFailed {  // impl struct for case barcodeRecognitionFailed
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::barcodeRecognitionFailed;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } barcodeRecognitionFailed SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO24barcodeRecognitionFailedyA2CmF");
  SWIFT_INLINE_THUNK bool isBarcodeRecognitionFailed() const;

  inline const static struct _impl_mrzParsingFailed {  // impl struct for case mrzParsingFailed
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mrzParsingFailed;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } mrzParsingFailed SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO16mrzParsingFailedyA2CmF");
  SWIFT_INLINE_THUNK bool isMrzParsingFailed() const;

  inline const static struct _impl_documentFiltered {  // impl struct for case documentFiltered
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::documentFiltered;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } documentFiltered SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO16documentFilteredyA2CmF");
  SWIFT_INLINE_THUNK bool isDocumentFiltered() const;

  inline const static struct _impl_unsupportedDocument {  // impl struct for case unsupportedDocument
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unsupportedDocument;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } unsupportedDocument SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO19unsupportedDocumentyA2CmF");
  SWIFT_INLINE_THUNK bool isUnsupportedDocument() const;

  inline const static struct _impl_awaitingOtherSide {  // impl struct for case awaitingOtherSide
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::awaitingOtherSide;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } awaitingOtherSide SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO17awaitingOtherSideyA2CmF");
  SWIFT_INLINE_THUNK bool isAwaitingOtherSide() const;

  inline const static struct _impl_notScanned {  // impl struct for case notScanned
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::notScanned;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } notScanned SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO10notScannedyA2CmF");
  SWIFT_INLINE_THUNK bool isNotScanned() const;

  inline const static struct _impl_barcodeDetectionFailed {  // impl struct for case barcodeDetectionFailed
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::barcodeDetectionFailed;
    }
    SWIFT_INLINE_THUNK ProcessingStatus operator()() const;
  } barcodeDetectionFailed SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO22barcodeDetectionFailedyA2CmF");
  SWIFT_INLINE_THUNK bool isBarcodeDetectionFailed() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID16ProcessingStatusO7successyA2CmFWC) return cases::success;
    if (tag == _impl::$s7BlinkID16ProcessingStatusO15detectionFailedyA2CmFWC) return cases::detectionFailed;
    if (tag == _impl::$s7BlinkID16ProcessingStatusO24imagePreprocessingFailedyA2CmFWC) return cases::imagePreprocessingFailed;
    if (tag == _impl::$s7BlinkID16ProcessingStatusO19stabilityTestFailedyA2CmFWC) return cases::stabilityTestFailed;
    if (tag == _impl::$s7BlinkID16ProcessingStatusO17scanningWrongSideyA2CmFWC) return cases::scanningWrongSide;
    if (tag == _impl::$s7BlinkID16ProcessingStatusO25fieldIdentificationFailedyA2CmFWC) return cases::fieldIdentificationFailed;
    if (tag == _impl::$s7BlinkID16ProcessingStatusO21mandatoryFieldMissingyA2CmFWC) return cases::mandatoryFieldMissing;
    if (tag == _impl::$s7BlinkID16ProcessingStatusO22invalidCharactersFoundyA2CmFWC) return cases::invalidCharactersFound;
    if (tag == _impl::$s7BlinkID16ProcessingStatusO17imageReturnFailedyA2CmFWC) return cases::imageReturnFailed;
    if (tag == _impl::$s7BlinkID16ProcessingStatusO24barcodeRecognitionFailedyA2CmFWC) return cases::barcodeRecognitionFailed;
    if (tag == _impl::$s7BlinkID16ProcessingStatusO16mrzParsingFailedyA2CmFWC) return cases::mrzParsingFailed;
    if (tag == _impl::$s7BlinkID16ProcessingStatusO16documentFilteredyA2CmFWC) return cases::documentFiltered;
    if (tag == _impl::$s7BlinkID16ProcessingStatusO19unsupportedDocumentyA2CmFWC) return cases::unsupportedDocument;
    if (tag == _impl::$s7BlinkID16ProcessingStatusO17awaitingOtherSideyA2CmFWC) return cases::awaitingOtherSide;
    if (tag == _impl::$s7BlinkID16ProcessingStatusO10notScannedyA2CmFWC) return cases::notScanned;
    if (tag == _impl::$s7BlinkID16ProcessingStatusO22barcodeDetectionFailedyA2CmFWC) return cases::barcodeDetectionFailed;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<ProcessingStatus> init(const swift::String& rawValue) SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:7BlinkID16ProcessingStatusO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK ProcessingStatus(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ProcessingStatus _make() noexcept {
    auto metadata = _impl::$s7BlinkID16ProcessingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ProcessingStatus(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID16ProcessingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID16ProcessingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID16ProcessingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ProcessingStatus;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID16ProcessingStatusOD;
  static inline constexpr $s7BlinkID16ProcessingStatusOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ProcessingStatus {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ProcessingStatus &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ProcessingStatus &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ProcessingStatus returnNewValue(T callable) {
    auto result = ProcessingStatus::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID16ProcessingStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::ProcessingStatus> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID16ProcessingStatusOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::ProcessingStatus> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::ProcessingStatus> = true;
template<>
struct implClassFor<BlinkID::ProcessingStatus> { using type = BlinkID::_impl::_impl_ProcessingStatus; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

namespace _impl {

class _impl_Quadrilateral;

// Type metadata accessor for Quadrilateral
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID13QuadrilateralVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID13QuadrilateralV") Quadrilateral final {
public:
  SWIFT_INLINE_THUNK ~Quadrilateral() noexcept {
    auto metadata = _impl::$s7BlinkID13QuadrilateralVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK Quadrilateral(const Quadrilateral &other) noexcept {
    auto metadata = _impl::$s7BlinkID13QuadrilateralVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK Quadrilateral &operator =(const Quadrilateral &other) noexcept {
    auto metadata = _impl::$s7BlinkID13QuadrilateralVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK Quadrilateral &operator =(Quadrilateral &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER Quadrilateral(Quadrilateral &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK Point getUpperLeft() const SWIFT_SYMBOL("s:7BlinkID13QuadrilateralV9upperLeftAA5PointVvp");
  SWIFT_INLINE_THUNK Point getUpperRight() const SWIFT_SYMBOL("s:7BlinkID13QuadrilateralV10upperRightAA5PointVvp");
  SWIFT_INLINE_THUNK Point getLowerRight() const SWIFT_SYMBOL("s:7BlinkID13QuadrilateralV10lowerRightAA5PointVvp");
  SWIFT_INLINE_THUNK Point getLowerLeft() const SWIFT_SYMBOL("s:7BlinkID13QuadrilateralV9lowerLeftAA5PointVvp");
private:
  SWIFT_INLINE_THUNK Quadrilateral(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK Quadrilateral _make() noexcept {
    auto metadata = _impl::$s7BlinkID13QuadrilateralVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return Quadrilateral(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_Quadrilateral;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID13QuadrilateralVD;
  static inline constexpr $s7BlinkID13QuadrilateralVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_Quadrilateral {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(Quadrilateral &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const Quadrilateral &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER Quadrilateral returnNewValue(T callable) {
    auto result = Quadrilateral::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID13QuadrilateralVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::Quadrilateral> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID13QuadrilateralVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::Quadrilateral> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::Quadrilateral> = true;
template<>
struct implClassFor<BlinkID::Quadrilateral> { using type = BlinkID::_impl::_impl_Quadrilateral; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

/// RecognitionMode enum defines possible recognition modes by BlinkIDSdk
namespace _impl {

class _impl_RecognitionMode;

// Type metadata accessor for RecognitionMode
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID15RecognitionModeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum RecognitionMode
extern "C" {
extern unsigned $s7BlinkID15RecognitionModeO4noneyA2CmFWC;
extern unsigned $s7BlinkID15RecognitionModeO5mrzIdyA2CmFWC;
extern unsigned $s7BlinkID15RecognitionModeO7mrzVisayA2CmFWC;
extern unsigned $s7BlinkID15RecognitionModeO11mrzPassportyA2CmFWC;
extern unsigned $s7BlinkID15RecognitionModeO7photoIdyA2CmFWC;
extern unsigned $s7BlinkID15RecognitionModeO04fullC0yA2CmFWC;
extern unsigned $s7BlinkID15RecognitionModeO9barcodeIdyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID15RecognitionModeO") RecognitionMode final {
public:
  SWIFT_INLINE_THUNK ~RecognitionMode() noexcept {
    auto metadata = _impl::$s7BlinkID15RecognitionModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK RecognitionMode(const RecognitionMode &other) noexcept {
    auto metadata = _impl::$s7BlinkID15RecognitionModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK RecognitionMode &operator =(const RecognitionMode &other) noexcept {
    auto metadata = _impl::$s7BlinkID15RecognitionModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK RecognitionMode &operator =(RecognitionMode &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER RecognitionMode(RecognitionMode &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    none SWIFT_SYMBOL("s:7BlinkID15RecognitionModeO4noneyA2CmF"),
    mrzId SWIFT_SYMBOL("s:7BlinkID15RecognitionModeO5mrzIdyA2CmF"),
    mrzVisa SWIFT_SYMBOL("s:7BlinkID15RecognitionModeO7mrzVisayA2CmF"),
    mrzPassport SWIFT_SYMBOL("s:7BlinkID15RecognitionModeO11mrzPassportyA2CmF"),
    photoId SWIFT_SYMBOL("s:7BlinkID15RecognitionModeO7photoIdyA2CmF"),
    fullRecognition SWIFT_SYMBOL("s:7BlinkID15RecognitionModeO04fullC0yA2CmF"),
    barcodeId SWIFT_SYMBOL("s:7BlinkID15RecognitionModeO9barcodeIdyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_none {  // impl struct for case none
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::none;
    }
    SWIFT_INLINE_THUNK RecognitionMode operator()() const;
  } none SWIFT_SYMBOL("s:7BlinkID15RecognitionModeO4noneyA2CmF");
  SWIFT_INLINE_THUNK bool isNone() const;

  inline const static struct _impl_mrzId {  // impl struct for case mrzId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mrzId;
    }
    SWIFT_INLINE_THUNK RecognitionMode operator()() const;
  } mrzId SWIFT_SYMBOL("s:7BlinkID15RecognitionModeO5mrzIdyA2CmF");
  SWIFT_INLINE_THUNK bool isMrzId() const;

  inline const static struct _impl_mrzVisa {  // impl struct for case mrzVisa
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mrzVisa;
    }
    SWIFT_INLINE_THUNK RecognitionMode operator()() const;
  } mrzVisa SWIFT_SYMBOL("s:7BlinkID15RecognitionModeO7mrzVisayA2CmF");
  SWIFT_INLINE_THUNK bool isMrzVisa() const;

  inline const static struct _impl_mrzPassport {  // impl struct for case mrzPassport
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mrzPassport;
    }
    SWIFT_INLINE_THUNK RecognitionMode operator()() const;
  } mrzPassport SWIFT_SYMBOL("s:7BlinkID15RecognitionModeO11mrzPassportyA2CmF");
  SWIFT_INLINE_THUNK bool isMrzPassport() const;

  inline const static struct _impl_photoId {  // impl struct for case photoId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::photoId;
    }
    SWIFT_INLINE_THUNK RecognitionMode operator()() const;
  } photoId SWIFT_SYMBOL("s:7BlinkID15RecognitionModeO7photoIdyA2CmF");
  SWIFT_INLINE_THUNK bool isPhotoId() const;

  inline const static struct _impl_fullRecognition {  // impl struct for case fullRecognition
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::fullRecognition;
    }
    SWIFT_INLINE_THUNK RecognitionMode operator()() const;
  } fullRecognition SWIFT_SYMBOL("s:7BlinkID15RecognitionModeO04fullC0yA2CmF");
  SWIFT_INLINE_THUNK bool isFullRecognition() const;

  inline const static struct _impl_barcodeId {  // impl struct for case barcodeId
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::barcodeId;
    }
    SWIFT_INLINE_THUNK RecognitionMode operator()() const;
  } barcodeId SWIFT_SYMBOL("s:7BlinkID15RecognitionModeO9barcodeIdyA2CmF");
  SWIFT_INLINE_THUNK bool isBarcodeId() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID15RecognitionModeO4noneyA2CmFWC) return cases::none;
    if (tag == _impl::$s7BlinkID15RecognitionModeO5mrzIdyA2CmFWC) return cases::mrzId;
    if (tag == _impl::$s7BlinkID15RecognitionModeO7mrzVisayA2CmFWC) return cases::mrzVisa;
    if (tag == _impl::$s7BlinkID15RecognitionModeO11mrzPassportyA2CmFWC) return cases::mrzPassport;
    if (tag == _impl::$s7BlinkID15RecognitionModeO7photoIdyA2CmFWC) return cases::photoId;
    if (tag == _impl::$s7BlinkID15RecognitionModeO04fullC0yA2CmFWC) return cases::fullRecognition;
    if (tag == _impl::$s7BlinkID15RecognitionModeO9barcodeIdyA2CmFWC) return cases::barcodeId;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<RecognitionMode> init(const swift::String& rawValue) SWIFT_SYMBOL("s:7BlinkID15RecognitionModeO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:7BlinkID15RecognitionModeO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK RecognitionMode(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK RecognitionMode _make() noexcept {
    auto metadata = _impl::$s7BlinkID15RecognitionModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return RecognitionMode(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID15RecognitionModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID15RecognitionModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID15RecognitionModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_RecognitionMode;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID15RecognitionModeOD;
  static inline constexpr $s7BlinkID15RecognitionModeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_RecognitionMode {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(RecognitionMode &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const RecognitionMode &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER RecognitionMode returnNewValue(T callable) {
    auto result = RecognitionMode::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID15RecognitionModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::RecognitionMode> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID15RecognitionModeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::RecognitionMode> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::RecognitionMode> = true;
template<>
struct implClassFor<BlinkID::RecognitionMode> { using type = BlinkID::_impl::_impl_RecognitionMode; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID21RecognitionModeFilterV") RecognitionModeFilter;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::RecognitionModeFilter> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_RecognitionModeFilter;

// Type metadata accessor for RecognitionModeFilter
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID21RecognitionModeFilterVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID21RecognitionModeFilterV") RecognitionModeFilter final {
public:
  SWIFT_INLINE_THUNK ~RecognitionModeFilter() noexcept {
    auto metadata = _impl::$s7BlinkID21RecognitionModeFilterVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK RecognitionModeFilter(const RecognitionModeFilter &other) noexcept {
    auto metadata = _impl::$s7BlinkID21RecognitionModeFilterVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK RecognitionModeFilter &operator =(const RecognitionModeFilter &other) noexcept {
    auto metadata = _impl::$s7BlinkID21RecognitionModeFilterVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK RecognitionModeFilter &operator =(RecognitionModeFilter &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER RecognitionModeFilter(RecognitionModeFilter &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK bool getEnableMrzId() const SWIFT_SYMBOL("s:7BlinkID21RecognitionModeFilterV11enableMrzIdSbvp");
  SWIFT_INLINE_THUNK void setEnableMrzId(bool value) SWIFT_SYMBOL("s:7BlinkID21RecognitionModeFilterV11enableMrzIdSbvp");
  SWIFT_INLINE_THUNK bool getEnableMrzVisa() const SWIFT_SYMBOL("s:7BlinkID21RecognitionModeFilterV13enableMrzVisaSbvp");
  SWIFT_INLINE_THUNK void setEnableMrzVisa(bool value) SWIFT_SYMBOL("s:7BlinkID21RecognitionModeFilterV13enableMrzVisaSbvp");
  SWIFT_INLINE_THUNK bool getEnableMrzPassport() const SWIFT_SYMBOL("s:7BlinkID21RecognitionModeFilterV17enableMrzPassportSbvp");
  SWIFT_INLINE_THUNK void setEnableMrzPassport(bool value) SWIFT_SYMBOL("s:7BlinkID21RecognitionModeFilterV17enableMrzPassportSbvp");
  SWIFT_INLINE_THUNK bool getEnablePhotoId() const SWIFT_SYMBOL("s:7BlinkID21RecognitionModeFilterV13enablePhotoIdSbvp");
  SWIFT_INLINE_THUNK void setEnablePhotoId(bool value) SWIFT_SYMBOL("s:7BlinkID21RecognitionModeFilterV13enablePhotoIdSbvp");
  SWIFT_INLINE_THUNK bool getEnableBarcodeId() const SWIFT_SYMBOL("s:7BlinkID21RecognitionModeFilterV15enableBarcodeIdSbvp");
  SWIFT_INLINE_THUNK void setEnableBarcodeId(bool value) SWIFT_SYMBOL("s:7BlinkID21RecognitionModeFilterV15enableBarcodeIdSbvp");
  SWIFT_INLINE_THUNK bool getEnableFullDocumentRecognition() const SWIFT_SYMBOL("s:7BlinkID21RecognitionModeFilterV018enableFullDocumentC0Sbvp");
  SWIFT_INLINE_THUNK void setEnableFullDocumentRecognition(bool value) SWIFT_SYMBOL("s:7BlinkID21RecognitionModeFilterV018enableFullDocumentC0Sbvp");
  static SWIFT_INLINE_THUNK RecognitionModeFilter init(bool enableMrzId, bool enableMrzVisa, bool enableMrzPassport, bool enablePhotoId, bool enableBarcodeId, bool enableFullDocumentRecognition) SWIFT_SYMBOL("s:7BlinkID21RecognitionModeFilterV11enableMrzId0fG4Visa0fG8Passport0f5PhotoH00f7BarcodeH00f12FullDocumentC0ACSb_S5btcfc");
private:
  SWIFT_INLINE_THUNK RecognitionModeFilter(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK RecognitionModeFilter _make() noexcept {
    auto metadata = _impl::$s7BlinkID21RecognitionModeFilterVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return RecognitionModeFilter(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_RecognitionModeFilter;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID21RecognitionModeFilterVD;
  static inline constexpr $s7BlinkID21RecognitionModeFilterVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_RecognitionModeFilter {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(RecognitionModeFilter &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const RecognitionModeFilter &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER RecognitionModeFilter returnNewValue(T callable) {
    auto result = RecognitionModeFilter::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID21RecognitionModeFilterVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::RecognitionModeFilter> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID21RecognitionModeFilterVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::RecognitionModeFilter> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::RecognitionModeFilter> = true;
template<>
struct implClassFor<BlinkID::RecognitionModeFilter> { using type = BlinkID::_impl::_impl_RecognitionModeFilter; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

namespace _impl {

class _impl_RectangleF;

// Type metadata accessor for RectangleF
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID10RectangleFVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID10RectangleFV") RectangleF final {
public:
  SWIFT_INLINE_THUNK ~RectangleF() noexcept {
    auto metadata = _impl::$s7BlinkID10RectangleFVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK RectangleF(const RectangleF &other) noexcept {
    auto metadata = _impl::$s7BlinkID10RectangleFVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK RectangleF &operator =(const RectangleF &other) noexcept {
    auto metadata = _impl::$s7BlinkID10RectangleFVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK RectangleF &operator =(RectangleF &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER RectangleF(RectangleF &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
private:
  SWIFT_INLINE_THUNK RectangleF(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK RectangleF _make() noexcept {
    auto metadata = _impl::$s7BlinkID10RectangleFVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return RectangleF(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_RectangleF;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID10RectangleFVD;
  static inline constexpr $s7BlinkID10RectangleFVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_RectangleF {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(RectangleF &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const RectangleF &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER RectangleF returnNewValue(T callable) {
    auto result = RectangleF::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID10RectangleFVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::RectangleF> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID10RectangleFVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::RectangleF> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::RectangleF> = true;
template<>
struct implClassFor<BlinkID::RectangleF> { using type = BlinkID::_impl::_impl_RectangleF; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

/// Document region.
namespace _impl {

class _impl_Region;

// Type metadata accessor for Region
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID6RegionOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum Region
extern "C" {
extern unsigned $s7BlinkID6RegionO4noneyA2CmFWC;
extern unsigned $s7BlinkID6RegionO7alabamayA2CmFWC;
extern unsigned $s7BlinkID6RegionO6alaskayA2CmFWC;
extern unsigned $s7BlinkID6RegionO7albertayA2CmFWC;
extern unsigned $s7BlinkID6RegionO7arizonayA2CmFWC;
extern unsigned $s7BlinkID6RegionO8arkansasyA2CmFWC;
extern unsigned $s7BlinkID6RegionO26australianCapitalTerritoryyA2CmFWC;
extern unsigned $s7BlinkID6RegionO15britishColumbiayA2CmFWC;
extern unsigned $s7BlinkID6RegionO10californiayA2CmFWC;
extern unsigned $s7BlinkID6RegionO8coloradoyA2CmFWC;
extern unsigned $s7BlinkID6RegionO11connecticutyA2CmFWC;
extern unsigned $s7BlinkID6RegionO8delawareyA2CmFWC;
extern unsigned $s7BlinkID6RegionO18districtOfColumbiayA2CmFWC;
extern unsigned $s7BlinkID6RegionO7floridayA2CmFWC;
extern unsigned $s7BlinkID6RegionO7georgiayA2CmFWC;
extern unsigned $s7BlinkID6RegionO6hawaiiyA2CmFWC;
extern unsigned $s7BlinkID6RegionO5idahoyA2CmFWC;
extern unsigned $s7BlinkID6RegionO8illinoisyA2CmFWC;
extern unsigned $s7BlinkID6RegionO7indianayA2CmFWC;
extern unsigned $s7BlinkID6RegionO4iowayA2CmFWC;
extern unsigned $s7BlinkID6RegionO6kansasyA2CmFWC;
extern unsigned $s7BlinkID6RegionO8kentuckyyA2CmFWC;
extern unsigned $s7BlinkID6RegionO9louisianayA2CmFWC;
extern unsigned $s7BlinkID6RegionO5maineyA2CmFWC;
extern unsigned $s7BlinkID6RegionO8manitobayA2CmFWC;
extern unsigned $s7BlinkID6RegionO8marylandyA2CmFWC;
extern unsigned $s7BlinkID6RegionO13massachusettsyA2CmFWC;
extern unsigned $s7BlinkID6RegionO8michiganyA2CmFWC;
extern unsigned $s7BlinkID6RegionO9minnesotayA2CmFWC;
extern unsigned $s7BlinkID6RegionO11mississippiyA2CmFWC;
extern unsigned $s7BlinkID6RegionO8missouriyA2CmFWC;
extern unsigned $s7BlinkID6RegionO7montanayA2CmFWC;
extern unsigned $s7BlinkID6RegionO8nebraskayA2CmFWC;
extern unsigned $s7BlinkID6RegionO6nevadayA2CmFWC;
extern unsigned $s7BlinkID6RegionO12newBrunswickyA2CmFWC;
extern unsigned $s7BlinkID6RegionO12newHampshireyA2CmFWC;
extern unsigned $s7BlinkID6RegionO9newJerseyyA2CmFWC;
extern unsigned $s7BlinkID6RegionO9newMexicoyA2CmFWC;
extern unsigned $s7BlinkID6RegionO13newSouthWalesyA2CmFWC;
extern unsigned $s7BlinkID6RegionO7newYorkyA2CmFWC;
extern unsigned $s7BlinkID6RegionO17northernTerritoryyA2CmFWC;
extern unsigned $s7BlinkID6RegionO13northCarolinayA2CmFWC;
extern unsigned $s7BlinkID6RegionO11northDakotayA2CmFWC;
extern unsigned $s7BlinkID6RegionO10novaScotiayA2CmFWC;
extern unsigned $s7BlinkID6RegionO4ohioyA2CmFWC;
extern unsigned $s7BlinkID6RegionO8oklahomayA2CmFWC;
extern unsigned $s7BlinkID6RegionO7ontarioyA2CmFWC;
extern unsigned $s7BlinkID6RegionO6oregonyA2CmFWC;
extern unsigned $s7BlinkID6RegionO12pennsylvaniayA2CmFWC;
extern unsigned $s7BlinkID6RegionO6quebecyA2CmFWC;
extern unsigned $s7BlinkID6RegionO10queenslandyA2CmFWC;
extern unsigned $s7BlinkID6RegionO11rhodeIslandyA2CmFWC;
extern unsigned $s7BlinkID6RegionO12saskatchewanyA2CmFWC;
extern unsigned $s7BlinkID6RegionO14southAustraliayA2CmFWC;
extern unsigned $s7BlinkID6RegionO13southCarolinayA2CmFWC;
extern unsigned $s7BlinkID6RegionO11southDakotayA2CmFWC;
extern unsigned $s7BlinkID6RegionO8tasmaniayA2CmFWC;
extern unsigned $s7BlinkID6RegionO9tennesseeyA2CmFWC;
extern unsigned $s7BlinkID6RegionO5texasyA2CmFWC;
extern unsigned $s7BlinkID6RegionO4utahyA2CmFWC;
extern unsigned $s7BlinkID6RegionO7vermontyA2CmFWC;
extern unsigned $s7BlinkID6RegionO8victoriayA2CmFWC;
extern unsigned $s7BlinkID6RegionO8virginiayA2CmFWC;
extern unsigned $s7BlinkID6RegionO10washingtonyA2CmFWC;
extern unsigned $s7BlinkID6RegionO16westernAustraliayA2CmFWC;
extern unsigned $s7BlinkID6RegionO12westVirginiayA2CmFWC;
extern unsigned $s7BlinkID6RegionO9wisconsinyA2CmFWC;
extern unsigned $s7BlinkID6RegionO7wyomingyA2CmFWC;
extern unsigned $s7BlinkID6RegionO5yukonyA2CmFWC;
extern unsigned $s7BlinkID6RegionO14ciudadDeMexicoyA2CmFWC;
extern unsigned $s7BlinkID6RegionO7jaliscoyA2CmFWC;
extern unsigned $s7BlinkID6RegionO23newfoundlandAndLabradoryA2CmFWC;
extern unsigned $s7BlinkID6RegionO9nuevoLeonyA2CmFWC;
extern unsigned $s7BlinkID6RegionO14bajaCaliforniayA2CmFWC;
extern unsigned $s7BlinkID6RegionO9chihuahuayA2CmFWC;
extern unsigned $s7BlinkID6RegionO10guanajuatoyA2CmFWC;
extern unsigned $s7BlinkID6RegionO8guerreroyA2CmFWC;
extern unsigned $s7BlinkID6RegionO6mexicoyA2CmFWC;
extern unsigned $s7BlinkID6RegionO9michoacanyA2CmFWC;
extern unsigned $s7BlinkID6RegionO11newYorkCityyA2CmFWC;
extern unsigned $s7BlinkID6RegionO10tamaulipasyA2CmFWC;
extern unsigned $s7BlinkID6RegionO8veracruzyA2CmFWC;
extern unsigned $s7BlinkID6RegionO7chiapasyA2CmFWC;
extern unsigned $s7BlinkID6RegionO8coahuilayA2CmFWC;
extern unsigned $s7BlinkID6RegionO7durangoyA2CmFWC;
extern unsigned $s7BlinkID6RegionO14guerreroCoculayA2CmFWC;
extern unsigned $s7BlinkID6RegionO16guerreroJuchitanyA2CmFWC;
extern unsigned $s7BlinkID6RegionO21guerreroTepecoacuilcoyA2CmFWC;
extern unsigned $s7BlinkID6RegionO16guerreroTlacoapayA2CmFWC;
extern unsigned $s7BlinkID6RegionO7gujaratyA2CmFWC;
extern unsigned $s7BlinkID6RegionO7hidalgoyA2CmFWC;
extern unsigned $s7BlinkID6RegionO9karnatakayA2CmFWC;
extern unsigned $s7BlinkID6RegionO6keralayA2CmFWC;
extern unsigned $s7BlinkID6RegionO17khyberPakhtunkhwayA2CmFWC;
extern unsigned $s7BlinkID6RegionO13madhyaPradeshyA2CmFWC;
extern unsigned $s7BlinkID6RegionO11maharashtrayA2CmFWC;
extern unsigned $s7BlinkID6RegionO7morelosyA2CmFWC;
extern unsigned $s7BlinkID6RegionO7nayarityA2CmFWC;
extern unsigned $s7BlinkID6RegionO6oaxacayA2CmFWC;
extern unsigned $s7BlinkID6RegionO6pueblayA2CmFWC;
extern unsigned $s7BlinkID6RegionO6punjabyA2CmFWC;
extern unsigned $s7BlinkID6RegionO9queretaroyA2CmFWC;
extern unsigned $s7BlinkID6RegionO13sanLuisPotosiyA2CmFWC;
extern unsigned $s7BlinkID6RegionO7sinaloayA2CmFWC;
extern unsigned $s7BlinkID6RegionO6sonorayA2CmFWC;
extern unsigned $s7BlinkID6RegionO7tabascoyA2CmFWC;
extern unsigned $s7BlinkID6RegionO9tamilNaduyA2CmFWC;
extern unsigned $s7BlinkID6RegionO7yucatanyA2CmFWC;
extern unsigned $s7BlinkID6RegionO9zacatecasyA2CmFWC;
extern unsigned $s7BlinkID6RegionO14aguascalientesyA2CmFWC;
extern unsigned $s7BlinkID6RegionO17bajaCaliforniaSuryA2CmFWC;
extern unsigned $s7BlinkID6RegionO8campecheyA2CmFWC;
extern unsigned $s7BlinkID6RegionO6colimayA2CmFWC;
extern unsigned $s7BlinkID6RegionO23quintanaRooBenitoJuarezyA2CmFWC;
extern unsigned $s7BlinkID6RegionO11quintanaRooyA2CmFWC;
extern unsigned $s7BlinkID6RegionO22quintanaRooSolidaridadyA2CmFWC;
extern unsigned $s7BlinkID6RegionO8tlaxcalayA2CmFWC;
extern unsigned $s7BlinkID6RegionO18quintanaRooCozumelyA2CmFWC;
extern unsigned $s7BlinkID6RegionO8saoPaoloyA2CmFWC;
extern unsigned $s7BlinkID6RegionO12rioDeJaneiroyA2CmFWC;
extern unsigned $s7BlinkID6RegionO14rioGrandeDoSulyA2CmFWC;
extern unsigned $s7BlinkID6RegionO20northwestTerritoriesyA2CmFWC;
extern unsigned $s7BlinkID6RegionO7nunavutyA2CmFWC;
extern unsigned $s7BlinkID6RegionO18princeEdwardIslandyA2CmFWC;
extern unsigned $s7BlinkID6RegionO15distritoFederalyA2CmFWC;
extern unsigned $s7BlinkID6RegionO8maranhaoyA2CmFWC;
extern unsigned $s7BlinkID6RegionO10matoGrossoyA2CmFWC;
extern unsigned $s7BlinkID6RegionO11minasGeraisyA2CmFWC;
extern unsigned $s7BlinkID6RegionO4parayA2CmFWC;
extern unsigned $s7BlinkID6RegionO6paranayA2CmFWC;
extern unsigned $s7BlinkID6RegionO10pernambucoyA2CmFWC;
extern unsigned $s7BlinkID6RegionO13santaCatarinayA2CmFWC;
extern unsigned $s7BlinkID6RegionO13andhraPradeshyA2CmFWC;
extern unsigned $s7BlinkID6RegionO5cearayA2CmFWC;
extern unsigned $s7BlinkID6RegionO5goiasyA2CmFWC;
extern unsigned $s7BlinkID6RegionO24guerreroAcapulcoDeJuarezyA2CmFWC;
extern unsigned $s7BlinkID6RegionO7haryanayA2CmFWC;
extern unsigned $s7BlinkID6RegionO7sergipeyA2CmFWC;
extern unsigned $s7BlinkID6RegionO7alagoasyA2CmFWC;
extern unsigned $s7BlinkID6RegionO10bangsamoroyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID6RegionO") Region final {
public:
  SWIFT_INLINE_THUNK ~Region() noexcept {
    auto metadata = _impl::$s7BlinkID6RegionOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK Region(const Region &other) noexcept {
    auto metadata = _impl::$s7BlinkID6RegionOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK Region &operator =(const Region &other) noexcept {
    auto metadata = _impl::$s7BlinkID6RegionOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK Region &operator =(Region &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER Region(Region &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    none SWIFT_SYMBOL("s:7BlinkID6RegionO4noneyA2CmF"),
    alabama SWIFT_SYMBOL("s:7BlinkID6RegionO7alabamayA2CmF"),
    alaska SWIFT_SYMBOL("s:7BlinkID6RegionO6alaskayA2CmF"),
    alberta SWIFT_SYMBOL("s:7BlinkID6RegionO7albertayA2CmF"),
    arizona SWIFT_SYMBOL("s:7BlinkID6RegionO7arizonayA2CmF"),
    arkansas SWIFT_SYMBOL("s:7BlinkID6RegionO8arkansasyA2CmF"),
    australianCapitalTerritory SWIFT_SYMBOL("s:7BlinkID6RegionO26australianCapitalTerritoryyA2CmF"),
    britishColumbia SWIFT_SYMBOL("s:7BlinkID6RegionO15britishColumbiayA2CmF"),
    california SWIFT_SYMBOL("s:7BlinkID6RegionO10californiayA2CmF"),
    colorado SWIFT_SYMBOL("s:7BlinkID6RegionO8coloradoyA2CmF"),
    connecticut SWIFT_SYMBOL("s:7BlinkID6RegionO11connecticutyA2CmF"),
    delaware SWIFT_SYMBOL("s:7BlinkID6RegionO8delawareyA2CmF"),
    districtOfColumbia SWIFT_SYMBOL("s:7BlinkID6RegionO18districtOfColumbiayA2CmF"),
    florida SWIFT_SYMBOL("s:7BlinkID6RegionO7floridayA2CmF"),
    georgia SWIFT_SYMBOL("s:7BlinkID6RegionO7georgiayA2CmF"),
    hawaii SWIFT_SYMBOL("s:7BlinkID6RegionO6hawaiiyA2CmF"),
    idaho SWIFT_SYMBOL("s:7BlinkID6RegionO5idahoyA2CmF"),
    illinois SWIFT_SYMBOL("s:7BlinkID6RegionO8illinoisyA2CmF"),
    indiana SWIFT_SYMBOL("s:7BlinkID6RegionO7indianayA2CmF"),
    iowa SWIFT_SYMBOL("s:7BlinkID6RegionO4iowayA2CmF"),
    kansas SWIFT_SYMBOL("s:7BlinkID6RegionO6kansasyA2CmF"),
    kentucky SWIFT_SYMBOL("s:7BlinkID6RegionO8kentuckyyA2CmF"),
    louisiana SWIFT_SYMBOL("s:7BlinkID6RegionO9louisianayA2CmF"),
    maine SWIFT_SYMBOL("s:7BlinkID6RegionO5maineyA2CmF"),
    manitoba SWIFT_SYMBOL("s:7BlinkID6RegionO8manitobayA2CmF"),
    maryland SWIFT_SYMBOL("s:7BlinkID6RegionO8marylandyA2CmF"),
    massachusetts SWIFT_SYMBOL("s:7BlinkID6RegionO13massachusettsyA2CmF"),
    michigan SWIFT_SYMBOL("s:7BlinkID6RegionO8michiganyA2CmF"),
    minnesota SWIFT_SYMBOL("s:7BlinkID6RegionO9minnesotayA2CmF"),
    mississippi SWIFT_SYMBOL("s:7BlinkID6RegionO11mississippiyA2CmF"),
    missouri SWIFT_SYMBOL("s:7BlinkID6RegionO8missouriyA2CmF"),
    montana SWIFT_SYMBOL("s:7BlinkID6RegionO7montanayA2CmF"),
    nebraska SWIFT_SYMBOL("s:7BlinkID6RegionO8nebraskayA2CmF"),
    nevada SWIFT_SYMBOL("s:7BlinkID6RegionO6nevadayA2CmF"),
    newBrunswick SWIFT_SYMBOL("s:7BlinkID6RegionO12newBrunswickyA2CmF"),
    newHampshire SWIFT_SYMBOL("s:7BlinkID6RegionO12newHampshireyA2CmF"),
    newJersey SWIFT_SYMBOL("s:7BlinkID6RegionO9newJerseyyA2CmF"),
    newMexico SWIFT_SYMBOL("s:7BlinkID6RegionO9newMexicoyA2CmF"),
    newSouthWales SWIFT_SYMBOL("s:7BlinkID6RegionO13newSouthWalesyA2CmF"),
    newYork SWIFT_SYMBOL("s:7BlinkID6RegionO7newYorkyA2CmF"),
    northernTerritory SWIFT_SYMBOL("s:7BlinkID6RegionO17northernTerritoryyA2CmF"),
    northCarolina SWIFT_SYMBOL("s:7BlinkID6RegionO13northCarolinayA2CmF"),
    northDakota SWIFT_SYMBOL("s:7BlinkID6RegionO11northDakotayA2CmF"),
    novaScotia SWIFT_SYMBOL("s:7BlinkID6RegionO10novaScotiayA2CmF"),
    ohio SWIFT_SYMBOL("s:7BlinkID6RegionO4ohioyA2CmF"),
    oklahoma SWIFT_SYMBOL("s:7BlinkID6RegionO8oklahomayA2CmF"),
    ontario SWIFT_SYMBOL("s:7BlinkID6RegionO7ontarioyA2CmF"),
    oregon SWIFT_SYMBOL("s:7BlinkID6RegionO6oregonyA2CmF"),
    pennsylvania SWIFT_SYMBOL("s:7BlinkID6RegionO12pennsylvaniayA2CmF"),
    quebec SWIFT_SYMBOL("s:7BlinkID6RegionO6quebecyA2CmF"),
    queensland SWIFT_SYMBOL("s:7BlinkID6RegionO10queenslandyA2CmF"),
    rhodeIsland SWIFT_SYMBOL("s:7BlinkID6RegionO11rhodeIslandyA2CmF"),
    saskatchewan SWIFT_SYMBOL("s:7BlinkID6RegionO12saskatchewanyA2CmF"),
    southAustralia SWIFT_SYMBOL("s:7BlinkID6RegionO14southAustraliayA2CmF"),
    southCarolina SWIFT_SYMBOL("s:7BlinkID6RegionO13southCarolinayA2CmF"),
    southDakota SWIFT_SYMBOL("s:7BlinkID6RegionO11southDakotayA2CmF"),
    tasmania SWIFT_SYMBOL("s:7BlinkID6RegionO8tasmaniayA2CmF"),
    tennessee SWIFT_SYMBOL("s:7BlinkID6RegionO9tennesseeyA2CmF"),
    texas SWIFT_SYMBOL("s:7BlinkID6RegionO5texasyA2CmF"),
    utah SWIFT_SYMBOL("s:7BlinkID6RegionO4utahyA2CmF"),
    vermont SWIFT_SYMBOL("s:7BlinkID6RegionO7vermontyA2CmF"),
    victoria SWIFT_SYMBOL("s:7BlinkID6RegionO8victoriayA2CmF"),
    virginia SWIFT_SYMBOL("s:7BlinkID6RegionO8virginiayA2CmF"),
    washington SWIFT_SYMBOL("s:7BlinkID6RegionO10washingtonyA2CmF"),
    westernAustralia SWIFT_SYMBOL("s:7BlinkID6RegionO16westernAustraliayA2CmF"),
    westVirginia SWIFT_SYMBOL("s:7BlinkID6RegionO12westVirginiayA2CmF"),
    wisconsin SWIFT_SYMBOL("s:7BlinkID6RegionO9wisconsinyA2CmF"),
    wyoming SWIFT_SYMBOL("s:7BlinkID6RegionO7wyomingyA2CmF"),
    yukon SWIFT_SYMBOL("s:7BlinkID6RegionO5yukonyA2CmF"),
    ciudadDeMexico SWIFT_SYMBOL("s:7BlinkID6RegionO14ciudadDeMexicoyA2CmF"),
    jalisco SWIFT_SYMBOL("s:7BlinkID6RegionO7jaliscoyA2CmF"),
    newfoundlandAndLabrador SWIFT_SYMBOL("s:7BlinkID6RegionO23newfoundlandAndLabradoryA2CmF"),
    nuevoLeon SWIFT_SYMBOL("s:7BlinkID6RegionO9nuevoLeonyA2CmF"),
    bajaCalifornia SWIFT_SYMBOL("s:7BlinkID6RegionO14bajaCaliforniayA2CmF"),
    chihuahua SWIFT_SYMBOL("s:7BlinkID6RegionO9chihuahuayA2CmF"),
    guanajuato SWIFT_SYMBOL("s:7BlinkID6RegionO10guanajuatoyA2CmF"),
    guerrero SWIFT_SYMBOL("s:7BlinkID6RegionO8guerreroyA2CmF"),
    mexico SWIFT_SYMBOL("s:7BlinkID6RegionO6mexicoyA2CmF"),
    michoacan SWIFT_SYMBOL("s:7BlinkID6RegionO9michoacanyA2CmF"),
    newYorkCity SWIFT_SYMBOL("s:7BlinkID6RegionO11newYorkCityyA2CmF"),
    tamaulipas SWIFT_SYMBOL("s:7BlinkID6RegionO10tamaulipasyA2CmF"),
    veracruz SWIFT_SYMBOL("s:7BlinkID6RegionO8veracruzyA2CmF"),
    chiapas SWIFT_SYMBOL("s:7BlinkID6RegionO7chiapasyA2CmF"),
    coahuila SWIFT_SYMBOL("s:7BlinkID6RegionO8coahuilayA2CmF"),
    durango SWIFT_SYMBOL("s:7BlinkID6RegionO7durangoyA2CmF"),
    guerreroCocula SWIFT_SYMBOL("s:7BlinkID6RegionO14guerreroCoculayA2CmF"),
    guerreroJuchitan SWIFT_SYMBOL("s:7BlinkID6RegionO16guerreroJuchitanyA2CmF"),
    guerreroTepecoacuilco SWIFT_SYMBOL("s:7BlinkID6RegionO21guerreroTepecoacuilcoyA2CmF"),
    guerreroTlacoapa SWIFT_SYMBOL("s:7BlinkID6RegionO16guerreroTlacoapayA2CmF"),
    gujarat SWIFT_SYMBOL("s:7BlinkID6RegionO7gujaratyA2CmF"),
    hidalgo SWIFT_SYMBOL("s:7BlinkID6RegionO7hidalgoyA2CmF"),
    karnataka SWIFT_SYMBOL("s:7BlinkID6RegionO9karnatakayA2CmF"),
    kerala SWIFT_SYMBOL("s:7BlinkID6RegionO6keralayA2CmF"),
    khyberPakhtunkhwa SWIFT_SYMBOL("s:7BlinkID6RegionO17khyberPakhtunkhwayA2CmF"),
    madhyaPradesh SWIFT_SYMBOL("s:7BlinkID6RegionO13madhyaPradeshyA2CmF"),
    maharashtra SWIFT_SYMBOL("s:7BlinkID6RegionO11maharashtrayA2CmF"),
    morelos SWIFT_SYMBOL("s:7BlinkID6RegionO7morelosyA2CmF"),
    nayarit SWIFT_SYMBOL("s:7BlinkID6RegionO7nayarityA2CmF"),
    oaxaca SWIFT_SYMBOL("s:7BlinkID6RegionO6oaxacayA2CmF"),
    puebla SWIFT_SYMBOL("s:7BlinkID6RegionO6pueblayA2CmF"),
    punjab SWIFT_SYMBOL("s:7BlinkID6RegionO6punjabyA2CmF"),
    queretaro SWIFT_SYMBOL("s:7BlinkID6RegionO9queretaroyA2CmF"),
    sanLuisPotosi SWIFT_SYMBOL("s:7BlinkID6RegionO13sanLuisPotosiyA2CmF"),
    sinaloa SWIFT_SYMBOL("s:7BlinkID6RegionO7sinaloayA2CmF"),
    sonora SWIFT_SYMBOL("s:7BlinkID6RegionO6sonorayA2CmF"),
    tabasco SWIFT_SYMBOL("s:7BlinkID6RegionO7tabascoyA2CmF"),
    tamilNadu SWIFT_SYMBOL("s:7BlinkID6RegionO9tamilNaduyA2CmF"),
    yucatan SWIFT_SYMBOL("s:7BlinkID6RegionO7yucatanyA2CmF"),
    zacatecas SWIFT_SYMBOL("s:7BlinkID6RegionO9zacatecasyA2CmF"),
    aguascalientes SWIFT_SYMBOL("s:7BlinkID6RegionO14aguascalientesyA2CmF"),
    bajaCaliforniaSur SWIFT_SYMBOL("s:7BlinkID6RegionO17bajaCaliforniaSuryA2CmF"),
    campeche SWIFT_SYMBOL("s:7BlinkID6RegionO8campecheyA2CmF"),
    colima SWIFT_SYMBOL("s:7BlinkID6RegionO6colimayA2CmF"),
    quintanaRooBenitoJuarez SWIFT_SYMBOL("s:7BlinkID6RegionO23quintanaRooBenitoJuarezyA2CmF"),
    quintanaRoo SWIFT_SYMBOL("s:7BlinkID6RegionO11quintanaRooyA2CmF"),
    quintanaRooSolidaridad SWIFT_SYMBOL("s:7BlinkID6RegionO22quintanaRooSolidaridadyA2CmF"),
    tlaxcala SWIFT_SYMBOL("s:7BlinkID6RegionO8tlaxcalayA2CmF"),
    quintanaRooCozumel SWIFT_SYMBOL("s:7BlinkID6RegionO18quintanaRooCozumelyA2CmF"),
    saoPaolo SWIFT_SYMBOL("s:7BlinkID6RegionO8saoPaoloyA2CmF"),
    rioDeJaneiro SWIFT_SYMBOL("s:7BlinkID6RegionO12rioDeJaneiroyA2CmF"),
    rioGrandeDoSul SWIFT_SYMBOL("s:7BlinkID6RegionO14rioGrandeDoSulyA2CmF"),
    northwestTerritories SWIFT_SYMBOL("s:7BlinkID6RegionO20northwestTerritoriesyA2CmF"),
    nunavut SWIFT_SYMBOL("s:7BlinkID6RegionO7nunavutyA2CmF"),
    princeEdwardIsland SWIFT_SYMBOL("s:7BlinkID6RegionO18princeEdwardIslandyA2CmF"),
    distritoFederal SWIFT_SYMBOL("s:7BlinkID6RegionO15distritoFederalyA2CmF"),
    maranhao SWIFT_SYMBOL("s:7BlinkID6RegionO8maranhaoyA2CmF"),
    matoGrosso SWIFT_SYMBOL("s:7BlinkID6RegionO10matoGrossoyA2CmF"),
    minasGerais SWIFT_SYMBOL("s:7BlinkID6RegionO11minasGeraisyA2CmF"),
    para SWIFT_SYMBOL("s:7BlinkID6RegionO4parayA2CmF"),
    parana SWIFT_SYMBOL("s:7BlinkID6RegionO6paranayA2CmF"),
    pernambuco SWIFT_SYMBOL("s:7BlinkID6RegionO10pernambucoyA2CmF"),
    santaCatarina SWIFT_SYMBOL("s:7BlinkID6RegionO13santaCatarinayA2CmF"),
    andhraPradesh SWIFT_SYMBOL("s:7BlinkID6RegionO13andhraPradeshyA2CmF"),
    ceara SWIFT_SYMBOL("s:7BlinkID6RegionO5cearayA2CmF"),
    goias SWIFT_SYMBOL("s:7BlinkID6RegionO5goiasyA2CmF"),
    guerreroAcapulcoDeJuarez SWIFT_SYMBOL("s:7BlinkID6RegionO24guerreroAcapulcoDeJuarezyA2CmF"),
    haryana SWIFT_SYMBOL("s:7BlinkID6RegionO7haryanayA2CmF"),
    sergipe SWIFT_SYMBOL("s:7BlinkID6RegionO7sergipeyA2CmF"),
    alagoas SWIFT_SYMBOL("s:7BlinkID6RegionO7alagoasyA2CmF"),
    bangsamoro SWIFT_SYMBOL("s:7BlinkID6RegionO10bangsamoroyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_none {  // impl struct for case none
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::none;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } none SWIFT_SYMBOL("s:7BlinkID6RegionO4noneyA2CmF");
  SWIFT_INLINE_THUNK bool isNone() const;

  inline const static struct _impl_alabama {  // impl struct for case alabama
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::alabama;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } alabama SWIFT_SYMBOL("s:7BlinkID6RegionO7alabamayA2CmF");
  SWIFT_INLINE_THUNK bool isAlabama() const;

  inline const static struct _impl_alaska {  // impl struct for case alaska
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::alaska;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } alaska SWIFT_SYMBOL("s:7BlinkID6RegionO6alaskayA2CmF");
  SWIFT_INLINE_THUNK bool isAlaska() const;

  inline const static struct _impl_alberta {  // impl struct for case alberta
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::alberta;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } alberta SWIFT_SYMBOL("s:7BlinkID6RegionO7albertayA2CmF");
  SWIFT_INLINE_THUNK bool isAlberta() const;

  inline const static struct _impl_arizona {  // impl struct for case arizona
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::arizona;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } arizona SWIFT_SYMBOL("s:7BlinkID6RegionO7arizonayA2CmF");
  SWIFT_INLINE_THUNK bool isArizona() const;

  inline const static struct _impl_arkansas {  // impl struct for case arkansas
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::arkansas;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } arkansas SWIFT_SYMBOL("s:7BlinkID6RegionO8arkansasyA2CmF");
  SWIFT_INLINE_THUNK bool isArkansas() const;

  inline const static struct _impl_australianCapitalTerritory {  // impl struct for case australianCapitalTerritory
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::australianCapitalTerritory;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } australianCapitalTerritory SWIFT_SYMBOL("s:7BlinkID6RegionO26australianCapitalTerritoryyA2CmF");
  SWIFT_INLINE_THUNK bool isAustralianCapitalTerritory() const;

  inline const static struct _impl_britishColumbia {  // impl struct for case britishColumbia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::britishColumbia;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } britishColumbia SWIFT_SYMBOL("s:7BlinkID6RegionO15britishColumbiayA2CmF");
  SWIFT_INLINE_THUNK bool isBritishColumbia() const;

  inline const static struct _impl_california {  // impl struct for case california
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::california;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } california SWIFT_SYMBOL("s:7BlinkID6RegionO10californiayA2CmF");
  SWIFT_INLINE_THUNK bool isCalifornia() const;

  inline const static struct _impl_colorado {  // impl struct for case colorado
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::colorado;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } colorado SWIFT_SYMBOL("s:7BlinkID6RegionO8coloradoyA2CmF");
  SWIFT_INLINE_THUNK bool isColorado() const;

  inline const static struct _impl_connecticut {  // impl struct for case connecticut
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::connecticut;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } connecticut SWIFT_SYMBOL("s:7BlinkID6RegionO11connecticutyA2CmF");
  SWIFT_INLINE_THUNK bool isConnecticut() const;

  inline const static struct _impl_delaware {  // impl struct for case delaware
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::delaware;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } delaware SWIFT_SYMBOL("s:7BlinkID6RegionO8delawareyA2CmF");
  SWIFT_INLINE_THUNK bool isDelaware() const;

  inline const static struct _impl_districtOfColumbia {  // impl struct for case districtOfColumbia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::districtOfColumbia;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } districtOfColumbia SWIFT_SYMBOL("s:7BlinkID6RegionO18districtOfColumbiayA2CmF");
  SWIFT_INLINE_THUNK bool isDistrictOfColumbia() const;

  inline const static struct _impl_florida {  // impl struct for case florida
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::florida;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } florida SWIFT_SYMBOL("s:7BlinkID6RegionO7floridayA2CmF");
  SWIFT_INLINE_THUNK bool isFlorida() const;

  inline const static struct _impl_georgia {  // impl struct for case georgia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::georgia;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } georgia SWIFT_SYMBOL("s:7BlinkID6RegionO7georgiayA2CmF");
  SWIFT_INLINE_THUNK bool isGeorgia() const;

  inline const static struct _impl_hawaii {  // impl struct for case hawaii
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::hawaii;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } hawaii SWIFT_SYMBOL("s:7BlinkID6RegionO6hawaiiyA2CmF");
  SWIFT_INLINE_THUNK bool isHawaii() const;

  inline const static struct _impl_idaho {  // impl struct for case idaho
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::idaho;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } idaho SWIFT_SYMBOL("s:7BlinkID6RegionO5idahoyA2CmF");
  SWIFT_INLINE_THUNK bool isIdaho() const;

  inline const static struct _impl_illinois {  // impl struct for case illinois
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::illinois;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } illinois SWIFT_SYMBOL("s:7BlinkID6RegionO8illinoisyA2CmF");
  SWIFT_INLINE_THUNK bool isIllinois() const;

  inline const static struct _impl_indiana {  // impl struct for case indiana
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::indiana;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } indiana SWIFT_SYMBOL("s:7BlinkID6RegionO7indianayA2CmF");
  SWIFT_INLINE_THUNK bool isIndiana() const;

  inline const static struct _impl_iowa {  // impl struct for case iowa
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::iowa;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } iowa SWIFT_SYMBOL("s:7BlinkID6RegionO4iowayA2CmF");
  SWIFT_INLINE_THUNK bool isIowa() const;

  inline const static struct _impl_kansas {  // impl struct for case kansas
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::kansas;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } kansas SWIFT_SYMBOL("s:7BlinkID6RegionO6kansasyA2CmF");
  SWIFT_INLINE_THUNK bool isKansas() const;

  inline const static struct _impl_kentucky {  // impl struct for case kentucky
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::kentucky;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } kentucky SWIFT_SYMBOL("s:7BlinkID6RegionO8kentuckyyA2CmF");
  SWIFT_INLINE_THUNK bool isKentucky() const;

  inline const static struct _impl_louisiana {  // impl struct for case louisiana
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::louisiana;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } louisiana SWIFT_SYMBOL("s:7BlinkID6RegionO9louisianayA2CmF");
  SWIFT_INLINE_THUNK bool isLouisiana() const;

  inline const static struct _impl_maine {  // impl struct for case maine
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::maine;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } maine SWIFT_SYMBOL("s:7BlinkID6RegionO5maineyA2CmF");
  SWIFT_INLINE_THUNK bool isMaine() const;

  inline const static struct _impl_manitoba {  // impl struct for case manitoba
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::manitoba;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } manitoba SWIFT_SYMBOL("s:7BlinkID6RegionO8manitobayA2CmF");
  SWIFT_INLINE_THUNK bool isManitoba() const;

  inline const static struct _impl_maryland {  // impl struct for case maryland
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::maryland;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } maryland SWIFT_SYMBOL("s:7BlinkID6RegionO8marylandyA2CmF");
  SWIFT_INLINE_THUNK bool isMaryland() const;

  inline const static struct _impl_massachusetts {  // impl struct for case massachusetts
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::massachusetts;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } massachusetts SWIFT_SYMBOL("s:7BlinkID6RegionO13massachusettsyA2CmF");
  SWIFT_INLINE_THUNK bool isMassachusetts() const;

  inline const static struct _impl_michigan {  // impl struct for case michigan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::michigan;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } michigan SWIFT_SYMBOL("s:7BlinkID6RegionO8michiganyA2CmF");
  SWIFT_INLINE_THUNK bool isMichigan() const;

  inline const static struct _impl_minnesota {  // impl struct for case minnesota
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::minnesota;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } minnesota SWIFT_SYMBOL("s:7BlinkID6RegionO9minnesotayA2CmF");
  SWIFT_INLINE_THUNK bool isMinnesota() const;

  inline const static struct _impl_mississippi {  // impl struct for case mississippi
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mississippi;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } mississippi SWIFT_SYMBOL("s:7BlinkID6RegionO11mississippiyA2CmF");
  SWIFT_INLINE_THUNK bool isMississippi() const;

  inline const static struct _impl_missouri {  // impl struct for case missouri
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::missouri;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } missouri SWIFT_SYMBOL("s:7BlinkID6RegionO8missouriyA2CmF");
  SWIFT_INLINE_THUNK bool isMissouri() const;

  inline const static struct _impl_montana {  // impl struct for case montana
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::montana;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } montana SWIFT_SYMBOL("s:7BlinkID6RegionO7montanayA2CmF");
  SWIFT_INLINE_THUNK bool isMontana() const;

  inline const static struct _impl_nebraska {  // impl struct for case nebraska
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nebraska;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } nebraska SWIFT_SYMBOL("s:7BlinkID6RegionO8nebraskayA2CmF");
  SWIFT_INLINE_THUNK bool isNebraska() const;

  inline const static struct _impl_nevada {  // impl struct for case nevada
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nevada;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } nevada SWIFT_SYMBOL("s:7BlinkID6RegionO6nevadayA2CmF");
  SWIFT_INLINE_THUNK bool isNevada() const;

  inline const static struct _impl_newBrunswick {  // impl struct for case newBrunswick
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::newBrunswick;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } newBrunswick SWIFT_SYMBOL("s:7BlinkID6RegionO12newBrunswickyA2CmF");
  SWIFT_INLINE_THUNK bool isNewBrunswick() const;

  inline const static struct _impl_newHampshire {  // impl struct for case newHampshire
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::newHampshire;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } newHampshire SWIFT_SYMBOL("s:7BlinkID6RegionO12newHampshireyA2CmF");
  SWIFT_INLINE_THUNK bool isNewHampshire() const;

  inline const static struct _impl_newJersey {  // impl struct for case newJersey
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::newJersey;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } newJersey SWIFT_SYMBOL("s:7BlinkID6RegionO9newJerseyyA2CmF");
  SWIFT_INLINE_THUNK bool isNewJersey() const;

  inline const static struct _impl_newMexico {  // impl struct for case newMexico
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::newMexico;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } newMexico SWIFT_SYMBOL("s:7BlinkID6RegionO9newMexicoyA2CmF");
  SWIFT_INLINE_THUNK bool isNewMexico() const;

  inline const static struct _impl_newSouthWales {  // impl struct for case newSouthWales
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::newSouthWales;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } newSouthWales SWIFT_SYMBOL("s:7BlinkID6RegionO13newSouthWalesyA2CmF");
  SWIFT_INLINE_THUNK bool isNewSouthWales() const;

  inline const static struct _impl_newYork {  // impl struct for case newYork
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::newYork;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } newYork SWIFT_SYMBOL("s:7BlinkID6RegionO7newYorkyA2CmF");
  SWIFT_INLINE_THUNK bool isNewYork() const;

  inline const static struct _impl_northernTerritory {  // impl struct for case northernTerritory
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::northernTerritory;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } northernTerritory SWIFT_SYMBOL("s:7BlinkID6RegionO17northernTerritoryyA2CmF");
  SWIFT_INLINE_THUNK bool isNorthernTerritory() const;

  inline const static struct _impl_northCarolina {  // impl struct for case northCarolina
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::northCarolina;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } northCarolina SWIFT_SYMBOL("s:7BlinkID6RegionO13northCarolinayA2CmF");
  SWIFT_INLINE_THUNK bool isNorthCarolina() const;

  inline const static struct _impl_northDakota {  // impl struct for case northDakota
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::northDakota;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } northDakota SWIFT_SYMBOL("s:7BlinkID6RegionO11northDakotayA2CmF");
  SWIFT_INLINE_THUNK bool isNorthDakota() const;

  inline const static struct _impl_novaScotia {  // impl struct for case novaScotia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::novaScotia;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } novaScotia SWIFT_SYMBOL("s:7BlinkID6RegionO10novaScotiayA2CmF");
  SWIFT_INLINE_THUNK bool isNovaScotia() const;

  inline const static struct _impl_ohio {  // impl struct for case ohio
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ohio;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } ohio SWIFT_SYMBOL("s:7BlinkID6RegionO4ohioyA2CmF");
  SWIFT_INLINE_THUNK bool isOhio() const;

  inline const static struct _impl_oklahoma {  // impl struct for case oklahoma
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::oklahoma;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } oklahoma SWIFT_SYMBOL("s:7BlinkID6RegionO8oklahomayA2CmF");
  SWIFT_INLINE_THUNK bool isOklahoma() const;

  inline const static struct _impl_ontario {  // impl struct for case ontario
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ontario;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } ontario SWIFT_SYMBOL("s:7BlinkID6RegionO7ontarioyA2CmF");
  SWIFT_INLINE_THUNK bool isOntario() const;

  inline const static struct _impl_oregon {  // impl struct for case oregon
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::oregon;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } oregon SWIFT_SYMBOL("s:7BlinkID6RegionO6oregonyA2CmF");
  SWIFT_INLINE_THUNK bool isOregon() const;

  inline const static struct _impl_pennsylvania {  // impl struct for case pennsylvania
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::pennsylvania;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } pennsylvania SWIFT_SYMBOL("s:7BlinkID6RegionO12pennsylvaniayA2CmF");
  SWIFT_INLINE_THUNK bool isPennsylvania() const;

  inline const static struct _impl_quebec {  // impl struct for case quebec
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::quebec;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } quebec SWIFT_SYMBOL("s:7BlinkID6RegionO6quebecyA2CmF");
  SWIFT_INLINE_THUNK bool isQuebec() const;

  inline const static struct _impl_queensland {  // impl struct for case queensland
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::queensland;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } queensland SWIFT_SYMBOL("s:7BlinkID6RegionO10queenslandyA2CmF");
  SWIFT_INLINE_THUNK bool isQueensland() const;

  inline const static struct _impl_rhodeIsland {  // impl struct for case rhodeIsland
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::rhodeIsland;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } rhodeIsland SWIFT_SYMBOL("s:7BlinkID6RegionO11rhodeIslandyA2CmF");
  SWIFT_INLINE_THUNK bool isRhodeIsland() const;

  inline const static struct _impl_saskatchewan {  // impl struct for case saskatchewan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::saskatchewan;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } saskatchewan SWIFT_SYMBOL("s:7BlinkID6RegionO12saskatchewanyA2CmF");
  SWIFT_INLINE_THUNK bool isSaskatchewan() const;

  inline const static struct _impl_southAustralia {  // impl struct for case southAustralia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::southAustralia;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } southAustralia SWIFT_SYMBOL("s:7BlinkID6RegionO14southAustraliayA2CmF");
  SWIFT_INLINE_THUNK bool isSouthAustralia() const;

  inline const static struct _impl_southCarolina {  // impl struct for case southCarolina
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::southCarolina;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } southCarolina SWIFT_SYMBOL("s:7BlinkID6RegionO13southCarolinayA2CmF");
  SWIFT_INLINE_THUNK bool isSouthCarolina() const;

  inline const static struct _impl_southDakota {  // impl struct for case southDakota
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::southDakota;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } southDakota SWIFT_SYMBOL("s:7BlinkID6RegionO11southDakotayA2CmF");
  SWIFT_INLINE_THUNK bool isSouthDakota() const;

  inline const static struct _impl_tasmania {  // impl struct for case tasmania
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tasmania;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } tasmania SWIFT_SYMBOL("s:7BlinkID6RegionO8tasmaniayA2CmF");
  SWIFT_INLINE_THUNK bool isTasmania() const;

  inline const static struct _impl_tennessee {  // impl struct for case tennessee
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tennessee;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } tennessee SWIFT_SYMBOL("s:7BlinkID6RegionO9tennesseeyA2CmF");
  SWIFT_INLINE_THUNK bool isTennessee() const;

  inline const static struct _impl_texas {  // impl struct for case texas
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::texas;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } texas SWIFT_SYMBOL("s:7BlinkID6RegionO5texasyA2CmF");
  SWIFT_INLINE_THUNK bool isTexas() const;

  inline const static struct _impl_utah {  // impl struct for case utah
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::utah;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } utah SWIFT_SYMBOL("s:7BlinkID6RegionO4utahyA2CmF");
  SWIFT_INLINE_THUNK bool isUtah() const;

  inline const static struct _impl_vermont {  // impl struct for case vermont
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::vermont;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } vermont SWIFT_SYMBOL("s:7BlinkID6RegionO7vermontyA2CmF");
  SWIFT_INLINE_THUNK bool isVermont() const;

  inline const static struct _impl_victoria {  // impl struct for case victoria
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::victoria;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } victoria SWIFT_SYMBOL("s:7BlinkID6RegionO8victoriayA2CmF");
  SWIFT_INLINE_THUNK bool isVictoria() const;

  inline const static struct _impl_virginia {  // impl struct for case virginia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::virginia;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } virginia SWIFT_SYMBOL("s:7BlinkID6RegionO8virginiayA2CmF");
  SWIFT_INLINE_THUNK bool isVirginia() const;

  inline const static struct _impl_washington {  // impl struct for case washington
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::washington;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } washington SWIFT_SYMBOL("s:7BlinkID6RegionO10washingtonyA2CmF");
  SWIFT_INLINE_THUNK bool isWashington() const;

  inline const static struct _impl_westernAustralia {  // impl struct for case westernAustralia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::westernAustralia;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } westernAustralia SWIFT_SYMBOL("s:7BlinkID6RegionO16westernAustraliayA2CmF");
  SWIFT_INLINE_THUNK bool isWesternAustralia() const;

  inline const static struct _impl_westVirginia {  // impl struct for case westVirginia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::westVirginia;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } westVirginia SWIFT_SYMBOL("s:7BlinkID6RegionO12westVirginiayA2CmF");
  SWIFT_INLINE_THUNK bool isWestVirginia() const;

  inline const static struct _impl_wisconsin {  // impl struct for case wisconsin
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::wisconsin;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } wisconsin SWIFT_SYMBOL("s:7BlinkID6RegionO9wisconsinyA2CmF");
  SWIFT_INLINE_THUNK bool isWisconsin() const;

  inline const static struct _impl_wyoming {  // impl struct for case wyoming
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::wyoming;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } wyoming SWIFT_SYMBOL("s:7BlinkID6RegionO7wyomingyA2CmF");
  SWIFT_INLINE_THUNK bool isWyoming() const;

  inline const static struct _impl_yukon {  // impl struct for case yukon
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::yukon;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } yukon SWIFT_SYMBOL("s:7BlinkID6RegionO5yukonyA2CmF");
  SWIFT_INLINE_THUNK bool isYukon() const;

  inline const static struct _impl_ciudadDeMexico {  // impl struct for case ciudadDeMexico
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ciudadDeMexico;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } ciudadDeMexico SWIFT_SYMBOL("s:7BlinkID6RegionO14ciudadDeMexicoyA2CmF");
  SWIFT_INLINE_THUNK bool isCiudadDeMexico() const;

  inline const static struct _impl_jalisco {  // impl struct for case jalisco
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::jalisco;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } jalisco SWIFT_SYMBOL("s:7BlinkID6RegionO7jaliscoyA2CmF");
  SWIFT_INLINE_THUNK bool isJalisco() const;

  inline const static struct _impl_newfoundlandAndLabrador {  // impl struct for case newfoundlandAndLabrador
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::newfoundlandAndLabrador;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } newfoundlandAndLabrador SWIFT_SYMBOL("s:7BlinkID6RegionO23newfoundlandAndLabradoryA2CmF");
  SWIFT_INLINE_THUNK bool isNewfoundlandAndLabrador() const;

  inline const static struct _impl_nuevoLeon {  // impl struct for case nuevoLeon
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nuevoLeon;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } nuevoLeon SWIFT_SYMBOL("s:7BlinkID6RegionO9nuevoLeonyA2CmF");
  SWIFT_INLINE_THUNK bool isNuevoLeon() const;

  inline const static struct _impl_bajaCalifornia {  // impl struct for case bajaCalifornia
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bajaCalifornia;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } bajaCalifornia SWIFT_SYMBOL("s:7BlinkID6RegionO14bajaCaliforniayA2CmF");
  SWIFT_INLINE_THUNK bool isBajaCalifornia() const;

  inline const static struct _impl_chihuahua {  // impl struct for case chihuahua
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::chihuahua;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } chihuahua SWIFT_SYMBOL("s:7BlinkID6RegionO9chihuahuayA2CmF");
  SWIFT_INLINE_THUNK bool isChihuahua() const;

  inline const static struct _impl_guanajuato {  // impl struct for case guanajuato
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::guanajuato;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } guanajuato SWIFT_SYMBOL("s:7BlinkID6RegionO10guanajuatoyA2CmF");
  SWIFT_INLINE_THUNK bool isGuanajuato() const;

  inline const static struct _impl_guerrero {  // impl struct for case guerrero
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::guerrero;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } guerrero SWIFT_SYMBOL("s:7BlinkID6RegionO8guerreroyA2CmF");
  SWIFT_INLINE_THUNK bool isGuerrero() const;

  inline const static struct _impl_mexico {  // impl struct for case mexico
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::mexico;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } mexico SWIFT_SYMBOL("s:7BlinkID6RegionO6mexicoyA2CmF");
  SWIFT_INLINE_THUNK bool isMexico() const;

  inline const static struct _impl_michoacan {  // impl struct for case michoacan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::michoacan;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } michoacan SWIFT_SYMBOL("s:7BlinkID6RegionO9michoacanyA2CmF");
  SWIFT_INLINE_THUNK bool isMichoacan() const;

  inline const static struct _impl_newYorkCity {  // impl struct for case newYorkCity
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::newYorkCity;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } newYorkCity SWIFT_SYMBOL("s:7BlinkID6RegionO11newYorkCityyA2CmF");
  SWIFT_INLINE_THUNK bool isNewYorkCity() const;

  inline const static struct _impl_tamaulipas {  // impl struct for case tamaulipas
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tamaulipas;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } tamaulipas SWIFT_SYMBOL("s:7BlinkID6RegionO10tamaulipasyA2CmF");
  SWIFT_INLINE_THUNK bool isTamaulipas() const;

  inline const static struct _impl_veracruz {  // impl struct for case veracruz
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::veracruz;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } veracruz SWIFT_SYMBOL("s:7BlinkID6RegionO8veracruzyA2CmF");
  SWIFT_INLINE_THUNK bool isVeracruz() const;

  inline const static struct _impl_chiapas {  // impl struct for case chiapas
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::chiapas;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } chiapas SWIFT_SYMBOL("s:7BlinkID6RegionO7chiapasyA2CmF");
  SWIFT_INLINE_THUNK bool isChiapas() const;

  inline const static struct _impl_coahuila {  // impl struct for case coahuila
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::coahuila;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } coahuila SWIFT_SYMBOL("s:7BlinkID6RegionO8coahuilayA2CmF");
  SWIFT_INLINE_THUNK bool isCoahuila() const;

  inline const static struct _impl_durango {  // impl struct for case durango
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::durango;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } durango SWIFT_SYMBOL("s:7BlinkID6RegionO7durangoyA2CmF");
  SWIFT_INLINE_THUNK bool isDurango() const;

  inline const static struct _impl_guerreroCocula {  // impl struct for case guerreroCocula
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::guerreroCocula;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } guerreroCocula SWIFT_SYMBOL("s:7BlinkID6RegionO14guerreroCoculayA2CmF");
  SWIFT_INLINE_THUNK bool isGuerreroCocula() const;

  inline const static struct _impl_guerreroJuchitan {  // impl struct for case guerreroJuchitan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::guerreroJuchitan;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } guerreroJuchitan SWIFT_SYMBOL("s:7BlinkID6RegionO16guerreroJuchitanyA2CmF");
  SWIFT_INLINE_THUNK bool isGuerreroJuchitan() const;

  inline const static struct _impl_guerreroTepecoacuilco {  // impl struct for case guerreroTepecoacuilco
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::guerreroTepecoacuilco;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } guerreroTepecoacuilco SWIFT_SYMBOL("s:7BlinkID6RegionO21guerreroTepecoacuilcoyA2CmF");
  SWIFT_INLINE_THUNK bool isGuerreroTepecoacuilco() const;

  inline const static struct _impl_guerreroTlacoapa {  // impl struct for case guerreroTlacoapa
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::guerreroTlacoapa;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } guerreroTlacoapa SWIFT_SYMBOL("s:7BlinkID6RegionO16guerreroTlacoapayA2CmF");
  SWIFT_INLINE_THUNK bool isGuerreroTlacoapa() const;

  inline const static struct _impl_gujarat {  // impl struct for case gujarat
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::gujarat;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } gujarat SWIFT_SYMBOL("s:7BlinkID6RegionO7gujaratyA2CmF");
  SWIFT_INLINE_THUNK bool isGujarat() const;

  inline const static struct _impl_hidalgo {  // impl struct for case hidalgo
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::hidalgo;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } hidalgo SWIFT_SYMBOL("s:7BlinkID6RegionO7hidalgoyA2CmF");
  SWIFT_INLINE_THUNK bool isHidalgo() const;

  inline const static struct _impl_karnataka {  // impl struct for case karnataka
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::karnataka;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } karnataka SWIFT_SYMBOL("s:7BlinkID6RegionO9karnatakayA2CmF");
  SWIFT_INLINE_THUNK bool isKarnataka() const;

  inline const static struct _impl_kerala {  // impl struct for case kerala
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::kerala;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } kerala SWIFT_SYMBOL("s:7BlinkID6RegionO6keralayA2CmF");
  SWIFT_INLINE_THUNK bool isKerala() const;

  inline const static struct _impl_khyberPakhtunkhwa {  // impl struct for case khyberPakhtunkhwa
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::khyberPakhtunkhwa;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } khyberPakhtunkhwa SWIFT_SYMBOL("s:7BlinkID6RegionO17khyberPakhtunkhwayA2CmF");
  SWIFT_INLINE_THUNK bool isKhyberPakhtunkhwa() const;

  inline const static struct _impl_madhyaPradesh {  // impl struct for case madhyaPradesh
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::madhyaPradesh;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } madhyaPradesh SWIFT_SYMBOL("s:7BlinkID6RegionO13madhyaPradeshyA2CmF");
  SWIFT_INLINE_THUNK bool isMadhyaPradesh() const;

  inline const static struct _impl_maharashtra {  // impl struct for case maharashtra
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::maharashtra;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } maharashtra SWIFT_SYMBOL("s:7BlinkID6RegionO11maharashtrayA2CmF");
  SWIFT_INLINE_THUNK bool isMaharashtra() const;

  inline const static struct _impl_morelos {  // impl struct for case morelos
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::morelos;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } morelos SWIFT_SYMBOL("s:7BlinkID6RegionO7morelosyA2CmF");
  SWIFT_INLINE_THUNK bool isMorelos() const;

  inline const static struct _impl_nayarit {  // impl struct for case nayarit
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nayarit;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } nayarit SWIFT_SYMBOL("s:7BlinkID6RegionO7nayarityA2CmF");
  SWIFT_INLINE_THUNK bool isNayarit() const;

  inline const static struct _impl_oaxaca {  // impl struct for case oaxaca
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::oaxaca;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } oaxaca SWIFT_SYMBOL("s:7BlinkID6RegionO6oaxacayA2CmF");
  SWIFT_INLINE_THUNK bool isOaxaca() const;

  inline const static struct _impl_puebla {  // impl struct for case puebla
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::puebla;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } puebla SWIFT_SYMBOL("s:7BlinkID6RegionO6pueblayA2CmF");
  SWIFT_INLINE_THUNK bool isPuebla() const;

  inline const static struct _impl_punjab {  // impl struct for case punjab
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::punjab;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } punjab SWIFT_SYMBOL("s:7BlinkID6RegionO6punjabyA2CmF");
  SWIFT_INLINE_THUNK bool isPunjab() const;

  inline const static struct _impl_queretaro {  // impl struct for case queretaro
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::queretaro;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } queretaro SWIFT_SYMBOL("s:7BlinkID6RegionO9queretaroyA2CmF");
  SWIFT_INLINE_THUNK bool isQueretaro() const;

  inline const static struct _impl_sanLuisPotosi {  // impl struct for case sanLuisPotosi
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sanLuisPotosi;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } sanLuisPotosi SWIFT_SYMBOL("s:7BlinkID6RegionO13sanLuisPotosiyA2CmF");
  SWIFT_INLINE_THUNK bool isSanLuisPotosi() const;

  inline const static struct _impl_sinaloa {  // impl struct for case sinaloa
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sinaloa;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } sinaloa SWIFT_SYMBOL("s:7BlinkID6RegionO7sinaloayA2CmF");
  SWIFT_INLINE_THUNK bool isSinaloa() const;

  inline const static struct _impl_sonora {  // impl struct for case sonora
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sonora;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } sonora SWIFT_SYMBOL("s:7BlinkID6RegionO6sonorayA2CmF");
  SWIFT_INLINE_THUNK bool isSonora() const;

  inline const static struct _impl_tabasco {  // impl struct for case tabasco
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tabasco;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } tabasco SWIFT_SYMBOL("s:7BlinkID6RegionO7tabascoyA2CmF");
  SWIFT_INLINE_THUNK bool isTabasco() const;

  inline const static struct _impl_tamilNadu {  // impl struct for case tamilNadu
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tamilNadu;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } tamilNadu SWIFT_SYMBOL("s:7BlinkID6RegionO9tamilNaduyA2CmF");
  SWIFT_INLINE_THUNK bool isTamilNadu() const;

  inline const static struct _impl_yucatan {  // impl struct for case yucatan
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::yucatan;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } yucatan SWIFT_SYMBOL("s:7BlinkID6RegionO7yucatanyA2CmF");
  SWIFT_INLINE_THUNK bool isYucatan() const;

  inline const static struct _impl_zacatecas {  // impl struct for case zacatecas
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::zacatecas;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } zacatecas SWIFT_SYMBOL("s:7BlinkID6RegionO9zacatecasyA2CmF");
  SWIFT_INLINE_THUNK bool isZacatecas() const;

  inline const static struct _impl_aguascalientes {  // impl struct for case aguascalientes
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::aguascalientes;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } aguascalientes SWIFT_SYMBOL("s:7BlinkID6RegionO14aguascalientesyA2CmF");
  SWIFT_INLINE_THUNK bool isAguascalientes() const;

  inline const static struct _impl_bajaCaliforniaSur {  // impl struct for case bajaCaliforniaSur
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bajaCaliforniaSur;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } bajaCaliforniaSur SWIFT_SYMBOL("s:7BlinkID6RegionO17bajaCaliforniaSuryA2CmF");
  SWIFT_INLINE_THUNK bool isBajaCaliforniaSur() const;

  inline const static struct _impl_campeche {  // impl struct for case campeche
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::campeche;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } campeche SWIFT_SYMBOL("s:7BlinkID6RegionO8campecheyA2CmF");
  SWIFT_INLINE_THUNK bool isCampeche() const;

  inline const static struct _impl_colima {  // impl struct for case colima
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::colima;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } colima SWIFT_SYMBOL("s:7BlinkID6RegionO6colimayA2CmF");
  SWIFT_INLINE_THUNK bool isColima() const;

  inline const static struct _impl_quintanaRooBenitoJuarez {  // impl struct for case quintanaRooBenitoJuarez
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::quintanaRooBenitoJuarez;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } quintanaRooBenitoJuarez SWIFT_SYMBOL("s:7BlinkID6RegionO23quintanaRooBenitoJuarezyA2CmF");
  SWIFT_INLINE_THUNK bool isQuintanaRooBenitoJuarez() const;

  inline const static struct _impl_quintanaRoo {  // impl struct for case quintanaRoo
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::quintanaRoo;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } quintanaRoo SWIFT_SYMBOL("s:7BlinkID6RegionO11quintanaRooyA2CmF");
  SWIFT_INLINE_THUNK bool isQuintanaRoo() const;

  inline const static struct _impl_quintanaRooSolidaridad {  // impl struct for case quintanaRooSolidaridad
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::quintanaRooSolidaridad;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } quintanaRooSolidaridad SWIFT_SYMBOL("s:7BlinkID6RegionO22quintanaRooSolidaridadyA2CmF");
  SWIFT_INLINE_THUNK bool isQuintanaRooSolidaridad() const;

  inline const static struct _impl_tlaxcala {  // impl struct for case tlaxcala
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::tlaxcala;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } tlaxcala SWIFT_SYMBOL("s:7BlinkID6RegionO8tlaxcalayA2CmF");
  SWIFT_INLINE_THUNK bool isTlaxcala() const;

  inline const static struct _impl_quintanaRooCozumel {  // impl struct for case quintanaRooCozumel
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::quintanaRooCozumel;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } quintanaRooCozumel SWIFT_SYMBOL("s:7BlinkID6RegionO18quintanaRooCozumelyA2CmF");
  SWIFT_INLINE_THUNK bool isQuintanaRooCozumel() const;

  inline const static struct _impl_saoPaolo {  // impl struct for case saoPaolo
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::saoPaolo;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } saoPaolo SWIFT_SYMBOL("s:7BlinkID6RegionO8saoPaoloyA2CmF");
  SWIFT_INLINE_THUNK bool isSaoPaolo() const;

  inline const static struct _impl_rioDeJaneiro {  // impl struct for case rioDeJaneiro
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::rioDeJaneiro;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } rioDeJaneiro SWIFT_SYMBOL("s:7BlinkID6RegionO12rioDeJaneiroyA2CmF");
  SWIFT_INLINE_THUNK bool isRioDeJaneiro() const;

  inline const static struct _impl_rioGrandeDoSul {  // impl struct for case rioGrandeDoSul
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::rioGrandeDoSul;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } rioGrandeDoSul SWIFT_SYMBOL("s:7BlinkID6RegionO14rioGrandeDoSulyA2CmF");
  SWIFT_INLINE_THUNK bool isRioGrandeDoSul() const;

  inline const static struct _impl_northwestTerritories {  // impl struct for case northwestTerritories
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::northwestTerritories;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } northwestTerritories SWIFT_SYMBOL("s:7BlinkID6RegionO20northwestTerritoriesyA2CmF");
  SWIFT_INLINE_THUNK bool isNorthwestTerritories() const;

  inline const static struct _impl_nunavut {  // impl struct for case nunavut
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::nunavut;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } nunavut SWIFT_SYMBOL("s:7BlinkID6RegionO7nunavutyA2CmF");
  SWIFT_INLINE_THUNK bool isNunavut() const;

  inline const static struct _impl_princeEdwardIsland {  // impl struct for case princeEdwardIsland
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::princeEdwardIsland;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } princeEdwardIsland SWIFT_SYMBOL("s:7BlinkID6RegionO18princeEdwardIslandyA2CmF");
  SWIFT_INLINE_THUNK bool isPrinceEdwardIsland() const;

  inline const static struct _impl_distritoFederal {  // impl struct for case distritoFederal
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::distritoFederal;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } distritoFederal SWIFT_SYMBOL("s:7BlinkID6RegionO15distritoFederalyA2CmF");
  SWIFT_INLINE_THUNK bool isDistritoFederal() const;

  inline const static struct _impl_maranhao {  // impl struct for case maranhao
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::maranhao;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } maranhao SWIFT_SYMBOL("s:7BlinkID6RegionO8maranhaoyA2CmF");
  SWIFT_INLINE_THUNK bool isMaranhao() const;

  inline const static struct _impl_matoGrosso {  // impl struct for case matoGrosso
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::matoGrosso;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } matoGrosso SWIFT_SYMBOL("s:7BlinkID6RegionO10matoGrossoyA2CmF");
  SWIFT_INLINE_THUNK bool isMatoGrosso() const;

  inline const static struct _impl_minasGerais {  // impl struct for case minasGerais
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::minasGerais;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } minasGerais SWIFT_SYMBOL("s:7BlinkID6RegionO11minasGeraisyA2CmF");
  SWIFT_INLINE_THUNK bool isMinasGerais() const;

  inline const static struct _impl_para {  // impl struct for case para
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::para;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } para SWIFT_SYMBOL("s:7BlinkID6RegionO4parayA2CmF");
  SWIFT_INLINE_THUNK bool isPara() const;

  inline const static struct _impl_parana {  // impl struct for case parana
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::parana;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } parana SWIFT_SYMBOL("s:7BlinkID6RegionO6paranayA2CmF");
  SWIFT_INLINE_THUNK bool isParana() const;

  inline const static struct _impl_pernambuco {  // impl struct for case pernambuco
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::pernambuco;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } pernambuco SWIFT_SYMBOL("s:7BlinkID6RegionO10pernambucoyA2CmF");
  SWIFT_INLINE_THUNK bool isPernambuco() const;

  inline const static struct _impl_santaCatarina {  // impl struct for case santaCatarina
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::santaCatarina;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } santaCatarina SWIFT_SYMBOL("s:7BlinkID6RegionO13santaCatarinayA2CmF");
  SWIFT_INLINE_THUNK bool isSantaCatarina() const;

  inline const static struct _impl_andhraPradesh {  // impl struct for case andhraPradesh
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::andhraPradesh;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } andhraPradesh SWIFT_SYMBOL("s:7BlinkID6RegionO13andhraPradeshyA2CmF");
  SWIFT_INLINE_THUNK bool isAndhraPradesh() const;

  inline const static struct _impl_ceara {  // impl struct for case ceara
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::ceara;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } ceara SWIFT_SYMBOL("s:7BlinkID6RegionO5cearayA2CmF");
  SWIFT_INLINE_THUNK bool isCeara() const;

  inline const static struct _impl_goias {  // impl struct for case goias
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::goias;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } goias SWIFT_SYMBOL("s:7BlinkID6RegionO5goiasyA2CmF");
  SWIFT_INLINE_THUNK bool isGoias() const;

  inline const static struct _impl_guerreroAcapulcoDeJuarez {  // impl struct for case guerreroAcapulcoDeJuarez
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::guerreroAcapulcoDeJuarez;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } guerreroAcapulcoDeJuarez SWIFT_SYMBOL("s:7BlinkID6RegionO24guerreroAcapulcoDeJuarezyA2CmF");
  SWIFT_INLINE_THUNK bool isGuerreroAcapulcoDeJuarez() const;

  inline const static struct _impl_haryana {  // impl struct for case haryana
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::haryana;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } haryana SWIFT_SYMBOL("s:7BlinkID6RegionO7haryanayA2CmF");
  SWIFT_INLINE_THUNK bool isHaryana() const;

  inline const static struct _impl_sergipe {  // impl struct for case sergipe
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sergipe;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } sergipe SWIFT_SYMBOL("s:7BlinkID6RegionO7sergipeyA2CmF");
  SWIFT_INLINE_THUNK bool isSergipe() const;

  inline const static struct _impl_alagoas {  // impl struct for case alagoas
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::alagoas;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } alagoas SWIFT_SYMBOL("s:7BlinkID6RegionO7alagoasyA2CmF");
  SWIFT_INLINE_THUNK bool isAlagoas() const;

  inline const static struct _impl_bangsamoro {  // impl struct for case bangsamoro
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::bangsamoro;
    }
    SWIFT_INLINE_THUNK Region operator()() const;
  } bangsamoro SWIFT_SYMBOL("s:7BlinkID6RegionO10bangsamoroyA2CmF");
  SWIFT_INLINE_THUNK bool isBangsamoro() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID6RegionO4noneyA2CmFWC) return cases::none;
    if (tag == _impl::$s7BlinkID6RegionO7alabamayA2CmFWC) return cases::alabama;
    if (tag == _impl::$s7BlinkID6RegionO6alaskayA2CmFWC) return cases::alaska;
    if (tag == _impl::$s7BlinkID6RegionO7albertayA2CmFWC) return cases::alberta;
    if (tag == _impl::$s7BlinkID6RegionO7arizonayA2CmFWC) return cases::arizona;
    if (tag == _impl::$s7BlinkID6RegionO8arkansasyA2CmFWC) return cases::arkansas;
    if (tag == _impl::$s7BlinkID6RegionO26australianCapitalTerritoryyA2CmFWC) return cases::australianCapitalTerritory;
    if (tag == _impl::$s7BlinkID6RegionO15britishColumbiayA2CmFWC) return cases::britishColumbia;
    if (tag == _impl::$s7BlinkID6RegionO10californiayA2CmFWC) return cases::california;
    if (tag == _impl::$s7BlinkID6RegionO8coloradoyA2CmFWC) return cases::colorado;
    if (tag == _impl::$s7BlinkID6RegionO11connecticutyA2CmFWC) return cases::connecticut;
    if (tag == _impl::$s7BlinkID6RegionO8delawareyA2CmFWC) return cases::delaware;
    if (tag == _impl::$s7BlinkID6RegionO18districtOfColumbiayA2CmFWC) return cases::districtOfColumbia;
    if (tag == _impl::$s7BlinkID6RegionO7floridayA2CmFWC) return cases::florida;
    if (tag == _impl::$s7BlinkID6RegionO7georgiayA2CmFWC) return cases::georgia;
    if (tag == _impl::$s7BlinkID6RegionO6hawaiiyA2CmFWC) return cases::hawaii;
    if (tag == _impl::$s7BlinkID6RegionO5idahoyA2CmFWC) return cases::idaho;
    if (tag == _impl::$s7BlinkID6RegionO8illinoisyA2CmFWC) return cases::illinois;
    if (tag == _impl::$s7BlinkID6RegionO7indianayA2CmFWC) return cases::indiana;
    if (tag == _impl::$s7BlinkID6RegionO4iowayA2CmFWC) return cases::iowa;
    if (tag == _impl::$s7BlinkID6RegionO6kansasyA2CmFWC) return cases::kansas;
    if (tag == _impl::$s7BlinkID6RegionO8kentuckyyA2CmFWC) return cases::kentucky;
    if (tag == _impl::$s7BlinkID6RegionO9louisianayA2CmFWC) return cases::louisiana;
    if (tag == _impl::$s7BlinkID6RegionO5maineyA2CmFWC) return cases::maine;
    if (tag == _impl::$s7BlinkID6RegionO8manitobayA2CmFWC) return cases::manitoba;
    if (tag == _impl::$s7BlinkID6RegionO8marylandyA2CmFWC) return cases::maryland;
    if (tag == _impl::$s7BlinkID6RegionO13massachusettsyA2CmFWC) return cases::massachusetts;
    if (tag == _impl::$s7BlinkID6RegionO8michiganyA2CmFWC) return cases::michigan;
    if (tag == _impl::$s7BlinkID6RegionO9minnesotayA2CmFWC) return cases::minnesota;
    if (tag == _impl::$s7BlinkID6RegionO11mississippiyA2CmFWC) return cases::mississippi;
    if (tag == _impl::$s7BlinkID6RegionO8missouriyA2CmFWC) return cases::missouri;
    if (tag == _impl::$s7BlinkID6RegionO7montanayA2CmFWC) return cases::montana;
    if (tag == _impl::$s7BlinkID6RegionO8nebraskayA2CmFWC) return cases::nebraska;
    if (tag == _impl::$s7BlinkID6RegionO6nevadayA2CmFWC) return cases::nevada;
    if (tag == _impl::$s7BlinkID6RegionO12newBrunswickyA2CmFWC) return cases::newBrunswick;
    if (tag == _impl::$s7BlinkID6RegionO12newHampshireyA2CmFWC) return cases::newHampshire;
    if (tag == _impl::$s7BlinkID6RegionO9newJerseyyA2CmFWC) return cases::newJersey;
    if (tag == _impl::$s7BlinkID6RegionO9newMexicoyA2CmFWC) return cases::newMexico;
    if (tag == _impl::$s7BlinkID6RegionO13newSouthWalesyA2CmFWC) return cases::newSouthWales;
    if (tag == _impl::$s7BlinkID6RegionO7newYorkyA2CmFWC) return cases::newYork;
    if (tag == _impl::$s7BlinkID6RegionO17northernTerritoryyA2CmFWC) return cases::northernTerritory;
    if (tag == _impl::$s7BlinkID6RegionO13northCarolinayA2CmFWC) return cases::northCarolina;
    if (tag == _impl::$s7BlinkID6RegionO11northDakotayA2CmFWC) return cases::northDakota;
    if (tag == _impl::$s7BlinkID6RegionO10novaScotiayA2CmFWC) return cases::novaScotia;
    if (tag == _impl::$s7BlinkID6RegionO4ohioyA2CmFWC) return cases::ohio;
    if (tag == _impl::$s7BlinkID6RegionO8oklahomayA2CmFWC) return cases::oklahoma;
    if (tag == _impl::$s7BlinkID6RegionO7ontarioyA2CmFWC) return cases::ontario;
    if (tag == _impl::$s7BlinkID6RegionO6oregonyA2CmFWC) return cases::oregon;
    if (tag == _impl::$s7BlinkID6RegionO12pennsylvaniayA2CmFWC) return cases::pennsylvania;
    if (tag == _impl::$s7BlinkID6RegionO6quebecyA2CmFWC) return cases::quebec;
    if (tag == _impl::$s7BlinkID6RegionO10queenslandyA2CmFWC) return cases::queensland;
    if (tag == _impl::$s7BlinkID6RegionO11rhodeIslandyA2CmFWC) return cases::rhodeIsland;
    if (tag == _impl::$s7BlinkID6RegionO12saskatchewanyA2CmFWC) return cases::saskatchewan;
    if (tag == _impl::$s7BlinkID6RegionO14southAustraliayA2CmFWC) return cases::southAustralia;
    if (tag == _impl::$s7BlinkID6RegionO13southCarolinayA2CmFWC) return cases::southCarolina;
    if (tag == _impl::$s7BlinkID6RegionO11southDakotayA2CmFWC) return cases::southDakota;
    if (tag == _impl::$s7BlinkID6RegionO8tasmaniayA2CmFWC) return cases::tasmania;
    if (tag == _impl::$s7BlinkID6RegionO9tennesseeyA2CmFWC) return cases::tennessee;
    if (tag == _impl::$s7BlinkID6RegionO5texasyA2CmFWC) return cases::texas;
    if (tag == _impl::$s7BlinkID6RegionO4utahyA2CmFWC) return cases::utah;
    if (tag == _impl::$s7BlinkID6RegionO7vermontyA2CmFWC) return cases::vermont;
    if (tag == _impl::$s7BlinkID6RegionO8victoriayA2CmFWC) return cases::victoria;
    if (tag == _impl::$s7BlinkID6RegionO8virginiayA2CmFWC) return cases::virginia;
    if (tag == _impl::$s7BlinkID6RegionO10washingtonyA2CmFWC) return cases::washington;
    if (tag == _impl::$s7BlinkID6RegionO16westernAustraliayA2CmFWC) return cases::westernAustralia;
    if (tag == _impl::$s7BlinkID6RegionO12westVirginiayA2CmFWC) return cases::westVirginia;
    if (tag == _impl::$s7BlinkID6RegionO9wisconsinyA2CmFWC) return cases::wisconsin;
    if (tag == _impl::$s7BlinkID6RegionO7wyomingyA2CmFWC) return cases::wyoming;
    if (tag == _impl::$s7BlinkID6RegionO5yukonyA2CmFWC) return cases::yukon;
    if (tag == _impl::$s7BlinkID6RegionO14ciudadDeMexicoyA2CmFWC) return cases::ciudadDeMexico;
    if (tag == _impl::$s7BlinkID6RegionO7jaliscoyA2CmFWC) return cases::jalisco;
    if (tag == _impl::$s7BlinkID6RegionO23newfoundlandAndLabradoryA2CmFWC) return cases::newfoundlandAndLabrador;
    if (tag == _impl::$s7BlinkID6RegionO9nuevoLeonyA2CmFWC) return cases::nuevoLeon;
    if (tag == _impl::$s7BlinkID6RegionO14bajaCaliforniayA2CmFWC) return cases::bajaCalifornia;
    if (tag == _impl::$s7BlinkID6RegionO9chihuahuayA2CmFWC) return cases::chihuahua;
    if (tag == _impl::$s7BlinkID6RegionO10guanajuatoyA2CmFWC) return cases::guanajuato;
    if (tag == _impl::$s7BlinkID6RegionO8guerreroyA2CmFWC) return cases::guerrero;
    if (tag == _impl::$s7BlinkID6RegionO6mexicoyA2CmFWC) return cases::mexico;
    if (tag == _impl::$s7BlinkID6RegionO9michoacanyA2CmFWC) return cases::michoacan;
    if (tag == _impl::$s7BlinkID6RegionO11newYorkCityyA2CmFWC) return cases::newYorkCity;
    if (tag == _impl::$s7BlinkID6RegionO10tamaulipasyA2CmFWC) return cases::tamaulipas;
    if (tag == _impl::$s7BlinkID6RegionO8veracruzyA2CmFWC) return cases::veracruz;
    if (tag == _impl::$s7BlinkID6RegionO7chiapasyA2CmFWC) return cases::chiapas;
    if (tag == _impl::$s7BlinkID6RegionO8coahuilayA2CmFWC) return cases::coahuila;
    if (tag == _impl::$s7BlinkID6RegionO7durangoyA2CmFWC) return cases::durango;
    if (tag == _impl::$s7BlinkID6RegionO14guerreroCoculayA2CmFWC) return cases::guerreroCocula;
    if (tag == _impl::$s7BlinkID6RegionO16guerreroJuchitanyA2CmFWC) return cases::guerreroJuchitan;
    if (tag == _impl::$s7BlinkID6RegionO21guerreroTepecoacuilcoyA2CmFWC) return cases::guerreroTepecoacuilco;
    if (tag == _impl::$s7BlinkID6RegionO16guerreroTlacoapayA2CmFWC) return cases::guerreroTlacoapa;
    if (tag == _impl::$s7BlinkID6RegionO7gujaratyA2CmFWC) return cases::gujarat;
    if (tag == _impl::$s7BlinkID6RegionO7hidalgoyA2CmFWC) return cases::hidalgo;
    if (tag == _impl::$s7BlinkID6RegionO9karnatakayA2CmFWC) return cases::karnataka;
    if (tag == _impl::$s7BlinkID6RegionO6keralayA2CmFWC) return cases::kerala;
    if (tag == _impl::$s7BlinkID6RegionO17khyberPakhtunkhwayA2CmFWC) return cases::khyberPakhtunkhwa;
    if (tag == _impl::$s7BlinkID6RegionO13madhyaPradeshyA2CmFWC) return cases::madhyaPradesh;
    if (tag == _impl::$s7BlinkID6RegionO11maharashtrayA2CmFWC) return cases::maharashtra;
    if (tag == _impl::$s7BlinkID6RegionO7morelosyA2CmFWC) return cases::morelos;
    if (tag == _impl::$s7BlinkID6RegionO7nayarityA2CmFWC) return cases::nayarit;
    if (tag == _impl::$s7BlinkID6RegionO6oaxacayA2CmFWC) return cases::oaxaca;
    if (tag == _impl::$s7BlinkID6RegionO6pueblayA2CmFWC) return cases::puebla;
    if (tag == _impl::$s7BlinkID6RegionO6punjabyA2CmFWC) return cases::punjab;
    if (tag == _impl::$s7BlinkID6RegionO9queretaroyA2CmFWC) return cases::queretaro;
    if (tag == _impl::$s7BlinkID6RegionO13sanLuisPotosiyA2CmFWC) return cases::sanLuisPotosi;
    if (tag == _impl::$s7BlinkID6RegionO7sinaloayA2CmFWC) return cases::sinaloa;
    if (tag == _impl::$s7BlinkID6RegionO6sonorayA2CmFWC) return cases::sonora;
    if (tag == _impl::$s7BlinkID6RegionO7tabascoyA2CmFWC) return cases::tabasco;
    if (tag == _impl::$s7BlinkID6RegionO9tamilNaduyA2CmFWC) return cases::tamilNadu;
    if (tag == _impl::$s7BlinkID6RegionO7yucatanyA2CmFWC) return cases::yucatan;
    if (tag == _impl::$s7BlinkID6RegionO9zacatecasyA2CmFWC) return cases::zacatecas;
    if (tag == _impl::$s7BlinkID6RegionO14aguascalientesyA2CmFWC) return cases::aguascalientes;
    if (tag == _impl::$s7BlinkID6RegionO17bajaCaliforniaSuryA2CmFWC) return cases::bajaCaliforniaSur;
    if (tag == _impl::$s7BlinkID6RegionO8campecheyA2CmFWC) return cases::campeche;
    if (tag == _impl::$s7BlinkID6RegionO6colimayA2CmFWC) return cases::colima;
    if (tag == _impl::$s7BlinkID6RegionO23quintanaRooBenitoJuarezyA2CmFWC) return cases::quintanaRooBenitoJuarez;
    if (tag == _impl::$s7BlinkID6RegionO11quintanaRooyA2CmFWC) return cases::quintanaRoo;
    if (tag == _impl::$s7BlinkID6RegionO22quintanaRooSolidaridadyA2CmFWC) return cases::quintanaRooSolidaridad;
    if (tag == _impl::$s7BlinkID6RegionO8tlaxcalayA2CmFWC) return cases::tlaxcala;
    if (tag == _impl::$s7BlinkID6RegionO18quintanaRooCozumelyA2CmFWC) return cases::quintanaRooCozumel;
    if (tag == _impl::$s7BlinkID6RegionO8saoPaoloyA2CmFWC) return cases::saoPaolo;
    if (tag == _impl::$s7BlinkID6RegionO12rioDeJaneiroyA2CmFWC) return cases::rioDeJaneiro;
    if (tag == _impl::$s7BlinkID6RegionO14rioGrandeDoSulyA2CmFWC) return cases::rioGrandeDoSul;
    if (tag == _impl::$s7BlinkID6RegionO20northwestTerritoriesyA2CmFWC) return cases::northwestTerritories;
    if (tag == _impl::$s7BlinkID6RegionO7nunavutyA2CmFWC) return cases::nunavut;
    if (tag == _impl::$s7BlinkID6RegionO18princeEdwardIslandyA2CmFWC) return cases::princeEdwardIsland;
    if (tag == _impl::$s7BlinkID6RegionO15distritoFederalyA2CmFWC) return cases::distritoFederal;
    if (tag == _impl::$s7BlinkID6RegionO8maranhaoyA2CmFWC) return cases::maranhao;
    if (tag == _impl::$s7BlinkID6RegionO10matoGrossoyA2CmFWC) return cases::matoGrosso;
    if (tag == _impl::$s7BlinkID6RegionO11minasGeraisyA2CmFWC) return cases::minasGerais;
    if (tag == _impl::$s7BlinkID6RegionO4parayA2CmFWC) return cases::para;
    if (tag == _impl::$s7BlinkID6RegionO6paranayA2CmFWC) return cases::parana;
    if (tag == _impl::$s7BlinkID6RegionO10pernambucoyA2CmFWC) return cases::pernambuco;
    if (tag == _impl::$s7BlinkID6RegionO13santaCatarinayA2CmFWC) return cases::santaCatarina;
    if (tag == _impl::$s7BlinkID6RegionO13andhraPradeshyA2CmFWC) return cases::andhraPradesh;
    if (tag == _impl::$s7BlinkID6RegionO5cearayA2CmFWC) return cases::ceara;
    if (tag == _impl::$s7BlinkID6RegionO5goiasyA2CmFWC) return cases::goias;
    if (tag == _impl::$s7BlinkID6RegionO24guerreroAcapulcoDeJuarezyA2CmFWC) return cases::guerreroAcapulcoDeJuarez;
    if (tag == _impl::$s7BlinkID6RegionO7haryanayA2CmFWC) return cases::haryana;
    if (tag == _impl::$s7BlinkID6RegionO7sergipeyA2CmFWC) return cases::sergipe;
    if (tag == _impl::$s7BlinkID6RegionO7alagoasyA2CmFWC) return cases::alagoas;
    if (tag == _impl::$s7BlinkID6RegionO10bangsamoroyA2CmFWC) return cases::bangsamoro;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<Region> init(const swift::String& rawValue) SWIFT_SYMBOL("s:7BlinkID6RegionO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:7BlinkID6RegionO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK Region(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK Region _make() noexcept {
    auto metadata = _impl::$s7BlinkID6RegionOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return Region(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID6RegionOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID6RegionOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID6RegionOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_Region;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID6RegionOD;
  static inline constexpr $s7BlinkID6RegionOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_Region {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(Region &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const Region &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER Region returnNewValue(T callable) {
    auto result = Region::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID6RegionOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::Region> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID6RegionOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::Region> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::Region> = true;
template<>
struct implClassFor<BlinkID::Region> { using type = BlinkID::_impl::_impl_Region; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {


namespace _impl {

class _impl_RegionOfInterest;

// Type metadata accessor for RegionOfInterest
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID16RegionOfInterestVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID16RegionOfInterestV") RegionOfInterest final {
public:
  SWIFT_INLINE_THUNK ~RegionOfInterest() noexcept {
    auto metadata = _impl::$s7BlinkID16RegionOfInterestVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK RegionOfInterest(const RegionOfInterest &other) noexcept {
    auto metadata = _impl::$s7BlinkID16RegionOfInterestVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK RegionOfInterest &operator =(const RegionOfInterest &other) noexcept {
    auto metadata = _impl::$s7BlinkID16RegionOfInterestVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK RegionOfInterest &operator =(RegionOfInterest &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER RegionOfInterest(RegionOfInterest &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK float getX() const SWIFT_SYMBOL("s:7BlinkID16RegionOfInterestV1xSfvp");
  SWIFT_INLINE_THUNK float getY() const SWIFT_SYMBOL("s:7BlinkID16RegionOfInterestV1ySfvp");
  SWIFT_INLINE_THUNK float getWidth() const SWIFT_SYMBOL("s:7BlinkID16RegionOfInterestV5widthSfvp");
  SWIFT_INLINE_THUNK float getHeight() const SWIFT_SYMBOL("s:7BlinkID16RegionOfInterestV6heightSfvp");
  static SWIFT_INLINE_THUNK RegionOfInterest init(float x, float y, float width, float height) SWIFT_SYMBOL("s:7BlinkID16RegionOfInterestV1x1y5width6heightACSf_S3ftcfc");
private:
  SWIFT_INLINE_THUNK RegionOfInterest(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK RegionOfInterest _make() noexcept {
    auto metadata = _impl::$s7BlinkID16RegionOfInterestVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return RegionOfInterest(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_RegionOfInterest;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID16RegionOfInterestVD;
  static inline constexpr $s7BlinkID16RegionOfInterestVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_RegionOfInterest {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(RegionOfInterest &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const RegionOfInterest &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER RegionOfInterest returnNewValue(T callable) {
    auto result = RegionOfInterest::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID16RegionOfInterestVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::RegionOfInterest> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID16RegionOfInterestVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::RegionOfInterest> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::RegionOfInterest> = true;
template<>
struct implClassFor<BlinkID::RegionOfInterest> { using type = BlinkID::_impl::_impl_RegionOfInterest; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

namespace _impl {

class _impl_RequestTimeout;

// Type metadata accessor for RequestTimeout
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID14RequestTimeoutVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID14RequestTimeoutV") RequestTimeout final {
public:
  SWIFT_INLINE_THUNK ~RequestTimeout() noexcept {
    auto metadata = _impl::$s7BlinkID14RequestTimeoutVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK RequestTimeout(const RequestTimeout &other) noexcept {
    auto metadata = _impl::$s7BlinkID14RequestTimeoutVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK RequestTimeout &operator =(const RequestTimeout &other) noexcept {
    auto metadata = _impl::$s7BlinkID14RequestTimeoutVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK RequestTimeout &operator =(RequestTimeout &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER RequestTimeout(RequestTimeout &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
private:
  SWIFT_INLINE_THUNK RequestTimeout(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK RequestTimeout _make() noexcept {
    auto metadata = _impl::$s7BlinkID14RequestTimeoutVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return RequestTimeout(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_RequestTimeout;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID14RequestTimeoutVD;
  static inline constexpr $s7BlinkID14RequestTimeoutVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_RequestTimeout {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(RequestTimeout &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const RequestTimeout &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER RequestTimeout returnNewValue(T callable) {
    auto result = RequestTimeout::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID14RequestTimeoutVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::RequestTimeout> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID14RequestTimeoutVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::RequestTimeout> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::RequestTimeout> = true;
template<>
struct implClassFor<BlinkID::RequestTimeout> { using type = BlinkID::_impl::_impl_RequestTimeout; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID17ResourceLoadErrorV") ResourceLoadError;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::ResourceLoadError> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_ResourceLoadError;

// Type metadata accessor for ResourceLoadError
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID17ResourceLoadErrorVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID17ResourceLoadErrorV") ResourceLoadError final {
public:
  SWIFT_INLINE_THUNK ~ResourceLoadError() noexcept {
    auto metadata = _impl::$s7BlinkID17ResourceLoadErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ResourceLoadError(const ResourceLoadError &other) noexcept {
    auto metadata = _impl::$s7BlinkID17ResourceLoadErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ResourceLoadError &operator =(const ResourceLoadError &other) noexcept {
    auto metadata = _impl::$s7BlinkID17ResourceLoadErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ResourceLoadError &operator =(ResourceLoadError &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ResourceLoadError(ResourceLoadError &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::String getName() const SWIFT_SYMBOL("s:7BlinkID17ResourceLoadErrorV4nameSSvp");
  SWIFT_INLINE_THUNK ModelLoadError getError() const SWIFT_SYMBOL("s:7BlinkID17ResourceLoadErrorV5errorAA05ModeldE0Ovp");
private:
  SWIFT_INLINE_THUNK ResourceLoadError(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ResourceLoadError _make() noexcept {
    auto metadata = _impl::$s7BlinkID17ResourceLoadErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ResourceLoadError(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ResourceLoadError;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID17ResourceLoadErrorVD;
  static inline constexpr $s7BlinkID17ResourceLoadErrorVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ResourceLoadError {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ResourceLoadError &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ResourceLoadError &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ResourceLoadError returnNewValue(T callable) {
    auto result = ResourceLoadError::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID17ResourceLoadErrorVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::ResourceLoadError> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID17ResourceLoadErrorVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::ResourceLoadError> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::ResourceLoadError> = true;
template<>
struct implClassFor<BlinkID::ResourceLoadError> { using type = BlinkID::_impl::_impl_ResourceLoadError; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID14ResourcesErrorO") ResourcesError;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::ResourcesError> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
/// Represents various resource-related errors that can occur during SDK initialization.
/// This enum encompasses errors related to asset corruption, resource downloading,
/// and bundle validation.
namespace _impl {

class _impl_ResourcesError;

// Type metadata accessor for ResourcesError
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID14ResourcesErrorOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum ResourcesError
extern "C" {
extern unsigned $s7BlinkID14ResourcesErrorO15corruptedAssetsyACSScACmFWC;
extern unsigned $s7BlinkID14ResourcesErrorO16resourceDownloadyACSScACmFWC;
extern unsigned $s7BlinkID14ResourcesErrorO13invalidBundleyACSScACmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID14ResourcesErrorO") ResourcesError final {
public:
  SWIFT_INLINE_THUNK ~ResourcesError() noexcept {
    auto metadata = _impl::$s7BlinkID14ResourcesErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ResourcesError(const ResourcesError &other) noexcept {
    auto metadata = _impl::$s7BlinkID14ResourcesErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ResourcesError &operator =(const ResourcesError &other) noexcept {
    auto metadata = _impl::$s7BlinkID14ResourcesErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ResourcesError &operator =(ResourcesError &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ResourcesError(ResourcesError &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    corruptedAssets SWIFT_SYMBOL("s:7BlinkID14ResourcesErrorO15corruptedAssetsyACSScACmF"),
    resourceDownload SWIFT_SYMBOL("s:7BlinkID14ResourcesErrorO16resourceDownloadyACSScACmF"),
    invalidBundle SWIFT_SYMBOL("s:7BlinkID14ResourcesErrorO13invalidBundleyACSScACmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_corruptedAssets {  // impl struct for case corruptedAssets
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::corruptedAssets;
    }
    SWIFT_INLINE_THUNK ResourcesError operator()(const swift::String& val) const;
  } corruptedAssets SWIFT_SYMBOL("s:7BlinkID14ResourcesErrorO15corruptedAssetsyACSScACmF");
  SWIFT_INLINE_THUNK bool isCorruptedAssets() const;
  SWIFT_INLINE_THUNK swift::String getCorruptedAssets() const;

  inline const static struct _impl_resourceDownload {  // impl struct for case resourceDownload
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::resourceDownload;
    }
    SWIFT_INLINE_THUNK ResourcesError operator()(const swift::String& val) const;
  } resourceDownload SWIFT_SYMBOL("s:7BlinkID14ResourcesErrorO16resourceDownloadyACSScACmF");
  SWIFT_INLINE_THUNK bool isResourceDownload() const;
  SWIFT_INLINE_THUNK swift::String getResourceDownload() const;

  inline const static struct _impl_invalidBundle {  // impl struct for case invalidBundle
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::invalidBundle;
    }
    SWIFT_INLINE_THUNK ResourcesError operator()(const swift::String& val) const;
  } invalidBundle SWIFT_SYMBOL("s:7BlinkID14ResourcesErrorO13invalidBundleyACSScACmF");
  SWIFT_INLINE_THUNK bool isInvalidBundle() const;
  SWIFT_INLINE_THUNK swift::String getInvalidBundle() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID14ResourcesErrorO15corruptedAssetsyACSScACmFWC) return cases::corruptedAssets;
    if (tag == _impl::$s7BlinkID14ResourcesErrorO16resourceDownloadyACSScACmFWC) return cases::resourceDownload;
    if (tag == _impl::$s7BlinkID14ResourcesErrorO13invalidBundleyACSScACmFWC) return cases::invalidBundle;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Optional<swift::String> getErrorDescription() const SWIFT_SYMBOL("s:7BlinkID14ResourcesErrorO16errorDescriptionSSSgvp");
private:
  SWIFT_INLINE_THUNK ResourcesError(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ResourcesError _make() noexcept {
    auto metadata = _impl::$s7BlinkID14ResourcesErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ResourcesError(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID14ResourcesErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID14ResourcesErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID14ResourcesErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ResourcesError;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID14ResourcesErrorOD;
  static inline constexpr $s7BlinkID14ResourcesErrorOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ResourcesError {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ResourcesError &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ResourcesError &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ResourcesError returnNewValue(T callable) {
    auto result = ResourcesError::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID14ResourcesErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::ResourcesError> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID14ResourcesErrorOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::ResourcesError> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::ResourcesError> = true;
template<>
struct implClassFor<BlinkID::ResourcesError> { using type = BlinkID::_impl::_impl_ResourcesError; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID12SDKInitErrorO") SDKInitError;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::SDKInitError> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
/// Represents high-level SDK initialization errors.
/// This enum encompasses various errors that can occur during SDK initialization,
/// including resource loading and memory allocation failures.
namespace _impl {

class _impl_SDKInitError;

// Type metadata accessor for SDKInitError
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID12SDKInitErrorOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum SDKInitError
extern "C" {
extern unsigned $s7BlinkID12SDKInitErrorO12resourceLoadyAcA08ResourcefD0VcACmFWC;
extern unsigned $s7BlinkID12SDKInitErrorO13memoryReserveyAcA06MemoryfD0VcACmFWC;
extern unsigned $s7BlinkID12SDKInitErrorO07licenseD0yA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID12SDKInitErrorO") SDKInitError final {
public:
  SWIFT_INLINE_THUNK ~SDKInitError() noexcept {
    auto metadata = _impl::$s7BlinkID12SDKInitErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK SDKInitError(const SDKInitError &other) noexcept {
    auto metadata = _impl::$s7BlinkID12SDKInitErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK SDKInitError &operator =(const SDKInitError &other) noexcept {
    auto metadata = _impl::$s7BlinkID12SDKInitErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK SDKInitError &operator =(SDKInitError &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER SDKInitError(SDKInitError &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    resourceLoad SWIFT_SYMBOL("s:7BlinkID12SDKInitErrorO12resourceLoadyAcA08ResourcefD0VcACmF"),
    memoryReserve SWIFT_SYMBOL("s:7BlinkID12SDKInitErrorO13memoryReserveyAcA06MemoryfD0VcACmF"),
    licenseError SWIFT_SYMBOL("s:7BlinkID12SDKInitErrorO07licenseD0yA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_resourceLoad {  // impl struct for case resourceLoad
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::resourceLoad;
    }
    SWIFT_INLINE_THUNK SDKInitError operator()(const ResourceLoadError& val) const;
  } resourceLoad SWIFT_SYMBOL("s:7BlinkID12SDKInitErrorO12resourceLoadyAcA08ResourcefD0VcACmF");
  SWIFT_INLINE_THUNK bool isResourceLoad() const;
  SWIFT_INLINE_THUNK ResourceLoadError getResourceLoad() const;

  inline const static struct _impl_memoryReserve {  // impl struct for case memoryReserve
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::memoryReserve;
    }
    SWIFT_INLINE_THUNK SDKInitError operator()(const MemoryReserveError& val) const;
  } memoryReserve SWIFT_SYMBOL("s:7BlinkID12SDKInitErrorO13memoryReserveyAcA06MemoryfD0VcACmF");
  SWIFT_INLINE_THUNK bool isMemoryReserve() const;
  SWIFT_INLINE_THUNK MemoryReserveError getMemoryReserve() const;

  inline const static struct _impl_licenseError {  // impl struct for case licenseError
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::licenseError;
    }
    SWIFT_INLINE_THUNK SDKInitError operator()() const;
  } licenseError SWIFT_SYMBOL("s:7BlinkID12SDKInitErrorO07licenseD0yA2CmF");
  SWIFT_INLINE_THUNK bool isLicenseError() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID12SDKInitErrorO12resourceLoadyAcA08ResourcefD0VcACmFWC) return cases::resourceLoad;
    if (tag == _impl::$s7BlinkID12SDKInitErrorO13memoryReserveyAcA06MemoryfD0VcACmFWC) return cases::memoryReserve;
    if (tag == _impl::$s7BlinkID12SDKInitErrorO07licenseD0yA2CmFWC) return cases::licenseError;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Optional<swift::String> getErrorDescription() const SWIFT_SYMBOL("s:7BlinkID12SDKInitErrorO16errorDescriptionSSSgvp");
private:
  SWIFT_INLINE_THUNK SDKInitError(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK SDKInitError _make() noexcept {
    auto metadata = _impl::$s7BlinkID12SDKInitErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return SDKInitError(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID12SDKInitErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID12SDKInitErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID12SDKInitErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_SDKInitError;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID12SDKInitErrorOD;
  static inline constexpr $s7BlinkID12SDKInitErrorOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_SDKInitError {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(SDKInitError &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const SDKInitError &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER SDKInitError returnNewValue(T callable) {
    auto result = SDKInitError::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID12SDKInitErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::SDKInitError> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID12SDKInitErrorOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::SDKInitError> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::SDKInitError> = true;
template<>
struct implClassFor<BlinkID::SDKInitError> { using type = BlinkID::_impl::_impl_SDKInitError; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

/// Represents the mode of document scanning.
/// This enum class defines whether the scanning process is limited to a single
/// side of the document or includes multiple sides, automatically identifying how many sides need to be scanned.
namespace _impl {

class _impl_ScanningMode;

// Type metadata accessor for ScanningMode
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID12ScanningModeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum ScanningMode
extern "C" {
extern unsigned $s7BlinkID12ScanningModeO6singleyA2CmFWC;
extern unsigned $s7BlinkID12ScanningModeO9automaticyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID12ScanningModeO") ScanningMode final {
public:
  SWIFT_INLINE_THUNK ~ScanningMode() noexcept {
    auto metadata = _impl::$s7BlinkID12ScanningModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ScanningMode(const ScanningMode &other) noexcept {
    auto metadata = _impl::$s7BlinkID12ScanningModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ScanningMode &operator =(const ScanningMode &other) noexcept {
    auto metadata = _impl::$s7BlinkID12ScanningModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ScanningMode &operator =(ScanningMode &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ScanningMode(ScanningMode &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    single SWIFT_SYMBOL("s:7BlinkID12ScanningModeO6singleyA2CmF"),
    automatic SWIFT_SYMBOL("s:7BlinkID12ScanningModeO9automaticyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_single {  // impl struct for case single
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::single;
    }
    SWIFT_INLINE_THUNK ScanningMode operator()() const;
  } single SWIFT_SYMBOL("s:7BlinkID12ScanningModeO6singleyA2CmF");
  SWIFT_INLINE_THUNK bool isSingle() const;

  inline const static struct _impl_automatic {  // impl struct for case automatic
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::automatic;
    }
    SWIFT_INLINE_THUNK ScanningMode operator()() const;
  } automatic SWIFT_SYMBOL("s:7BlinkID12ScanningModeO9automaticyA2CmF");
  SWIFT_INLINE_THUNK bool isAutomatic() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID12ScanningModeO6singleyA2CmFWC) return cases::single;
    if (tag == _impl::$s7BlinkID12ScanningModeO9automaticyA2CmFWC) return cases::automatic;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:7BlinkID12ScanningModeO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK ScanningMode(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ScanningMode _make() noexcept {
    auto metadata = _impl::$s7BlinkID12ScanningModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ScanningMode(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID12ScanningModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID12ScanningModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID12ScanningModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ScanningMode;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID12ScanningModeOD;
  static inline constexpr $s7BlinkID12ScanningModeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ScanningMode {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ScanningMode &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ScanningMode &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ScanningMode returnNewValue(T callable) {
    auto result = ScanningMode::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID12ScanningModeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::ScanningMode> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID12ScanningModeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::ScanningMode> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::ScanningMode> = true;
template<>
struct implClassFor<BlinkID::ScanningMode> { using type = BlinkID::_impl::_impl_ScanningMode; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

namespace _impl {

class _impl_ScanningSettings;

// Type metadata accessor for ScanningSettings
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID16ScanningSettingsVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV") ScanningSettings final {
public:
  SWIFT_INLINE_THUNK ~ScanningSettings() noexcept {
    auto metadata = _impl::$s7BlinkID16ScanningSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ScanningSettings(const ScanningSettings &other) noexcept {
    auto metadata = _impl::$s7BlinkID16ScanningSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ScanningSettings &operator =(const ScanningSettings &other) noexcept {
    auto metadata = _impl::$s7BlinkID16ScanningSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ScanningSettings &operator =(ScanningSettings &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ScanningSettings(ScanningSettings &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK DetectionLevel getBlurDetectionLevel() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV18blurDetectionLevelAA0fG0Ovp");
  SWIFT_INLINE_THUNK void setBlurDetectionLevel(const DetectionLevel& value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV18blurDetectionLevelAA0fG0Ovp");
  SWIFT_INLINE_THUNK bool getSkipImagesWithBlur() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV18skipImagesWithBlurSbvp");
  SWIFT_INLINE_THUNK void setSkipImagesWithBlur(bool value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV18skipImagesWithBlurSbvp");
  SWIFT_INLINE_THUNK DetectionLevel getGlareDetectionLevel() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV19glareDetectionLevelAA0fG0Ovp");
  SWIFT_INLINE_THUNK void setGlareDetectionLevel(const DetectionLevel& value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV19glareDetectionLevelAA0fG0Ovp");
  SWIFT_INLINE_THUNK bool getSkipImagesWithGlare() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV19skipImagesWithGlareSbvp");
  SWIFT_INLINE_THUNK void setSkipImagesWithGlare(bool value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV19skipImagesWithGlareSbvp");
  SWIFT_INLINE_THUNK DetectionLevel getTiltDetectionLevel() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV18tiltDetectionLevelAA0fG0Ovp");
  SWIFT_INLINE_THUNK void setTiltDetectionLevel(const DetectionLevel& value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV18tiltDetectionLevelAA0fG0Ovp");
  SWIFT_INLINE_THUNK bool getSkipImagesWithInadequateLightingConditions() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV42skipImagesWithInadequateLightingConditionsSbvp");
  SWIFT_INLINE_THUNK void setSkipImagesWithInadequateLightingConditions(bool value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV42skipImagesWithInadequateLightingConditionsSbvp");
  SWIFT_INLINE_THUNK bool getSkipImagesOccludedByHand() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV24skipImagesOccludedByHandSbvp");
  SWIFT_INLINE_THUNK void setSkipImagesOccludedByHand(bool value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV24skipImagesOccludedByHandSbvp");
  SWIFT_INLINE_THUNK bool getCombineResultsFromMultipleInputImages() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV37combineResultsFromMultipleInputImagesSbvp");
  SWIFT_INLINE_THUNK void setCombineResultsFromMultipleInputImages(bool value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV37combineResultsFromMultipleInputImagesSbvp");
  SWIFT_INLINE_THUNK bool getEnableBarcodeScanOnly() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV21enableBarcodeScanOnlySbvp");
  SWIFT_INLINE_THUNK void setEnableBarcodeScanOnly(bool value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV21enableBarcodeScanOnlySbvp");
  SWIFT_INLINE_THUNK swift::Optional<swift::Array<DocumentRules>> getCustomDocumentRules() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV19customDocumentRulesSayAA0fG0VGSgvp");
  SWIFT_INLINE_THUNK void setCustomDocumentRules(const swift::Optional<swift::Array<DocumentRules>>& value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV19customDocumentRulesSayAA0fG0VGSgvp");
  SWIFT_INLINE_THUNK AnonymizationMode getAnonymizationMode() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV17anonymizationModeAA013AnonymizationF0Ovp");
  SWIFT_INLINE_THUNK void setAnonymizationMode(const AnonymizationMode& value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV17anonymizationModeAA013AnonymizationF0Ovp");
  SWIFT_INLINE_THUNK swift::Optional<swift::Array<DocumentAnonymizationSettings>> getCustomDocumentAnonymizationSettings() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV027customDocumentAnonymizationD0SayAA0fgD0VGSgvp");
  SWIFT_INLINE_THUNK void setCustomDocumentAnonymizationSettings(const swift::Optional<swift::Array<DocumentAnonymizationSettings>>& value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV027customDocumentAnonymizationD0SayAA0fgD0VGSgvp");
  SWIFT_INLINE_THUNK bool getReturnInputImages() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV17returnInputImagesSbvp");
  SWIFT_INLINE_THUNK void setReturnInputImages(bool value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV17returnInputImagesSbvp");
  SWIFT_INLINE_THUNK bool getScanCroppedDocumentImage() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV24scanCroppedDocumentImageSbvp");
  SWIFT_INLINE_THUNK void setScanCroppedDocumentImage(bool value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV24scanCroppedDocumentImageSbvp");
  SWIFT_INLINE_THUNK RecognitionModeFilter getRecognitionModeFilter() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV21recognitionModeFilterAA011RecognitionfG0Vvp");
  SWIFT_INLINE_THUNK void setRecognitionModeFilter(const RecognitionModeFilter& value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV21recognitionModeFilterAA011RecognitionfG0Vvp");
  SWIFT_INLINE_THUNK bool getEnableCharacterValidation() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV25enableCharacterValidationSbvp");
  SWIFT_INLINE_THUNK void setEnableCharacterValidation(bool value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV25enableCharacterValidationSbvp");
  SWIFT_INLINE_THUNK float getInputImageMargin() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV16inputImageMarginSfvp");
  SWIFT_INLINE_THUNK void setInputImageMargin(float value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV16inputImageMarginSfvp");
  SWIFT_INLINE_THUNK bool getScanUnsupportedBack() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV19scanUnsupportedBackSbvp");
  SWIFT_INLINE_THUNK void setScanUnsupportedBack(bool value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV19scanUnsupportedBackSbvp");
  SWIFT_INLINE_THUNK bool getAllowUncertainFrontSideScan() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV27allowUncertainFrontSideScanSbvp");
  SWIFT_INLINE_THUNK void setAllowUncertainFrontSideScan(bool value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV27allowUncertainFrontSideScanSbvp");
  SWIFT_INLINE_THUNK swift::Int getMaxAllowedMismatchesPerField() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV28maxAllowedMismatchesPerFieldSivp");
  SWIFT_INLINE_THUNK void setMaxAllowedMismatchesPerField(swift::Int value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV28maxAllowedMismatchesPerFieldSivp");
  SWIFT_INLINE_THUNK bool getScanPassportDataPageOnly() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV24scanPassportDataPageOnlySbvp");
  SWIFT_INLINE_THUNK void setScanPassportDataPageOnly(bool value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV24scanPassportDataPageOnlySbvp");
  SWIFT_INLINE_THUNK CroppedImageSettings getCroppedImageSettings() const SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV012croppedImageD0AA07CroppedfD0Vvp");
  SWIFT_INLINE_THUNK void setCroppedImageSettings(const CroppedImageSettings& value) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV012croppedImageD0AA07CroppedfD0Vvp");
  static SWIFT_INLINE_THUNK ScanningSettings init(const DetectionLevel& blurDetectionLevel, bool skipImagesWithBlur, const DetectionLevel& glareDetectionLevel, bool skipImagesWithGlare, const DetectionLevel& tiltDetectionLevel, bool skipImagesWithInadequateLightingConditions, bool skipImagesOccludedByHand, bool combineResultsFromMultipleInputImages, bool enableBarcodeScanOnly, const swift::Optional<swift::Array<DocumentRules>>& customDocumentRules, const AnonymizationMode& anonymizationMode, const swift::Optional<swift::Array<DocumentAnonymizationSettings>>& customDocumentAnonymizationSettings, bool returnInputImages, bool scanCroppedDocumentImage, bool enableCharacterValidation, const RecognitionModeFilter& recognitionModeFilter, float inputImageMargin, bool scanUnsupportedBack, bool allowUncertainFrontSideScan, swift::Int maxAllowedMismatchesPerField, bool scanPassportDataPageOnly, const CroppedImageSettings& croppedImageSettings) SWIFT_SYMBOL("s:7BlinkID16ScanningSettingsV18blurDetectionLevel18skipImagesWithBlur05glarefG00hiJ5Glare04tiltfG00hiJ28InadequateLightingConditions0hI14OccludedByHand031combineResultsFromMultipleInputI021enableBarcodeScanOnly19customDocumentRules17anonymizationMode027customDocumentAnonymizationD006returnyI024scanCroppedDocumentImage0Z19CharacterValidation21recognitionModeFilter16inputImageMargin19scanUnsupportedBack27allowUncertainFrontSideScan28maxAllowedMismatchesPerField24scanPassportDataPageOnly012croppedImageD0AcA0fG0O_SbA_SbA_S4bSayAA13DocumentRulesVGSgAA17AnonymizationModeOSayAA021DocumentAnonymizationD0VGSgS3bAA21RecognitionModeFilterVSfS2bSiSbAA012CroppedImageD0Vtcfc");
private:
  SWIFT_INLINE_THUNK ScanningSettings(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ScanningSettings _make() noexcept {
    auto metadata = _impl::$s7BlinkID16ScanningSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ScanningSettings(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ScanningSettings;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID16ScanningSettingsVD;
  static inline constexpr $s7BlinkID16ScanningSettingsVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ScanningSettings {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ScanningSettings &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ScanningSettings &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ScanningSettings returnNewValue(T callable) {
    auto result = ScanningSettings::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID16ScanningSettingsVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::ScanningSettings> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID16ScanningSettingsVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::ScanningSettings> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::ScanningSettings> = true;
template<>
struct implClassFor<BlinkID::ScanningSettings> { using type = BlinkID::_impl::_impl_ScanningSettings; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

/// Represents the sides of the document that can be scanned.
namespace _impl {

class _impl_ScanningSide;

// Type metadata accessor for ScanningSide
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID12ScanningSideOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum ScanningSide
extern "C" {
extern unsigned $s7BlinkID12ScanningSideO5firstyA2CmFWC;
extern unsigned $s7BlinkID12ScanningSideO6secondyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID12ScanningSideO") ScanningSide final {
public:
  SWIFT_INLINE_THUNK ~ScanningSide() noexcept {
    auto metadata = _impl::$s7BlinkID12ScanningSideOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ScanningSide(const ScanningSide &other) noexcept {
    auto metadata = _impl::$s7BlinkID12ScanningSideOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ScanningSide &operator =(const ScanningSide &other) noexcept {
    auto metadata = _impl::$s7BlinkID12ScanningSideOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ScanningSide &operator =(ScanningSide &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ScanningSide(ScanningSide &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    first SWIFT_SYMBOL("s:7BlinkID12ScanningSideO5firstyA2CmF"),
    second SWIFT_SYMBOL("s:7BlinkID12ScanningSideO6secondyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_first {  // impl struct for case first
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::first;
    }
    SWIFT_INLINE_THUNK ScanningSide operator()() const;
  } first SWIFT_SYMBOL("s:7BlinkID12ScanningSideO5firstyA2CmF");
  SWIFT_INLINE_THUNK bool isFirst() const;

  inline const static struct _impl_second {  // impl struct for case second
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::second;
    }
    SWIFT_INLINE_THUNK ScanningSide operator()() const;
  } second SWIFT_SYMBOL("s:7BlinkID12ScanningSideO6secondyA2CmF");
  SWIFT_INLINE_THUNK bool isSecond() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID12ScanningSideO5firstyA2CmFWC) return cases::first;
    if (tag == _impl::$s7BlinkID12ScanningSideO6secondyA2CmFWC) return cases::second;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<ScanningSide> init(swift::Int rawValue) SWIFT_SYMBOL("s:7BlinkID12ScanningSideO8rawValueACSgSi_tcfc");
  SWIFT_INLINE_THUNK swift::Int getRawValue() const SWIFT_SYMBOL("s:7BlinkID12ScanningSideO8rawValueSivp");
private:
  SWIFT_INLINE_THUNK ScanningSide(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ScanningSide _make() noexcept {
    auto metadata = _impl::$s7BlinkID12ScanningSideOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ScanningSide(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID12ScanningSideOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID12ScanningSideOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID12ScanningSideOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ScanningSide;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID12ScanningSideOD;
  static inline constexpr $s7BlinkID12ScanningSideOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ScanningSide {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ScanningSide &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ScanningSide &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ScanningSide returnNewValue(T callable) {
    auto result = ScanningSide::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID12ScanningSideOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::ScanningSide> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID12ScanningSideOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::ScanningSide> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::ScanningSide> = true;
template<>
struct implClassFor<BlinkID::ScanningSide> { using type = BlinkID::_impl::_impl_ScanningSide; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID14ScanningStatusO") ScanningStatus;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::ScanningStatus> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
/// Represents the different states of a scanning process.
/// Defines the possible statuses that can occur during the
/// scanning operation, specifically for managing the progress of scanning sides
/// and the entire document.
namespace _impl {

class _impl_ScanningStatus;

// Type metadata accessor for ScanningStatus
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID14ScanningStatusOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum ScanningStatus
extern "C" {
extern unsigned $s7BlinkID14ScanningStatusO22scanningSideInProgressyA2CmFWC;
extern unsigned $s7BlinkID14ScanningStatusO25scanningBarcodeInProgressyA2CmFWC;
extern unsigned $s7BlinkID14ScanningStatusO11sideScannedyA2CmFWC;
extern unsigned $s7BlinkID14ScanningStatusO15documentScannedyA2CmFWC;
extern unsigned $s7BlinkID14ScanningStatusO9cancelledyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID14ScanningStatusO") ScanningStatus final {
public:
  SWIFT_INLINE_THUNK ~ScanningStatus() noexcept {
    auto metadata = _impl::$s7BlinkID14ScanningStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK ScanningStatus(const ScanningStatus &other) noexcept {
    auto metadata = _impl::$s7BlinkID14ScanningStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK ScanningStatus &operator =(const ScanningStatus &other) noexcept {
    auto metadata = _impl::$s7BlinkID14ScanningStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK ScanningStatus &operator =(ScanningStatus &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER ScanningStatus(ScanningStatus &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    scanningSideInProgress SWIFT_SYMBOL("s:7BlinkID14ScanningStatusO22scanningSideInProgressyA2CmF"),
    scanningBarcodeInProgress SWIFT_SYMBOL("s:7BlinkID14ScanningStatusO25scanningBarcodeInProgressyA2CmF"),
    sideScanned SWIFT_SYMBOL("s:7BlinkID14ScanningStatusO11sideScannedyA2CmF"),
    documentScanned SWIFT_SYMBOL("s:7BlinkID14ScanningStatusO15documentScannedyA2CmF"),
    cancelled SWIFT_SYMBOL("s:7BlinkID14ScanningStatusO9cancelledyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_scanningSideInProgress {  // impl struct for case scanningSideInProgress
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::scanningSideInProgress;
    }
    SWIFT_INLINE_THUNK ScanningStatus operator()() const;
  } scanningSideInProgress SWIFT_SYMBOL("s:7BlinkID14ScanningStatusO22scanningSideInProgressyA2CmF");
  SWIFT_INLINE_THUNK bool isScanningSideInProgress() const;

  inline const static struct _impl_scanningBarcodeInProgress {  // impl struct for case scanningBarcodeInProgress
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::scanningBarcodeInProgress;
    }
    SWIFT_INLINE_THUNK ScanningStatus operator()() const;
  } scanningBarcodeInProgress SWIFT_SYMBOL("s:7BlinkID14ScanningStatusO25scanningBarcodeInProgressyA2CmF");
  SWIFT_INLINE_THUNK bool isScanningBarcodeInProgress() const;

  inline const static struct _impl_sideScanned {  // impl struct for case sideScanned
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::sideScanned;
    }
    SWIFT_INLINE_THUNK ScanningStatus operator()() const;
  } sideScanned SWIFT_SYMBOL("s:7BlinkID14ScanningStatusO11sideScannedyA2CmF");
  SWIFT_INLINE_THUNK bool isSideScanned() const;

  inline const static struct _impl_documentScanned {  // impl struct for case documentScanned
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::documentScanned;
    }
    SWIFT_INLINE_THUNK ScanningStatus operator()() const;
  } documentScanned SWIFT_SYMBOL("s:7BlinkID14ScanningStatusO15documentScannedyA2CmF");
  SWIFT_INLINE_THUNK bool isDocumentScanned() const;

  inline const static struct _impl_cancelled {  // impl struct for case cancelled
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::cancelled;
    }
    SWIFT_INLINE_THUNK ScanningStatus operator()() const;
  } cancelled SWIFT_SYMBOL("s:7BlinkID14ScanningStatusO9cancelledyA2CmF");
  SWIFT_INLINE_THUNK bool isCancelled() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID14ScanningStatusO22scanningSideInProgressyA2CmFWC) return cases::scanningSideInProgress;
    if (tag == _impl::$s7BlinkID14ScanningStatusO25scanningBarcodeInProgressyA2CmFWC) return cases::scanningBarcodeInProgress;
    if (tag == _impl::$s7BlinkID14ScanningStatusO11sideScannedyA2CmFWC) return cases::sideScanned;
    if (tag == _impl::$s7BlinkID14ScanningStatusO15documentScannedyA2CmFWC) return cases::documentScanned;
    if (tag == _impl::$s7BlinkID14ScanningStatusO9cancelledyA2CmFWC) return cases::cancelled;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:7BlinkID14ScanningStatusO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK ScanningStatus(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK ScanningStatus _make() noexcept {
    auto metadata = _impl::$s7BlinkID14ScanningStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return ScanningStatus(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID14ScanningStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID14ScanningStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID14ScanningStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_ScanningStatus;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID14ScanningStatusOD;
  static inline constexpr $s7BlinkID14ScanningStatusOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_ScanningStatus {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(ScanningStatus &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const ScanningStatus &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER ScanningStatus returnNewValue(T callable) {
    auto result = ScanningStatus::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID14ScanningStatusOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::ScanningStatus> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID14ScanningStatusOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::ScanningStatus> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::ScanningStatus> = true;
template<>
struct implClassFor<BlinkID::ScanningStatus> { using type = BlinkID::_impl::_impl_ScanningStatus; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

namespace _impl {

class _impl_SessionError;

// Type metadata accessor for SessionError
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID12SessionErrorOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum SessionError
extern "C" {
extern unsigned $s7BlinkID12SessionErrorO31processCallAfterDocumentScannedyA2CmFWC;
extern unsigned $s7BlinkID12SessionErrorO29resetCallAfterResultRetrievedyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID12SessionErrorO") SessionError final {
public:
  SWIFT_INLINE_THUNK ~SessionError() noexcept {
    auto metadata = _impl::$s7BlinkID12SessionErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK SessionError(const SessionError &other) noexcept {
    auto metadata = _impl::$s7BlinkID12SessionErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK SessionError &operator =(const SessionError &other) noexcept {
    auto metadata = _impl::$s7BlinkID12SessionErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK SessionError &operator =(SessionError &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER SessionError(SessionError &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    processCallAfterDocumentScanned SWIFT_SYMBOL("s:7BlinkID12SessionErrorO31processCallAfterDocumentScannedyA2CmF"),
    resetCallAfterResultRetrieved SWIFT_SYMBOL("s:7BlinkID12SessionErrorO29resetCallAfterResultRetrievedyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_processCallAfterDocumentScanned {  // impl struct for case processCallAfterDocumentScanned
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::processCallAfterDocumentScanned;
    }
    SWIFT_INLINE_THUNK SessionError operator()() const;
  } processCallAfterDocumentScanned SWIFT_SYMBOL("s:7BlinkID12SessionErrorO31processCallAfterDocumentScannedyA2CmF");
  SWIFT_INLINE_THUNK bool isProcessCallAfterDocumentScanned() const;

  inline const static struct _impl_resetCallAfterResultRetrieved {  // impl struct for case resetCallAfterResultRetrieved
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::resetCallAfterResultRetrieved;
    }
    SWIFT_INLINE_THUNK SessionError operator()() const;
  } resetCallAfterResultRetrieved SWIFT_SYMBOL("s:7BlinkID12SessionErrorO29resetCallAfterResultRetrievedyA2CmF");
  SWIFT_INLINE_THUNK bool isResetCallAfterResultRetrieved() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s7BlinkID12SessionErrorO31processCallAfterDocumentScannedyA2CmFWC) return cases::processCallAfterDocumentScanned;
    if (tag == _impl::$s7BlinkID12SessionErrorO29resetCallAfterResultRetrievedyA2CmFWC) return cases::resetCallAfterResultRetrieved;
    return cases::unknownDefault;
  }

  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:7BlinkID12SessionErrorO9hashValueSivp");
private:
  SWIFT_INLINE_THUNK SessionError(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK SessionError _make() noexcept {
    auto metadata = _impl::$s7BlinkID12SessionErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return SessionError(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s7BlinkID12SessionErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s7BlinkID12SessionErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s7BlinkID12SessionErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_SessionError;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID12SessionErrorOD;
  static inline constexpr $s7BlinkID12SessionErrorOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_SessionError {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(SessionError &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const SessionError &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER SessionError returnNewValue(T callable) {
    auto result = SessionError::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID12SessionErrorOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::SessionError> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID12SessionErrorOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::SessionError> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::SessionError> = true;
template<>
struct implClassFor<BlinkID::SessionError> { using type = BlinkID::_impl::_impl_SessionError; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

class SWIFT_SYMBOL("s:7BlinkID9VIZResultV") VIZResult;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<BlinkID::VIZResult> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {
namespace _impl {

class _impl_SingleSideScanningResult;

// Type metadata accessor for SingleSideScanningResult
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID24SingleSideScanningResultVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID24SingleSideScanningResultV") SingleSideScanningResult final {
public:
  SWIFT_INLINE_THUNK ~SingleSideScanningResult() noexcept {
    auto metadata = _impl::$s7BlinkID24SingleSideScanningResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK SingleSideScanningResult(const SingleSideScanningResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID24SingleSideScanningResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK SingleSideScanningResult &operator =(const SingleSideScanningResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID24SingleSideScanningResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK SingleSideScanningResult &operator =(SingleSideScanningResult &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER SingleSideScanningResult(SingleSideScanningResult &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Optional<VIZResult> getViz() const SWIFT_SYMBOL("s:7BlinkID24SingleSideScanningResultV3vizAA9VIZResultVSgvp");
  SWIFT_INLINE_THUNK void setViz(const swift::Optional<VIZResult>& value) SWIFT_SYMBOL("s:7BlinkID24SingleSideScanningResultV3vizAA9VIZResultVSgvp");
  SWIFT_INLINE_THUNK swift::Optional<MRZResult> getMrz() const SWIFT_SYMBOL("s:7BlinkID24SingleSideScanningResultV3mrzAA9MRZResultVSgvp");
  SWIFT_INLINE_THUNK void setMrz(const swift::Optional<MRZResult>& value) SWIFT_SYMBOL("s:7BlinkID24SingleSideScanningResultV3mrzAA9MRZResultVSgvp");
  SWIFT_INLINE_THUNK swift::Optional<BarcodeResult> getBarcode() const SWIFT_SYMBOL("s:7BlinkID24SingleSideScanningResultV7barcodeAA07BarcodeF0VSgvp");
  SWIFT_INLINE_THUNK void setBarcode(const swift::Optional<BarcodeResult>& value) SWIFT_SYMBOL("s:7BlinkID24SingleSideScanningResultV7barcodeAA07BarcodeF0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<InputImageResult> getInputImage() const SWIFT_SYMBOL("s:7BlinkID24SingleSideScanningResultV10inputImageAA05InputhF0VSgvp");
  SWIFT_INLINE_THUNK void setInputImage(const swift::Optional<InputImageResult>& value) SWIFT_SYMBOL("s:7BlinkID24SingleSideScanningResultV10inputImageAA05InputhF0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<InputImageResult> getBarcodeInputImage() const SWIFT_SYMBOL("s:7BlinkID24SingleSideScanningResultV17barcodeInputImageAA0hiF0VSgvp");
  SWIFT_INLINE_THUNK void setBarcodeInputImage(const swift::Optional<InputImageResult>& value) SWIFT_SYMBOL("s:7BlinkID24SingleSideScanningResultV17barcodeInputImageAA0hiF0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<CroppedImageResult> getDocumentImage() const SWIFT_SYMBOL("s:7BlinkID24SingleSideScanningResultV13documentImageAA07CroppedhF0VSgvp");
  SWIFT_INLINE_THUNK void setDocumentImage(const swift::Optional<CroppedImageResult>& value) SWIFT_SYMBOL("s:7BlinkID24SingleSideScanningResultV13documentImageAA07CroppedhF0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<DetailedCroppedImageResult> getFaceImage() const SWIFT_SYMBOL("s:7BlinkID24SingleSideScanningResultV9faceImageAA015DetailedCroppedhF0VSgvp");
  SWIFT_INLINE_THUNK void setFaceImage(const swift::Optional<DetailedCroppedImageResult>& value) SWIFT_SYMBOL("s:7BlinkID24SingleSideScanningResultV9faceImageAA015DetailedCroppedhF0VSgvp");
  SWIFT_INLINE_THUNK swift::Optional<DetailedCroppedImageResult> getSignatureImage() const SWIFT_SYMBOL("s:7BlinkID24SingleSideScanningResultV14signatureImageAA015DetailedCroppedhF0VSgvp");
  SWIFT_INLINE_THUNK void setSignatureImage(const swift::Optional<DetailedCroppedImageResult>& value) SWIFT_SYMBOL("s:7BlinkID24SingleSideScanningResultV14signatureImageAA015DetailedCroppedhF0VSgvp");
private:
  SWIFT_INLINE_THUNK SingleSideScanningResult(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK SingleSideScanningResult _make() noexcept {
    auto metadata = _impl::$s7BlinkID24SingleSideScanningResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return SingleSideScanningResult(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_SingleSideScanningResult;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID24SingleSideScanningResultVD;
  static inline constexpr $s7BlinkID24SingleSideScanningResultVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_SingleSideScanningResult {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(SingleSideScanningResult &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const SingleSideScanningResult &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER SingleSideScanningResult returnNewValue(T callable) {
    auto result = SingleSideScanningResult::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID24SingleSideScanningResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::SingleSideScanningResult> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID24SingleSideScanningResultVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::SingleSideScanningResult> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::SingleSideScanningResult> = true;
template<>
struct implClassFor<BlinkID::SingleSideScanningResult> { using type = BlinkID::_impl::_impl_SingleSideScanningResult; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {



namespace _impl {

class _impl_VIZResult;

// Type metadata accessor for VIZResult
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID9VIZResultVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:7BlinkID9VIZResultV") VIZResult final {
public:
  SWIFT_INLINE_THUNK ~VIZResult() noexcept {
    auto metadata = _impl::$s7BlinkID9VIZResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK VIZResult(const VIZResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID9VIZResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK VIZResult &operator =(const VIZResult &other) noexcept {
    auto metadata = _impl::$s7BlinkID9VIZResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK VIZResult &operator =(VIZResult &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER VIZResult(VIZResult &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK bool getDateOfExpiryPermanent() const SWIFT_SYMBOL("s:7BlinkID9VIZResultV21dateOfExpiryPermanentSbvp");
  SWIFT_INLINE_THUNK swift::Array<DependentInfo> getDependentsInfo() const SWIFT_SYMBOL("s:7BlinkID9VIZResultV14dependentsInfoSayAA09DependentE0VGvp");
private:
  SWIFT_INLINE_THUNK VIZResult(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK VIZResult _make() noexcept {
    auto metadata = _impl::$s7BlinkID9VIZResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return VIZResult(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_VIZResult;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID9VIZResultVD;
  static inline constexpr $s7BlinkID9VIZResultVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_VIZResult {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(VIZResult &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const VIZResult &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER VIZResult returnNewValue(T callable) {
    auto result = VIZResult::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID9VIZResultVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<BlinkID::VIZResult> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID9VIZResultVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<BlinkID::VIZResult> = true;
template<>
static inline const constexpr bool isOpaqueLayout<BlinkID::VIZResult> = true;
template<>
struct implClassFor<BlinkID::VIZResult> { using type = BlinkID::_impl::_impl_VIZResult; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_VehicleClassInfo;

static_assert(1 <= 3, "unsupported generic requirement list for metadata func");
// Type metadata accessor for VehicleClassInfo
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s7BlinkID16VehicleClassInfoVMa(swift::_impl::MetadataRequestTy, void * _Nonnull) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:7BlinkID16VehicleClassInfoV") VehicleClassInfo final {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK ~VehicleClassInfo() noexcept {
    auto metadata = _impl::$s7BlinkID16VehicleClassInfoVMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK VehicleClassInfo(const VehicleClassInfo &other) noexcept {
    auto metadata = _impl::$s7BlinkID16VehicleClassInfoVMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK VehicleClassInfo &operator =(const VehicleClassInfo &other) noexcept {
    auto metadata = _impl::$s7BlinkID16VehicleClassInfoVMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK VehicleClassInfo &operator =(VehicleClassInfo &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER VehicleClassInfo(VehicleClassInfo &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Optional<T_0_0> getVehicleClass() const SWIFT_SYMBOL("s:7BlinkID16VehicleClassInfoV07vehicleD0xSgvp");
  SWIFT_INLINE_THUNK swift::Optional<T_0_0> getLicenceType() const SWIFT_SYMBOL("s:7BlinkID16VehicleClassInfoV11licenceTypexSgvp");
  SWIFT_INLINE_THUNK swift::Optional<DateResult<T_0_0>> getEffectiveDate() const SWIFT_SYMBOL("s:7BlinkID16VehicleClassInfoV13effectiveDateAA0G6ResultVyxGSgvp");
  SWIFT_INLINE_THUNK swift::Optional<DateResult<T_0_0>> getExpiryDate() const SWIFT_SYMBOL("s:7BlinkID16VehicleClassInfoV10expiryDateAA0G6ResultVyxGSgvp");
private:
  SWIFT_INLINE_THUNK VehicleClassInfo(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK VehicleClassInfo _make() noexcept {
    auto metadata = _impl::$s7BlinkID16VehicleClassInfoVMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return VehicleClassInfo(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_VehicleClassInfo<T_0_0>;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s7BlinkID16VehicleClassInfoVyxGD;
  static inline constexpr $s7BlinkID16VehicleClassInfoVyxGD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_VehicleClassInfo {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(VehicleClassInfo<T_0_0> &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const VehicleClassInfo<T_0_0> &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER VehicleClassInfo<T_0_0> returnNewValue(T callable) {
    auto result = VehicleClassInfo<T_0_0>::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s7BlinkID16VehicleClassInfoVMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
struct TypeMetadataTrait<BlinkID::VehicleClassInfo<T_0_0>> {
  static SWIFT_INLINE_PRIVATE_HELPER void * _Nonnull getTypeMetadata() {
    return BlinkID::_impl::$s7BlinkID16VehicleClassInfoVMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata())._0;
  }
};
namespace _impl{
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
static inline const constexpr bool isOpaqueLayout<BlinkID::VehicleClassInfo<T_0_0>> = true;
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace BlinkID SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("BlinkID") {

  SWIFT_INLINE_THUNK swift::Optional<swift::String> AddressDetailedInfo::getStreet() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_uint64_t_8_16(result, _impl::$s7BlinkID19AddressDetailedInfoV6streetSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> AddressDetailedInfo::getPostalCode() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_uint64_t_8_16(result, _impl::$s7BlinkID19AddressDetailedInfoV10postalCodeSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> AddressDetailedInfo::getCity() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_uint64_t_8_16(result, _impl::$s7BlinkID19AddressDetailedInfoV4citySSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> AddressDetailedInfo::getJurisdiction() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_uint64_t_8_16(result, _impl::$s7BlinkID19AddressDetailedInfoV12jurisdictionSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK AlphabetType AlphabetType::_impl_latin::operator()() const {
    auto result = AlphabetType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12AlphabetTypeO5latinyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool AlphabetType::isLatin() const {
    return *this == AlphabetType::latin;
  }
  SWIFT_INLINE_THUNK AlphabetType AlphabetType::_impl_arabic::operator()() const {
    auto result = AlphabetType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12AlphabetTypeO6arabicyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool AlphabetType::isArabic() const {
    return *this == AlphabetType::arabic;
  }
  SWIFT_INLINE_THUNK AlphabetType AlphabetType::_impl_cyrillic::operator()() const {
    auto result = AlphabetType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12AlphabetTypeO8cyrillicyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool AlphabetType::isCyrillic() const {
    return *this == AlphabetType::cyrillic;
  }
  SWIFT_INLINE_THUNK AlphabetType AlphabetType::_impl_greek::operator()() const {
    auto result = AlphabetType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12AlphabetTypeO5greekyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool AlphabetType::isGreek() const {
    return *this == AlphabetType::greek;
  }
  SWIFT_INLINE_THUNK  bool AlphabetType::isUnknownDefault() const {
    return *this == AlphabetType::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<AlphabetType> AlphabetType::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<AlphabetType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID12AlphabetTypeO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String AlphabetType::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID12AlphabetTypeO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK AnonymizationMode AnonymizationMode::_impl_none::operator()() const {
    auto result = AnonymizationMode::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17AnonymizationModeO4noneyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool AnonymizationMode::isNone() const {
    return *this == AnonymizationMode::none;
  }
  SWIFT_INLINE_THUNK AnonymizationMode AnonymizationMode::_impl_imageOnly::operator()() const {
    auto result = AnonymizationMode::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17AnonymizationModeO9imageOnlyyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool AnonymizationMode::isImageOnly() const {
    return *this == AnonymizationMode::imageOnly;
  }
  SWIFT_INLINE_THUNK AnonymizationMode AnonymizationMode::_impl_resultFieldsOnly::operator()() const {
    auto result = AnonymizationMode::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17AnonymizationModeO16resultFieldsOnlyyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool AnonymizationMode::isResultFieldsOnly() const {
    return *this == AnonymizationMode::resultFieldsOnly;
  }
  SWIFT_INLINE_THUNK AnonymizationMode AnonymizationMode::_impl_fullResult::operator()() const {
    auto result = AnonymizationMode::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17AnonymizationModeO10fullResultyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool AnonymizationMode::isFullResult() const {
    return *this == AnonymizationMode::fullResult;
  }
  SWIFT_INLINE_THUNK  bool AnonymizationMode::isUnknownDefault() const {
    return *this == AnonymizationMode::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::String AnonymizationMode::getId() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID17AnonymizationModeO2idSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<AnonymizationMode> AnonymizationMode::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<AnonymizationMode>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID17AnonymizationModeO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String AnonymizationMode::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID17AnonymizationModeO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeData::getStringData() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID11BarcodeDataV06stringD0SSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK BarcodeType BarcodeData::getBarcodeType() const {
  return _impl::_impl_BarcodeType::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID11BarcodeDataV11barcodeTypeAA0cF0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK bool BarcodeData::getUncertain() const {
  return _impl::$s7BlinkID11BarcodeDataV9uncertainSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_documentType::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO12documentTypeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isDocumentType() const {
    return *this == BarcodeElementKey::documentType;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_standardVersionNumber::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO21standardVersionNumberyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isStandardVersionNumber() const {
    return *this == BarcodeElementKey::standardVersionNumber;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_customerFamilyName::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO18customerFamilyNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isCustomerFamilyName() const {
    return *this == BarcodeElementKey::customerFamilyName;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_customerFirstName::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO17customerFirstNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isCustomerFirstName() const {
    return *this == BarcodeElementKey::customerFirstName;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_customerFullName::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO16customerFullNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isCustomerFullName() const {
    return *this == BarcodeElementKey::customerFullName;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_dateOfBirth::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO11dateOfBirthyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isDateOfBirth() const {
    return *this == BarcodeElementKey::dateOfBirth;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_sex::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO3sexyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isSex() const {
    return *this == BarcodeElementKey::sex;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_eyeColor::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO8eyeColoryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isEyeColor() const {
    return *this == BarcodeElementKey::eyeColor;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_addressStreet::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO13addressStreetyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isAddressStreet() const {
    return *this == BarcodeElementKey::addressStreet;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_addressCity::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO11addressCityyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isAddressCity() const {
    return *this == BarcodeElementKey::addressCity;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_addressJurisdictionCode::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO23addressJurisdictionCodeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isAddressJurisdictionCode() const {
    return *this == BarcodeElementKey::addressJurisdictionCode;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_addressPostalCode::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO17addressPostalCodeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isAddressPostalCode() const {
    return *this == BarcodeElementKey::addressPostalCode;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_fullAddress::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO11fullAddressyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isFullAddress() const {
    return *this == BarcodeElementKey::fullAddress;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_height::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO6heightyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isHeight() const {
    return *this == BarcodeElementKey::height;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_heightIn::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO8heightInyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isHeightIn() const {
    return *this == BarcodeElementKey::heightIn;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_heightCm::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO8heightCmyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isHeightCm() const {
    return *this == BarcodeElementKey::heightCm;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_customerMiddleName::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO18customerMiddleNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isCustomerMiddleName() const {
    return *this == BarcodeElementKey::customerMiddleName;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_hairColor::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO9hairColoryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isHairColor() const {
    return *this == BarcodeElementKey::hairColor;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_nameSuffix::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO10nameSuffixyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isNameSuffix() const {
    return *this == BarcodeElementKey::nameSuffix;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_akaFullName::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO11akaFullNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isAkaFullName() const {
    return *this == BarcodeElementKey::akaFullName;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_akaFamilyName::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO13akaFamilyNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isAkaFamilyName() const {
    return *this == BarcodeElementKey::akaFamilyName;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_akaGivenName::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO12akaGivenNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isAkaGivenName() const {
    return *this == BarcodeElementKey::akaGivenName;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_akaSuffixName::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO13akaSuffixNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isAkaSuffixName() const {
    return *this == BarcodeElementKey::akaSuffixName;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_weightRange::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO11weightRangeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isWeightRange() const {
    return *this == BarcodeElementKey::weightRange;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_weightPounds::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO12weightPoundsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isWeightPounds() const {
    return *this == BarcodeElementKey::weightPounds;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_weightKilograms::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO15weightKilogramsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isWeightKilograms() const {
    return *this == BarcodeElementKey::weightKilograms;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_customerIdNumber::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO16customerIdNumberyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isCustomerIdNumber() const {
    return *this == BarcodeElementKey::customerIdNumber;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_familyNameTruncation::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO20familyNameTruncationyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isFamilyNameTruncation() const {
    return *this == BarcodeElementKey::familyNameTruncation;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_firstNameTruncation::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO19firstNameTruncationyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isFirstNameTruncation() const {
    return *this == BarcodeElementKey::firstNameTruncation;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_middleNameTruncation::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO20middleNameTruncationyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isMiddleNameTruncation() const {
    return *this == BarcodeElementKey::middleNameTruncation;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_placeOfBirth::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO12placeOfBirthyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isPlaceOfBirth() const {
    return *this == BarcodeElementKey::placeOfBirth;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_addressStreet2::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO14addressStreet2yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isAddressStreet2() const {
    return *this == BarcodeElementKey::addressStreet2;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_raceEthnicity::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO13raceEthnicityyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isRaceEthnicity() const {
    return *this == BarcodeElementKey::raceEthnicity;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_namePrefix::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO10namePrefixyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isNamePrefix() const {
    return *this == BarcodeElementKey::namePrefix;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_countryIdentification::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO21countryIdentificationyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isCountryIdentification() const {
    return *this == BarcodeElementKey::countryIdentification;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_residenceStreetAddress::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO22residenceStreetAddressyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isResidenceStreetAddress() const {
    return *this == BarcodeElementKey::residenceStreetAddress;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_residenceStreetAddress2::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO23residenceStreetAddress2yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isResidenceStreetAddress2() const {
    return *this == BarcodeElementKey::residenceStreetAddress2;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_residenceCity::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO13residenceCityyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isResidenceCity() const {
    return *this == BarcodeElementKey::residenceCity;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_residenceJurisdictionCode::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO25residenceJurisdictionCodeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isResidenceJurisdictionCode() const {
    return *this == BarcodeElementKey::residenceJurisdictionCode;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_residencePostalCode::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO19residencePostalCodeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isResidencePostalCode() const {
    return *this == BarcodeElementKey::residencePostalCode;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_residenceFullAddress::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO20residenceFullAddressyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isResidenceFullAddress() const {
    return *this == BarcodeElementKey::residenceFullAddress;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_under18::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO7under18yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isUnder18() const {
    return *this == BarcodeElementKey::under18;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_under19::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO7under19yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isUnder19() const {
    return *this == BarcodeElementKey::under19;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_under21::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO7under21yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isUnder21() const {
    return *this == BarcodeElementKey::under21;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_socialSecurityNumber::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO20socialSecurityNumberyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isSocialSecurityNumber() const {
    return *this == BarcodeElementKey::socialSecurityNumber;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_akaSocialSecurityNumber::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO23akaSocialSecurityNumberyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isAkaSocialSecurityNumber() const {
    return *this == BarcodeElementKey::akaSocialSecurityNumber;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_akaMiddleName::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO13akaMiddleNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isAkaMiddleName() const {
    return *this == BarcodeElementKey::akaMiddleName;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_akaPrefixName::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO13akaPrefixNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isAkaPrefixName() const {
    return *this == BarcodeElementKey::akaPrefixName;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_organDonor::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO10organDonoryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isOrganDonor() const {
    return *this == BarcodeElementKey::organDonor;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_veteran::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO7veteranyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isVeteran() const {
    return *this == BarcodeElementKey::veteran;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_akaDateOfBirth::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO14akaDateOfBirthyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isAkaDateOfBirth() const {
    return *this == BarcodeElementKey::akaDateOfBirth;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_issuerIdentificationNumber::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO26issuerIdentificationNumberyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isIssuerIdentificationNumber() const {
    return *this == BarcodeElementKey::issuerIdentificationNumber;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_documentExpirationDate::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO22documentExpirationDateyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isDocumentExpirationDate() const {
    return *this == BarcodeElementKey::documentExpirationDate;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_jurisdictionVersionNumber::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO25jurisdictionVersionNumberyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isJurisdictionVersionNumber() const {
    return *this == BarcodeElementKey::jurisdictionVersionNumber;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_jurisdictionVehicleClass::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO24jurisdictionVehicleClassyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isJurisdictionVehicleClass() const {
    return *this == BarcodeElementKey::jurisdictionVehicleClass;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_jurisdictionRestrictionCodes::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO28jurisdictionRestrictionCodesyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isJurisdictionRestrictionCodes() const {
    return *this == BarcodeElementKey::jurisdictionRestrictionCodes;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_jurisdictionEndorsementCodes::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO28jurisdictionEndorsementCodesyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isJurisdictionEndorsementCodes() const {
    return *this == BarcodeElementKey::jurisdictionEndorsementCodes;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_documentIssueDate::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO17documentIssueDateyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isDocumentIssueDate() const {
    return *this == BarcodeElementKey::documentIssueDate;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_federalCommercialVehicleCodes::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO29federalCommercialVehicleCodesyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isFederalCommercialVehicleCodes() const {
    return *this == BarcodeElementKey::federalCommercialVehicleCodes;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_issuingJurisdiction::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO19issuingJurisdictionyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isIssuingJurisdiction() const {
    return *this == BarcodeElementKey::issuingJurisdiction;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_standardVehicleClassification::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO29standardVehicleClassificationyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isStandardVehicleClassification() const {
    return *this == BarcodeElementKey::standardVehicleClassification;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_issuingJurisdictionName::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO23issuingJurisdictionNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isIssuingJurisdictionName() const {
    return *this == BarcodeElementKey::issuingJurisdictionName;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_standardEndorsementCode::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO23standardEndorsementCodeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isStandardEndorsementCode() const {
    return *this == BarcodeElementKey::standardEndorsementCode;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_standardRestrictionCode::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO23standardRestrictionCodeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isStandardRestrictionCode() const {
    return *this == BarcodeElementKey::standardRestrictionCode;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_jurisdictionVehicleClassificationDescription::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO44jurisdictionVehicleClassificationDescriptionyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isJurisdictionVehicleClassificationDescription() const {
    return *this == BarcodeElementKey::jurisdictionVehicleClassificationDescription;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_jurisdictionEndorsmentCodeDescription::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO37jurisdictionEndorsmentCodeDescriptionyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isJurisdictionEndorsmentCodeDescription() const {
    return *this == BarcodeElementKey::jurisdictionEndorsmentCodeDescription;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_jurisdictionRestrictionCodeDescription::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO38jurisdictionRestrictionCodeDescriptionyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isJurisdictionRestrictionCodeDescription() const {
    return *this == BarcodeElementKey::jurisdictionRestrictionCodeDescription;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_inventoryControlNumber::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO22inventoryControlNumberyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isInventoryControlNumber() const {
    return *this == BarcodeElementKey::inventoryControlNumber;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_cardRevisionDate::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO16cardRevisionDateyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isCardRevisionDate() const {
    return *this == BarcodeElementKey::cardRevisionDate;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_documentDiscriminator::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO21documentDiscriminatoryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isDocumentDiscriminator() const {
    return *this == BarcodeElementKey::documentDiscriminator;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_limitedDurationDocument::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO23limitedDurationDocumentyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isLimitedDurationDocument() const {
    return *this == BarcodeElementKey::limitedDurationDocument;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_auditInformation::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO16auditInformationyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isAuditInformation() const {
    return *this == BarcodeElementKey::auditInformation;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_complianceType::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO14complianceTypeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isComplianceType() const {
    return *this == BarcodeElementKey::complianceType;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_issueTimestamp::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO14issueTimestampyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isIssueTimestamp() const {
    return *this == BarcodeElementKey::issueTimestamp;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_permitExpirationDate::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO20permitExpirationDateyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isPermitExpirationDate() const {
    return *this == BarcodeElementKey::permitExpirationDate;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_permitIdentifier::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO16permitIdentifieryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isPermitIdentifier() const {
    return *this == BarcodeElementKey::permitIdentifier;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_permitIssueDate::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO15permitIssueDateyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isPermitIssueDate() const {
    return *this == BarcodeElementKey::permitIssueDate;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_numberOfDuplicates::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO18numberOfDuplicatesyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isNumberOfDuplicates() const {
    return *this == BarcodeElementKey::numberOfDuplicates;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_hazmatExpirationDate::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO20hazmatExpirationDateyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isHazmatExpirationDate() const {
    return *this == BarcodeElementKey::hazmatExpirationDate;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_medicalIndicator::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO16medicalIndicatoryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isMedicalIndicator() const {
    return *this == BarcodeElementKey::medicalIndicator;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_nonResident::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO11nonResidentyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isNonResident() const {
    return *this == BarcodeElementKey::nonResident;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_uniqueCustomerId::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO16uniqueCustomerIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isUniqueCustomerId() const {
    return *this == BarcodeElementKey::uniqueCustomerId;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_dataDiscriminator::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO17dataDiscriminatoryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isDataDiscriminator() const {
    return *this == BarcodeElementKey::dataDiscriminator;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_documentExpirationMonth::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO23documentExpirationMonthyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isDocumentExpirationMonth() const {
    return *this == BarcodeElementKey::documentExpirationMonth;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_documentNonexpiring::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO19documentNonexpiringyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isDocumentNonexpiring() const {
    return *this == BarcodeElementKey::documentNonexpiring;
  }
  SWIFT_INLINE_THUNK BarcodeElementKey BarcodeElementKey::_impl_securityVersion::operator()() const {
    auto result = BarcodeElementKey::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID17BarcodeElementKeyO15securityVersionyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isSecurityVersion() const {
    return *this == BarcodeElementKey::securityVersion;
  }
  SWIFT_INLINE_THUNK  bool BarcodeElementKey::isUnknownDefault() const {
    return *this == BarcodeElementKey::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int BarcodeElementKey::getHashValue() const {
  return _impl::$s7BlinkID17BarcodeElementKeyO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String BarcodeElements::getValue(const BarcodeElementKey& barcodeElementKey) {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID15BarcodeElementsV8getValue3forSSAA0C10ElementKeyO_tF(_impl::_impl_BarcodeElementKey::getOpaquePointer(barcodeElementKey), _getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK BarcodeData BarcodeResult::getBarcodeData() const {
  return _impl::_impl_BarcodeData::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID13BarcodeResultV11barcodeDataAA0cF0Vvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeResult::getFirstName() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID13BarcodeResultV9firstNameSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeResult::getMiddleName() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID13BarcodeResultV10middleNameSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeResult::getLastName() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID13BarcodeResultV8lastNameSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeResult::getFullName() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID13BarcodeResultV8fullNameSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeResult::getAdditionalNameInformation() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID13BarcodeResultV25additionalNameInformationSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeResult::getAddress() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID13BarcodeResultV7addressSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeResult::getPlaceOfBirth() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID13BarcodeResultV12placeOfBirthSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeResult::getNationality() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID13BarcodeResultV11nationalitySSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeResult::getRace() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID13BarcodeResultV4raceSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeResult::getReligion() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID13BarcodeResultV8religionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeResult::getProfession() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID13BarcodeResultV10professionSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeResult::getMaritalStatus() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID13BarcodeResultV13maritalStatusSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeResult::getResidentialStatus() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID13BarcodeResultV17residentialStatusSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeResult::getEmployer() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID13BarcodeResultV8employerSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeResult::getSex() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID13BarcodeResultV3sexSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK DateResult<swift::String> BarcodeResult::getDateOfBirth() const {
  return _impl::_impl_DateResult<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID13BarcodeResultV11dateOfBirthAA04DateD0VySSGvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK DateResult<swift::String> BarcodeResult::getDateOfIssue() const {
  return _impl::_impl_DateResult<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID13BarcodeResultV11dateOfIssueAA04DateD0VySSGvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK DateResult<swift::String> BarcodeResult::getDateOfExpiry() const {
  return _impl::_impl_DateResult<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID13BarcodeResultV12dateOfExpiryAA04DateD0VySSGvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeResult::getDocumentNumber() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID13BarcodeResultV14documentNumberSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeResult::getPersonalIdNumber() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID13BarcodeResultV16personalIdNumberSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeResult::getDocumentAdditionalNumber() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID13BarcodeResultV24documentAdditionalNumberSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String BarcodeResult::getIssuingAuthority() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID13BarcodeResultV16issuingAuthoritySSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK AddressDetailedInfo BarcodeResult::getAddressDetailedInfo() const {
  return _impl::_impl_AddressDetailedInfo::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID13BarcodeResultV19addressDetailedInfoAA07AddressfG0Vvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK DriverLicenseDetailedInfo<swift::String> BarcodeResult::getDriverLicenseDetailedInfo() const {
  return _impl::_impl_DriverLicenseDetailedInfo<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID13BarcodeResultV25driverLicenseDetailedInfoAA06DriverfgH0VySSGvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK BarcodeElements BarcodeResult::getExtendedElements() const {
  return _impl::_impl_BarcodeElements::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID13BarcodeResultV16extendedElementsAA0cF0Vvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK BarcodeType BarcodeType::_impl_none::operator()() const {
    auto result = BarcodeType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID11BarcodeTypeO4noneyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeType::isNone() const {
    return *this == BarcodeType::none;
  }
  SWIFT_INLINE_THUNK BarcodeType BarcodeType::_impl_qrCode::operator()() const {
    auto result = BarcodeType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID11BarcodeTypeO6qrCodeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeType::isQrCode() const {
    return *this == BarcodeType::qrCode;
  }
  SWIFT_INLINE_THUNK BarcodeType BarcodeType::_impl_dataMatrix::operator()() const {
    auto result = BarcodeType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID11BarcodeTypeO10dataMatrixyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeType::isDataMatrix() const {
    return *this == BarcodeType::dataMatrix;
  }
  SWIFT_INLINE_THUNK BarcodeType BarcodeType::_impl_upce::operator()() const {
    auto result = BarcodeType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID11BarcodeTypeO4upceyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeType::isUpce() const {
    return *this == BarcodeType::upce;
  }
  SWIFT_INLINE_THUNK BarcodeType BarcodeType::_impl_upca::operator()() const {
    auto result = BarcodeType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID11BarcodeTypeO4upcayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeType::isUpca() const {
    return *this == BarcodeType::upca;
  }
  SWIFT_INLINE_THUNK BarcodeType BarcodeType::_impl_ean8::operator()() const {
    auto result = BarcodeType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID11BarcodeTypeO4ean8yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeType::isEan8() const {
    return *this == BarcodeType::ean8;
  }
  SWIFT_INLINE_THUNK BarcodeType BarcodeType::_impl_ean13::operator()() const {
    auto result = BarcodeType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID11BarcodeTypeO5ean13yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeType::isEan13() const {
    return *this == BarcodeType::ean13;
  }
  SWIFT_INLINE_THUNK BarcodeType BarcodeType::_impl_code128::operator()() const {
    auto result = BarcodeType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID11BarcodeTypeO7code128yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeType::isCode128() const {
    return *this == BarcodeType::code128;
  }
  SWIFT_INLINE_THUNK BarcodeType BarcodeType::_impl_code39::operator()() const {
    auto result = BarcodeType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID11BarcodeTypeO6code39yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeType::isCode39() const {
    return *this == BarcodeType::code39;
  }
  SWIFT_INLINE_THUNK BarcodeType BarcodeType::_impl_itf::operator()() const {
    auto result = BarcodeType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID11BarcodeTypeO3itfyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeType::isItf() const {
    return *this == BarcodeType::itf;
  }
  SWIFT_INLINE_THUNK BarcodeType BarcodeType::_impl_aztec::operator()() const {
    auto result = BarcodeType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID11BarcodeTypeO5aztecyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeType::isAztec() const {
    return *this == BarcodeType::aztec;
  }
  SWIFT_INLINE_THUNK BarcodeType BarcodeType::_impl_pdf417::operator()() const {
    auto result = BarcodeType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID11BarcodeTypeO6pdf417yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool BarcodeType::isPdf417() const {
    return *this == BarcodeType::pdf417;
  }
  SWIFT_INLINE_THUNK  bool BarcodeType::isUnknownDefault() const {
    return *this == BarcodeType::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int BarcodeType::getHashValue() const {
  return _impl::$s7BlinkID11BarcodeTypeO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK RecognitionMode BlinkIDScanningResult::getRecognitionMode() const {
  return _impl::_impl_RecognitionMode::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID0A16IDScanningResultV15recognitionModeAA011RecognitionF0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<DataMatchResult> BlinkIDScanningResult::getDataMatchResult() const {
  return swift::_impl::_impl_Optional<DataMatchResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID0A16IDScanningResultV09dataMatchD0AA04DatafD0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<bool> BlinkIDScanningResult::getDateOfExpiryPermanent() const {
  return swift::_impl::_impl_Optional<bool>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint8_t_0_1(result, _impl::$s7BlinkID0A16IDScanningResultV21dateOfExpiryPermanentSbSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::Array<DependentInfo>> BlinkIDScanningResult::getDependentsInfo() const {
  return swift::_impl::_impl_Optional<swift::Array<DependentInfo>>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8(result, _impl::$s7BlinkID0A16IDScanningResultV14dependentsInfoSayAA09DependentF0VGSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Array<SingleSideScanningResult> BlinkIDScanningResult::getSubResults() const {
  return swift::_impl::_impl_Array<SingleSideScanningResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_void_ptr_0_8(result, _impl::$s7BlinkID0A16IDScanningResultV10subResultsSayAA018SingleSideScanningD0VGvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<InputImageResult> BlinkIDScanningResult::getInputImage(const ScanningSide& scanningSide) const {
  return swift::_impl::_impl_Optional<InputImageResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID0A16IDScanningResultV13getInputImage12scanningSideAA0fgD0VSgAA08ScanningI0O_tF(result, _impl::_impl_ScanningSide::getOpaquePointer(scanningSide), _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<InputImageResult> BlinkIDScanningResult::getBarcodeInputImage() const {
  return swift::_impl::_impl_Optional<InputImageResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID0A16IDScanningResultV20getBarcodeInputImageAA0ghD0VSgyF(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<CroppedImageResult> BlinkIDScanningResult::getDocumentImage(const ScanningSide& scanningSide) const {
  return swift::_impl::_impl_Optional<CroppedImageResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID0A16IDScanningResultV16getDocumentImage12scanningSideAA07CroppedgD0VSgAA08ScanningI0O_tF(result, _impl::_impl_ScanningSide::getOpaquePointer(scanningSide), _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<DetailedCroppedImageResult> BlinkIDScanningResult::getFaceImage() const {
  return swift::_impl::_impl_Optional<DetailedCroppedImageResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID0A16IDScanningResultV12getFaceImageAA015DetailedCroppedgD0VSgyF(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<DetailedCroppedImageResult> BlinkIDScanningResult::getSignatureImage() const {
  return swift::_impl::_impl_Optional<DetailedCroppedImageResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID0A16IDScanningResultV17getSignatureImageAA015DetailedCroppedgD0VSgyF(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::String BlinkIDSdkSettings::getLicenseKey() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID0A13IDSdkSettingsV10licenseKeySSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDSdkSettings::setLicenseKey(const swift::String& value) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_value[sizeof(swift::String)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::String(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID0A13IDSdkSettingsV10licenseKeySSvs(_impl::swift_interop_passDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> BlinkIDSdkSettings::getLicensee() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_uint64_t_8_16(result, _impl::$s7BlinkID0A13IDSdkSettingsV8licenseeSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDSdkSettings::setLicensee(const swift::Optional<swift::String>& value) {
  alignas(alignof(swift::Optional<swift::String>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<swift::String>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<swift::String>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<swift::String>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID0A13IDSdkSettingsV8licenseeSSSgvs(_impl::swift_interop_passDirect_BlinkID_uint64_t_0_8_uint64_t_8_16(swift::_impl::_impl_Optional<swift::String>::getOpaquePointer(consumedParamCopy_value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool BlinkIDSdkSettings::getHelloLogEnabled() const {
  return _impl::$s7BlinkID0A13IDSdkSettingsV15helloLogEnabledSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void BlinkIDSdkSettings::setHelloLogEnabled(bool value) {
  _impl::$s7BlinkID0A13IDSdkSettingsV15helloLogEnabledSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool BlinkIDSdkSettings::getDownloadResources() const {
  return _impl::$s7BlinkID0A13IDSdkSettingsV17downloadResourcesSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void BlinkIDSdkSettings::setDownloadResources(bool value) {
  _impl::$s7BlinkID0A13IDSdkSettingsV17downloadResourcesSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String BlinkIDSdkSettings::getResourceDownloadUrl() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID0A13IDSdkSettingsV19resourceDownloadUrlSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDSdkSettings::setResourceDownloadUrl(const swift::String& value) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_value[sizeof(swift::String)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::String(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID0A13IDSdkSettingsV19resourceDownloadUrlSSvs(_impl::swift_interop_passDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String BlinkIDSdkSettings::getResourceLocalFolder() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID0A13IDSdkSettingsV19resourceLocalFolderSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDSdkSettings::setResourceLocalFolder(const swift::String& value) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_value[sizeof(swift::String)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::String(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID0A13IDSdkSettingsV19resourceLocalFolderSSvs(_impl::swift_interop_passDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK RequestTimeout BlinkIDSdkSettings::getResourceRequestTimeout() const {
  return _impl::_impl_RequestTimeout::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID0A13IDSdkSettingsV22resourceRequestTimeoutAA0fG0Vvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDSdkSettings::setResourceRequestTimeout(const RequestTimeout& value) {
  alignas(alignof(RequestTimeout)) char copyBuffer_consumedParamCopy_value[sizeof(RequestTimeout)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) RequestTimeout(value));
  swift::_impl::ConsumedValueStorageDestroyer<RequestTimeout> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID0A13IDSdkSettingsV22resourceRequestTimeoutAA0fG0Vvs(_impl::_impl_RequestTimeout::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void BlinkIDSession::cancelActiveProcessing() {
  _impl::$s7BlinkID0A9IDSessionC22cancelActiveProcessingyyF(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK void BlinkIDSession::resumeActiveProcessing() {
  _impl::$s7BlinkID0A9IDSessionC22resumeActiveProcessingyyF(::swift::_impl::_impl_RefCountedClass::getOpaquePointer(*this));
  }
  SWIFT_INLINE_THUNK InputImageSource BlinkIDSessionSettings::getInputImageSource() const {
  return _impl::_impl_InputImageSource::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID0A17IDSessionSettingsV16inputImageSourceAA05InputfG0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDSessionSettings::setInputImageSource(const InputImageSource& value) {
  alignas(alignof(InputImageSource)) char copyBuffer_consumedParamCopy_value[sizeof(InputImageSource)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) InputImageSource(value));
  swift::_impl::ConsumedValueStorageDestroyer<InputImageSource> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID0A17IDSessionSettingsV16inputImageSourceAA05InputfG0Ovs(_impl::_impl_InputImageSource::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK ScanningMode BlinkIDSessionSettings::getScanningMode() const {
  return _impl::_impl_ScanningMode::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID0A17IDSessionSettingsV12scanningModeAA08ScanningF0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDSessionSettings::setScanningMode(const ScanningMode& value) {
  alignas(alignof(ScanningMode)) char copyBuffer_consumedParamCopy_value[sizeof(ScanningMode)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) ScanningMode(value));
  swift::_impl::ConsumedValueStorageDestroyer<ScanningMode> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID0A17IDSessionSettingsV12scanningModeAA08ScanningF0Ovs(_impl::_impl_ScanningMode::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK ScanningSettings BlinkIDSessionSettings::getScanningSettings() const {
  return _impl::_impl_ScanningSettings::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID0A17IDSessionSettingsV08scanningD0AA08ScanningD0Vvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void BlinkIDSessionSettings::setScanningSettings(const ScanningSettings& value) {
  alignas(alignof(ScanningSettings)) char copyBuffer_consumedParamCopy_value[sizeof(ScanningSettings)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) ScanningSettings(value));
  swift::_impl::ConsumedValueStorageDestroyer<ScanningSettings> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID0A17IDSessionSettingsV08scanningD0AA08ScanningD0Vvs(_impl::_impl_ScanningSettings::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK double BlinkIDSessionSettings::getStepTimeoutDuration() const {
  return _impl::$s7BlinkID0A17IDSessionSettingsV19stepTimeoutDurationSdvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void BlinkIDSessionSettings::setStepTimeoutDuration(double value) {
  _impl::$s7BlinkID0A17IDSessionSettingsV19stepTimeoutDurationSdvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK BlinkIDSessionSettings BlinkIDSessionSettings::init(const InputImageSource& inputImageSource, const ScanningMode& scanningMode, const ScanningSettings& scanningSettings, double stepTimeoutDuration) {
  alignas(alignof(InputImageSource)) char copyBuffer_consumedParamCopy_inputImageSource[sizeof(InputImageSource)];
  auto &consumedParamCopy_inputImageSource = *(new(copyBuffer_consumedParamCopy_inputImageSource) InputImageSource(inputImageSource));
  swift::_impl::ConsumedValueStorageDestroyer<InputImageSource> storageGuard_consumedParamCopy_inputImageSource(consumedParamCopy_inputImageSource);
  alignas(alignof(ScanningMode)) char copyBuffer_consumedParamCopy_scanningMode[sizeof(ScanningMode)];
  auto &consumedParamCopy_scanningMode = *(new(copyBuffer_consumedParamCopy_scanningMode) ScanningMode(scanningMode));
  swift::_impl::ConsumedValueStorageDestroyer<ScanningMode> storageGuard_consumedParamCopy_scanningMode(consumedParamCopy_scanningMode);
  alignas(alignof(ScanningSettings)) char copyBuffer_consumedParamCopy_scanningSettings[sizeof(ScanningSettings)];
  auto &consumedParamCopy_scanningSettings = *(new(copyBuffer_consumedParamCopy_scanningSettings) ScanningSettings(scanningSettings));
  swift::_impl::ConsumedValueStorageDestroyer<ScanningSettings> storageGuard_consumedParamCopy_scanningSettings(consumedParamCopy_scanningSettings);
  return _impl::_impl_BlinkIDSessionSettings::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID0A17IDSessionSettingsV16inputImageSource12scanningMode0hD019stepTimeoutDurationAcA05InputfG0O_AA08ScanningI0OAA0nD0VSdtcfC(result, _impl::_impl_InputImageSource::getOpaquePointer(consumedParamCopy_inputImageSource), _impl::_impl_ScanningMode::getOpaquePointer(consumedParamCopy_scanningMode), _impl::_impl_ScanningSettings::getOpaquePointer(consumedParamCopy_scanningSettings), stepTimeoutDuration);
  });
  }
  SWIFT_INLINE_THUNK MBSampleBufferWrapper *_Nonnull CameraFrame::getBuffer() const {
return (__bridge_transfer MBSampleBufferWrapper *)(__bridge void *)_impl::$s7BlinkID11CameraFrameV6bufferSo21MBSampleBufferWrapperCvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK RegionOfInterest CameraFrame::getRoi() const {
  return _impl::_impl_RegionOfInterest::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID11CameraFrameV3roiAA16RegionOfInterestVvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK CameraFrameVideoOrientation CameraFrame::getOrientation() const {
  return _impl::_impl_CameraFrameVideoOrientation::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID11CameraFrameV11orientationAA0cD16VideoOrientationOvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK CameraFrame CameraFrame::init(MBSampleBufferWrapper *_Nonnull buffer, const RegionOfInterest& roi, const CameraFrameVideoOrientation& orientation) {
  alignas(alignof(MBSampleBufferWrapper *_Nonnull)) char copyBuffer_consumedParamCopy_buffer[sizeof(MBSampleBufferWrapper *_Nonnull)];
  auto &consumedParamCopy_buffer = *(new(copyBuffer_consumedParamCopy_buffer) MBSampleBufferWrapper *_Nonnull(buffer));
  swift::_impl::ConsumedValueStorageDestroyer<MBSampleBufferWrapper *_Nonnull> storageGuard_consumedParamCopy_buffer(consumedParamCopy_buffer);
  alignas(alignof(RegionOfInterest)) char copyBuffer_consumedParamCopy_roi[sizeof(RegionOfInterest)];
  auto &consumedParamCopy_roi = *(new(copyBuffer_consumedParamCopy_roi) RegionOfInterest(roi));
  swift::_impl::ConsumedValueStorageDestroyer<RegionOfInterest> storageGuard_consumedParamCopy_roi(consumedParamCopy_roi);
  alignas(alignof(CameraFrameVideoOrientation)) char copyBuffer_consumedParamCopy_orientation[sizeof(CameraFrameVideoOrientation)];
  auto &consumedParamCopy_orientation = *(new(copyBuffer_consumedParamCopy_orientation) CameraFrameVideoOrientation(orientation));
  swift::_impl::ConsumedValueStorageDestroyer<CameraFrameVideoOrientation> storageGuard_consumedParamCopy_orientation(consumedParamCopy_orientation);
  return _impl::_impl_CameraFrame::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID11CameraFrameV6buffer3roi11orientationACSo21MBSampleBufferWrapperC_AA16RegionOfInterestVAA0cD16VideoOrientationOtcfC(result, consumedParamCopy_buffer, _impl::_impl_RegionOfInterest::getOpaquePointer(consumedParamCopy_roi), _impl::_impl_CameraFrameVideoOrientation::getOpaquePointer(consumedParamCopy_orientation));
  });
  }
  SWIFT_INLINE_THUNK swift::Int CameraFrame::getWidth() const {
  return _impl::$s7BlinkID11CameraFrameV5widthSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Int CameraFrame::getHeight() const {
  return _impl::$s7BlinkID11CameraFrameV6heightSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK CameraFrameVideoOrientation CameraFrameVideoOrientation::_impl_portrait::operator()() const {
    auto result = CameraFrameVideoOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID27CameraFrameVideoOrientationO8portraityA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CameraFrameVideoOrientation::isPortrait() const {
    return *this == CameraFrameVideoOrientation::portrait;
  }
  SWIFT_INLINE_THUNK CameraFrameVideoOrientation CameraFrameVideoOrientation::_impl_portraitUpsideDown::operator()() const {
    auto result = CameraFrameVideoOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID27CameraFrameVideoOrientationO18portraitUpsideDownyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CameraFrameVideoOrientation::isPortraitUpsideDown() const {
    return *this == CameraFrameVideoOrientation::portraitUpsideDown;
  }
  SWIFT_INLINE_THUNK CameraFrameVideoOrientation CameraFrameVideoOrientation::_impl_landscapeRight::operator()() const {
    auto result = CameraFrameVideoOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID27CameraFrameVideoOrientationO14landscapeRightyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CameraFrameVideoOrientation::isLandscapeRight() const {
    return *this == CameraFrameVideoOrientation::landscapeRight;
  }
  SWIFT_INLINE_THUNK CameraFrameVideoOrientation CameraFrameVideoOrientation::_impl_landscapeLeft::operator()() const {
    auto result = CameraFrameVideoOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID27CameraFrameVideoOrientationO13landscapeLeftyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool CameraFrameVideoOrientation::isLandscapeLeft() const {
    return *this == CameraFrameVideoOrientation::landscapeLeft;
  }
  SWIFT_INLINE_THUNK  bool CameraFrameVideoOrientation::isUnknownDefault() const {
    return *this == CameraFrameVideoOrientation::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int CameraFrameVideoOrientation::getHashValue() const {
  return _impl::$s7BlinkID27CameraFrameVideoOrientationO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK Country Country::_impl_none::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO4noneyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNone() const {
    return *this == Country::none;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_albania::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7albaniayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAlbania() const {
    return *this == Country::albania;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_algeria::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7algeriayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAlgeria() const {
    return *this == Country::algeria;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_argentina::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO9argentinayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isArgentina() const {
    return *this == Country::argentina;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_australia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO9australiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAustralia() const {
    return *this == Country::australia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_austria::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7austriayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAustria() const {
    return *this == Country::austria;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_azerbaijan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10azerbaijanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAzerbaijan() const {
    return *this == Country::azerbaijan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_bahrain::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7bahrainyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBahrain() const {
    return *this == Country::bahrain;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_bangladesh::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10bangladeshyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBangladesh() const {
    return *this == Country::bangladesh;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_belgium::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7belgiumyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBelgium() const {
    return *this == Country::belgium;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_bosniaAndHerzegovina::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO20bosniaAndHerzegovinayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBosniaAndHerzegovina() const {
    return *this == Country::bosniaAndHerzegovina;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_brunei::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6bruneiyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBrunei() const {
    return *this == Country::brunei;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_bulgaria::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8bulgariayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBulgaria() const {
    return *this == Country::bulgaria;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_cambodia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8cambodiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCambodia() const {
    return *this == Country::cambodia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_canada::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6canadayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCanada() const {
    return *this == Country::canada;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_chile::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5chileyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isChile() const {
    return *this == Country::chile;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_colombia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8colombiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isColombia() const {
    return *this == Country::colombia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_costaRica::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO9costaRicayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCostaRica() const {
    return *this == Country::costaRica;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_croatia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7croatiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCroatia() const {
    return *this == Country::croatia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_cyprus::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6cyprusyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCyprus() const {
    return *this == Country::cyprus;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_czechia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7czechiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCzechia() const {
    return *this == Country::czechia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_denmark::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7denmarkyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isDenmark() const {
    return *this == Country::denmark;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_dominicanRepublic::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO17dominicanRepublicyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isDominicanRepublic() const {
    return *this == Country::dominicanRepublic;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_egypt::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5egyptyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isEgypt() const {
    return *this == Country::egypt;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_estonia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7estoniayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isEstonia() const {
    return *this == Country::estonia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_finland::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7finlandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isFinland() const {
    return *this == Country::finland;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_france::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6franceyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isFrance() const {
    return *this == Country::france;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_georgia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7georgiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGeorgia() const {
    return *this == Country::georgia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_germany::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7germanyyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGermany() const {
    return *this == Country::germany;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_ghana::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5ghanayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGhana() const {
    return *this == Country::ghana;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_greece::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6greeceyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGreece() const {
    return *this == Country::greece;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_guatemala::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO9guatemalayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGuatemala() const {
    return *this == Country::guatemala;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_hongKong::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8hongKongyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isHongKong() const {
    return *this == Country::hongKong;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_hungary::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7hungaryyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isHungary() const {
    return *this == Country::hungary;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_india::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5indiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isIndia() const {
    return *this == Country::india;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_indonesia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO9indonesiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isIndonesia() const {
    return *this == Country::indonesia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_ireland::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7irelandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isIreland() const {
    return *this == Country::ireland;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_israel::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6israelyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isIsrael() const {
    return *this == Country::israel;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_italy::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5italyyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isItaly() const {
    return *this == Country::italy;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_jordan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6jordanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isJordan() const {
    return *this == Country::jordan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_kazakhstan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10kazakhstanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isKazakhstan() const {
    return *this == Country::kazakhstan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_kenya::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5kenyayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isKenya() const {
    return *this == Country::kenya;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_kosovo::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6kosovoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isKosovo() const {
    return *this == Country::kosovo;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_kuwait::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6kuwaityA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isKuwait() const {
    return *this == Country::kuwait;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_latvia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6latviayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isLatvia() const {
    return *this == Country::latvia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_lithuania::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO9lithuaniayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isLithuania() const {
    return *this == Country::lithuania;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_malaysia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8malaysiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMalaysia() const {
    return *this == Country::malaysia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_maldives::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8maldivesyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMaldives() const {
    return *this == Country::maldives;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_malta::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5maltayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMalta() const {
    return *this == Country::malta;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_mauritius::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO9mauritiusyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMauritius() const {
    return *this == Country::mauritius;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_mexico::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6mexicoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMexico() const {
    return *this == Country::mexico;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_morocco::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7moroccoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMorocco() const {
    return *this == Country::morocco;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_netherlands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO11netherlandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNetherlands() const {
    return *this == Country::netherlands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_newZealand::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10newZealandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNewZealand() const {
    return *this == Country::newZealand;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_nigeria::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7nigeriayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNigeria() const {
    return *this == Country::nigeria;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_pakistan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8pakistanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isPakistan() const {
    return *this == Country::pakistan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_panama::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6panamayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isPanama() const {
    return *this == Country::panama;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_paraguay::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8paraguayyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isParaguay() const {
    return *this == Country::paraguay;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_philippines::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO11philippinesyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isPhilippines() const {
    return *this == Country::philippines;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_poland::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6polandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isPoland() const {
    return *this == Country::poland;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_portugal::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8portugalyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isPortugal() const {
    return *this == Country::portugal;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_puertoRico::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10puertoRicoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isPuertoRico() const {
    return *this == Country::puertoRico;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_qatar::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5qataryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isQatar() const {
    return *this == Country::qatar;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_romania::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7romaniayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isRomania() const {
    return *this == Country::romania;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_russia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6russiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isRussia() const {
    return *this == Country::russia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_saudiArabia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO11saudiArabiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSaudiArabia() const {
    return *this == Country::saudiArabia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_serbia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6serbiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSerbia() const {
    return *this == Country::serbia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_singapore::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO9singaporeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSingapore() const {
    return *this == Country::singapore;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_slovakia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8slovakiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSlovakia() const {
    return *this == Country::slovakia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_slovenia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8sloveniayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSlovenia() const {
    return *this == Country::slovenia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_southAfrica::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO11southAfricayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSouthAfrica() const {
    return *this == Country::southAfrica;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_spain::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5spainyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSpain() const {
    return *this == Country::spain;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_sweden::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6swedenyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSweden() const {
    return *this == Country::sweden;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_switzerland::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO11switzerlandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSwitzerland() const {
    return *this == Country::switzerland;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_taiwan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6taiwanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isTaiwan() const {
    return *this == Country::taiwan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_thailand::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8thailandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isThailand() const {
    return *this == Country::thailand;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_tunisia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7tunisiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isTunisia() const {
    return *this == Country::tunisia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_turkey::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6turkeyyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isTurkey() const {
    return *this == Country::turkey;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_uae::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO3uaeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isUae() const {
    return *this == Country::uae;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_uganda::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6ugandayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isUganda() const {
    return *this == Country::uganda;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_uk::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO2ukyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isUk() const {
    return *this == Country::uk;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_ukraine::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7ukraineyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isUkraine() const {
    return *this == Country::ukraine;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_usa::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO3usayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isUsa() const {
    return *this == Country::usa;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_vietnam::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7vietnamyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isVietnam() const {
    return *this == Country::vietnam;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_brazil::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6brazilyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBrazil() const {
    return *this == Country::brazil;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_norway::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6norwayyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNorway() const {
    return *this == Country::norway;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_oman::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO4omanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isOman() const {
    return *this == Country::oman;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_ecuador::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7ecuadoryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isEcuador() const {
    return *this == Country::ecuador;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_elSalvador::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10elSalvadoryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isElSalvador() const {
    return *this == Country::elSalvador;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_sriLanka::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8sriLankayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSriLanka() const {
    return *this == Country::sriLanka;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_peru::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO4peruyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isPeru() const {
    return *this == Country::peru;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_uruguay::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7uruguayyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isUruguay() const {
    return *this == Country::uruguay;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_bahamas::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7bahamasyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBahamas() const {
    return *this == Country::bahamas;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_bermuda::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7bermudayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBermuda() const {
    return *this == Country::bermuda;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_bolivia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7boliviayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBolivia() const {
    return *this == Country::bolivia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_china::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5chinayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isChina() const {
    return *this == Country::china;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_europeanUnion::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO13europeanUnionyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isEuropeanUnion() const {
    return *this == Country::europeanUnion;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_haiti::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5haitiyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isHaiti() const {
    return *this == Country::haiti;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_honduras::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8hondurasyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isHonduras() const {
    return *this == Country::honduras;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_iceland::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7icelandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isIceland() const {
    return *this == Country::iceland;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_japan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5japanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isJapan() const {
    return *this == Country::japan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_luxembourg::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10luxembourgyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isLuxembourg() const {
    return *this == Country::luxembourg;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_montenegro::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10montenegroyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMontenegro() const {
    return *this == Country::montenegro;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_nicaragua::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO9nicaraguayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNicaragua() const {
    return *this == Country::nicaragua;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_southKorea::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10southKoreayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSouthKorea() const {
    return *this == Country::southKorea;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_venezuela::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO9venezuelayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isVenezuela() const {
    return *this == Country::venezuela;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_afghanistan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO11afghanistanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAfghanistan() const {
    return *this == Country::afghanistan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_alandIslands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO12alandIslandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAlandIslands() const {
    return *this == Country::alandIslands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_americanSamoa::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO13americanSamoayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAmericanSamoa() const {
    return *this == Country::americanSamoa;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_andorra::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7andorrayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAndorra() const {
    return *this == Country::andorra;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_angola::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6angolayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAngola() const {
    return *this == Country::angola;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_anguilla::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8anguillayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAnguilla() const {
    return *this == Country::anguilla;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_antarctica::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10antarcticayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAntarctica() const {
    return *this == Country::antarctica;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_antiguaAndBarbuda::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO17antiguaAndBarbudayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAntiguaAndBarbuda() const {
    return *this == Country::antiguaAndBarbuda;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_armenia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7armeniayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isArmenia() const {
    return *this == Country::armenia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_aruba::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5arubayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isAruba() const {
    return *this == Country::aruba;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_bailiwickOfGuernsey::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO19bailiwickOfGuernseyyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBailiwickOfGuernsey() const {
    return *this == Country::bailiwickOfGuernsey;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_bailiwickOfJersey::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO17bailiwickOfJerseyyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBailiwickOfJersey() const {
    return *this == Country::bailiwickOfJersey;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_barbados::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8barbadosyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBarbados() const {
    return *this == Country::barbados;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_belarus::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7belarusyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBelarus() const {
    return *this == Country::belarus;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_belize::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6belizeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBelize() const {
    return *this == Country::belize;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_benin::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5beninyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBenin() const {
    return *this == Country::benin;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_bhutan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6bhutanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBhutan() const {
    return *this == Country::bhutan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_bonaireSaintEustatiusAndSaba::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO28bonaireSaintEustatiusAndSabayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBonaireSaintEustatiusAndSaba() const {
    return *this == Country::bonaireSaintEustatiusAndSaba;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_botswana::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8botswanayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBotswana() const {
    return *this == Country::botswana;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_bouvetIsland::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO12bouvetIslandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBouvetIsland() const {
    return *this == Country::bouvetIsland;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_britishIndianOceanTerritory::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO27britishIndianOceanTerritoryyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBritishIndianOceanTerritory() const {
    return *this == Country::britishIndianOceanTerritory;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_burkinaFaso::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO11burkinaFasoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBurkinaFaso() const {
    return *this == Country::burkinaFaso;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_burundi::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7burundiyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isBurundi() const {
    return *this == Country::burundi;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_cameroon::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8cameroonyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCameroon() const {
    return *this == Country::cameroon;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_capeVerde::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO9capeVerdeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCapeVerde() const {
    return *this == Country::capeVerde;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_caribbeanNetherlands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO20caribbeanNetherlandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCaribbeanNetherlands() const {
    return *this == Country::caribbeanNetherlands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_caymanIslands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO13caymanIslandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCaymanIslands() const {
    return *this == Country::caymanIslands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_centralAfricanRepublic::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO22centralAfricanRepublicyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCentralAfricanRepublic() const {
    return *this == Country::centralAfricanRepublic;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_chad::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO4chadyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isChad() const {
    return *this == Country::chad;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_christmasIsland::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO15christmasIslandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isChristmasIsland() const {
    return *this == Country::christmasIsland;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_cocosIslands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO12cocosIslandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCocosIslands() const {
    return *this == Country::cocosIslands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_comoros::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7comorosyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isComoros() const {
    return *this == Country::comoros;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_congo::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5congoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCongo() const {
    return *this == Country::congo;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_cookIslands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO11cookIslandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCookIslands() const {
    return *this == Country::cookIslands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_cuba::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO4cubayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCuba() const {
    return *this == Country::cuba;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_curacao::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7curacaoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isCuracao() const {
    return *this == Country::curacao;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_democraticRepublicOfTheCongo::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO28democraticRepublicOfTheCongoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isDemocraticRepublicOfTheCongo() const {
    return *this == Country::democraticRepublicOfTheCongo;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_djibouti::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8djiboutiyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isDjibouti() const {
    return *this == Country::djibouti;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_dominica::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8dominicayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isDominica() const {
    return *this == Country::dominica;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_eastTimor::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO9eastTimoryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isEastTimor() const {
    return *this == Country::eastTimor;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_equatorialGuinea::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO16equatorialGuineayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isEquatorialGuinea() const {
    return *this == Country::equatorialGuinea;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_eritrea::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7eritreayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isEritrea() const {
    return *this == Country::eritrea;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_ethiopia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8ethiopiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isEthiopia() const {
    return *this == Country::ethiopia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_falklandIslands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO15falklandIslandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isFalklandIslands() const {
    return *this == Country::falklandIslands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_faroeIslands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO12faroeIslandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isFaroeIslands() const {
    return *this == Country::faroeIslands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_federatedStatesOfMicronesia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO27federatedStatesOfMicronesiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isFederatedStatesOfMicronesia() const {
    return *this == Country::federatedStatesOfMicronesia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_fiji::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO4fijiyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isFiji() const {
    return *this == Country::fiji;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_frenchGuiana::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO12frenchGuianayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isFrenchGuiana() const {
    return *this == Country::frenchGuiana;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_frenchPolynesia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO15frenchPolynesiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isFrenchPolynesia() const {
    return *this == Country::frenchPolynesia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_frenchSouthernTerritories::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO25frenchSouthernTerritoriesyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isFrenchSouthernTerritories() const {
    return *this == Country::frenchSouthernTerritories;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_gabon::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5gabonyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGabon() const {
    return *this == Country::gabon;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_gambia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6gambiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGambia() const {
    return *this == Country::gambia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_gibraltar::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO9gibraltaryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGibraltar() const {
    return *this == Country::gibraltar;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_greenland::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO9greenlandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGreenland() const {
    return *this == Country::greenland;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_grenada::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7grenadayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGrenada() const {
    return *this == Country::grenada;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_guadeloupe::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10guadeloupeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGuadeloupe() const {
    return *this == Country::guadeloupe;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_guam::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO4guamyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGuam() const {
    return *this == Country::guam;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_guinea::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6guineayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGuinea() const {
    return *this == Country::guinea;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_guineaBissau::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO12guineaBissauyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGuineaBissau() const {
    return *this == Country::guineaBissau;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_guyana::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6guyanayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isGuyana() const {
    return *this == Country::guyana;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_heardIslandAndMcdonaldIslands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO29heardIslandAndMcdonaldIslandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isHeardIslandAndMcdonaldIslands() const {
    return *this == Country::heardIslandAndMcdonaldIslands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_iran::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO4iranyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isIran() const {
    return *this == Country::iran;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_iraq::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO4iraqyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isIraq() const {
    return *this == Country::iraq;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_isleOfMan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO9isleOfManyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isIsleOfMan() const {
    return *this == Country::isleOfMan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_ivoryCoast::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10ivoryCoastyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isIvoryCoast() const {
    return *this == Country::ivoryCoast;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_jamaica::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7jamaicayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isJamaica() const {
    return *this == Country::jamaica;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_kiribati::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8kiribatiyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isKiribati() const {
    return *this == Country::kiribati;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_kyrgyzstan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10kyrgyzstanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isKyrgyzstan() const {
    return *this == Country::kyrgyzstan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_laos::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO4laosyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isLaos() const {
    return *this == Country::laos;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_lebanon::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7lebanonyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isLebanon() const {
    return *this == Country::lebanon;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_lesotho::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7lesothoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isLesotho() const {
    return *this == Country::lesotho;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_liberia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7liberiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isLiberia() const {
    return *this == Country::liberia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_libya::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5libyayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isLibya() const {
    return *this == Country::libya;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_liechtenstein::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO13liechtensteinyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isLiechtenstein() const {
    return *this == Country::liechtenstein;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_macau::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5macauyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMacau() const {
    return *this == Country::macau;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_madagascar::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10madagascaryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMadagascar() const {
    return *this == Country::madagascar;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_malawi::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6malawiyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMalawi() const {
    return *this == Country::malawi;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_mali::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO4maliyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMali() const {
    return *this == Country::mali;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_marshallIslands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO15marshallIslandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMarshallIslands() const {
    return *this == Country::marshallIslands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_martinique::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10martiniqueyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMartinique() const {
    return *this == Country::martinique;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_mauritania::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10mauritaniayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMauritania() const {
    return *this == Country::mauritania;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_mayotte::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7mayotteyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMayotte() const {
    return *this == Country::mayotte;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_moldova::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7moldovayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMoldova() const {
    return *this == Country::moldova;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_monaco::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6monacoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMonaco() const {
    return *this == Country::monaco;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_mongolia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8mongoliayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMongolia() const {
    return *this == Country::mongolia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_montserrat::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10montserratyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMontserrat() const {
    return *this == Country::montserrat;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_mozambique::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10mozambiqueyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMozambique() const {
    return *this == Country::mozambique;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_myanmar::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7myanmaryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isMyanmar() const {
    return *this == Country::myanmar;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_namibia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7namibiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNamibia() const {
    return *this == Country::namibia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_nauru::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5nauruyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNauru() const {
    return *this == Country::nauru;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_nepal::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5nepalyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNepal() const {
    return *this == Country::nepal;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_newCaledonia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO12newCaledoniayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNewCaledonia() const {
    return *this == Country::newCaledonia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_niger::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5nigeryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNiger() const {
    return *this == Country::niger;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_niue::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO4niueyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNiue() const {
    return *this == Country::niue;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_norfolkIsland::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO13norfolkIslandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNorfolkIsland() const {
    return *this == Country::norfolkIsland;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_northernCyprus::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO14northernCyprusyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNorthernCyprus() const {
    return *this == Country::northernCyprus;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_northernMarianaIslands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO22northernMarianaIslandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNorthernMarianaIslands() const {
    return *this == Country::northernMarianaIslands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_northKorea::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10northKoreayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNorthKorea() const {
    return *this == Country::northKorea;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_northMacedonia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO14northMacedoniayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isNorthMacedonia() const {
    return *this == Country::northMacedonia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_palau::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5palauyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isPalau() const {
    return *this == Country::palau;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_palestine::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO9palestineyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isPalestine() const {
    return *this == Country::palestine;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_papuaNewGuinea::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO14papuaNewGuineayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isPapuaNewGuinea() const {
    return *this == Country::papuaNewGuinea;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_pitcairn::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8pitcairnyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isPitcairn() const {
    return *this == Country::pitcairn;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_reunion::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7reunionyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isReunion() const {
    return *this == Country::reunion;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_rwanda::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6rwandayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isRwanda() const {
    return *this == Country::rwanda;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_saintBarthelemy::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO15saintBarthelemyyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSaintBarthelemy() const {
    return *this == Country::saintBarthelemy;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_saintHelenaAscensionAndTristianDaCunha::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO38saintHelenaAscensionAndTristianDaCunhayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSaintHelenaAscensionAndTristianDaCunha() const {
    return *this == Country::saintHelenaAscensionAndTristianDaCunha;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_saintKittsAndNevis::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO18saintKittsAndNevisyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSaintKittsAndNevis() const {
    return *this == Country::saintKittsAndNevis;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_saintLucia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10saintLuciayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSaintLucia() const {
    return *this == Country::saintLucia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_saintMartin::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO11saintMartinyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSaintMartin() const {
    return *this == Country::saintMartin;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_saintPierreAndMiquelon::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO22saintPierreAndMiquelonyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSaintPierreAndMiquelon() const {
    return *this == Country::saintPierreAndMiquelon;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_saintVincentAndTheGrenadines::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO28saintVincentAndTheGrenadinesyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSaintVincentAndTheGrenadines() const {
    return *this == Country::saintVincentAndTheGrenadines;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_samoa::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5samoayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSamoa() const {
    return *this == Country::samoa;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_sanMarino::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO9sanMarinoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSanMarino() const {
    return *this == Country::sanMarino;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_saoTomeAndPrincipe::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO18saoTomeAndPrincipeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSaoTomeAndPrincipe() const {
    return *this == Country::saoTomeAndPrincipe;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_senegal::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7senegalyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSenegal() const {
    return *this == Country::senegal;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_seychelles::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10seychellesyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSeychelles() const {
    return *this == Country::seychelles;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_sierraLeone::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO11sierraLeoneyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSierraLeone() const {
    return *this == Country::sierraLeone;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_sintMaarten::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO11sintMaartenyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSintMaarten() const {
    return *this == Country::sintMaarten;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_solomonIslands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO14solomonIslandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSolomonIslands() const {
    return *this == Country::solomonIslands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_somalia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7somaliayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSomalia() const {
    return *this == Country::somalia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_southGeorgiaAndTheSouthSandwichIslands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO38southGeorgiaAndTheSouthSandwichIslandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSouthGeorgiaAndTheSouthSandwichIslands() const {
    return *this == Country::southGeorgiaAndTheSouthSandwichIslands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_southSudan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10southSudanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSouthSudan() const {
    return *this == Country::southSudan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_sudan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5sudanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSudan() const {
    return *this == Country::sudan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_suriname::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8surinameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSuriname() const {
    return *this == Country::suriname;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_svalbardAndJanMayen::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO19svalbardAndJanMayenyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSvalbardAndJanMayen() const {
    return *this == Country::svalbardAndJanMayen;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_eswatini::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8eswatiniyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isEswatini() const {
    return *this == Country::eswatini;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_syria::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5syriayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSyria() const {
    return *this == Country::syria;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_tajikistan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10tajikistanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isTajikistan() const {
    return *this == Country::tajikistan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_tanzania::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8tanzaniayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isTanzania() const {
    return *this == Country::tanzania;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_togo::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO4togoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isTogo() const {
    return *this == Country::togo;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_tokelau::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7tokelauyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isTokelau() const {
    return *this == Country::tokelau;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_tonga::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5tongayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isTonga() const {
    return *this == Country::tonga;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_trinidadAndTobago::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO17trinidadAndTobagoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isTrinidadAndTobago() const {
    return *this == Country::trinidadAndTobago;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_turkmenistan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO12turkmenistanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isTurkmenistan() const {
    return *this == Country::turkmenistan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_turksAndCaicosIslands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO21turksAndCaicosIslandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isTurksAndCaicosIslands() const {
    return *this == Country::turksAndCaicosIslands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_tuvalu::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6tuvaluyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isTuvalu() const {
    return *this == Country::tuvalu;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_unitedStatesMinorOutlyingIslands::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO32unitedStatesMinorOutlyingIslandsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isUnitedStatesMinorOutlyingIslands() const {
    return *this == Country::unitedStatesMinorOutlyingIslands;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_uzbekistan::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10uzbekistanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isUzbekistan() const {
    return *this == Country::uzbekistan;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_vanuatu::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO7vanuatuyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isVanuatu() const {
    return *this == Country::vanuatu;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_vaticanCity::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO11vaticanCityyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isVaticanCity() const {
    return *this == Country::vaticanCity;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_virginIslandsBritish::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO20virginIslandsBritishyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isVirginIslandsBritish() const {
    return *this == Country::virginIslandsBritish;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_virginIslandsUs::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO15virginIslandsUsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isVirginIslandsUs() const {
    return *this == Country::virginIslandsUs;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_wallisAndFutuna::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO15wallisAndFutunayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isWallisAndFutuna() const {
    return *this == Country::wallisAndFutuna;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_westernSahara::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO13westernSaharayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isWesternSahara() const {
    return *this == Country::westernSahara;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_yemen::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO5yemenyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isYemen() const {
    return *this == Country::yemen;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_yugoslavia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO10yugoslaviayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isYugoslavia() const {
    return *this == Country::yugoslavia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_zambia::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO6zambiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isZambia() const {
    return *this == Country::zambia;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_zimbabwe::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO8zimbabweyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isZimbabwe() const {
    return *this == Country::zimbabwe;
  }
  SWIFT_INLINE_THUNK Country Country::_impl_schengen_area::operator()() const {
    auto result = Country::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID7CountryO13schengen_areayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Country::isSchengen_area() const {
    return *this == Country::schengen_area;
  }
  SWIFT_INLINE_THUNK  bool Country::isUnknownDefault() const {
    return *this == Country::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<Country> Country::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<Country>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID7CountryO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String Country::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID7CountryO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK UIImage *_Nullable CroppedImageResult::getUiImage() const {
return (__bridge_transfer UIImage *)(__bridge void *)_impl::$s7BlinkID18CroppedImageResultV02uiD0So7UIImageCSgvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Int CroppedImageSettings::getDotsPerInch() const {
  return _impl::$s7BlinkID20CroppedImageSettingsV11dotsPerInchSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void CroppedImageSettings::setDotsPerInch(swift::Int value) {
  _impl::$s7BlinkID20CroppedImageSettingsV11dotsPerInchSivs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK float CroppedImageSettings::getExtensionFactor() const {
  return _impl::$s7BlinkID20CroppedImageSettingsV15extensionFactorSfvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void CroppedImageSettings::setExtensionFactor(float value) {
  _impl::$s7BlinkID20CroppedImageSettingsV15extensionFactorSfvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool CroppedImageSettings::getReturnDocumentImage() const {
  return _impl::$s7BlinkID20CroppedImageSettingsV014returnDocumentD0Sbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void CroppedImageSettings::setReturnDocumentImage(bool value) {
  _impl::$s7BlinkID20CroppedImageSettingsV014returnDocumentD0Sbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool CroppedImageSettings::getReturnFaceImage() const {
  return _impl::$s7BlinkID20CroppedImageSettingsV010returnFaceD0Sbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void CroppedImageSettings::setReturnFaceImage(bool value) {
  _impl::$s7BlinkID20CroppedImageSettingsV010returnFaceD0Sbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool CroppedImageSettings::getReturnSignatureImage() const {
  return _impl::$s7BlinkID20CroppedImageSettingsV015returnSignatureD0Sbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void CroppedImageSettings::setReturnSignatureImage(bool value) {
  _impl::$s7BlinkID20CroppedImageSettingsV015returnSignatureD0Sbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK CroppedImageSettings CroppedImageSettings::init(swift::Int dotsPerInch, float extensionFactor, bool returnDocumentImage, bool returnFaceImage, bool returnSignatureImage) {
  return _impl::_impl_CroppedImageSettings::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID20CroppedImageSettingsV11dotsPerInch15extensionFactor014returnDocumentD00k4FaceD00k9SignatureD0ACSi_SfS3btcfC(result, dotsPerInch, extensionFactor, returnDocumentImage, returnFaceImage, returnSignatureImage);
  });
  }
  SWIFT_INLINE_THUNK DataMatchFieldType DataMatchFieldType::_impl_dateOfBirth::operator()() const {
    auto result = DataMatchFieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID18DataMatchFieldTypeO11dateOfBirthyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DataMatchFieldType::isDateOfBirth() const {
    return *this == DataMatchFieldType::dateOfBirth;
  }
  SWIFT_INLINE_THUNK DataMatchFieldType DataMatchFieldType::_impl_dateOfExpiry::operator()() const {
    auto result = DataMatchFieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID18DataMatchFieldTypeO12dateOfExpiryyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DataMatchFieldType::isDateOfExpiry() const {
    return *this == DataMatchFieldType::dateOfExpiry;
  }
  SWIFT_INLINE_THUNK DataMatchFieldType DataMatchFieldType::_impl_documentNumber::operator()() const {
    auto result = DataMatchFieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID18DataMatchFieldTypeO14documentNumberyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DataMatchFieldType::isDocumentNumber() const {
    return *this == DataMatchFieldType::documentNumber;
  }
  SWIFT_INLINE_THUNK DataMatchFieldType DataMatchFieldType::_impl_documentAdditionalNumber::operator()() const {
    auto result = DataMatchFieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID18DataMatchFieldTypeO24documentAdditionalNumberyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DataMatchFieldType::isDocumentAdditionalNumber() const {
    return *this == DataMatchFieldType::documentAdditionalNumber;
  }
  SWIFT_INLINE_THUNK DataMatchFieldType DataMatchFieldType::_impl_documentOptionalAdditionalNumber::operator()() const {
    auto result = DataMatchFieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID18DataMatchFieldTypeO32documentOptionalAdditionalNumberyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DataMatchFieldType::isDocumentOptionalAdditionalNumber() const {
    return *this == DataMatchFieldType::documentOptionalAdditionalNumber;
  }
  SWIFT_INLINE_THUNK DataMatchFieldType DataMatchFieldType::_impl_personalIdNumber::operator()() const {
    auto result = DataMatchFieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID18DataMatchFieldTypeO16personalIdNumberyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DataMatchFieldType::isPersonalIdNumber() const {
    return *this == DataMatchFieldType::personalIdNumber;
  }
  SWIFT_INLINE_THUNK  bool DataMatchFieldType::isUnknownDefault() const {
    return *this == DataMatchFieldType::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int DataMatchFieldType::getHashValue() const {
  return _impl::$s7BlinkID18DataMatchFieldTypeO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Array<FieldState> DataMatchResult::getStates() const {
  return swift::_impl::_impl_Array<FieldState>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_void_ptr_0_8(result, _impl::$s7BlinkID15DataMatchResultV6statesSayAA10FieldStateVGvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK DataMatchState DataMatchResult::getOverallState() const {
  return _impl::_impl_DataMatchState::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID15DataMatchResultV12overallStateAA0cdG0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK DataMatchState DataMatchResult::getState(const DataMatchFieldType& fieldType) const {
  return _impl::_impl_DataMatchState::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID15DataMatchResultV8getState3forAA0cdG0OAA0cD9FieldTypeO_tF(result, _impl::_impl_DataMatchFieldType::getOpaquePointer(fieldType), _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK DataMatchState DataMatchState::_impl_notPerformed::operator()() const {
    auto result = DataMatchState::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID14DataMatchStateO12notPerformedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DataMatchState::isNotPerformed() const {
    return *this == DataMatchState::notPerformed;
  }
  SWIFT_INLINE_THUNK DataMatchState DataMatchState::_impl_failed::operator()() const {
    auto result = DataMatchState::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID14DataMatchStateO6failedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DataMatchState::isFailed() const {
    return *this == DataMatchState::failed;
  }
  SWIFT_INLINE_THUNK DataMatchState DataMatchState::_impl_success::operator()() const {
    auto result = DataMatchState::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID14DataMatchStateO7successyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DataMatchState::isSuccess() const {
    return *this == DataMatchState::success;
  }
  SWIFT_INLINE_THUNK  bool DataMatchState::isUnknownDefault() const {
    return *this == DataMatchState::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int DataMatchState::getHashValue() const {
  return _impl::$s7BlinkID14DataMatchStateO9hashValueSivg(_getOpaquePointer());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Optional<swift::Int> DateResult<T_0_0>::getDay() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return swift::_impl::_impl_Optional<swift::Int>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_uint8_t_8_9(result, _impl::$s7BlinkID10DateResultV3daySiSgvg(swift::TypeMetadataTrait<DateResult<T_0_0>>::getTypeMetadata(), _getOpaquePointer()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Optional<swift::Int> DateResult<T_0_0>::getMonth() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return swift::_impl::_impl_Optional<swift::Int>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_uint8_t_8_9(result, _impl::$s7BlinkID10DateResultV5monthSiSgvg(swift::TypeMetadataTrait<DateResult<T_0_0>>::getTypeMetadata(), _getOpaquePointer()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Optional<swift::Int> DateResult<T_0_0>::getYear() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return swift::_impl::_impl_Optional<swift::Int>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_uint8_t_8_9(result, _impl::$s7BlinkID10DateResultV4yearSiSgvg(swift::TypeMetadataTrait<DateResult<T_0_0>>::getTypeMetadata(), _getOpaquePointer()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK bool DateResult<T_0_0>::getFilledByDomainKnowledge() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$s7BlinkID10DateResultV23filledByDomainKnowledgeSbvg(swift::TypeMetadataTrait<DateResult<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK bool DateResult<T_0_0>::getSuccessfullyParsed() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$s7BlinkID10DateResultV18successfullyParsedSbvg(swift::TypeMetadataTrait<DateResult<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK T_0_0 DateResult<T_0_0>::getOriginalString() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
  if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
  void *returnValue;
  _impl::$s7BlinkID10DateResultV14originalStringxvg(reinterpret_cast<void *>(&returnValue), swift::TypeMetadataTrait<DateResult<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  return ::swift::_impl::implClassFor<T_0_0>::type::makeRetained(returnValue);
  } else if constexpr (::swift::_impl::isValueType<T_0_0>) {
  return ::swift::_impl::implClassFor<T_0_0>::type::returnNewValue([&](void * _Nonnull returnValue) SWIFT_INLINE_THUNK_ATTRIBUTES {
_impl::$s7BlinkID10DateResultV14originalStringxvg(returnValue, swift::TypeMetadataTrait<DateResult<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  } else if constexpr (::swift::_impl::isSwiftBridgedCxxRecord<T_0_0>) {
alignas(alignof(T_0_0)) char storage[sizeof(T_0_0)];
auto * _Nonnull storageObjectPtr = reinterpret_cast<T_0_0 *>(storage);
_impl::$s7BlinkID10DateResultV14originalStringxvg(storage, swift::TypeMetadataTrait<DateResult<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
T_0_0 result(static_cast<T_0_0 &&>(*storageObjectPtr));
storageObjectPtr->~T_0_0();
return result;
  } else {
  T_0_0 returnValue;
_impl::$s7BlinkID10DateResultV14originalStringxvg(reinterpret_cast<void *>(&returnValue), swift::TypeMetadataTrait<DateResult<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  return returnValue;
  }
#pragma clang diagnostic pop
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::String DateResult<T_0_0>::toString() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID10DateResultV8toStringSSySSRszrlF(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<ScanningSide> DetailedCroppedImageResult::getSide() const {
  return swift::_impl::_impl_Optional<ScanningSide>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID26DetailedCroppedImageResultV4sideAA12ScanningSideOSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<RectangleF> DetailedCroppedImageResult::getLocation() const {
  return swift::_impl::_impl_Optional<RectangleF>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID26DetailedCroppedImageResultV8locationAA10RectangleFVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK UIImage *_Nullable DetailedCroppedImageResult::getUiImage() const {
return (__bridge_transfer UIImage *)(__bridge void *)_impl::$s7BlinkID26DetailedCroppedImageResultV02uiE0So7UIImageCSgvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK FieldType DetailedFieldType::getFieldType() const {
  return _impl::_impl_FieldType::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID17DetailedFieldTypeV05fieldE0AA0dE0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void DetailedFieldType::setFieldType(const FieldType& value) {
  alignas(alignof(FieldType)) char copyBuffer_consumedParamCopy_value[sizeof(FieldType)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) FieldType(value));
  swift::_impl::ConsumedValueStorageDestroyer<FieldType> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID17DetailedFieldTypeV05fieldE0AA0dE0Ovs(_impl::_impl_FieldType::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK AlphabetType DetailedFieldType::getAlphabetType() const {
  return _impl::_impl_AlphabetType::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID17DetailedFieldTypeV08alphabetE0AA08AlphabetE0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void DetailedFieldType::setAlphabetType(const AlphabetType& value) {
  alignas(alignof(AlphabetType)) char copyBuffer_consumedParamCopy_value[sizeof(AlphabetType)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) AlphabetType(value));
  swift::_impl::ConsumedValueStorageDestroyer<AlphabetType> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID17DetailedFieldTypeV08alphabetE0AA08AlphabetE0Ovs(_impl::_impl_AlphabetType::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK DetailedFieldType DetailedFieldType::init(const FieldType& fieldType, const AlphabetType& alphabetType) {
  alignas(alignof(FieldType)) char copyBuffer_consumedParamCopy_fieldType[sizeof(FieldType)];
  auto &consumedParamCopy_fieldType = *(new(copyBuffer_consumedParamCopy_fieldType) FieldType(fieldType));
  swift::_impl::ConsumedValueStorageDestroyer<FieldType> storageGuard_consumedParamCopy_fieldType(consumedParamCopy_fieldType);
  alignas(alignof(AlphabetType)) char copyBuffer_consumedParamCopy_alphabetType[sizeof(AlphabetType)];
  auto &consumedParamCopy_alphabetType = *(new(copyBuffer_consumedParamCopy_alphabetType) AlphabetType(alphabetType));
  swift::_impl::ConsumedValueStorageDestroyer<AlphabetType> storageGuard_consumedParamCopy_alphabetType(consumedParamCopy_alphabetType);
  return _impl::_impl_DetailedFieldType::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID17DetailedFieldTypeV05fieldE008alphabetE0AcA0dE0O_AA08AlphabetE0OtcfC(result, _impl::_impl_FieldType::getOpaquePointer(consumedParamCopy_fieldType), _impl::_impl_AlphabetType::getOpaquePointer(consumedParamCopy_alphabetType));
  });
  }
  SWIFT_INLINE_THUNK DetectionLevel DetectionLevel::_impl_off::operator()() const {
    auto result = DetectionLevel::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID14DetectionLevelO3offyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DetectionLevel::isOff() const {
    return *this == DetectionLevel::off;
  }
  SWIFT_INLINE_THUNK DetectionLevel DetectionLevel::_impl_low::operator()() const {
    auto result = DetectionLevel::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID14DetectionLevelO3lowyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DetectionLevel::isLow() const {
    return *this == DetectionLevel::low;
  }
  SWIFT_INLINE_THUNK DetectionLevel DetectionLevel::_impl_mid::operator()() const {
    auto result = DetectionLevel::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID14DetectionLevelO3midyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DetectionLevel::isMid() const {
    return *this == DetectionLevel::mid;
  }
  SWIFT_INLINE_THUNK DetectionLevel DetectionLevel::_impl_high::operator()() const {
    auto result = DetectionLevel::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID14DetectionLevelO4highyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DetectionLevel::isHigh() const {
    return *this == DetectionLevel::high;
  }
  SWIFT_INLINE_THUNK  bool DetectionLevel::isUnknownDefault() const {
    return *this == DetectionLevel::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int DetectionLevel::getHashValue() const {
  return _impl::$s7BlinkID14DetectionLevelO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK DetectionStatus DetectionStatus::_impl_failed::operator()() const {
    auto result = DetectionStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15DetectionStatusO6failedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DetectionStatus::isFailed() const {
    return *this == DetectionStatus::failed;
  }
  SWIFT_INLINE_THUNK DetectionStatus DetectionStatus::_impl_success::operator()() const {
    auto result = DetectionStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15DetectionStatusO7successyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DetectionStatus::isSuccess() const {
    return *this == DetectionStatus::success;
  }
  SWIFT_INLINE_THUNK DetectionStatus DetectionStatus::_impl_cameraTooFar::operator()() const {
    auto result = DetectionStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15DetectionStatusO12cameraTooFaryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DetectionStatus::isCameraTooFar() const {
    return *this == DetectionStatus::cameraTooFar;
  }
  SWIFT_INLINE_THUNK DetectionStatus DetectionStatus::_impl_cameraTooClose::operator()() const {
    auto result = DetectionStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15DetectionStatusO14cameraTooCloseyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DetectionStatus::isCameraTooClose() const {
    return *this == DetectionStatus::cameraTooClose;
  }
  SWIFT_INLINE_THUNK DetectionStatus DetectionStatus::_impl_cameraAngleTooSteep::operator()() const {
    auto result = DetectionStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15DetectionStatusO19cameraAngleTooSteepyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DetectionStatus::isCameraAngleTooSteep() const {
    return *this == DetectionStatus::cameraAngleTooSteep;
  }
  SWIFT_INLINE_THUNK DetectionStatus DetectionStatus::_impl_documentTooCloseToCameraEdge::operator()() const {
    auto result = DetectionStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15DetectionStatusO28documentTooCloseToCameraEdgeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DetectionStatus::isDocumentTooCloseToCameraEdge() const {
    return *this == DetectionStatus::documentTooCloseToCameraEdge;
  }
  SWIFT_INLINE_THUNK DetectionStatus DetectionStatus::_impl_documentPartiallyVisible::operator()() const {
    auto result = DetectionStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15DetectionStatusO24documentPartiallyVisibleyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DetectionStatus::isDocumentPartiallyVisible() const {
    return *this == DetectionStatus::documentPartiallyVisible;
  }
  SWIFT_INLINE_THUNK DetectionStatus DetectionStatus::_impl_fallbackSuccess::operator()() const {
    auto result = DetectionStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15DetectionStatusO15fallbackSuccessyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DetectionStatus::isFallbackSuccess() const {
    return *this == DetectionStatus::fallbackSuccess;
  }
  SWIFT_INLINE_THUNK  bool DetectionStatus::isUnknownDefault() const {
    return *this == DetectionStatus::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<DetectionStatus> DetectionStatus::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<DetectionStatus>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID15DetectionStatusO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String DetectionStatus::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID15DetectionStatusO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK DocumentFilter DocumentAnonymizationSettings::getDocumentFilter() const {
  return _impl::_impl_DocumentFilter::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID29DocumentAnonymizationSettingsV14documentFilterAA0cG0Vvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void DocumentAnonymizationSettings::setDocumentFilter(const DocumentFilter& value) {
  alignas(alignof(DocumentFilter)) char copyBuffer_consumedParamCopy_value[sizeof(DocumentFilter)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) DocumentFilter(value));
  swift::_impl::ConsumedValueStorageDestroyer<DocumentFilter> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID29DocumentAnonymizationSettingsV14documentFilterAA0cG0Vvs(_impl::_impl_DocumentFilter::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Array<FieldType> DocumentAnonymizationSettings::getFields() const {
  return swift::_impl::_impl_Array<FieldType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_void_ptr_0_8(result, _impl::$s7BlinkID29DocumentAnonymizationSettingsV6fieldsSayAA9FieldTypeOGvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void DocumentAnonymizationSettings::setFields(const swift::Array<FieldType>& value) {
  alignas(alignof(swift::Array<FieldType>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Array<FieldType>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Array<FieldType>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Array<FieldType>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID29DocumentAnonymizationSettingsV6fieldsSayAA9FieldTypeOGvs(_impl::swift_interop_passDirect_BlinkID_void_ptr_0_8(swift::_impl::_impl_Array<FieldType>::getOpaquePointer(consumedParamCopy_value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<DocumentNumberAnonymizationSettings> DocumentAnonymizationSettings::getDocumentNumberAnonymizationSettings() const {
  return swift::_impl::_impl_Optional<DocumentNumberAnonymizationSettings>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID29DocumentAnonymizationSettingsV014documentNumberdE0AA0cgdE0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void DocumentAnonymizationSettings::setDocumentNumberAnonymizationSettings(const swift::Optional<DocumentNumberAnonymizationSettings>& value) {
  alignas(alignof(swift::Optional<DocumentNumberAnonymizationSettings>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<DocumentNumberAnonymizationSettings>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<DocumentNumberAnonymizationSettings>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<DocumentNumberAnonymizationSettings>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID29DocumentAnonymizationSettingsV014documentNumberdE0AA0cgdE0VSgvs(swift::_impl::_impl_Optional<DocumentNumberAnonymizationSettings>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK DocumentAnonymizationSettings DocumentAnonymizationSettings::init(const DocumentFilter& documentFilter, const swift::Array<FieldType>& fields, const swift::Optional<DocumentNumberAnonymizationSettings>& documentNumberAnonymizationSettings) {
  alignas(alignof(DocumentFilter)) char copyBuffer_consumedParamCopy_documentFilter[sizeof(DocumentFilter)];
  auto &consumedParamCopy_documentFilter = *(new(copyBuffer_consumedParamCopy_documentFilter) DocumentFilter(documentFilter));
  swift::_impl::ConsumedValueStorageDestroyer<DocumentFilter> storageGuard_consumedParamCopy_documentFilter(consumedParamCopy_documentFilter);
  alignas(alignof(swift::Array<FieldType>)) char copyBuffer_consumedParamCopy_fields[sizeof(swift::Array<FieldType>)];
  auto &consumedParamCopy_fields = *(new(copyBuffer_consumedParamCopy_fields) swift::Array<FieldType>(fields));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Array<FieldType>> storageGuard_consumedParamCopy_fields(consumedParamCopy_fields);
  alignas(alignof(swift::Optional<DocumentNumberAnonymizationSettings>)) char copyBuffer_consumedParamCopy_documentNumberAnonymizationSettings[sizeof(swift::Optional<DocumentNumberAnonymizationSettings>)];
  auto &consumedParamCopy_documentNumberAnonymizationSettings = *(new(copyBuffer_consumedParamCopy_documentNumberAnonymizationSettings) swift::Optional<DocumentNumberAnonymizationSettings>(documentNumberAnonymizationSettings));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<DocumentNumberAnonymizationSettings>> storageGuard_consumedParamCopy_documentNumberAnonymizationSettings(consumedParamCopy_documentNumberAnonymizationSettings);
  return _impl::_impl_DocumentAnonymizationSettings::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID29DocumentAnonymizationSettingsV14documentFilter6fields0f6NumberdE0AcA0cG0V_SayAA9FieldTypeOGAA0cidE0VSgtcfC(result, _impl::_impl_DocumentFilter::getOpaquePointer(consumedParamCopy_documentFilter), _impl::swift_interop_passDirect_BlinkID_void_ptr_0_8(swift::_impl::_impl_Array<FieldType>::getOpaquePointer(consumedParamCopy_fields)), swift::_impl::_impl_Optional<DocumentNumberAnonymizationSettings>::getOpaquePointer(consumedParamCopy_documentNumberAnonymizationSettings));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<Country> DocumentFilter::getCountry() const {
  return swift::_impl::_impl_Optional<Country>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID14DocumentFilterV7countryAA7CountryOSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void DocumentFilter::setCountry(const swift::Optional<Country>& value) {
  alignas(alignof(swift::Optional<Country>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<Country>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<Country>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<Country>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID14DocumentFilterV7countryAA7CountryOSgvs(swift::_impl::_impl_Optional<Country>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<Region> DocumentFilter::getRegion() const {
  return swift::_impl::_impl_Optional<Region>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID14DocumentFilterV6regionAA6RegionOSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void DocumentFilter::setRegion(const swift::Optional<Region>& value) {
  alignas(alignof(swift::Optional<Region>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<Region>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<Region>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<Region>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID14DocumentFilterV6regionAA6RegionOSgvs(swift::_impl::_impl_Optional<Region>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<DocumentType> DocumentFilter::getDocumentType() const {
  return swift::_impl::_impl_Optional<DocumentType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID14DocumentFilterV12documentTypeAA0cF0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void DocumentFilter::setDocumentType(const swift::Optional<DocumentType>& value) {
  alignas(alignof(swift::Optional<DocumentType>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<DocumentType>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<DocumentType>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<DocumentType>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID14DocumentFilterV12documentTypeAA0cF0OSgvs(swift::_impl::_impl_Optional<DocumentType>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK DocumentFilter DocumentFilter::init(const swift::Optional<Country>& country, const swift::Optional<Region>& region, const swift::Optional<DocumentType>& documentType) {
  alignas(alignof(swift::Optional<Country>)) char copyBuffer_consumedParamCopy_country[sizeof(swift::Optional<Country>)];
  auto &consumedParamCopy_country = *(new(copyBuffer_consumedParamCopy_country) swift::Optional<Country>(country));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<Country>> storageGuard_consumedParamCopy_country(consumedParamCopy_country);
  alignas(alignof(swift::Optional<Region>)) char copyBuffer_consumedParamCopy_region[sizeof(swift::Optional<Region>)];
  auto &consumedParamCopy_region = *(new(copyBuffer_consumedParamCopy_region) swift::Optional<Region>(region));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<Region>> storageGuard_consumedParamCopy_region(consumedParamCopy_region);
  alignas(alignof(swift::Optional<DocumentType>)) char copyBuffer_consumedParamCopy_documentType[sizeof(swift::Optional<DocumentType>)];
  auto &consumedParamCopy_documentType = *(new(copyBuffer_consumedParamCopy_documentType) swift::Optional<DocumentType>(documentType));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<DocumentType>> storageGuard_consumedParamCopy_documentType(consumedParamCopy_documentType);
  return _impl::_impl_DocumentFilter::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID14DocumentFilterV7country6region12documentTypeAcA7CountryOSg_AA6RegionOSgAA0cH0OSgtcfC(result, swift::_impl::_impl_Optional<Country>::getOpaquePointer(consumedParamCopy_country), swift::_impl::_impl_Optional<Region>::getOpaquePointer(consumedParamCopy_region), swift::_impl::_impl_Optional<DocumentType>::getOpaquePointer(consumedParamCopy_documentType));
  });
  }
  SWIFT_INLINE_THUNK DocumentImageColorStatus DocumentImageColorStatus::_impl_notAvailable::operator()() const {
    auto result = DocumentImageColorStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID24DocumentImageColorStatusO12notAvailableyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentImageColorStatus::isNotAvailable() const {
    return *this == DocumentImageColorStatus::notAvailable;
  }
  SWIFT_INLINE_THUNK DocumentImageColorStatus DocumentImageColorStatus::_impl_blackAndWhite::operator()() const {
    auto result = DocumentImageColorStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID24DocumentImageColorStatusO13blackAndWhiteyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentImageColorStatus::isBlackAndWhite() const {
    return *this == DocumentImageColorStatus::blackAndWhite;
  }
  SWIFT_INLINE_THUNK DocumentImageColorStatus DocumentImageColorStatus::_impl_color::operator()() const {
    auto result = DocumentImageColorStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID24DocumentImageColorStatusO5coloryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentImageColorStatus::isColor() const {
    return *this == DocumentImageColorStatus::color;
  }
  SWIFT_INLINE_THUNK  bool DocumentImageColorStatus::isUnknownDefault() const {
    return *this == DocumentImageColorStatus::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<DocumentImageColorStatus> DocumentImageColorStatus::init(swift::Int rawValue) {
  return swift::_impl::_impl_Optional<DocumentImageColorStatus>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24DocumentImageColorStatusO8rawValueACSgSi_tcfC(result, rawValue);
  });
  }
  SWIFT_INLINE_THUNK swift::Int DocumentImageColorStatus::getRawValue() const {
  return _impl::$s7BlinkID24DocumentImageColorStatusO8rawValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Int DocumentNumberAnonymizationSettings::getPrefixDigitsVisible() const {
  return _impl::$s7BlinkID35DocumentNumberAnonymizationSettingsV19prefixDigitsVisibleSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void DocumentNumberAnonymizationSettings::setPrefixDigitsVisible(swift::Int value) {
  _impl::$s7BlinkID35DocumentNumberAnonymizationSettingsV19prefixDigitsVisibleSivs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Int DocumentNumberAnonymizationSettings::getSuffixDigitsVisible() const {
  return _impl::$s7BlinkID35DocumentNumberAnonymizationSettingsV19suffixDigitsVisibleSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void DocumentNumberAnonymizationSettings::setSuffixDigitsVisible(swift::Int value) {
  _impl::$s7BlinkID35DocumentNumberAnonymizationSettingsV19suffixDigitsVisibleSivs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK DocumentNumberAnonymizationSettings DocumentNumberAnonymizationSettings::init(swift::Int prefixDigitsVisible, swift::Int suffixDigitsVisible) {
  return _impl::_impl_DocumentNumberAnonymizationSettings::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID35DocumentNumberAnonymizationSettingsV19prefixDigitsVisible06suffixhI0ACSi_SitcfC(result, prefixDigitsVisible, suffixDigitsVisible);
  });
  }
  SWIFT_INLINE_THUNK DocumentOrientation DocumentOrientation::_impl_horizontal::operator()() const {
    auto result = DocumentOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID19DocumentOrientationO10horizontalyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentOrientation::isHorizontal() const {
    return *this == DocumentOrientation::horizontal;
  }
  SWIFT_INLINE_THUNK DocumentOrientation DocumentOrientation::_impl_vertical::operator()() const {
    auto result = DocumentOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID19DocumentOrientationO8verticalyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentOrientation::isVertical() const {
    return *this == DocumentOrientation::vertical;
  }
  SWIFT_INLINE_THUNK DocumentOrientation DocumentOrientation::_impl_notAvailable::operator()() const {
    auto result = DocumentOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID19DocumentOrientationO12notAvailableyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentOrientation::isNotAvailable() const {
    return *this == DocumentOrientation::notAvailable;
  }
  SWIFT_INLINE_THUNK  bool DocumentOrientation::isUnknownDefault() const {
    return *this == DocumentOrientation::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<DocumentOrientation> DocumentOrientation::init(swift::Int rawValue) {
  return swift::_impl::_impl_Optional<DocumentOrientation>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID19DocumentOrientationO8rawValueACSgSi_tcfC(result, rawValue);
  });
  }
  SWIFT_INLINE_THUNK swift::Int DocumentOrientation::getRawValue() const {
  return _impl::$s7BlinkID19DocumentOrientationO8rawValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK DocumentRotation DocumentRotation::_impl_notAvailable::operator()() const {
    auto result = DocumentRotation::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16DocumentRotationO12notAvailableyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentRotation::isNotAvailable() const {
    return *this == DocumentRotation::notAvailable;
  }
  SWIFT_INLINE_THUNK DocumentRotation DocumentRotation::_impl_zero::operator()() const {
    auto result = DocumentRotation::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16DocumentRotationO4zeroyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentRotation::isZero() const {
    return *this == DocumentRotation::zero;
  }
  SWIFT_INLINE_THUNK DocumentRotation DocumentRotation::_impl_clockwise90::operator()() const {
    auto result = DocumentRotation::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16DocumentRotationO11clockwise90yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentRotation::isClockwise90() const {
    return *this == DocumentRotation::clockwise90;
  }
  SWIFT_INLINE_THUNK DocumentRotation DocumentRotation::_impl_counterClockwise90::operator()() const {
    auto result = DocumentRotation::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16DocumentRotationO18counterClockwise90yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentRotation::isCounterClockwise90() const {
    return *this == DocumentRotation::counterClockwise90;
  }
  SWIFT_INLINE_THUNK DocumentRotation DocumentRotation::_impl_upsideDown::operator()() const {
    auto result = DocumentRotation::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16DocumentRotationO10upsideDownyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentRotation::isUpsideDown() const {
    return *this == DocumentRotation::upsideDown;
  }
  SWIFT_INLINE_THUNK  bool DocumentRotation::isUnknownDefault() const {
    return *this == DocumentRotation::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<DocumentRotation> DocumentRotation::init(swift::Int rawValue) {
  return swift::_impl::_impl_Optional<DocumentRotation>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID16DocumentRotationO8rawValueACSgSi_tcfC(result, rawValue);
  });
  }
  SWIFT_INLINE_THUNK swift::Int DocumentRotation::getRawValue() const {
  return _impl::$s7BlinkID16DocumentRotationO8rawValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK DocumentFilter DocumentRules::getDocumentFilter() const {
  return _impl::_impl_DocumentFilter::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID13DocumentRulesV14documentFilterAA0cF0Vvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void DocumentRules::setDocumentFilter(const DocumentFilter& value) {
  alignas(alignof(DocumentFilter)) char copyBuffer_consumedParamCopy_value[sizeof(DocumentFilter)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) DocumentFilter(value));
  swift::_impl::ConsumedValueStorageDestroyer<DocumentFilter> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID13DocumentRulesV14documentFilterAA0cF0Vvs(_impl::_impl_DocumentFilter::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Array<DetailedFieldType> DocumentRules::getFields() const {
  return swift::_impl::_impl_Array<DetailedFieldType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_void_ptr_0_8(result, _impl::$s7BlinkID13DocumentRulesV6fieldsSayAA17DetailedFieldTypeVGvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void DocumentRules::setFields(const swift::Array<DetailedFieldType>& value) {
  alignas(alignof(swift::Array<DetailedFieldType>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Array<DetailedFieldType>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Array<DetailedFieldType>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Array<DetailedFieldType>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID13DocumentRulesV6fieldsSayAA17DetailedFieldTypeVGvs(_impl::swift_interop_passDirect_BlinkID_void_ptr_0_8(swift::_impl::_impl_Array<DetailedFieldType>::getOpaquePointer(consumedParamCopy_value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK DocumentRules DocumentRules::init(const DocumentFilter& documentFilter, const swift::Array<DetailedFieldType>& fields) {
  alignas(alignof(DocumentFilter)) char copyBuffer_consumedParamCopy_documentFilter[sizeof(DocumentFilter)];
  auto &consumedParamCopy_documentFilter = *(new(copyBuffer_consumedParamCopy_documentFilter) DocumentFilter(documentFilter));
  swift::_impl::ConsumedValueStorageDestroyer<DocumentFilter> storageGuard_consumedParamCopy_documentFilter(consumedParamCopy_documentFilter);
  alignas(alignof(swift::Array<DetailedFieldType>)) char copyBuffer_consumedParamCopy_fields[sizeof(swift::Array<DetailedFieldType>)];
  auto &consumedParamCopy_fields = *(new(copyBuffer_consumedParamCopy_fields) swift::Array<DetailedFieldType>(fields));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Array<DetailedFieldType>> storageGuard_consumedParamCopy_fields(consumedParamCopy_fields);
  return _impl::_impl_DocumentRules::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID13DocumentRulesV14documentFilter6fieldsAcA0cF0V_SayAA17DetailedFieldTypeVGtcfC(result, _impl::_impl_DocumentFilter::getOpaquePointer(consumedParamCopy_documentFilter), _impl::swift_interop_passDirect_BlinkID_void_ptr_0_8(swift::_impl::_impl_Array<DetailedFieldType>::getOpaquePointer(consumedParamCopy_fields)));
  });
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_none::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO4noneyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isNone() const {
    return *this == DocumentType::none;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_consularId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO10consularIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isConsularId() const {
    return *this == DocumentType::consularId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_dl::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO2dlyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isDl() const {
    return *this == DocumentType::dl;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_dlPublicServicesCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO20dlPublicServicesCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isDlPublicServicesCard() const {
    return *this == DocumentType::dlPublicServicesCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_employmentPass::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO14employmentPassyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isEmploymentPass() const {
    return *this == DocumentType::employmentPass;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_finCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO7finCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isFinCard() const {
    return *this == DocumentType::finCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_id::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO2idyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isId() const {
    return *this == DocumentType::id;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_multipurposeId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO14multipurposeIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMultipurposeId() const {
    return *this == DocumentType::multipurposeId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_myKad::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO5myKadyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMyKad() const {
    return *this == DocumentType::myKad;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_myKid::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO5myKidyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMyKid() const {
    return *this == DocumentType::myKid;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_myPR::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO4myPRyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMyPR() const {
    return *this == DocumentType::myPR;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_myTentera::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO9myTenterayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMyTentera() const {
    return *this == DocumentType::myTentera;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_panCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO7panCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isPanCard() const {
    return *this == DocumentType::panCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_professionalId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO14professionalIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isProfessionalId() const {
    return *this == DocumentType::professionalId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_publicServicesCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO18publicServicesCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isPublicServicesCard() const {
    return *this == DocumentType::publicServicesCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_residencePermit::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO15residencePermityA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isResidencePermit() const {
    return *this == DocumentType::residencePermit;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_residentId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO10residentIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isResidentId() const {
    return *this == DocumentType::residentId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_temporaryResidencePermit::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO24temporaryResidencePermityA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isTemporaryResidencePermit() const {
    return *this == DocumentType::temporaryResidencePermit;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_voterId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO7voterIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isVoterId() const {
    return *this == DocumentType::voterId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_workPermit::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO10workPermityA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isWorkPermit() const {
    return *this == DocumentType::workPermit;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_iKad::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO4iKadyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isIKad() const {
    return *this == DocumentType::iKad;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_militaryId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO10militaryIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMilitaryId() const {
    return *this == DocumentType::militaryId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_myKas::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO5myKasyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMyKas() const {
    return *this == DocumentType::myKas;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_socialSecurityCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO18socialSecurityCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isSocialSecurityCard() const {
    return *this == DocumentType::socialSecurityCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_healthInsuranceCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO19healthInsuranceCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isHealthInsuranceCard() const {
    return *this == DocumentType::healthInsuranceCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_passport::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO8passportyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isPassport() const {
    return *this == DocumentType::passport;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_sPass::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO5sPassyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isSPass() const {
    return *this == DocumentType::sPass;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_addressCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO11addressCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isAddressCard() const {
    return *this == DocumentType::addressCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_alienId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO7alienIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isAlienId() const {
    return *this == DocumentType::alienId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_alienPassport::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO13alienPassportyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isAlienPassport() const {
    return *this == DocumentType::alienPassport;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_greenCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO9greenCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isGreenCard() const {
    return *this == DocumentType::greenCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_minorsId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO8minorsIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMinorsId() const {
    return *this == DocumentType::minorsId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_postalId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO8postalIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isPostalId() const {
    return *this == DocumentType::postalId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_professionalDl::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO14professionalDlyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isProfessionalDl() const {
    return *this == DocumentType::professionalDl;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_taxId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO5taxIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isTaxId() const {
    return *this == DocumentType::taxId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_weaponPermit::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO12weaponPermityA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isWeaponPermit() const {
    return *this == DocumentType::weaponPermit;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_visa::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO4visayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isVisa() const {
    return *this == DocumentType::visa;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_borderCrossingCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO18borderCrossingCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isBorderCrossingCard() const {
    return *this == DocumentType::borderCrossingCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_driverCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO10driverCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isDriverCard() const {
    return *this == DocumentType::driverCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_globalEntryCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO15globalEntryCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isGlobalEntryCard() const {
    return *this == DocumentType::globalEntryCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_mypolis::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO7mypolisyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMypolis() const {
    return *this == DocumentType::mypolis;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_nexusCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO9nexusCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isNexusCard() const {
    return *this == DocumentType::nexusCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_passportCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO12passportCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isPassportCard() const {
    return *this == DocumentType::passportCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_proofOfAgeCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO14proofOfAgeCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isProofOfAgeCard() const {
    return *this == DocumentType::proofOfAgeCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_refugeeId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO9refugeeIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isRefugeeId() const {
    return *this == DocumentType::refugeeId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_tribalId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO8tribalIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isTribalId() const {
    return *this == DocumentType::tribalId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_veteranId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO9veteranIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isVeteranId() const {
    return *this == DocumentType::veteranId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_citizenshipCertificate::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO22citizenshipCertificateyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isCitizenshipCertificate() const {
    return *this == DocumentType::citizenshipCertificate;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_myNumberCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO12myNumberCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMyNumberCard() const {
    return *this == DocumentType::myNumberCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_consularPassport::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO16consularPassportyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isConsularPassport() const {
    return *this == DocumentType::consularPassport;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_minorsPassport::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO14minorsPassportyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMinorsPassport() const {
    return *this == DocumentType::minorsPassport;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_minorsPublicServicesCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO24minorsPublicServicesCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMinorsPublicServicesCard() const {
    return *this == DocumentType::minorsPublicServicesCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_drivingPrivilegeCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO20drivingPrivilegeCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isDrivingPrivilegeCard() const {
    return *this == DocumentType::drivingPrivilegeCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_asylumRequest::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO13asylumRequestyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isAsylumRequest() const {
    return *this == DocumentType::asylumRequest;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_driverQualificationCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO23driverQualificationCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isDriverQualificationCard() const {
    return *this == DocumentType::driverQualificationCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_provisionalDl::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO13provisionalDlyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isProvisionalDl() const {
    return *this == DocumentType::provisionalDl;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_refugeePassport::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO15refugeePassportyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isRefugeePassport() const {
    return *this == DocumentType::refugeePassport;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_specialId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO9specialIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isSpecialId() const {
    return *this == DocumentType::specialId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_uniformedServicesId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO19uniformedServicesIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isUniformedServicesId() const {
    return *this == DocumentType::uniformedServicesId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_immigrantVisa::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO13immigrantVisayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isImmigrantVisa() const {
    return *this == DocumentType::immigrantVisa;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_consularVoterId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO15consularVoterIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isConsularVoterId() const {
    return *this == DocumentType::consularVoterId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_twicCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO8twicCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isTwicCard() const {
    return *this == DocumentType::twicCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_exitEntryPermit::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO15exitEntryPermityA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isExitEntryPermit() const {
    return *this == DocumentType::exitEntryPermit;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_mainlandTravelPermitTaiwan::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO26mainlandTravelPermitTaiwanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMainlandTravelPermitTaiwan() const {
    return *this == DocumentType::mainlandTravelPermitTaiwan;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_nbiClearance::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO12nbiClearanceyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isNbiClearance() const {
    return *this == DocumentType::nbiClearance;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_proofOfRegistration::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO19proofOfRegistrationyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isProofOfRegistration() const {
    return *this == DocumentType::proofOfRegistration;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_temporaryProtectionPermit::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO25temporaryProtectionPermityA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isTemporaryProtectionPermit() const {
    return *this == DocumentType::temporaryProtectionPermit;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_afghanCitizenCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO17afghanCitizenCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isAfghanCitizenCard() const {
    return *this == DocumentType::afghanCitizenCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_eid::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO3eidyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isEid() const {
    return *this == DocumentType::eid;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_pass::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO4passyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isPass() const {
    return *this == DocumentType::pass;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_sisId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO5sisIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isSisId() const {
    return *this == DocumentType::sisId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_asicCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO8asicCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isAsicCard() const {
    return *this == DocumentType::asicCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_bidoonCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO10bidoonCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isBidoonCard() const {
    return *this == DocumentType::bidoonCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_interimHealthInsuranceCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO26interimHealthInsuranceCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isInterimHealthInsuranceCard() const {
    return *this == DocumentType::interimHealthInsuranceCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_nonVoterId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO10nonVoterIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isNonVoterId() const {
    return *this == DocumentType::nonVoterId;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_reciprocalHealthInsuranceCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO29reciprocalHealthInsuranceCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isReciprocalHealthInsuranceCard() const {
    return *this == DocumentType::reciprocalHealthInsuranceCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_vehicleRegistration::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO19vehicleRegistrationyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isVehicleRegistration() const {
    return *this == DocumentType::vehicleRegistration;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_esaadCard::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO9esaadCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isEsaadCard() const {
    return *this == DocumentType::esaadCard;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_registrationCertificate::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO23registrationCertificateyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isRegistrationCertificate() const {
    return *this == DocumentType::registrationCertificate;
  }
  SWIFT_INLINE_THUNK DocumentType DocumentType::_impl_medicalMarijuanaId::operator()() const {
    auto result = DocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12DocumentTypeO18medicalMarijuanaIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isMedicalMarijuanaId() const {
    return *this == DocumentType::medicalMarijuanaId;
  }
  SWIFT_INLINE_THUNK  bool DocumentType::isUnknownDefault() const {
    return *this == DocumentType::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<DocumentType> DocumentType::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<DocumentType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID12DocumentTypeO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String DocumentType::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID12DocumentTypeO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Optional<T_0_0> DriverLicenseDetailedInfo<T_0_0>::getRestrictions() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return swift::_impl::_impl_Optional<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID25DriverLicenseDetailedInfoV12restrictionsxSgvg(result, swift::TypeMetadataTrait<DriverLicenseDetailedInfo<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Optional<T_0_0> DriverLicenseDetailedInfo<T_0_0>::getEndorsements() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return swift::_impl::_impl_Optional<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID25DriverLicenseDetailedInfoV12endorsementsxSgvg(result, swift::TypeMetadataTrait<DriverLicenseDetailedInfo<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Optional<T_0_0> DriverLicenseDetailedInfo<T_0_0>::getVehicleClass() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return swift::_impl::_impl_Optional<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID25DriverLicenseDetailedInfoV12vehicleClassxSgvg(result, swift::TypeMetadataTrait<DriverLicenseDetailedInfo<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Optional<T_0_0> DriverLicenseDetailedInfo<T_0_0>::getConditions() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return swift::_impl::_impl_Optional<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID25DriverLicenseDetailedInfoV10conditionsxSgvg(result, swift::TypeMetadataTrait<DriverLicenseDetailedInfo<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Optional<swift::Array<VehicleClassInfo<T_0_0>>> DriverLicenseDetailedInfo<T_0_0>::getVehicleClassesInfo() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return swift::_impl::_impl_Optional<swift::Array<VehicleClassInfo<T_0_0>>>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8(result, _impl::$s7BlinkID25DriverLicenseDetailedInfoV014vehicleClassesF0SayAA012VehicleClassF0VyxGGSgvg(swift::TypeMetadataTrait<DriverLicenseDetailedInfo<T_0_0>>::getTypeMetadata(), _getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK DataMatchFieldType FieldState::getFieldType() const {
  return _impl::_impl_DataMatchFieldType::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID10FieldStateV9fieldTypeAA09DataMatchcF0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK DataMatchState FieldState::getState() const {
  return _impl::_impl_DataMatchState::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID10FieldStateV5stateAA09DataMatchD0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_additionalAddressInformation::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO28additionalAddressInformationyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isAdditionalAddressInformation() const {
    return *this == FieldType::additionalAddressInformation;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_additionalNameInformation::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO25additionalNameInformationyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isAdditionalNameInformation() const {
    return *this == FieldType::additionalNameInformation;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_additionalOptionalAddressInformation::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO36additionalOptionalAddressInformationyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isAdditionalOptionalAddressInformation() const {
    return *this == FieldType::additionalOptionalAddressInformation;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_additionalPersonalIdNumber::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO26additionalPersonalIdNumberyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isAdditionalPersonalIdNumber() const {
    return *this == FieldType::additionalPersonalIdNumber;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_address::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO7addressyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isAddress() const {
    return *this == FieldType::address;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_classEffectiveDate::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO18classEffectiveDateyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isClassEffectiveDate() const {
    return *this == FieldType::classEffectiveDate;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_classExpiryDate::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO15classExpiryDateyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isClassExpiryDate() const {
    return *this == FieldType::classExpiryDate;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_conditions::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO10conditionsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isConditions() const {
    return *this == FieldType::conditions;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_dateOfBirth::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO11dateOfBirthyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isDateOfBirth() const {
    return *this == FieldType::dateOfBirth;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_dateOfExpiry::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO12dateOfExpiryyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isDateOfExpiry() const {
    return *this == FieldType::dateOfExpiry;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_dateOfIssue::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO11dateOfIssueyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isDateOfIssue() const {
    return *this == FieldType::dateOfIssue;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_documentAdditionalNumber::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO24documentAdditionalNumberyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isDocumentAdditionalNumber() const {
    return *this == FieldType::documentAdditionalNumber;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_documentOptionalAdditionalNumber::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO32documentOptionalAdditionalNumberyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isDocumentOptionalAdditionalNumber() const {
    return *this == FieldType::documentOptionalAdditionalNumber;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_documentNumber::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO14documentNumberyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isDocumentNumber() const {
    return *this == FieldType::documentNumber;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_employer::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO8employeryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isEmployer() const {
    return *this == FieldType::employer;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_endorsements::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO12endorsementsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isEndorsements() const {
    return *this == FieldType::endorsements;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_fathersName::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO11fathersNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isFathersName() const {
    return *this == FieldType::fathersName;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_firstName::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO9firstNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isFirstName() const {
    return *this == FieldType::firstName;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_fullName::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO8fullNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isFullName() const {
    return *this == FieldType::fullName;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_issuingAuthority::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO16issuingAuthorityyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isIssuingAuthority() const {
    return *this == FieldType::issuingAuthority;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_lastName::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO8lastNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isLastName() const {
    return *this == FieldType::lastName;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_licenceType::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO07licenceD0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isLicenceType() const {
    return *this == FieldType::licenceType;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_localizedName::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO13localizedNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isLocalizedName() const {
    return *this == FieldType::localizedName;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_maritalStatus::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO13maritalStatusyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isMaritalStatus() const {
    return *this == FieldType::maritalStatus;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_mothersName::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO11mothersNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isMothersName() const {
    return *this == FieldType::mothersName;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_mrz::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO3mrzyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isMrz() const {
    return *this == FieldType::mrz;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_nationality::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO11nationalityyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isNationality() const {
    return *this == FieldType::nationality;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_personalIdNumber::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO16personalIdNumberyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isPersonalIdNumber() const {
    return *this == FieldType::personalIdNumber;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_placeOfBirth::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO12placeOfBirthyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isPlaceOfBirth() const {
    return *this == FieldType::placeOfBirth;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_profession::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO10professionyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isProfession() const {
    return *this == FieldType::profession;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_race::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO4raceyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isRace() const {
    return *this == FieldType::race;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_religion::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO8religionyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isReligion() const {
    return *this == FieldType::religion;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_residentialStatus::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO17residentialStatusyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isResidentialStatus() const {
    return *this == FieldType::residentialStatus;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_restrictions::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO12restrictionsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isRestrictions() const {
    return *this == FieldType::restrictions;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_sex::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO3sexyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isSex() const {
    return *this == FieldType::sex;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_vehicleClass::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO12vehicleClassyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isVehicleClass() const {
    return *this == FieldType::vehicleClass;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_bloodType::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO05bloodD0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isBloodType() const {
    return *this == FieldType::bloodType;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_sponsor::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO7sponsoryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isSponsor() const {
    return *this == FieldType::sponsor;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_visaType::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO04visaD0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isVisaType() const {
    return *this == FieldType::visaType;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_documentSubtype::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO15documentSubtypeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isDocumentSubtype() const {
    return *this == FieldType::documentSubtype;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_remarks::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO7remarksyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isRemarks() const {
    return *this == FieldType::remarks;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_residencePermitType::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO015residencePermitD0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isResidencePermitType() const {
    return *this == FieldType::residencePermitType;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_manufacturingYear::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO17manufacturingYearyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isManufacturingYear() const {
    return *this == FieldType::manufacturingYear;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_vehicleType::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO07vehicleD0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isVehicleType() const {
    return *this == FieldType::vehicleType;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_dependentDateOfBirth::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO20dependentDateOfBirthyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isDependentDateOfBirth() const {
    return *this == FieldType::dependentDateOfBirth;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_dependentSex::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO12dependentSexyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isDependentSex() const {
    return *this == FieldType::dependentSex;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_dependentDocumentNumber::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO23dependentDocumentNumberyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isDependentDocumentNumber() const {
    return *this == FieldType::dependentDocumentNumber;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_dependentFullName::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO17dependentFullNameyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isDependentFullName() const {
    return *this == FieldType::dependentFullName;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_eligibilityCategory::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO19eligibilityCategoryyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isEligibilityCategory() const {
    return *this == FieldType::eligibilityCategory;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_specificDocumentValidity::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO24specificDocumentValidityyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isSpecificDocumentValidity() const {
    return *this == FieldType::specificDocumentValidity;
  }
  SWIFT_INLINE_THUNK FieldType FieldType::_impl_vehicleOwner::operator()() const {
    auto result = FieldType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID9FieldTypeO12vehicleOwneryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isVehicleOwner() const {
    return *this == FieldType::vehicleOwner;
  }
  SWIFT_INLINE_THUNK  bool FieldType::isUnknownDefault() const {
    return *this == FieldType::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<FieldType> FieldType::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<FieldType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID9FieldTypeO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String FieldType::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID9FieldTypeO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<SessionError> FrameProcessResult::getSessionError() const {
  return swift::_impl::_impl_Optional<SessionError>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID18FrameProcessResultV12sessionErrorAA07SessionG0OSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus ImageAnalysisDetectionStatus::_impl_notAvailable::operator()() const {
    auto result = ImageAnalysisDetectionStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID28ImageAnalysisDetectionStatusO12notAvailableyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageAnalysisDetectionStatus::isNotAvailable() const {
    return *this == ImageAnalysisDetectionStatus::notAvailable;
  }
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus ImageAnalysisDetectionStatus::_impl_notDetected::operator()() const {
    auto result = ImageAnalysisDetectionStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID28ImageAnalysisDetectionStatusO11notDetectedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageAnalysisDetectionStatus::isNotDetected() const {
    return *this == ImageAnalysisDetectionStatus::notDetected;
  }
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus ImageAnalysisDetectionStatus::_impl_detected::operator()() const {
    auto result = ImageAnalysisDetectionStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID28ImageAnalysisDetectionStatusO8detectedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageAnalysisDetectionStatus::isDetected() const {
    return *this == ImageAnalysisDetectionStatus::detected;
  }
  SWIFT_INLINE_THUNK  bool ImageAnalysisDetectionStatus::isUnknownDefault() const {
    return *this == ImageAnalysisDetectionStatus::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<ImageAnalysisDetectionStatus> ImageAnalysisDetectionStatus::init(swift::Int rawValue) {
  return swift::_impl::_impl_Optional<ImageAnalysisDetectionStatus>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID28ImageAnalysisDetectionStatusO8rawValueACSgSi_tcfC(result, rawValue);
  });
  }
  SWIFT_INLINE_THUNK swift::Int ImageAnalysisDetectionStatus::getRawValue() const {
  return _impl::$s7BlinkID28ImageAnalysisDetectionStatusO8rawValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK ImageAnalysisLightingStatus ImageAnalysisLightingStatus::_impl_notAvailable::operator()() const {
    auto result = ImageAnalysisLightingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID27ImageAnalysisLightingStatusO12notAvailableyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageAnalysisLightingStatus::isNotAvailable() const {
    return *this == ImageAnalysisLightingStatus::notAvailable;
  }
  SWIFT_INLINE_THUNK ImageAnalysisLightingStatus ImageAnalysisLightingStatus::_impl_tooBright::operator()() const {
    auto result = ImageAnalysisLightingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID27ImageAnalysisLightingStatusO9tooBrightyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageAnalysisLightingStatus::isTooBright() const {
    return *this == ImageAnalysisLightingStatus::tooBright;
  }
  SWIFT_INLINE_THUNK ImageAnalysisLightingStatus ImageAnalysisLightingStatus::_impl_tooDark::operator()() const {
    auto result = ImageAnalysisLightingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID27ImageAnalysisLightingStatusO7tooDarkyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageAnalysisLightingStatus::isTooDark() const {
    return *this == ImageAnalysisLightingStatus::tooDark;
  }
  SWIFT_INLINE_THUNK ImageAnalysisLightingStatus ImageAnalysisLightingStatus::_impl_normal::operator()() const {
    auto result = ImageAnalysisLightingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID27ImageAnalysisLightingStatusO6normalyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageAnalysisLightingStatus::isNormal() const {
    return *this == ImageAnalysisLightingStatus::normal;
  }
  SWIFT_INLINE_THUNK  bool ImageAnalysisLightingStatus::isUnknownDefault() const {
    return *this == ImageAnalysisLightingStatus::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int ImageAnalysisLightingStatus::getHashValue() const {
  return _impl::$s7BlinkID27ImageAnalysisLightingStatusO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK ImageExtractionType ImageExtractionType::_impl_fullDocument::operator()() const {
    auto result = ImageExtractionType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID19ImageExtractionTypeO12fullDocumentyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageExtractionType::isFullDocument() const {
    return *this == ImageExtractionType::fullDocument;
  }
  SWIFT_INLINE_THUNK ImageExtractionType ImageExtractionType::_impl_face::operator()() const {
    auto result = ImageExtractionType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID19ImageExtractionTypeO4faceyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageExtractionType::isFace() const {
    return *this == ImageExtractionType::face;
  }
  SWIFT_INLINE_THUNK ImageExtractionType ImageExtractionType::_impl_signature::operator()() const {
    auto result = ImageExtractionType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID19ImageExtractionTypeO9signatureyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageExtractionType::isSignature() const {
    return *this == ImageExtractionType::signature;
  }
  SWIFT_INLINE_THUNK  bool ImageExtractionType::isUnknownDefault() const {
    return *this == ImageExtractionType::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int ImageExtractionType::getHashValue() const {
  return _impl::$s7BlinkID19ImageExtractionTypeO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK ImageOrientation ImageOrientation::_impl_up::operator()() const {
    auto result = ImageOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ImageOrientationO2upyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageOrientation::isUp() const {
    return *this == ImageOrientation::up;
  }
  SWIFT_INLINE_THUNK ImageOrientation ImageOrientation::_impl_down::operator()() const {
    auto result = ImageOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ImageOrientationO4downyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageOrientation::isDown() const {
    return *this == ImageOrientation::down;
  }
  SWIFT_INLINE_THUNK ImageOrientation ImageOrientation::_impl_left::operator()() const {
    auto result = ImageOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ImageOrientationO4leftyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageOrientation::isLeft() const {
    return *this == ImageOrientation::left;
  }
  SWIFT_INLINE_THUNK ImageOrientation ImageOrientation::_impl_right::operator()() const {
    auto result = ImageOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ImageOrientationO5rightyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageOrientation::isRight() const {
    return *this == ImageOrientation::right;
  }
  SWIFT_INLINE_THUNK ImageOrientation ImageOrientation::_impl_upMirrored::operator()() const {
    auto result = ImageOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ImageOrientationO10upMirroredyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageOrientation::isUpMirrored() const {
    return *this == ImageOrientation::upMirrored;
  }
  SWIFT_INLINE_THUNK ImageOrientation ImageOrientation::_impl_downMirrored::operator()() const {
    auto result = ImageOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ImageOrientationO12downMirroredyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageOrientation::isDownMirrored() const {
    return *this == ImageOrientation::downMirrored;
  }
  SWIFT_INLINE_THUNK ImageOrientation ImageOrientation::_impl_leftMirrored::operator()() const {
    auto result = ImageOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ImageOrientationO12leftMirroredyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageOrientation::isLeftMirrored() const {
    return *this == ImageOrientation::leftMirrored;
  }
  SWIFT_INLINE_THUNK ImageOrientation ImageOrientation::_impl_rightMirrored::operator()() const {
    auto result = ImageOrientation::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ImageOrientationO13rightMirroredyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ImageOrientation::isRightMirrored() const {
    return *this == ImageOrientation::rightMirrored;
  }
  SWIFT_INLINE_THUNK  bool ImageOrientation::isUnknownDefault() const {
    return *this == ImageOrientation::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int ImageOrientation::getHashValue() const {
  return _impl::$s7BlinkID16ImageOrientationO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK InputImage InputImage::init(UIImage *_Nonnull uiImage, const RegionOfInterest& regionOfInterest) {
  alignas(alignof(UIImage *_Nonnull)) char copyBuffer_consumedParamCopy_uiImage[sizeof(UIImage *_Nonnull)];
  auto &consumedParamCopy_uiImage = *(new(copyBuffer_consumedParamCopy_uiImage) UIImage *_Nonnull(uiImage));
  swift::_impl::ConsumedValueStorageDestroyer<UIImage *_Nonnull> storageGuard_consumedParamCopy_uiImage(consumedParamCopy_uiImage);
  alignas(alignof(RegionOfInterest)) char copyBuffer_consumedParamCopy_regionOfInterest[sizeof(RegionOfInterest)];
  auto &consumedParamCopy_regionOfInterest = *(new(copyBuffer_consumedParamCopy_regionOfInterest) RegionOfInterest(regionOfInterest));
  swift::_impl::ConsumedValueStorageDestroyer<RegionOfInterest> storageGuard_consumedParamCopy_regionOfInterest(consumedParamCopy_regionOfInterest);
  return _impl::_impl_InputImage::makeRetained(_impl::$s7BlinkID10InputImageC02uiD016regionOfInterestACSo7UIImageC_AA06RegiongH0VtcfC(consumedParamCopy_uiImage, _impl::_impl_RegionOfInterest::getOpaquePointer(consumedParamCopy_regionOfInterest), swift::TypeMetadataTrait<InputImage>::getTypeMetadata()));
  }
  SWIFT_INLINE_THUNK InputImage InputImage::init(const CameraFrame& cameraFrame) {
  alignas(alignof(CameraFrame)) char copyBuffer_consumedParamCopy_cameraFrame[sizeof(CameraFrame)];
  auto &consumedParamCopy_cameraFrame = *(new(copyBuffer_consumedParamCopy_cameraFrame) CameraFrame(cameraFrame));
  swift::_impl::ConsumedValueStorageDestroyer<CameraFrame> storageGuard_consumedParamCopy_cameraFrame(consumedParamCopy_cameraFrame);
  return _impl::_impl_InputImage::makeRetained(_impl::$s7BlinkID10InputImageC11cameraFrameAcA06CameraF0V_tcfC(_impl::_impl_CameraFrame::getOpaquePointer(consumedParamCopy_cameraFrame), swift::TypeMetadataTrait<InputImage>::getTypeMetadata()));
  }
  SWIFT_INLINE_THUNK ProcessingStatus InputImageAnalysisResult::getProcessingStatus() const {
  return _impl::_impl_ProcessingStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24InputImageAnalysisResultV16processingStatusAA010ProcessingH0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Array<FieldType> InputImageAnalysisResult::getMissingMandatoryFields() const {
  return swift::_impl::_impl_Array<FieldType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_void_ptr_0_8(result, _impl::$s7BlinkID24InputImageAnalysisResultV22missingMandatoryFieldsSayAA9FieldTypeOGvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Array<FieldType> InputImageAnalysisResult::getExtractedFields() const {
  return swift::_impl::_impl_Array<FieldType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_void_ptr_0_8(result, _impl::$s7BlinkID24InputImageAnalysisResultV15extractedFieldsSayAA9FieldTypeOGvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Array<FieldType> InputImageAnalysisResult::getInvalidCharacterFields() const {
  return swift::_impl::_impl_Array<FieldType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_void_ptr_0_8(result, _impl::$s7BlinkID24InputImageAnalysisResultV22invalidCharacterFieldsSayAA9FieldTypeOGvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Array<FieldType> InputImageAnalysisResult::getExtraPresentFields() const {
  return swift::_impl::_impl_Array<FieldType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_void_ptr_0_8(result, _impl::$s7BlinkID24InputImageAnalysisResultV18extraPresentFieldsSayAA9FieldTypeOGvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Array<ImageExtractionType> InputImageAnalysisResult::getImageExtractionFailures() const {
  return swift::_impl::_impl_Array<ImageExtractionType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_void_ptr_0_8(result, _impl::$s7BlinkID24InputImageAnalysisResultV23imageExtractionFailuresSayAA0dH4TypeOGvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK ScanningSide InputImageAnalysisResult::getScanningSide() const {
  return _impl::_impl_ScanningSide::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24InputImageAnalysisResultV12scanningSideAA08ScanningH0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK DetectionStatus InputImageAnalysisResult::getDocumentDetectionStatus() const {
  return _impl::_impl_DetectionStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24InputImageAnalysisResultV23documentDetectionStatusAA0hI0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<Quadrilateral> InputImageAnalysisResult::getDocumentLocation() const {
  return swift::_impl::_impl_Optional<Quadrilateral>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24InputImageAnalysisResultV16documentLocationAA13QuadrilateralVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus InputImageAnalysisResult::getBlurDetectionStatus() const {
  return _impl::_impl_ImageAnalysisDetectionStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24InputImageAnalysisResultV19blurDetectionStatusAA0dehI0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus InputImageAnalysisResult::getGlareDetectionStatus() const {
  return _impl::_impl_ImageAnalysisDetectionStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24InputImageAnalysisResultV20glareDetectionStatusAA0dehI0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK DocumentImageColorStatus InputImageAnalysisResult::getDocumentColorStatus() const {
  return _impl::_impl_DocumentImageColorStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24InputImageAnalysisResultV19documentColorStatusAA08DocumentdhI0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus InputImageAnalysisResult::getDocumentMoireStatus() const {
  return _impl::_impl_ImageAnalysisDetectionStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24InputImageAnalysisResultV19documentMoireStatusAA0de9DetectionI0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus InputImageAnalysisResult::getFaceDetectionStatus() const {
  return _impl::_impl_ImageAnalysisDetectionStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24InputImageAnalysisResultV19faceDetectionStatusAA0dehI0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus InputImageAnalysisResult::getMrzDetectionStatus() const {
  return _impl::_impl_ImageAnalysisDetectionStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24InputImageAnalysisResultV18mrzDetectionStatusAA0dehI0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus InputImageAnalysisResult::getBarcodeDetectionStatus() const {
  return _impl::_impl_ImageAnalysisDetectionStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24InputImageAnalysisResultV22barcodeDetectionStatusAA0dehI0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus InputImageAnalysisResult::getRealIDDetectionStatus() const {
  return _impl::_impl_ImageAnalysisDetectionStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24InputImageAnalysisResultV21realIDDetectionStatusAA0de9DetectionI0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK ImageAnalysisLightingStatus InputImageAnalysisResult::getDocumentLightingStatus() const {
  return _impl::_impl_ImageAnalysisLightingStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24InputImageAnalysisResultV22documentLightingStatusAA0dehI0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK ImageAnalysisDetectionStatus InputImageAnalysisResult::getDocumentHandOcclusionStatus() const {
  return _impl::_impl_ImageAnalysisDetectionStatus::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24InputImageAnalysisResultV27documentHandOcclusionStatusAA0de9DetectionJ0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK DocumentOrientation InputImageAnalysisResult::getDocumentOrientation() const {
  return _impl::_impl_DocumentOrientation::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24InputImageAnalysisResultV19documentOrientationAA08DocumentH0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK DocumentRotation InputImageAnalysisResult::getDocumentRotation() const {
  return _impl::_impl_DocumentRotation::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24InputImageAnalysisResultV16documentRotationAA08DocumentH0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK UIImage *_Nullable InputImageResult::getUiImage() const {
return (__bridge_transfer UIImage *)(__bridge void *)_impl::$s7BlinkID16InputImageResultV02uiD0So7UIImageCSgvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK InputImageSource InputImageSource::_impl_video::operator()() const {
    auto result = InputImageSource::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16InputImageSourceO5videoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool InputImageSource::isVideo() const {
    return *this == InputImageSource::video;
  }
  SWIFT_INLINE_THUNK InputImageSource InputImageSource::_impl_photo::operator()() const {
    auto result = InputImageSource::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16InputImageSourceO5photoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool InputImageSource::isPhoto() const {
    return *this == InputImageSource::photo;
  }
  SWIFT_INLINE_THUNK  bool InputImageSource::isUnknownDefault() const {
    return *this == InputImageSource::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int InputImageSource::getHashValue() const {
  return _impl::$s7BlinkID16InputImageSourceO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String InvalidLicenseKeyError::getMessage() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID22InvalidLicenseKeyErrorV7messageSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK MRZDocumentType MRZDocumentType::_impl_unknown::operator()() const {
    auto result = MRZDocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15MRZDocumentTypeO7unknownyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool MRZDocumentType::isUnknown() const {
    return *this == MRZDocumentType::unknown;
  }
  SWIFT_INLINE_THUNK MRZDocumentType MRZDocumentType::_impl_identityCard::operator()() const {
    auto result = MRZDocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15MRZDocumentTypeO12identityCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool MRZDocumentType::isIdentityCard() const {
    return *this == MRZDocumentType::identityCard;
  }
  SWIFT_INLINE_THUNK MRZDocumentType MRZDocumentType::_impl_passport::operator()() const {
    auto result = MRZDocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15MRZDocumentTypeO8passportyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool MRZDocumentType::isPassport() const {
    return *this == MRZDocumentType::passport;
  }
  SWIFT_INLINE_THUNK MRZDocumentType MRZDocumentType::_impl_visa::operator()() const {
    auto result = MRZDocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15MRZDocumentTypeO4visayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool MRZDocumentType::isVisa() const {
    return *this == MRZDocumentType::visa;
  }
  SWIFT_INLINE_THUNK MRZDocumentType MRZDocumentType::_impl_greenCard::operator()() const {
    auto result = MRZDocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15MRZDocumentTypeO9greenCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool MRZDocumentType::isGreenCard() const {
    return *this == MRZDocumentType::greenCard;
  }
  SWIFT_INLINE_THUNK MRZDocumentType MRZDocumentType::_impl_mysPassIMM13P::operator()() const {
    auto result = MRZDocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15MRZDocumentTypeO13mysPassIMM13PyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool MRZDocumentType::isMysPassIMM13P() const {
    return *this == MRZDocumentType::mysPassIMM13P;
  }
  SWIFT_INLINE_THUNK MRZDocumentType MRZDocumentType::_impl_driverLicense::operator()() const {
    auto result = MRZDocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15MRZDocumentTypeO13driverLicenseyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool MRZDocumentType::isDriverLicense() const {
    return *this == MRZDocumentType::driverLicense;
  }
  SWIFT_INLINE_THUNK MRZDocumentType MRZDocumentType::_impl_internalTravelDocument::operator()() const {
    auto result = MRZDocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15MRZDocumentTypeO22internalTravelDocumentyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool MRZDocumentType::isInternalTravelDocument() const {
    return *this == MRZDocumentType::internalTravelDocument;
  }
  SWIFT_INLINE_THUNK MRZDocumentType MRZDocumentType::_impl_borderCrossingCard::operator()() const {
    auto result = MRZDocumentType::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15MRZDocumentTypeO18borderCrossingCardyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool MRZDocumentType::isBorderCrossingCard() const {
    return *this == MRZDocumentType::borderCrossingCard;
  }
  SWIFT_INLINE_THUNK  bool MRZDocumentType::isUnknownDefault() const {
    return *this == MRZDocumentType::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int MRZDocumentType::getHashValue() const {
  return _impl::$s7BlinkID15MRZDocumentTypeO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::String MRZResult::getRawMRZString() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID9MRZResultV12rawMRZStringSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String MRZResult::getDocumentCode() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID9MRZResultV12documentCodeSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String MRZResult::getIssuer() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID9MRZResultV6issuerSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String MRZResult::getDocumentNumber() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID9MRZResultV14documentNumberSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String MRZResult::getOpt1() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID9MRZResultV4opt1SSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String MRZResult::getOpt2() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID9MRZResultV4opt2SSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String MRZResult::getGender() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID9MRZResultV6genderSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String MRZResult::getNationality() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID9MRZResultV11nationalitySSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String MRZResult::getPrimaryID() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID9MRZResultV07primaryB0SSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String MRZResult::getSecondaryID() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID9MRZResultV09secondaryB0SSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String MRZResult::getIssuerName() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID9MRZResultV10issuerNameSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String MRZResult::getNationalityName() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID9MRZResultV15nationalityNameSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK bool MRZResult::getVerified() const {
  return _impl::$s7BlinkID9MRZResultV8verifiedSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK DateResult<swift::String> MRZResult::getDateOfBirth() const {
  return _impl::_impl_DateResult<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID9MRZResultV11dateOfBirthAA10DateResultVySSGvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK DateResult<swift::String> MRZResult::getDateOfExpiry() const {
  return _impl::_impl_DateResult<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID9MRZResultV12dateOfExpiryAA10DateResultVySSGvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK MRZDocumentType MRZResult::getDocumentType() const {
  return _impl::_impl_MRZDocumentType::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID9MRZResultV12documentTypeAA011MRZDocumentE0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK swift::String MRZResult::getSanitizedOpt1() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID9MRZResultV13sanitizedOpt1SSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String MRZResult::getSanitizedOpt2() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID9MRZResultV13sanitizedOpt2SSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String MRZResult::getSanitizedNationality() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID9MRZResultV20sanitizedNationalitySSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String MRZResult::getSanitizedIssuer() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID9MRZResultV15sanitizedIssuerSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String MRZResult::getSanitizedDocumentCode() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID9MRZResultV21sanitizedDocumentCodeSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::String MRZResult::getSanitizedDocumentNumber() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID9MRZResultV23sanitizedDocumentNumberSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Int MemoryReserveError::getMinRequiredMemory() const {
  return _impl::$s7BlinkID18MemoryReserveErrorV011minRequiredC0Sivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK MemoryReserveError MemoryReserveError::init(swift::Int minRequiredMemory) {
  return _impl::_impl_MemoryReserveError::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID18MemoryReserveErrorV011minRequiredC0ACSi_tcfC(result, minRequiredMemory);
  });
  }
  SWIFT_INLINE_THUNK swift::String MissingBundle::getMessage() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID13MissingBundleV7messageSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK ModelLoadError ModelLoadError::_impl_missingFile::operator()() const {
    auto result = ModelLoadError::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID14ModelLoadErrorO11missingFileyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ModelLoadError::isMissingFile() const {
    return *this == ModelLoadError::missingFile;
  }
  SWIFT_INLINE_THUNK ModelLoadError ModelLoadError::_impl_invalidFile::operator()() const {
    auto result = ModelLoadError::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID14ModelLoadErrorO11invalidFileyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ModelLoadError::isInvalidFile() const {
    return *this == ModelLoadError::invalidFile;
  }
  SWIFT_INLINE_THUNK ModelLoadError ModelLoadError::_impl_invalidLicense::operator()() const {
    auto result = ModelLoadError::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID14ModelLoadErrorO14invalidLicenseyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ModelLoadError::isInvalidLicense() const {
    return *this == ModelLoadError::invalidLicense;
  }
  SWIFT_INLINE_THUNK  bool ModelLoadError::isUnknownDefault() const {
    return *this == ModelLoadError::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> ModelLoadError::getErrorDescription() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_uint64_t_8_16(result, _impl::$s7BlinkID14ModelLoadErrorO16errorDescriptionSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK swift::Int ModelLoadError::getHashValue() const {
  return _impl::$s7BlinkID14ModelLoadErrorO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK int32_t Point::getX() const {
  return _impl::$s7BlinkID5PointV1xs5Int32Vvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK int32_t Point::getY() const {
  return _impl::$s7BlinkID5PointV1ys5Int32Vvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_success::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ProcessingStatusO7successyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isSuccess() const {
    return *this == ProcessingStatus::success;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_detectionFailed::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ProcessingStatusO15detectionFailedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isDetectionFailed() const {
    return *this == ProcessingStatus::detectionFailed;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_imagePreprocessingFailed::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ProcessingStatusO24imagePreprocessingFailedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isImagePreprocessingFailed() const {
    return *this == ProcessingStatus::imagePreprocessingFailed;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_stabilityTestFailed::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ProcessingStatusO19stabilityTestFailedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isStabilityTestFailed() const {
    return *this == ProcessingStatus::stabilityTestFailed;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_scanningWrongSide::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ProcessingStatusO17scanningWrongSideyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isScanningWrongSide() const {
    return *this == ProcessingStatus::scanningWrongSide;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_fieldIdentificationFailed::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ProcessingStatusO25fieldIdentificationFailedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isFieldIdentificationFailed() const {
    return *this == ProcessingStatus::fieldIdentificationFailed;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_mandatoryFieldMissing::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ProcessingStatusO21mandatoryFieldMissingyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isMandatoryFieldMissing() const {
    return *this == ProcessingStatus::mandatoryFieldMissing;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_invalidCharactersFound::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ProcessingStatusO22invalidCharactersFoundyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isInvalidCharactersFound() const {
    return *this == ProcessingStatus::invalidCharactersFound;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_imageReturnFailed::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ProcessingStatusO17imageReturnFailedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isImageReturnFailed() const {
    return *this == ProcessingStatus::imageReturnFailed;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_barcodeRecognitionFailed::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ProcessingStatusO24barcodeRecognitionFailedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isBarcodeRecognitionFailed() const {
    return *this == ProcessingStatus::barcodeRecognitionFailed;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_mrzParsingFailed::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ProcessingStatusO16mrzParsingFailedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isMrzParsingFailed() const {
    return *this == ProcessingStatus::mrzParsingFailed;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_documentFiltered::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ProcessingStatusO16documentFilteredyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isDocumentFiltered() const {
    return *this == ProcessingStatus::documentFiltered;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_unsupportedDocument::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ProcessingStatusO19unsupportedDocumentyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isUnsupportedDocument() const {
    return *this == ProcessingStatus::unsupportedDocument;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_awaitingOtherSide::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ProcessingStatusO17awaitingOtherSideyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isAwaitingOtherSide() const {
    return *this == ProcessingStatus::awaitingOtherSide;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_notScanned::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ProcessingStatusO10notScannedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isNotScanned() const {
    return *this == ProcessingStatus::notScanned;
  }
  SWIFT_INLINE_THUNK ProcessingStatus ProcessingStatus::_impl_barcodeDetectionFailed::operator()() const {
    auto result = ProcessingStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID16ProcessingStatusO22barcodeDetectionFailedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isBarcodeDetectionFailed() const {
    return *this == ProcessingStatus::barcodeDetectionFailed;
  }
  SWIFT_INLINE_THUNK  bool ProcessingStatus::isUnknownDefault() const {
    return *this == ProcessingStatus::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<ProcessingStatus> ProcessingStatus::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<ProcessingStatus>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID16ProcessingStatusO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String ProcessingStatus::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID16ProcessingStatusO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK Point Quadrilateral::getUpperLeft() const {
  return _impl::_impl_Point::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID13QuadrilateralV9upperLeftAA5PointVvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK Point Quadrilateral::getUpperRight() const {
  return _impl::_impl_Point::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID13QuadrilateralV10upperRightAA5PointVvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK Point Quadrilateral::getLowerRight() const {
  return _impl::_impl_Point::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID13QuadrilateralV10lowerRightAA5PointVvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK Point Quadrilateral::getLowerLeft() const {
  return _impl::_impl_Point::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID13QuadrilateralV9lowerLeftAA5PointVvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK RecognitionMode RecognitionMode::_impl_none::operator()() const {
    auto result = RecognitionMode::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15RecognitionModeO4noneyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool RecognitionMode::isNone() const {
    return *this == RecognitionMode::none;
  }
  SWIFT_INLINE_THUNK RecognitionMode RecognitionMode::_impl_mrzId::operator()() const {
    auto result = RecognitionMode::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15RecognitionModeO5mrzIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool RecognitionMode::isMrzId() const {
    return *this == RecognitionMode::mrzId;
  }
  SWIFT_INLINE_THUNK RecognitionMode RecognitionMode::_impl_mrzVisa::operator()() const {
    auto result = RecognitionMode::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15RecognitionModeO7mrzVisayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool RecognitionMode::isMrzVisa() const {
    return *this == RecognitionMode::mrzVisa;
  }
  SWIFT_INLINE_THUNK RecognitionMode RecognitionMode::_impl_mrzPassport::operator()() const {
    auto result = RecognitionMode::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15RecognitionModeO11mrzPassportyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool RecognitionMode::isMrzPassport() const {
    return *this == RecognitionMode::mrzPassport;
  }
  SWIFT_INLINE_THUNK RecognitionMode RecognitionMode::_impl_photoId::operator()() const {
    auto result = RecognitionMode::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15RecognitionModeO7photoIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool RecognitionMode::isPhotoId() const {
    return *this == RecognitionMode::photoId;
  }
  SWIFT_INLINE_THUNK RecognitionMode RecognitionMode::_impl_fullRecognition::operator()() const {
    auto result = RecognitionMode::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15RecognitionModeO04fullC0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool RecognitionMode::isFullRecognition() const {
    return *this == RecognitionMode::fullRecognition;
  }
  SWIFT_INLINE_THUNK RecognitionMode RecognitionMode::_impl_barcodeId::operator()() const {
    auto result = RecognitionMode::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID15RecognitionModeO9barcodeIdyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool RecognitionMode::isBarcodeId() const {
    return *this == RecognitionMode::barcodeId;
  }
  SWIFT_INLINE_THUNK  bool RecognitionMode::isUnknownDefault() const {
    return *this == RecognitionMode::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<RecognitionMode> RecognitionMode::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<RecognitionMode>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID15RecognitionModeO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String RecognitionMode::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID15RecognitionModeO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK bool RecognitionModeFilter::getEnableMrzId() const {
  return _impl::$s7BlinkID21RecognitionModeFilterV11enableMrzIdSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void RecognitionModeFilter::setEnableMrzId(bool value) {
  _impl::$s7BlinkID21RecognitionModeFilterV11enableMrzIdSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool RecognitionModeFilter::getEnableMrzVisa() const {
  return _impl::$s7BlinkID21RecognitionModeFilterV13enableMrzVisaSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void RecognitionModeFilter::setEnableMrzVisa(bool value) {
  _impl::$s7BlinkID21RecognitionModeFilterV13enableMrzVisaSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool RecognitionModeFilter::getEnableMrzPassport() const {
  return _impl::$s7BlinkID21RecognitionModeFilterV17enableMrzPassportSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void RecognitionModeFilter::setEnableMrzPassport(bool value) {
  _impl::$s7BlinkID21RecognitionModeFilterV17enableMrzPassportSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool RecognitionModeFilter::getEnablePhotoId() const {
  return _impl::$s7BlinkID21RecognitionModeFilterV13enablePhotoIdSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void RecognitionModeFilter::setEnablePhotoId(bool value) {
  _impl::$s7BlinkID21RecognitionModeFilterV13enablePhotoIdSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool RecognitionModeFilter::getEnableBarcodeId() const {
  return _impl::$s7BlinkID21RecognitionModeFilterV15enableBarcodeIdSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void RecognitionModeFilter::setEnableBarcodeId(bool value) {
  _impl::$s7BlinkID21RecognitionModeFilterV15enableBarcodeIdSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool RecognitionModeFilter::getEnableFullDocumentRecognition() const {
  return _impl::$s7BlinkID21RecognitionModeFilterV018enableFullDocumentC0Sbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void RecognitionModeFilter::setEnableFullDocumentRecognition(bool value) {
  _impl::$s7BlinkID21RecognitionModeFilterV018enableFullDocumentC0Sbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK RecognitionModeFilter RecognitionModeFilter::init(bool enableMrzId, bool enableMrzVisa, bool enableMrzPassport, bool enablePhotoId, bool enableBarcodeId, bool enableFullDocumentRecognition) {
  return _impl::_impl_RecognitionModeFilter::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID21RecognitionModeFilterV11enableMrzId0fG4Visa0fG8Passport0f5PhotoH00f7BarcodeH00f12FullDocumentC0ACSb_S5btcfC(result, enableMrzId, enableMrzVisa, enableMrzPassport, enablePhotoId, enableBarcodeId, enableFullDocumentRecognition);
  });
  }
  SWIFT_INLINE_THUNK Region Region::_impl_none::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO4noneyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNone() const {
    return *this == Region::none;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_alabama::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7alabamayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isAlabama() const {
    return *this == Region::alabama;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_alaska::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO6alaskayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isAlaska() const {
    return *this == Region::alaska;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_alberta::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7albertayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isAlberta() const {
    return *this == Region::alberta;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_arizona::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7arizonayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isArizona() const {
    return *this == Region::arizona;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_arkansas::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8arkansasyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isArkansas() const {
    return *this == Region::arkansas;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_australianCapitalTerritory::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO26australianCapitalTerritoryyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isAustralianCapitalTerritory() const {
    return *this == Region::australianCapitalTerritory;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_britishColumbia::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO15britishColumbiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isBritishColumbia() const {
    return *this == Region::britishColumbia;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_california::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO10californiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isCalifornia() const {
    return *this == Region::california;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_colorado::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8coloradoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isColorado() const {
    return *this == Region::colorado;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_connecticut::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO11connecticutyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isConnecticut() const {
    return *this == Region::connecticut;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_delaware::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8delawareyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isDelaware() const {
    return *this == Region::delaware;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_districtOfColumbia::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO18districtOfColumbiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isDistrictOfColumbia() const {
    return *this == Region::districtOfColumbia;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_florida::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7floridayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isFlorida() const {
    return *this == Region::florida;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_georgia::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7georgiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isGeorgia() const {
    return *this == Region::georgia;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_hawaii::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO6hawaiiyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isHawaii() const {
    return *this == Region::hawaii;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_idaho::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO5idahoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isIdaho() const {
    return *this == Region::idaho;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_illinois::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8illinoisyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isIllinois() const {
    return *this == Region::illinois;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_indiana::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7indianayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isIndiana() const {
    return *this == Region::indiana;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_iowa::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO4iowayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isIowa() const {
    return *this == Region::iowa;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_kansas::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO6kansasyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isKansas() const {
    return *this == Region::kansas;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_kentucky::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8kentuckyyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isKentucky() const {
    return *this == Region::kentucky;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_louisiana::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO9louisianayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isLouisiana() const {
    return *this == Region::louisiana;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_maine::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO5maineyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMaine() const {
    return *this == Region::maine;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_manitoba::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8manitobayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isManitoba() const {
    return *this == Region::manitoba;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_maryland::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8marylandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMaryland() const {
    return *this == Region::maryland;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_massachusetts::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO13massachusettsyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMassachusetts() const {
    return *this == Region::massachusetts;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_michigan::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8michiganyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMichigan() const {
    return *this == Region::michigan;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_minnesota::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO9minnesotayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMinnesota() const {
    return *this == Region::minnesota;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_mississippi::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO11mississippiyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMississippi() const {
    return *this == Region::mississippi;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_missouri::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8missouriyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMissouri() const {
    return *this == Region::missouri;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_montana::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7montanayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMontana() const {
    return *this == Region::montana;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_nebraska::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8nebraskayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNebraska() const {
    return *this == Region::nebraska;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_nevada::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO6nevadayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNevada() const {
    return *this == Region::nevada;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_newBrunswick::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO12newBrunswickyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNewBrunswick() const {
    return *this == Region::newBrunswick;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_newHampshire::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO12newHampshireyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNewHampshire() const {
    return *this == Region::newHampshire;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_newJersey::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO9newJerseyyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNewJersey() const {
    return *this == Region::newJersey;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_newMexico::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO9newMexicoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNewMexico() const {
    return *this == Region::newMexico;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_newSouthWales::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO13newSouthWalesyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNewSouthWales() const {
    return *this == Region::newSouthWales;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_newYork::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7newYorkyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNewYork() const {
    return *this == Region::newYork;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_northernTerritory::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO17northernTerritoryyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNorthernTerritory() const {
    return *this == Region::northernTerritory;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_northCarolina::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO13northCarolinayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNorthCarolina() const {
    return *this == Region::northCarolina;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_northDakota::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO11northDakotayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNorthDakota() const {
    return *this == Region::northDakota;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_novaScotia::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO10novaScotiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNovaScotia() const {
    return *this == Region::novaScotia;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_ohio::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO4ohioyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isOhio() const {
    return *this == Region::ohio;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_oklahoma::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8oklahomayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isOklahoma() const {
    return *this == Region::oklahoma;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_ontario::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7ontarioyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isOntario() const {
    return *this == Region::ontario;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_oregon::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO6oregonyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isOregon() const {
    return *this == Region::oregon;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_pennsylvania::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO12pennsylvaniayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isPennsylvania() const {
    return *this == Region::pennsylvania;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_quebec::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO6quebecyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isQuebec() const {
    return *this == Region::quebec;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_queensland::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO10queenslandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isQueensland() const {
    return *this == Region::queensland;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_rhodeIsland::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO11rhodeIslandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isRhodeIsland() const {
    return *this == Region::rhodeIsland;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_saskatchewan::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO12saskatchewanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isSaskatchewan() const {
    return *this == Region::saskatchewan;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_southAustralia::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO14southAustraliayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isSouthAustralia() const {
    return *this == Region::southAustralia;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_southCarolina::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO13southCarolinayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isSouthCarolina() const {
    return *this == Region::southCarolina;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_southDakota::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO11southDakotayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isSouthDakota() const {
    return *this == Region::southDakota;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_tasmania::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8tasmaniayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isTasmania() const {
    return *this == Region::tasmania;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_tennessee::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO9tennesseeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isTennessee() const {
    return *this == Region::tennessee;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_texas::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO5texasyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isTexas() const {
    return *this == Region::texas;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_utah::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO4utahyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isUtah() const {
    return *this == Region::utah;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_vermont::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7vermontyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isVermont() const {
    return *this == Region::vermont;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_victoria::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8victoriayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isVictoria() const {
    return *this == Region::victoria;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_virginia::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8virginiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isVirginia() const {
    return *this == Region::virginia;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_washington::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO10washingtonyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isWashington() const {
    return *this == Region::washington;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_westernAustralia::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO16westernAustraliayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isWesternAustralia() const {
    return *this == Region::westernAustralia;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_westVirginia::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO12westVirginiayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isWestVirginia() const {
    return *this == Region::westVirginia;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_wisconsin::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO9wisconsinyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isWisconsin() const {
    return *this == Region::wisconsin;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_wyoming::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7wyomingyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isWyoming() const {
    return *this == Region::wyoming;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_yukon::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO5yukonyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isYukon() const {
    return *this == Region::yukon;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_ciudadDeMexico::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO14ciudadDeMexicoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isCiudadDeMexico() const {
    return *this == Region::ciudadDeMexico;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_jalisco::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7jaliscoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isJalisco() const {
    return *this == Region::jalisco;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_newfoundlandAndLabrador::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO23newfoundlandAndLabradoryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNewfoundlandAndLabrador() const {
    return *this == Region::newfoundlandAndLabrador;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_nuevoLeon::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO9nuevoLeonyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNuevoLeon() const {
    return *this == Region::nuevoLeon;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_bajaCalifornia::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO14bajaCaliforniayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isBajaCalifornia() const {
    return *this == Region::bajaCalifornia;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_chihuahua::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO9chihuahuayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isChihuahua() const {
    return *this == Region::chihuahua;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_guanajuato::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO10guanajuatoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isGuanajuato() const {
    return *this == Region::guanajuato;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_guerrero::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8guerreroyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isGuerrero() const {
    return *this == Region::guerrero;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_mexico::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO6mexicoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMexico() const {
    return *this == Region::mexico;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_michoacan::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO9michoacanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMichoacan() const {
    return *this == Region::michoacan;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_newYorkCity::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO11newYorkCityyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNewYorkCity() const {
    return *this == Region::newYorkCity;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_tamaulipas::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO10tamaulipasyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isTamaulipas() const {
    return *this == Region::tamaulipas;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_veracruz::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8veracruzyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isVeracruz() const {
    return *this == Region::veracruz;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_chiapas::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7chiapasyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isChiapas() const {
    return *this == Region::chiapas;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_coahuila::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8coahuilayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isCoahuila() const {
    return *this == Region::coahuila;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_durango::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7durangoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isDurango() const {
    return *this == Region::durango;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_guerreroCocula::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO14guerreroCoculayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isGuerreroCocula() const {
    return *this == Region::guerreroCocula;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_guerreroJuchitan::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO16guerreroJuchitanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isGuerreroJuchitan() const {
    return *this == Region::guerreroJuchitan;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_guerreroTepecoacuilco::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO21guerreroTepecoacuilcoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isGuerreroTepecoacuilco() const {
    return *this == Region::guerreroTepecoacuilco;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_guerreroTlacoapa::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO16guerreroTlacoapayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isGuerreroTlacoapa() const {
    return *this == Region::guerreroTlacoapa;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_gujarat::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7gujaratyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isGujarat() const {
    return *this == Region::gujarat;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_hidalgo::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7hidalgoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isHidalgo() const {
    return *this == Region::hidalgo;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_karnataka::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO9karnatakayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isKarnataka() const {
    return *this == Region::karnataka;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_kerala::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO6keralayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isKerala() const {
    return *this == Region::kerala;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_khyberPakhtunkhwa::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO17khyberPakhtunkhwayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isKhyberPakhtunkhwa() const {
    return *this == Region::khyberPakhtunkhwa;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_madhyaPradesh::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO13madhyaPradeshyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMadhyaPradesh() const {
    return *this == Region::madhyaPradesh;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_maharashtra::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO11maharashtrayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMaharashtra() const {
    return *this == Region::maharashtra;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_morelos::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7morelosyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMorelos() const {
    return *this == Region::morelos;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_nayarit::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7nayarityA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNayarit() const {
    return *this == Region::nayarit;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_oaxaca::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO6oaxacayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isOaxaca() const {
    return *this == Region::oaxaca;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_puebla::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO6pueblayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isPuebla() const {
    return *this == Region::puebla;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_punjab::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO6punjabyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isPunjab() const {
    return *this == Region::punjab;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_queretaro::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO9queretaroyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isQueretaro() const {
    return *this == Region::queretaro;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_sanLuisPotosi::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO13sanLuisPotosiyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isSanLuisPotosi() const {
    return *this == Region::sanLuisPotosi;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_sinaloa::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7sinaloayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isSinaloa() const {
    return *this == Region::sinaloa;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_sonora::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO6sonorayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isSonora() const {
    return *this == Region::sonora;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_tabasco::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7tabascoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isTabasco() const {
    return *this == Region::tabasco;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_tamilNadu::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO9tamilNaduyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isTamilNadu() const {
    return *this == Region::tamilNadu;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_yucatan::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7yucatanyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isYucatan() const {
    return *this == Region::yucatan;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_zacatecas::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO9zacatecasyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isZacatecas() const {
    return *this == Region::zacatecas;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_aguascalientes::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO14aguascalientesyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isAguascalientes() const {
    return *this == Region::aguascalientes;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_bajaCaliforniaSur::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO17bajaCaliforniaSuryA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isBajaCaliforniaSur() const {
    return *this == Region::bajaCaliforniaSur;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_campeche::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8campecheyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isCampeche() const {
    return *this == Region::campeche;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_colima::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO6colimayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isColima() const {
    return *this == Region::colima;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_quintanaRooBenitoJuarez::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO23quintanaRooBenitoJuarezyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isQuintanaRooBenitoJuarez() const {
    return *this == Region::quintanaRooBenitoJuarez;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_quintanaRoo::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO11quintanaRooyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isQuintanaRoo() const {
    return *this == Region::quintanaRoo;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_quintanaRooSolidaridad::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO22quintanaRooSolidaridadyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isQuintanaRooSolidaridad() const {
    return *this == Region::quintanaRooSolidaridad;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_tlaxcala::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8tlaxcalayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isTlaxcala() const {
    return *this == Region::tlaxcala;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_quintanaRooCozumel::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO18quintanaRooCozumelyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isQuintanaRooCozumel() const {
    return *this == Region::quintanaRooCozumel;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_saoPaolo::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8saoPaoloyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isSaoPaolo() const {
    return *this == Region::saoPaolo;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_rioDeJaneiro::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO12rioDeJaneiroyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isRioDeJaneiro() const {
    return *this == Region::rioDeJaneiro;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_rioGrandeDoSul::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO14rioGrandeDoSulyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isRioGrandeDoSul() const {
    return *this == Region::rioGrandeDoSul;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_northwestTerritories::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO20northwestTerritoriesyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNorthwestTerritories() const {
    return *this == Region::northwestTerritories;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_nunavut::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7nunavutyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isNunavut() const {
    return *this == Region::nunavut;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_princeEdwardIsland::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO18princeEdwardIslandyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isPrinceEdwardIsland() const {
    return *this == Region::princeEdwardIsland;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_distritoFederal::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO15distritoFederalyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isDistritoFederal() const {
    return *this == Region::distritoFederal;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_maranhao::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO8maranhaoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMaranhao() const {
    return *this == Region::maranhao;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_matoGrosso::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO10matoGrossoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMatoGrosso() const {
    return *this == Region::matoGrosso;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_minasGerais::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO11minasGeraisyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isMinasGerais() const {
    return *this == Region::minasGerais;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_para::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO4parayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isPara() const {
    return *this == Region::para;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_parana::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO6paranayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isParana() const {
    return *this == Region::parana;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_pernambuco::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO10pernambucoyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isPernambuco() const {
    return *this == Region::pernambuco;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_santaCatarina::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO13santaCatarinayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isSantaCatarina() const {
    return *this == Region::santaCatarina;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_andhraPradesh::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO13andhraPradeshyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isAndhraPradesh() const {
    return *this == Region::andhraPradesh;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_ceara::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO5cearayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isCeara() const {
    return *this == Region::ceara;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_goias::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO5goiasyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isGoias() const {
    return *this == Region::goias;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_guerreroAcapulcoDeJuarez::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO24guerreroAcapulcoDeJuarezyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isGuerreroAcapulcoDeJuarez() const {
    return *this == Region::guerreroAcapulcoDeJuarez;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_haryana::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7haryanayA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isHaryana() const {
    return *this == Region::haryana;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_sergipe::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7sergipeyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isSergipe() const {
    return *this == Region::sergipe;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_alagoas::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO7alagoasyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isAlagoas() const {
    return *this == Region::alagoas;
  }
  SWIFT_INLINE_THUNK Region Region::_impl_bangsamoro::operator()() const {
    auto result = Region::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID6RegionO10bangsamoroyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool Region::isBangsamoro() const {
    return *this == Region::bangsamoro;
  }
  SWIFT_INLINE_THUNK  bool Region::isUnknownDefault() const {
    return *this == Region::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<Region> Region::init(const swift::String& rawValue) {
  alignas(alignof(swift::String)) char copyBuffer_consumedParamCopy_rawValue[sizeof(swift::String)];
  auto &consumedParamCopy_rawValue = *(new(copyBuffer_consumedParamCopy_rawValue) swift::String(rawValue));
  swift::_impl::ConsumedValueStorageDestroyer<swift::String> storageGuard_consumedParamCopy_rawValue(consumedParamCopy_rawValue);
  return swift::_impl::_impl_Optional<Region>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID6RegionO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(consumedParamCopy_rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String Region::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID6RegionO8rawValueSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK float RegionOfInterest::getX() const {
  return _impl::$s7BlinkID16RegionOfInterestV1xSfvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK float RegionOfInterest::getY() const {
  return _impl::$s7BlinkID16RegionOfInterestV1ySfvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK float RegionOfInterest::getWidth() const {
  return _impl::$s7BlinkID16RegionOfInterestV5widthSfvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK float RegionOfInterest::getHeight() const {
  return _impl::$s7BlinkID16RegionOfInterestV6heightSfvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK RegionOfInterest RegionOfInterest::init(float x, float y, float width, float height) {
  return _impl::_impl_RegionOfInterest::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID16RegionOfInterestV1x1y5width6heightACSf_S3ftcfC(result, x, y, width, height);
  });
  }
  SWIFT_INLINE_THUNK swift::String ResourceLoadError::getName() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_void_ptr_8_16(result, _impl::$s7BlinkID17ResourceLoadErrorV4nameSSvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK ModelLoadError ResourceLoadError::getError() const {
  return _impl::_impl_ModelLoadError::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID17ResourceLoadErrorV5errorAA05ModeldE0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK ResourcesError ResourcesError::_impl_corruptedAssets::operator()(const swift::String& val) const {
    auto result = ResourcesError::_make();
    alignas(swift::String) unsigned char buffer[sizeof(swift::String)];
    auto *valCopy = new(buffer) swift::String(val);
    swift::_impl::implClassFor<swift::String>::type::initializeWithTake(result._getOpaquePointer(), swift::_impl::implClassFor<swift::String>::type::getOpaquePointer(*valCopy));
    result._destructiveInjectEnumTag(_impl::$s7BlinkID14ResourcesErrorO15corruptedAssetsyACSScACmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ResourcesError::isCorruptedAssets() const {
    return *this == ResourcesError::corruptedAssets;
  }
  SWIFT_INLINE_THUNK swift::String ResourcesError::getCorruptedAssets() const {
    if (!isCorruptedAssets()) abort();
    alignas(ResourcesError) unsigned char buffer[sizeof(ResourcesError)];
    auto *thisCopy = new(buffer) ResourcesError(*this);
    char * _Nonnull payloadFromDestruction = thisCopy->_destructiveProjectEnumData();
    return swift::_impl::implClassFor<swift::String>::type::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
      swift::_impl::implClassFor<swift::String>::type::initializeWithTake(result, payloadFromDestruction);
    });
  }
  SWIFT_INLINE_THUNK ResourcesError ResourcesError::_impl_resourceDownload::operator()(const swift::String& val) const {
    auto result = ResourcesError::_make();
    alignas(swift::String) unsigned char buffer[sizeof(swift::String)];
    auto *valCopy = new(buffer) swift::String(val);
    swift::_impl::implClassFor<swift::String>::type::initializeWithTake(result._getOpaquePointer(), swift::_impl::implClassFor<swift::String>::type::getOpaquePointer(*valCopy));
    result._destructiveInjectEnumTag(_impl::$s7BlinkID14ResourcesErrorO16resourceDownloadyACSScACmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ResourcesError::isResourceDownload() const {
    return *this == ResourcesError::resourceDownload;
  }
  SWIFT_INLINE_THUNK swift::String ResourcesError::getResourceDownload() const {
    if (!isResourceDownload()) abort();
    alignas(ResourcesError) unsigned char buffer[sizeof(ResourcesError)];
    auto *thisCopy = new(buffer) ResourcesError(*this);
    char * _Nonnull payloadFromDestruction = thisCopy->_destructiveProjectEnumData();
    return swift::_impl::implClassFor<swift::String>::type::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
      swift::_impl::implClassFor<swift::String>::type::initializeWithTake(result, payloadFromDestruction);
    });
  }
  SWIFT_INLINE_THUNK ResourcesError ResourcesError::_impl_invalidBundle::operator()(const swift::String& val) const {
    auto result = ResourcesError::_make();
    alignas(swift::String) unsigned char buffer[sizeof(swift::String)];
    auto *valCopy = new(buffer) swift::String(val);
    swift::_impl::implClassFor<swift::String>::type::initializeWithTake(result._getOpaquePointer(), swift::_impl::implClassFor<swift::String>::type::getOpaquePointer(*valCopy));
    result._destructiveInjectEnumTag(_impl::$s7BlinkID14ResourcesErrorO13invalidBundleyACSScACmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ResourcesError::isInvalidBundle() const {
    return *this == ResourcesError::invalidBundle;
  }
  SWIFT_INLINE_THUNK swift::String ResourcesError::getInvalidBundle() const {
    if (!isInvalidBundle()) abort();
    alignas(ResourcesError) unsigned char buffer[sizeof(ResourcesError)];
    auto *thisCopy = new(buffer) ResourcesError(*this);
    char * _Nonnull payloadFromDestruction = thisCopy->_destructiveProjectEnumData();
    return swift::_impl::implClassFor<swift::String>::type::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
      swift::_impl::implClassFor<swift::String>::type::initializeWithTake(result, payloadFromDestruction);
    });
  }
  SWIFT_INLINE_THUNK  bool ResourcesError::isUnknownDefault() const {
    return *this == ResourcesError::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> ResourcesError::getErrorDescription() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_uint64_t_8_16(result, _impl::$s7BlinkID14ResourcesErrorO16errorDescriptionSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK SDKInitError SDKInitError::_impl_resourceLoad::operator()(const ResourceLoadError& val) const {
    auto result = SDKInitError::_make();
    alignas(ResourceLoadError) unsigned char buffer[sizeof(ResourceLoadError)];
    auto *valCopy = new(buffer) ResourceLoadError(val);
    swift::_impl::implClassFor<ResourceLoadError>::type::initializeWithTake(result._getOpaquePointer(), swift::_impl::implClassFor<ResourceLoadError>::type::getOpaquePointer(*valCopy));
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12SDKInitErrorO12resourceLoadyAcA08ResourcefD0VcACmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool SDKInitError::isResourceLoad() const {
    return *this == SDKInitError::resourceLoad;
  }
  SWIFT_INLINE_THUNK ResourceLoadError SDKInitError::getResourceLoad() const {
    if (!isResourceLoad()) abort();
    alignas(SDKInitError) unsigned char buffer[sizeof(SDKInitError)];
    auto *thisCopy = new(buffer) SDKInitError(*this);
    char * _Nonnull payloadFromDestruction = thisCopy->_destructiveProjectEnumData();
    return swift::_impl::implClassFor<ResourceLoadError>::type::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
      swift::_impl::implClassFor<ResourceLoadError>::type::initializeWithTake(result, payloadFromDestruction);
    });
  }
  SWIFT_INLINE_THUNK SDKInitError SDKInitError::_impl_memoryReserve::operator()(const MemoryReserveError& val) const {
    auto result = SDKInitError::_make();
    alignas(MemoryReserveError) unsigned char buffer[sizeof(MemoryReserveError)];
    auto *valCopy = new(buffer) MemoryReserveError(val);
    swift::_impl::implClassFor<MemoryReserveError>::type::initializeWithTake(result._getOpaquePointer(), swift::_impl::implClassFor<MemoryReserveError>::type::getOpaquePointer(*valCopy));
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12SDKInitErrorO13memoryReserveyAcA06MemoryfD0VcACmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool SDKInitError::isMemoryReserve() const {
    return *this == SDKInitError::memoryReserve;
  }
  SWIFT_INLINE_THUNK MemoryReserveError SDKInitError::getMemoryReserve() const {
    if (!isMemoryReserve()) abort();
    alignas(SDKInitError) unsigned char buffer[sizeof(SDKInitError)];
    auto *thisCopy = new(buffer) SDKInitError(*this);
    char * _Nonnull payloadFromDestruction = thisCopy->_destructiveProjectEnumData();
    return swift::_impl::implClassFor<MemoryReserveError>::type::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
      swift::_impl::implClassFor<MemoryReserveError>::type::initializeWithTake(result, payloadFromDestruction);
    });
  }
  SWIFT_INLINE_THUNK SDKInitError SDKInitError::_impl_licenseError::operator()() const {
    auto result = SDKInitError::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12SDKInitErrorO07licenseD0yA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool SDKInitError::isLicenseError() const {
    return *this == SDKInitError::licenseError;
  }
  SWIFT_INLINE_THUNK  bool SDKInitError::isUnknownDefault() const {
    return *this == SDKInitError::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::String> SDKInitError::getErrorDescription() const {
  return swift::_impl::_impl_Optional<swift::String>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8_uint64_t_8_16(result, _impl::$s7BlinkID12SDKInitErrorO16errorDescriptionSSSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK ScanningMode ScanningMode::_impl_single::operator()() const {
    auto result = ScanningMode::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12ScanningModeO6singleyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ScanningMode::isSingle() const {
    return *this == ScanningMode::single;
  }
  SWIFT_INLINE_THUNK ScanningMode ScanningMode::_impl_automatic::operator()() const {
    auto result = ScanningMode::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12ScanningModeO9automaticyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ScanningMode::isAutomatic() const {
    return *this == ScanningMode::automatic;
  }
  SWIFT_INLINE_THUNK  bool ScanningMode::isUnknownDefault() const {
    return *this == ScanningMode::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int ScanningMode::getHashValue() const {
  return _impl::$s7BlinkID12ScanningModeO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK DetectionLevel ScanningSettings::getBlurDetectionLevel() const {
  return _impl::_impl_DetectionLevel::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID16ScanningSettingsV18blurDetectionLevelAA0fG0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setBlurDetectionLevel(const DetectionLevel& value) {
  alignas(alignof(DetectionLevel)) char copyBuffer_consumedParamCopy_value[sizeof(DetectionLevel)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) DetectionLevel(value));
  swift::_impl::ConsumedValueStorageDestroyer<DetectionLevel> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID16ScanningSettingsV18blurDetectionLevelAA0fG0Ovs(_impl::_impl_DetectionLevel::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool ScanningSettings::getSkipImagesWithBlur() const {
  return _impl::$s7BlinkID16ScanningSettingsV18skipImagesWithBlurSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setSkipImagesWithBlur(bool value) {
  _impl::$s7BlinkID16ScanningSettingsV18skipImagesWithBlurSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK DetectionLevel ScanningSettings::getGlareDetectionLevel() const {
  return _impl::_impl_DetectionLevel::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID16ScanningSettingsV19glareDetectionLevelAA0fG0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setGlareDetectionLevel(const DetectionLevel& value) {
  alignas(alignof(DetectionLevel)) char copyBuffer_consumedParamCopy_value[sizeof(DetectionLevel)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) DetectionLevel(value));
  swift::_impl::ConsumedValueStorageDestroyer<DetectionLevel> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID16ScanningSettingsV19glareDetectionLevelAA0fG0Ovs(_impl::_impl_DetectionLevel::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool ScanningSettings::getSkipImagesWithGlare() const {
  return _impl::$s7BlinkID16ScanningSettingsV19skipImagesWithGlareSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setSkipImagesWithGlare(bool value) {
  _impl::$s7BlinkID16ScanningSettingsV19skipImagesWithGlareSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK DetectionLevel ScanningSettings::getTiltDetectionLevel() const {
  return _impl::_impl_DetectionLevel::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID16ScanningSettingsV18tiltDetectionLevelAA0fG0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setTiltDetectionLevel(const DetectionLevel& value) {
  alignas(alignof(DetectionLevel)) char copyBuffer_consumedParamCopy_value[sizeof(DetectionLevel)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) DetectionLevel(value));
  swift::_impl::ConsumedValueStorageDestroyer<DetectionLevel> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID16ScanningSettingsV18tiltDetectionLevelAA0fG0Ovs(_impl::_impl_DetectionLevel::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool ScanningSettings::getSkipImagesWithInadequateLightingConditions() const {
  return _impl::$s7BlinkID16ScanningSettingsV42skipImagesWithInadequateLightingConditionsSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setSkipImagesWithInadequateLightingConditions(bool value) {
  _impl::$s7BlinkID16ScanningSettingsV42skipImagesWithInadequateLightingConditionsSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool ScanningSettings::getSkipImagesOccludedByHand() const {
  return _impl::$s7BlinkID16ScanningSettingsV24skipImagesOccludedByHandSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setSkipImagesOccludedByHand(bool value) {
  _impl::$s7BlinkID16ScanningSettingsV24skipImagesOccludedByHandSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool ScanningSettings::getCombineResultsFromMultipleInputImages() const {
  return _impl::$s7BlinkID16ScanningSettingsV37combineResultsFromMultipleInputImagesSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setCombineResultsFromMultipleInputImages(bool value) {
  _impl::$s7BlinkID16ScanningSettingsV37combineResultsFromMultipleInputImagesSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool ScanningSettings::getEnableBarcodeScanOnly() const {
  return _impl::$s7BlinkID16ScanningSettingsV21enableBarcodeScanOnlySbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setEnableBarcodeScanOnly(bool value) {
  _impl::$s7BlinkID16ScanningSettingsV21enableBarcodeScanOnlySbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::Array<DocumentRules>> ScanningSettings::getCustomDocumentRules() const {
  return swift::_impl::_impl_Optional<swift::Array<DocumentRules>>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8(result, _impl::$s7BlinkID16ScanningSettingsV19customDocumentRulesSayAA0fG0VGSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setCustomDocumentRules(const swift::Optional<swift::Array<DocumentRules>>& value) {
  alignas(alignof(swift::Optional<swift::Array<DocumentRules>>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<swift::Array<DocumentRules>>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<swift::Array<DocumentRules>>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<swift::Array<DocumentRules>>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID16ScanningSettingsV19customDocumentRulesSayAA0fG0VGSgvs(_impl::swift_interop_passDirect_BlinkID_uint64_t_0_8(swift::_impl::_impl_Optional<swift::Array<DocumentRules>>::getOpaquePointer(consumedParamCopy_value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK AnonymizationMode ScanningSettings::getAnonymizationMode() const {
  return _impl::_impl_AnonymizationMode::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID16ScanningSettingsV17anonymizationModeAA013AnonymizationF0Ovg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setAnonymizationMode(const AnonymizationMode& value) {
  alignas(alignof(AnonymizationMode)) char copyBuffer_consumedParamCopy_value[sizeof(AnonymizationMode)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) AnonymizationMode(value));
  swift::_impl::ConsumedValueStorageDestroyer<AnonymizationMode> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID16ScanningSettingsV17anonymizationModeAA013AnonymizationF0Ovs(_impl::_impl_AnonymizationMode::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<swift::Array<DocumentAnonymizationSettings>> ScanningSettings::getCustomDocumentAnonymizationSettings() const {
  return swift::_impl::_impl_Optional<swift::Array<DocumentAnonymizationSettings>>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_uint64_t_0_8(result, _impl::$s7BlinkID16ScanningSettingsV027customDocumentAnonymizationD0SayAA0fgD0VGSgvg(_getOpaquePointer()));
  });
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setCustomDocumentAnonymizationSettings(const swift::Optional<swift::Array<DocumentAnonymizationSettings>>& value) {
  alignas(alignof(swift::Optional<swift::Array<DocumentAnonymizationSettings>>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<swift::Array<DocumentAnonymizationSettings>>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<swift::Array<DocumentAnonymizationSettings>>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<swift::Array<DocumentAnonymizationSettings>>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID16ScanningSettingsV027customDocumentAnonymizationD0SayAA0fgD0VGSgvs(_impl::swift_interop_passDirect_BlinkID_uint64_t_0_8(swift::_impl::_impl_Optional<swift::Array<DocumentAnonymizationSettings>>::getOpaquePointer(consumedParamCopy_value)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool ScanningSettings::getReturnInputImages() const {
  return _impl::$s7BlinkID16ScanningSettingsV17returnInputImagesSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setReturnInputImages(bool value) {
  _impl::$s7BlinkID16ScanningSettingsV17returnInputImagesSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool ScanningSettings::getScanCroppedDocumentImage() const {
  return _impl::$s7BlinkID16ScanningSettingsV24scanCroppedDocumentImageSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setScanCroppedDocumentImage(bool value) {
  _impl::$s7BlinkID16ScanningSettingsV24scanCroppedDocumentImageSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK RecognitionModeFilter ScanningSettings::getRecognitionModeFilter() const {
  return _impl::_impl_RecognitionModeFilter::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID16ScanningSettingsV21recognitionModeFilterAA011RecognitionfG0Vvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setRecognitionModeFilter(const RecognitionModeFilter& value) {
  alignas(alignof(RecognitionModeFilter)) char copyBuffer_consumedParamCopy_value[sizeof(RecognitionModeFilter)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) RecognitionModeFilter(value));
  swift::_impl::ConsumedValueStorageDestroyer<RecognitionModeFilter> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID16ScanningSettingsV21recognitionModeFilterAA011RecognitionfG0Vvs(_impl::_impl_RecognitionModeFilter::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool ScanningSettings::getEnableCharacterValidation() const {
  return _impl::$s7BlinkID16ScanningSettingsV25enableCharacterValidationSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setEnableCharacterValidation(bool value) {
  _impl::$s7BlinkID16ScanningSettingsV25enableCharacterValidationSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK float ScanningSettings::getInputImageMargin() const {
  return _impl::$s7BlinkID16ScanningSettingsV16inputImageMarginSfvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setInputImageMargin(float value) {
  _impl::$s7BlinkID16ScanningSettingsV16inputImageMarginSfvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool ScanningSettings::getScanUnsupportedBack() const {
  return _impl::$s7BlinkID16ScanningSettingsV19scanUnsupportedBackSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setScanUnsupportedBack(bool value) {
  _impl::$s7BlinkID16ScanningSettingsV19scanUnsupportedBackSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool ScanningSettings::getAllowUncertainFrontSideScan() const {
  return _impl::$s7BlinkID16ScanningSettingsV27allowUncertainFrontSideScanSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setAllowUncertainFrontSideScan(bool value) {
  _impl::$s7BlinkID16ScanningSettingsV27allowUncertainFrontSideScanSbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Int ScanningSettings::getMaxAllowedMismatchesPerField() const {
  return _impl::$s7BlinkID16ScanningSettingsV28maxAllowedMismatchesPerFieldSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setMaxAllowedMismatchesPerField(swift::Int value) {
  _impl::$s7BlinkID16ScanningSettingsV28maxAllowedMismatchesPerFieldSivs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool ScanningSettings::getScanPassportDataPageOnly() const {
  return _impl::$s7BlinkID16ScanningSettingsV24scanPassportDataPageOnlySbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setScanPassportDataPageOnly(bool value) {
  _impl::$s7BlinkID16ScanningSettingsV24scanPassportDataPageOnlySbvs(value, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK CroppedImageSettings ScanningSettings::getCroppedImageSettings() const {
  return _impl::_impl_CroppedImageSettings::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID16ScanningSettingsV012croppedImageD0AA07CroppedfD0Vvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void ScanningSettings::setCroppedImageSettings(const CroppedImageSettings& value) {
  alignas(alignof(CroppedImageSettings)) char copyBuffer_consumedParamCopy_value[sizeof(CroppedImageSettings)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) CroppedImageSettings(value));
  swift::_impl::ConsumedValueStorageDestroyer<CroppedImageSettings> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID16ScanningSettingsV012croppedImageD0AA07CroppedfD0Vvs(_impl::_impl_CroppedImageSettings::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK ScanningSettings ScanningSettings::init(const DetectionLevel& blurDetectionLevel, bool skipImagesWithBlur, const DetectionLevel& glareDetectionLevel, bool skipImagesWithGlare, const DetectionLevel& tiltDetectionLevel, bool skipImagesWithInadequateLightingConditions, bool skipImagesOccludedByHand, bool combineResultsFromMultipleInputImages, bool enableBarcodeScanOnly, const swift::Optional<swift::Array<DocumentRules>>& customDocumentRules, const AnonymizationMode& anonymizationMode, const swift::Optional<swift::Array<DocumentAnonymizationSettings>>& customDocumentAnonymizationSettings, bool returnInputImages, bool scanCroppedDocumentImage, bool enableCharacterValidation, const RecognitionModeFilter& recognitionModeFilter, float inputImageMargin, bool scanUnsupportedBack, bool allowUncertainFrontSideScan, swift::Int maxAllowedMismatchesPerField, bool scanPassportDataPageOnly, const CroppedImageSettings& croppedImageSettings) {
  alignas(alignof(DetectionLevel)) char copyBuffer_consumedParamCopy_blurDetectionLevel[sizeof(DetectionLevel)];
  auto &consumedParamCopy_blurDetectionLevel = *(new(copyBuffer_consumedParamCopy_blurDetectionLevel) DetectionLevel(blurDetectionLevel));
  swift::_impl::ConsumedValueStorageDestroyer<DetectionLevel> storageGuard_consumedParamCopy_blurDetectionLevel(consumedParamCopy_blurDetectionLevel);
  alignas(alignof(DetectionLevel)) char copyBuffer_consumedParamCopy_glareDetectionLevel[sizeof(DetectionLevel)];
  auto &consumedParamCopy_glareDetectionLevel = *(new(copyBuffer_consumedParamCopy_glareDetectionLevel) DetectionLevel(glareDetectionLevel));
  swift::_impl::ConsumedValueStorageDestroyer<DetectionLevel> storageGuard_consumedParamCopy_glareDetectionLevel(consumedParamCopy_glareDetectionLevel);
  alignas(alignof(DetectionLevel)) char copyBuffer_consumedParamCopy_tiltDetectionLevel[sizeof(DetectionLevel)];
  auto &consumedParamCopy_tiltDetectionLevel = *(new(copyBuffer_consumedParamCopy_tiltDetectionLevel) DetectionLevel(tiltDetectionLevel));
  swift::_impl::ConsumedValueStorageDestroyer<DetectionLevel> storageGuard_consumedParamCopy_tiltDetectionLevel(consumedParamCopy_tiltDetectionLevel);
  alignas(alignof(swift::Optional<swift::Array<DocumentRules>>)) char copyBuffer_consumedParamCopy_customDocumentRules[sizeof(swift::Optional<swift::Array<DocumentRules>>)];
  auto &consumedParamCopy_customDocumentRules = *(new(copyBuffer_consumedParamCopy_customDocumentRules) swift::Optional<swift::Array<DocumentRules>>(customDocumentRules));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<swift::Array<DocumentRules>>> storageGuard_consumedParamCopy_customDocumentRules(consumedParamCopy_customDocumentRules);
  alignas(alignof(AnonymizationMode)) char copyBuffer_consumedParamCopy_anonymizationMode[sizeof(AnonymizationMode)];
  auto &consumedParamCopy_anonymizationMode = *(new(copyBuffer_consumedParamCopy_anonymizationMode) AnonymizationMode(anonymizationMode));
  swift::_impl::ConsumedValueStorageDestroyer<AnonymizationMode> storageGuard_consumedParamCopy_anonymizationMode(consumedParamCopy_anonymizationMode);
  alignas(alignof(swift::Optional<swift::Array<DocumentAnonymizationSettings>>)) char copyBuffer_consumedParamCopy_customDocumentAnonymizationSettings[sizeof(swift::Optional<swift::Array<DocumentAnonymizationSettings>>)];
  auto &consumedParamCopy_customDocumentAnonymizationSettings = *(new(copyBuffer_consumedParamCopy_customDocumentAnonymizationSettings) swift::Optional<swift::Array<DocumentAnonymizationSettings>>(customDocumentAnonymizationSettings));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<swift::Array<DocumentAnonymizationSettings>>> storageGuard_consumedParamCopy_customDocumentAnonymizationSettings(consumedParamCopy_customDocumentAnonymizationSettings);
  alignas(alignof(RecognitionModeFilter)) char copyBuffer_consumedParamCopy_recognitionModeFilter[sizeof(RecognitionModeFilter)];
  auto &consumedParamCopy_recognitionModeFilter = *(new(copyBuffer_consumedParamCopy_recognitionModeFilter) RecognitionModeFilter(recognitionModeFilter));
  swift::_impl::ConsumedValueStorageDestroyer<RecognitionModeFilter> storageGuard_consumedParamCopy_recognitionModeFilter(consumedParamCopy_recognitionModeFilter);
  alignas(alignof(CroppedImageSettings)) char copyBuffer_consumedParamCopy_croppedImageSettings[sizeof(CroppedImageSettings)];
  auto &consumedParamCopy_croppedImageSettings = *(new(copyBuffer_consumedParamCopy_croppedImageSettings) CroppedImageSettings(croppedImageSettings));
  swift::_impl::ConsumedValueStorageDestroyer<CroppedImageSettings> storageGuard_consumedParamCopy_croppedImageSettings(consumedParamCopy_croppedImageSettings);
  return _impl::_impl_ScanningSettings::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID16ScanningSettingsV18blurDetectionLevel18skipImagesWithBlur05glarefG00hiJ5Glare04tiltfG00hiJ28InadequateLightingConditions0hI14OccludedByHand031combineResultsFromMultipleInputI021enableBarcodeScanOnly19customDocumentRules17anonymizationMode027customDocumentAnonymizationD006returnyI024scanCroppedDocumentImage0Z19CharacterValidation21recognitionModeFilter16inputImageMargin19scanUnsupportedBack27allowUncertainFrontSideScan28maxAllowedMismatchesPerField24scanPassportDataPageOnly012croppedImageD0AcA0fG0O_SbA_SbA_S4bSayAA13DocumentRulesVGSgAA17AnonymizationModeOSayAA021DocumentAnonymizationD0VGSgS3bAA21RecognitionModeFilterVSfS2bSiSbAA012CroppedImageD0VtcfC(result, _impl::_impl_DetectionLevel::getOpaquePointer(consumedParamCopy_blurDetectionLevel), skipImagesWithBlur, _impl::_impl_DetectionLevel::getOpaquePointer(consumedParamCopy_glareDetectionLevel), skipImagesWithGlare, _impl::_impl_DetectionLevel::getOpaquePointer(consumedParamCopy_tiltDetectionLevel), skipImagesWithInadequateLightingConditions, skipImagesOccludedByHand, combineResultsFromMultipleInputImages, enableBarcodeScanOnly, _impl::swift_interop_passDirect_BlinkID_uint64_t_0_8(swift::_impl::_impl_Optional<swift::Array<DocumentRules>>::getOpaquePointer(consumedParamCopy_customDocumentRules)), _impl::_impl_AnonymizationMode::getOpaquePointer(consumedParamCopy_anonymizationMode), _impl::swift_interop_passDirect_BlinkID_uint64_t_0_8(swift::_impl::_impl_Optional<swift::Array<DocumentAnonymizationSettings>>::getOpaquePointer(consumedParamCopy_customDocumentAnonymizationSettings)), returnInputImages, scanCroppedDocumentImage, enableCharacterValidation, _impl::_impl_RecognitionModeFilter::getOpaquePointer(consumedParamCopy_recognitionModeFilter), inputImageMargin, scanUnsupportedBack, allowUncertainFrontSideScan, maxAllowedMismatchesPerField, scanPassportDataPageOnly, _impl::_impl_CroppedImageSettings::getOpaquePointer(consumedParamCopy_croppedImageSettings));
  });
  }
  SWIFT_INLINE_THUNK ScanningSide ScanningSide::_impl_first::operator()() const {
    auto result = ScanningSide::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12ScanningSideO5firstyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ScanningSide::isFirst() const {
    return *this == ScanningSide::first;
  }
  SWIFT_INLINE_THUNK ScanningSide ScanningSide::_impl_second::operator()() const {
    auto result = ScanningSide::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12ScanningSideO6secondyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ScanningSide::isSecond() const {
    return *this == ScanningSide::second;
  }
  SWIFT_INLINE_THUNK  bool ScanningSide::isUnknownDefault() const {
    return *this == ScanningSide::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<ScanningSide> ScanningSide::init(swift::Int rawValue) {
  return swift::_impl::_impl_Optional<ScanningSide>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID12ScanningSideO8rawValueACSgSi_tcfC(result, rawValue);
  });
  }
  SWIFT_INLINE_THUNK swift::Int ScanningSide::getRawValue() const {
  return _impl::$s7BlinkID12ScanningSideO8rawValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK ScanningStatus ScanningStatus::_impl_scanningSideInProgress::operator()() const {
    auto result = ScanningStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID14ScanningStatusO22scanningSideInProgressyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ScanningStatus::isScanningSideInProgress() const {
    return *this == ScanningStatus::scanningSideInProgress;
  }
  SWIFT_INLINE_THUNK ScanningStatus ScanningStatus::_impl_scanningBarcodeInProgress::operator()() const {
    auto result = ScanningStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID14ScanningStatusO25scanningBarcodeInProgressyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ScanningStatus::isScanningBarcodeInProgress() const {
    return *this == ScanningStatus::scanningBarcodeInProgress;
  }
  SWIFT_INLINE_THUNK ScanningStatus ScanningStatus::_impl_sideScanned::operator()() const {
    auto result = ScanningStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID14ScanningStatusO11sideScannedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ScanningStatus::isSideScanned() const {
    return *this == ScanningStatus::sideScanned;
  }
  SWIFT_INLINE_THUNK ScanningStatus ScanningStatus::_impl_documentScanned::operator()() const {
    auto result = ScanningStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID14ScanningStatusO15documentScannedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ScanningStatus::isDocumentScanned() const {
    return *this == ScanningStatus::documentScanned;
  }
  SWIFT_INLINE_THUNK ScanningStatus ScanningStatus::_impl_cancelled::operator()() const {
    auto result = ScanningStatus::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID14ScanningStatusO9cancelledyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool ScanningStatus::isCancelled() const {
    return *this == ScanningStatus::cancelled;
  }
  SWIFT_INLINE_THUNK  bool ScanningStatus::isUnknownDefault() const {
    return *this == ScanningStatus::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int ScanningStatus::getHashValue() const {
  return _impl::$s7BlinkID14ScanningStatusO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK SessionError SessionError::_impl_processCallAfterDocumentScanned::operator()() const {
    auto result = SessionError::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12SessionErrorO31processCallAfterDocumentScannedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool SessionError::isProcessCallAfterDocumentScanned() const {
    return *this == SessionError::processCallAfterDocumentScanned;
  }
  SWIFT_INLINE_THUNK SessionError SessionError::_impl_resetCallAfterResultRetrieved::operator()() const {
    auto result = SessionError::_make();
    result._destructiveInjectEnumTag(_impl::$s7BlinkID12SessionErrorO29resetCallAfterResultRetrievedyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool SessionError::isResetCallAfterResultRetrieved() const {
    return *this == SessionError::resetCallAfterResultRetrieved;
  }
  SWIFT_INLINE_THUNK  bool SessionError::isUnknownDefault() const {
    return *this == SessionError::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Int SessionError::getHashValue() const {
  return _impl::$s7BlinkID12SessionErrorO9hashValueSivg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<VIZResult> SingleSideScanningResult::getViz() const {
  return swift::_impl::_impl_Optional<VIZResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24SingleSideScanningResultV3vizAA9VIZResultVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void SingleSideScanningResult::setViz(const swift::Optional<VIZResult>& value) {
  alignas(alignof(swift::Optional<VIZResult>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<VIZResult>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<VIZResult>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<VIZResult>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID24SingleSideScanningResultV3vizAA9VIZResultVSgvs(swift::_impl::_impl_Optional<VIZResult>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<MRZResult> SingleSideScanningResult::getMrz() const {
  return swift::_impl::_impl_Optional<MRZResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24SingleSideScanningResultV3mrzAA9MRZResultVSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void SingleSideScanningResult::setMrz(const swift::Optional<MRZResult>& value) {
  alignas(alignof(swift::Optional<MRZResult>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<MRZResult>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<MRZResult>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<MRZResult>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID24SingleSideScanningResultV3mrzAA9MRZResultVSgvs(swift::_impl::_impl_Optional<MRZResult>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<BarcodeResult> SingleSideScanningResult::getBarcode() const {
  return swift::_impl::_impl_Optional<BarcodeResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24SingleSideScanningResultV7barcodeAA07BarcodeF0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void SingleSideScanningResult::setBarcode(const swift::Optional<BarcodeResult>& value) {
  alignas(alignof(swift::Optional<BarcodeResult>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<BarcodeResult>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<BarcodeResult>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<BarcodeResult>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID24SingleSideScanningResultV7barcodeAA07BarcodeF0VSgvs(swift::_impl::_impl_Optional<BarcodeResult>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<InputImageResult> SingleSideScanningResult::getInputImage() const {
  return swift::_impl::_impl_Optional<InputImageResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24SingleSideScanningResultV10inputImageAA05InputhF0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void SingleSideScanningResult::setInputImage(const swift::Optional<InputImageResult>& value) {
  alignas(alignof(swift::Optional<InputImageResult>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<InputImageResult>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<InputImageResult>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<InputImageResult>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID24SingleSideScanningResultV10inputImageAA05InputhF0VSgvs(swift::_impl::_impl_Optional<InputImageResult>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<InputImageResult> SingleSideScanningResult::getBarcodeInputImage() const {
  return swift::_impl::_impl_Optional<InputImageResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24SingleSideScanningResultV17barcodeInputImageAA0hiF0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void SingleSideScanningResult::setBarcodeInputImage(const swift::Optional<InputImageResult>& value) {
  alignas(alignof(swift::Optional<InputImageResult>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<InputImageResult>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<InputImageResult>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<InputImageResult>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID24SingleSideScanningResultV17barcodeInputImageAA0hiF0VSgvs(swift::_impl::_impl_Optional<InputImageResult>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<CroppedImageResult> SingleSideScanningResult::getDocumentImage() const {
  return swift::_impl::_impl_Optional<CroppedImageResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24SingleSideScanningResultV13documentImageAA07CroppedhF0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void SingleSideScanningResult::setDocumentImage(const swift::Optional<CroppedImageResult>& value) {
  alignas(alignof(swift::Optional<CroppedImageResult>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<CroppedImageResult>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<CroppedImageResult>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<CroppedImageResult>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID24SingleSideScanningResultV13documentImageAA07CroppedhF0VSgvs(swift::_impl::_impl_Optional<CroppedImageResult>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<DetailedCroppedImageResult> SingleSideScanningResult::getFaceImage() const {
  return swift::_impl::_impl_Optional<DetailedCroppedImageResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24SingleSideScanningResultV9faceImageAA015DetailedCroppedhF0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void SingleSideScanningResult::setFaceImage(const swift::Optional<DetailedCroppedImageResult>& value) {
  alignas(alignof(swift::Optional<DetailedCroppedImageResult>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<DetailedCroppedImageResult>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<DetailedCroppedImageResult>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<DetailedCroppedImageResult>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID24SingleSideScanningResultV9faceImageAA015DetailedCroppedhF0VSgvs(swift::_impl::_impl_Optional<DetailedCroppedImageResult>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Optional<DetailedCroppedImageResult> SingleSideScanningResult::getSignatureImage() const {
  return swift::_impl::_impl_Optional<DetailedCroppedImageResult>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID24SingleSideScanningResultV14signatureImageAA015DetailedCroppedhF0VSgvg(result, _getOpaquePointer());
  });
  }
  SWIFT_INLINE_THUNK void SingleSideScanningResult::setSignatureImage(const swift::Optional<DetailedCroppedImageResult>& value) {
  alignas(alignof(swift::Optional<DetailedCroppedImageResult>)) char copyBuffer_consumedParamCopy_value[sizeof(swift::Optional<DetailedCroppedImageResult>)];
  auto &consumedParamCopy_value = *(new(copyBuffer_consumedParamCopy_value) swift::Optional<DetailedCroppedImageResult>(value));
  swift::_impl::ConsumedValueStorageDestroyer<swift::Optional<DetailedCroppedImageResult>> storageGuard_consumedParamCopy_value(consumedParamCopy_value);
  _impl::$s7BlinkID24SingleSideScanningResultV14signatureImageAA015DetailedCroppedhF0VSgvs(swift::_impl::_impl_Optional<DetailedCroppedImageResult>::getOpaquePointer(consumedParamCopy_value), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK bool VIZResult::getDateOfExpiryPermanent() const {
  return _impl::$s7BlinkID9VIZResultV21dateOfExpiryPermanentSbvg(_getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Array<DependentInfo> VIZResult::getDependentsInfo() const {
  return swift::_impl::_impl_Array<DependentInfo>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_BlinkID_void_ptr_0_8(result, _impl::$s7BlinkID9VIZResultV14dependentsInfoSayAA09DependentE0VGvg(_getOpaquePointer()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Optional<T_0_0> VehicleClassInfo<T_0_0>::getVehicleClass() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return swift::_impl::_impl_Optional<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID16VehicleClassInfoV07vehicleD0xSgvg(result, swift::TypeMetadataTrait<VehicleClassInfo<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Optional<T_0_0> VehicleClassInfo<T_0_0>::getLicenceType() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return swift::_impl::_impl_Optional<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID16VehicleClassInfoV11licenceTypexSgvg(result, swift::TypeMetadataTrait<VehicleClassInfo<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Optional<DateResult<T_0_0>> VehicleClassInfo<T_0_0>::getEffectiveDate() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return swift::_impl::_impl_Optional<DateResult<T_0_0>>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID16VehicleClassInfoV13effectiveDateAA0G6ResultVyxGSgvg(result, swift::TypeMetadataTrait<VehicleClassInfo<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Optional<DateResult<T_0_0>> VehicleClassInfo<T_0_0>::getExpiryDate() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return swift::_impl::_impl_Optional<DateResult<T_0_0>>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s7BlinkID16VehicleClassInfoV10expiryDateAA0G6ResultVyxGSgvg(result, swift::TypeMetadataTrait<VehicleClassInfo<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  }

// Unavailable in C++: Swift type alias 'DPI'.

class InputImageResultProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'InputImageResultProtocol' can not yet be represented in C++");

class ResourceDownloaderError { } SWIFT_UNAVAILABLE_MSG("enum 'ResourceDownloaderError' can not be represented in C++ as one of its cases has an associated value with type that can't be represented in C++");

class SdkSettings { } SWIFT_UNAVAILABLE_MSG("protocol 'SdkSettings' can not yet be represented in C++");

} // namespace BlinkID

#undef SWIFT_SYMBOL
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
